<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.3.6) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.25.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2025" month="January" day="17"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 175?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 185?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they do not provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST NOT</bcp14> change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that does not require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that do not meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NULL.
Latitude and longitude <bcp14>MUST</bcp14> be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number / null,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, and multiple
security-oriented subsystems like a TEE and a Secure Element. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions versus CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, does not require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
If detached Claims-Sets are modified in transit then validation can fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide metadata about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.
The "intuse" claim provides an indication to an EAT consumer about the intended usage of the token.
This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
The possible values are in the EAT Intended Use Registry defined in <xref target="int-use-registry"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and does not have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE does not require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document does not have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers do not support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they do not have to be standards track and do not have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it does not understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON cannot (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but does not define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic cannot be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number / null,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens from a particular entity will be
able to know the tokens are from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it does not say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="int-use-registry">
        <name>Intended Use Registry</name>
        <t>IANA is requested to create a new registry titled "Entity Attestation Token (EAT) Intended Uses" in a new registry group called "Remote Attestation Procedures (RATS)."
The registry uses the "Expert Review" registration procedure <xref target="RFC8126"/>.</t>
        <t>Guidelines for experts:</t>
        <ul spacing="normal">
          <li>
            <t>Each intended use should be clearly described so a user of it can know what it means.</t>
          </li>
          <li>
            <t>Each intended use should be distinct from others that are registered.</t>
          </li>
          <li>
            <t>Point squatting is discouraged.</t>
          </li>
        </ul>
        <t>The three columns for the registry are:</t>
        <dl>
          <dt>Integer:</dt>
          <dd>
            <t>This is a unique integer used to identify the intended use in CBOR-encoded tokens.</t>
          </dd>
          <dt>Name:</dt>
          <dd>
            <t>This is unique short descriptive string that is used to identify the use in JSON-encoded tokens.</t>
          </dd>
          <dt>Description:</dt>
          <dd>
            <t>This is a text paragraph or more that sufficiently defines what the intended use means. It may also be a reference to another document.</t>
          </dd>
        </dl>
        <t>The following 5 values represent the initial content of the registry.  Note that 0 will be marked as "reserved" for the CBOR value, and the maximum CBOR value for assignment is 255.</t>
        <dl>
          <dt>1 -- Generic:</dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>2-- Registration:</dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>3 -- Provisioning:</dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>4 -- Certificate Issuance:</dt>
          <dd>
            <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>5 -- Proof-of-Possession:</dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>
    <references anchor="sec-combined-references">
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:.plus,.cat, and.det for the construction of constants;.abnf/.abnfb for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and.feature for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2024/REC-geolocation-20240916/">
          <front>
            <title>Geolocation</title>
            <author fullname="Marcos Caceres" role="editor"/>
            <author fullname="Reilly Grant" role="editor"/>
            <date day="16" month="September" year="2024"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-20240916"/>
          <seriesInfo name="W3C" value="REC-geolocation-20240916"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="8" month="January" year="2025"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-12"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   This document defines the Unprotected CWT Claims Set (UCCS), a data
   format for representing a CBOR Web Token (CWT) Claims Set without
   protecting it by a signature, message authentication code (MAC), or
   encryption.  UCCS enables the use of CWT claims in environments where
   protection is provided by other means, such as secure communication
   channels or trusted execution environments.  This specification
   defines a CBOR tag for UCCS and describes the UCCS format, its
   encoding, and processing considerations, and discusses security
   implications of using unprotected claims sets.


   // (This editors' note will be removed by the RFC editor:) The
   // present revision (–12) contains remaining document changes based
   // on feedback from the IESG evaluation and has been submitted as
   // input to IETF 121.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-12"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-12"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2602?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources were introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored, protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> does not.
Vice versa, EAT does not define a device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the relying party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus cannot be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registry exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology-neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-to-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-30">
        <name>From draft-ietf-rats-eat-30</name>
        <ul spacing="normal">
          <li>
            <t>Minor typo fixes</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3600?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923bb2JUo+s6vwFFljEgJSV3tstVdlagk2aVq39qSU7t3
7TpukARJxCTBBkDLiuL+lv0t58vOvK+5AFB2ku7zcMb26E6JwMK6zjXvl8Fg
0Pt4mhz3enVeL7LT5GaeJZcr+HGXnNV1VtVpnRer5Kb4kK2S3cuzm71eOhqV
GXwEP3qTYrxKl/DdpEyn9SDP6umgTOtqkKX1YJFiB71xWp8mVT3p9cbFqspW
1aY6Tepyk/WquszS5WlydXnzrJevS3pc1UcHB08PjnopvDxNrrPxpoTp9G5n
p8nbs5vr3odb6C6frfLVLEndHMejouz11vlpL0nqYnya/PYuq37LPybZup7D
kxP8XRUlDDytQovqbhk/GBfLdTquXYvNKDxbFfionI6zSVXf4bZxM/iXbup5
UZ72Bkm+gv5eDJMXm9VktEgnGXzCe/Ui3ZTZapxFr4pyFhaLx1CUd8mLF+fw
Klum+eI0WcwWf6ykQU3vhzAlHen5MHmZriZ36dLGeZ6X+WSelu4FjfIym+Rw
NB+Sd9dnofuZtB4uufUfZ/jcD/HTMHn924tiVczmm7Can7IyW97Fb2iYf92k
C/h6mdxk4/mqWBSzPKuSq9V4iPsJJ5DBXh59+zR5lpYrOLtiM5snb4t0gvsP
azz1L+hMJriod4cnybcvrunBZlWX0O7dKq+zSfIvABGTApe5nhcraPv7k5Pk
8OjRUXL8+PjwydOw1j8XE5rsH/+jzof/IfP0Sz0fJj+ni0U6Dus8T8uFe0hL
fAuj/gizmCTXxbS+BYjt6wJlpDF89ccym8yxVSWNaCS8DXWZjzY1wwuP8mO2
+pD8kJcf5sXiLzrMszLdrObFNCuT66sbeKpXsPVCRp1DL8OR9PLHKq+HU2s5
BHDT0W7mxTKtkmdFVcEd0uHOymXyIl/inoYua2o6nHLTP6al7hf39DKfbbJF
8gPsD1zIrCwq92o8T+HdW/xvCZuwMnAHSMsWAG+2fcnPRfmhCqMux+XvEan8
sdKmw3FqPb9JYQPHAMcw1fI2//OHMGZaz3NY2Q8lzrechP1NVyuAwptqjJux
ymcPLnpOrYe1tW6t+026WSTnZXG7yO56vVVRLmF3PmaIg94+O//20eEj+fPJ
05Onp4yj+BXAZWj1VFsdPbI/j59qgyePDw/g28lkIb+/tVfHT588lj+fHliP
TwGB6p+Hjx/xt+vFpuJnJ49Pnsjrk0eH32rL46fH9ufxyWkP/v75+fWTE3wI
WDQtZ3hjd+Z1va5O9/eztKzng3w1LYarWTpc5ov99Xy9PyluVwu4xUP48Ydp
vsi+GxdFORnczqonJzvcFdOan1+/fXGRPL98fXF5c3WeXP/b9c3ly+Tw6ZOT
fvLq+dnw+ubVxfDg4Pjx+8PhwfDgPU2GOlAsi38P+PxeERFIF8nzrKjW8CNd
DK5WdbZY5DNCtmf4n7tkF3reow8ngAMBAR0cngwOvh0cPMH1Xp29Ohue/3wz
PF+k+RIQAT0Y39b28qfmyz+7l+evry+HZ4tZATh6Hj4vqgyb3MwB5z1/82Z4
9fLyKt5U3dM1kKZ0MTyerddDWNb+JKs+1MV6WUw2cK/2r9fZOJ/mY1pr4+dF
VgPMVsO0Wn/6Q+XfXE2++/boqd/543IC+7TKSqacb+Ak4Uc1z9fJm7L4czau
/4mxNvSwSKJhkueAj9fJeQGX9VVW38J9TeBuQvNymcP+V/+UvNosR1kJyLif
pJNJmVUVkWpolE8y4C20q21HeQx7FJ/QU9y+ixevz7p3bbYoRinAd1pP4QLS
xt2uB4hfYbj9zRrBsdqHfh7tHx7tP39z/v4in+Ww0S8y4B/K19Oz9bosPqaL
9x8R0taTqd8saZtw46SYJtrcTfJV8THDVeNsH/Vwum8uX20542w1zNNVSvOE
H/tvshX0uJBdGa7TWebHf1PmH2EMZMuycl3mVSY7nOzCGHtAhP5jg3yWAiHi
mEGdziq4wT28njFOenJ4ZBjj0WPFGCeInhR5HD+lyw9kqJ5P0jtgBNPxh1M/
J32FDBi861wnLPM2/5CvkdvgM4Ff+/rle/5y6PZwCtBDF+Xq8vJy+OTgaHh4
9hb2//XV8PBgeHh48HQf31zfXAxhl58Mn5wcHX/79ITw1PH5EC7+C2T78O+3
l+eDWQY8B+/p4Ojg6OQAUCG2ff3uavh8A6AYrYieLHIkDrBjyTvYZTjpy08A
QhOg8sBiwC4nVwLAuPmX7672+snrcpau8r8I9lncdbV8TS3xApwjD7m6S64u
kt3zqwuPiM42M+B9EX6+7dxOYHNXE6SfwzzLMtpQhfBJutzHhwNrE1rv32Yj
wMnjzRJaVvs1shuAG6v9bJMTpMuOvCiKD5t1tCW42QBdsxyYNb77Z3RZSTio
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
9XbcPZi7JMOKGDVDC7ntMgqSnMNczNgULoRRSDnDWVsrVHGUSi+4UyJG6YSU
jHjr6qFOZc1zjGcjRgpg7dGZh2wwmu9Xb98imwIxhpHGXGqumUdHT8GXpHFG
BE1C7ai1ei/x9E3xaWvII6aCM3hKSmvWS8pu26W9Cb1xRh9GVGI9jkYXPIAr
1fGqRt5sXCIerLJiJihqqouogjE9vOOq4K6+Lx9mX0+SfIHn2fgDV4eA6ztf
oYcenzDh1pCg0XfKyxo2ZiQTJntvXUTUzGZBdR3hZhMDzuMYJhNFlTgItEdT
7NFwLqSLpiWw3VCUSoUTcYkYFggRR0yPzT+N6/1BR7OC/Q8tIRtbGDQflBU/
kI5b/TyAq1uFhrwA3YCeirzmcbHT7JbdGXiPJdIV89PiDRVER/WoVBMs6NDZ
XlIjysPe6xXluAeaPaY4dzoK3GWkTFYHwopja4r1kEZHh5lGZ29huNSNpG2i
AGbN/12z0zVr4bGSc1qpVgez+QHv9NEPE1ZcsXQq0OWIQvA/BcQIQMyarWYr
l9db7R+N6F/P9RADBSLKgIoybpYeQ4h8zMAbB+M8Q7VgX+eeRpuj+RlY8EAN
yLYBKP6bKwfjiREKoXhbQKzbvmEPzrqmotg6vjhvRLOAK0Q1bExHQqpMoRkv
hEXRK3ZF7EkzFjniZsiFijSAP+H/BIGPzoFVj8rEMVLSmQi/I8yOWgXfMWYW
8VE0l0g4PI2WT0Pq5MwUnX2JhxJqo0wB+Tlv7aCN5onXGbPTJeye5doOTQWn
a9y/kAJ4qEnzAj8XCrQo2xXU6RL339RNbaFjfBFNom1+J7CuATKRhtEY07VU
fFYWlbaddvpluqb5nJHH46V8+RUbr8LdQIQ7cpms9pfpGsPKVg+8/ocPyvEo
7rwaQubfcmyuFpBzjyAqKPyZitOkZiCrgAV3RTKCsCNLVHWYONTXtVhSLxJ3
H9oitzWkH93kdUpmVnd016wV/gfOjPXKneclr/6bzsrUs6LZ/hsP7e/eYl3V
12zvG6uxe+2F/a/YZknvIeoQ7SVWGajreSWhs6R4eGBfH9xSVw54NdkXZfu2
kbGWfd1i9vVwNHkHzStijKPNuUlnQiO+sBfBWcrJunSdoAtbONsC+HKxfUcU
W6wSqr88Dn1bpzOv+pbOQ7LHt8/OkyfHT48SK8AZPnMpkHh+ZKPovZ7WJNug
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
2vgXO8vNqtpnHAZplti117tMOs1Mc6x1J5pM8n7unWRNMUnpjCPnnOuv9O8v
6Qjc1MllODGyoNtMIzliegbRJofpgQzkpVY+rhOJaF8tLvW0cZsnx2Va9dNP
zVfZrXme35rm1dOnugFS1eUhcnBCN+XNMT2RiXc3sOH2arHTnQ3JNdVdLPyj
+XwnZRd26AO+q8DEdcWNHN85Y3P/IQfJ+YfUsUsBGIvrbuFOeFA7uz58dd09
i64un0Xz3ufxxaf69VX1fPHs9fXn/e5Rd3/6+uKn84/97uWzH4/pm0+ffn32
5oN32Hs2Wt49e3N4tL//eX//5uJ9983gAP4+vJq+/O3Fp8N9+P2n+eXJxenF
Ze9FcHXVGJTffjw7b66+nD4b9mpvP1188F5H9Z8/TX4u/9R4s3i2+Om01/vY
fv7p8mr17s3r6M3d7avj97Xy9PlPJ7WfO6MXX2Cos2S6H5Vf3ix+PP3t1W35
3e3sg1dutvo3zyef1oNV/Fv39UE9SJofu6vWSf/sbe3X2+eTL8frX5+NbuN6
ECdPdeV+MSv3Yjxbf/FlAzYuvH6fX/h1X+onPs+s+PPL89SCx3fPq/HP3fGr
8fOf3gZvxi96z6/7zwb49/HFb8fByfh5pwIPLQa1l/TQi4uj6vDZ29+GH7xn
b++Ox7fj6PKoevxp/uXk08WXk98G1VcH7+rQzCT+EZqdNoL+s9vkeHoUvO8d
N4/Hx8nx7CR4N8bfoekP3tWn2/rs6OX1i8Xzi/Xrn29evv7tp+DZy0/Xd89/
DW8uf74K6kHz55+S327f7LhHNxU8TxUGzZlNw4bAbX08oHI08nmBCxC+LYsz
jz1xgm5iHL2HvYOzri02WgD+QTVWcw2xs8rx0TnGFtcZZ0LdOUSf5bnN/+Pq
XWsTPIkQUn2uYEtSR0QRhfHgUgSb8tu8ZrDrB+1dIYrrR92gGoTNR/fBPDzO
FZtM1BHw9dv9L8bTxQoRWvMNSJwRDKBZ7dZ7B63OfqdZPzg4wFD6HobS9zCU
PuhUg2q1Ua3qfaXTPmrAC0dHzR65tHro0joIat1mrX3YpcfDoHPUlcePQvqo
edSgf1vVGv1bb4dNUDrDwxpM307eyZSV0cGo9sOjxmG9hVFWR81uWO21u/Wg
0dpvtJq1o169sX/Yaqju3Ok2apS23wharWa7Fwbdo6P9dr3RbTS7+41G6xBe
77RUVe5WQXNu1TpBWK91W51evdVuNMMDeL0ZhIdhJ+w1wzBoqgGhux/Waq12
69E9a26nYqqb41r/4u/5bu5sCi6xANRTcFIR2DEPpFSy/iQ+LRk3MuWauNRN
RM3aoGkuDauUfp3UUlb0JphYONFaqBgBLJqmgwZksaNYDVb/MNcxZgntdIct
j+J4KGdHqh1Ls5olU+GqvlgrG3VjFfhZ3Lus99wk2TgQVVoubXW9TpSxEAwS
icfcqxXvTKKgY2cPB5jdxOxDBmzyBgy6UXpJOZCA+xBIzsIi2LbKM9fJAz1z
wqNaz1aSZXAP6FFho6voiozIzWq4+zcNNTsaLxOJ1LYMk6H0jKblXjjY844r
pUZhTM1BxDUsTj3FyuYR6jUliqe3yE5OqpiBdtIWzGBlEU2lbM434uQ2uhHA
qu641bxN9KbWkf+y0uIszKip7rSFIyPk5FRkjbbw1fxGPxJsXm8fKSurN2uH
j0qppxyX/n38L/eWky3kfm4c9JmPJfMn9VmV0zMDzQFNfUkgNqnp+D6vHeYC
Zb/An3LQLBV+gVEOB4dHzUZ4RNy2FVQPOkf1ZhPEQ7PZPAyrHb/4Rd8/OGjV
jzphqxv0Dru1RrgPfL5eOwxAgtTa3f3DR7kXf0l98s3565tvuP9Bu3YA3LgO
3JnEZBeXvNltwwa0sxuGckX4NAusbSXVkbJ3+qhRrT8ssegTFXHdoFljSJh2
CKKqHVbvX0YdZOehRWu06yDxOtUefNFWD2Sz1TrqNsN6t9ZqNY4OWr39Xv0Q
Huwc9jrtoLl/WAuPuvVWvVWr7VePOvpaL2wd7XcPD/b3e51Os7bf6e03Dnu9
aq1XO6w19mvdo151v7UPv9Y7jYNDnVuv2um0gjA87LabraNqa7990Djcl6Ab
oxRjOktKoBWFXtiCx2U4zhRR8dg2kA05StbjFdkYGFeQgqLyP6YB5hZ4QqN6
NSLiGGmsDRBHzFs60i0t8AjgN4SqEwZwa2y0G+0i8KH8e3lgoCzWEIY/5N+7
D1rIAv4UvFeIJJSFCSp4LwMcVIwKlH/P4gR98/xf9jw/7XZN3cbNJhZJgAzn
L/msSRcKgFQOGbR6E9+huY7gDUkpEt0eG3jlOle5M2mN3a4FebkkuaOZn78G
GB2ggNgKf7bIUq01QFut1zugUjbqsGtRczDqDKrh/89SpSxVbKIgPZVfF6uI
G7N2b3ic/lgJmNM4JFz+u6z9LDP/MU/B9aO4ARveGA3D+ijqt4J6vbl1ALb8
hMNhoz2s14ZRHLTaMRzX+Dudmv1OPewEUQf+U22Ho9Eg3DoKS34aUbW/tYfg
Qbu+t9Hsd+9lSNVbrui95IIZBVeapOTvdNfD8dw3phgpk/6M4X0T5wu+sFCx
dQH3XTlgyNLldeRcxey1wMFmIf1ZQv6IE9GVQfIucZzO8GyXov7zFUzu6OsE
BeePL7s9DSDGRCEYz84X+tmp/BEzKFserFEqY5NCk1TGBIU2o9PGAO1Hnxc/
v+2xSWry7ufTUX/aWb8LL/DhxvD8gzcIzz/X62c/v708mV6gNeu34eXzVT88
/e3406J1/PkoeP9scnN8dBK8m500BrXTSf/suHl59/zw7GJ4dIEWsKMPXjK+
qF7vvziXzj+/Pzu9rN+9nZzWovPPjcHlycnp26Pf3k2/rM7fHs1ehsdBP3z/
7uJZ49XLYP/5u8tG7+XhB69xel57Of75bRVaGN69+3l/Hl2e/HZ/39meoZXw
Ze3k14u3F7U3wfvq6dHp56h6en4xub4cHL0/OLk4efn2aL93OX375vLy+vzF
xfX87eT95cufseegM3pTOXqXfPBap+Xzn66vup/bjZO73qvXbyb91bNnn45e
fqwNrmfX+4ev1i+bv/bmbGL7JaNgFRAzltm8nV8d97pXx9O318OjzrofNj69
hxkd954nZ2er55cXjaOTyfMP3q8nn9vjF115evZ2El2+gR3rjt9cnr46m1xU
+8Hk3fDo7e2bs9VxfHDy65vzwc3p0eG4N+7iO+N++PaDt9K3ordvfx72jhPn
29W7aedmiATy4+nd8PIiOTa9ndT606OVjOuDtz+8PF307/bfDKadT+9/Pvmt
Xzu+Og9ejnuz6k8uGRYc1Acm/f5SJv3Bg2nfM+m3F7B/p2+Ck7cvZ9eXb6ar
t8Nnk9nwx4ta/9mFmfQHDycmb9VOzru3L3u3P1Frvec37y8DmHgHLa9Xwx+f
B+/Pbq/0zUFtuH53GUzwuw9eivgOO+fHV4tO72pHdKpfLCfkIj0HMXIX/5QU
kghrwvwFPy/z51zapQe3W0J8R7ySftTHurp3whMG0QR9j4qQQCDKIPenwBok
4du8wTrRwDQ2H3lUlqn6pRpwiXFNOqcMCSytiGDnZPlUXP35QjtT4AcpvgmN
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
AA==

-->

</rfc>
