<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.3.6) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.25.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2025" month="April" day="05"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 175?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 185?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they do not provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST NOT</bcp14> change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that does not require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that do not meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is <tt>null</tt>.
Latitude and longitude <bcp14>MUST</bcp14> be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number / null,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, and multiple
security-oriented subsystems like a TEE and a Secure Element. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions versus CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, does not require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
If detached Claims-Sets are modified in transit then validation can fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide metadata about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.
The "intuse" claim provides an indication to an EAT consumer about the intended usage of the token.
This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
The possible values are in the EAT Intended Use Registry defined in <xref target="int-use-registry"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and does not have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE does not require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document does not have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers do not support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they do not have to be standards track and do not have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it does not understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON cannot (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but does not define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic cannot be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number / null,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens from a particular entity will be
able to know the tokens are from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it does not say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="int-use-registry">
        <name>Intended Use Registry</name>
        <t>IANA is requested to create a new registry titled "Entity Attestation Token (EAT) Intended Uses" in a new registry group called "Remote Attestation Procedures (RATS)."
The registry uses the "Expert Review" registration procedure <xref target="RFC8126"/>.</t>
        <t>Guidelines for experts:</t>
        <ul spacing="normal">
          <li>
            <t>Each intended use should be clearly described so a user of it can know what it means.</t>
          </li>
          <li>
            <t>Each intended use should be distinct from others that are registered.</t>
          </li>
          <li>
            <t>Point squatting is discouraged.</t>
          </li>
        </ul>
        <t>The three columns for the registry are:</t>
        <dl>
          <dt>Integer:</dt>
          <dd>
            <t>This is a unique integer used to identify the intended use in CBOR-encoded tokens.</t>
          </dd>
          <dt>Name:</dt>
          <dd>
            <t>This is unique short descriptive string that is used to identify the use in JSON-encoded tokens.</t>
          </dd>
          <dt>Description:</dt>
          <dd>
            <t>This is a text paragraph or more that sufficiently defines what the intended use means. It may also be a reference to another document.</t>
          </dd>
        </dl>
        <t>The following 5 values represent the initial content of the registry.  Note that 0 will be marked as "reserved" for the CBOR value, and the maximum CBOR value for assignment is 255.</t>
        <dl>
          <dt>1 -- Generic:</dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>2-- Registration:</dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>3 -- Provisioning:</dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>4 -- Certificate Issuance:</dt>
          <dd>
            <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>5 -- Proof-of-Possession:</dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>
    <references anchor="sec-combined-references">
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:.plus,.cat, and.det for the construction of constants;.abnf/.abnfb for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and.feature for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2024/REC-geolocation-20240916/">
          <front>
            <title>Geolocation</title>
            <author fullname="Marcos Caceres" role="editor"/>
            <author fullname="Reilly Grant" role="editor"/>
            <date day="16" month="September" year="2024"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-20240916"/>
          <seriesInfo name="W3C" value="REC-geolocation-20240916"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="3" month="March" year="2025"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The TLSA selectors
   registry defined in RFC 6698 is extended to include CBOR
   certificates.  The document also specifies C509 Certificate Signing
   Requests, C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-13"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   This document defines the Unprotected CWT Claims Set (UCCS), a data
   format for representing a CBOR Web Token (CWT) Claims Set without
   protecting it by a signature, message authentication code (MAC), or
   encryption.  UCCS enables the use of CWT claims in environments where
   protection is provided by other means, such as secure communication
   channels or trusted execution environments.  This specification
   defines a CBOR tag for UCCS and describes the UCCS format, its
   encoding, and processing considerations, and discusses security
   implications of using unprotected claims sets.


   // (This editors' note will be removed by the RFC editor:) The
   // present revision (–12) contains remaining document changes based
   // on feedback from the IESG evaluation and has been submitted as
   // input to IETF 121.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-12"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-12"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2602?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources were introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored, protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> does not.
Vice versa, EAT does not define a device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the relying party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus cannot be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registry exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology-neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-to-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-30">
        <name>From draft-ietf-rats-eat-30</name>
        <ul spacing="normal">
          <li>
            <t>Minor typo fixes</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3600?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923bb2JUo+s6vwFFljJISkrraZau7KlFJskvVvrUlp7p3
7ToVkARJxCTBBkDLiuL+lv0t+8v2vK+5AFB2ku7zcMb26E6JwMK6zjXvl8Fg
0Ptwmhz3enVeL7LT5GaeJZcr+HGXnNV1VtVpnRer5KZ4n62S3cuzm71eOhqV
GXwEP3qTYrxKl/DdpEyn9SDP6umgTOtqkKX1YJFiB71xWp8mVT3p9cbFqspW
1aY6Tepyk/WquszS5WlydXnzrJevS3pc1UcHB08PjnopvDxNrrPxpoTp9G5n
p8nbs5vr3vtb6C6frfLVLEndHMejouz11vlpL0nqYnyafH2XVV/zj0m2rufw
5AR/V0UJA0+r0KK6W8YPxsVynY5r12IzCs9WBT4qp+NsUtV3uG3cDP6lm3pe
lKe9QZKvoL8Xw+TFZjUZLdJJBp/wXr1IN2W2GmfRq6KchcXiMRTlXfLixTm8
ypZpvjhNFrPFHyppUNP7IUxJR3o+TF6mq8ldurRxnudlPpmnpXtBo7zMJjkc
zfvk3fVZ6H4mrYdLbv2HGT73Q/w4TF5/fVGsitl8E1bzY1Zmy7v4DQ3zr5t0
AV8vk5tsPF8Vi2KWZ1VytRoPcT/hBDLYy6NvnibP0nIFZ1dsZvPkbZFOcP9h
jaf+BZ3JBBf17vAk+ebFNT3YrOoS2r1b5XU2Sf4FIGJS4DLX82IFbX93cpIc
Hj06So4fHx8+eRrW+udiQpP9w3/U+fA/ZJ5+qefD5Kd0sUjHYZ3nablwD2mJ
b2HUH2AWk+S6mNa3ALF9XaCMNIav/lBmkzm2qqQRjYS3oS7z0aZmeOFRfshW
75Pv8/L9vFj8RYd5Vqab1byYZmVyfXUDT/UKtl7IqHPoZTiSXv5Q5fVwai2H
AG462s28WKZV8qyoKrhDOtxZuUxe5Evc09BlTU2HU276h7TU/eKeXuazTbZI
vof9gQuZlUXlXo3nKbx7i/8tYRNWBu4AadkC4M22L/mpKN9XYdTluPwdIpU/
VNp0OE6t5zcpbOAY4BimWt7mf34fxkzreQ4r+77E+ZaTsL/pagVQeFONcTNW
+ezBRc+p9bC21q11v0k3i+S8LG4X2V2vtyrKJezOhwxx0Ntn5988Onwkfz55
evL0lHEUvwK4DK2eaqujR/bn8VNt8OTx4QF8O5ks5Pc39ur46ZPH8ufTA+vx
KSBQ/fPw8SP+dr3YVPzs5PHJE3l98ujwG215/PTY/jw+Oe3B3z89v35ygg8B
i6blDG/szryu19Xp/n6WlvV8kK+mxXA1S4fLfLG/nq/3J8XtagG3eAg/fj/N
F9m346IoJ4PbWfXkZIe7Ylrz0+u3Ly6S55evLy5vrs6T63+/vrl8mRw+fXLS
T149Pxte37y6GB4cHD/+9XB4MDz4lSZDHSiWxb8HfH6viAiki+R5VlRr+JEu
BlerOlss8hkh2zP8z12yCz3v0YcTwIGAgA4OTwYH3wwOnuB6r85enQ3Pf7oZ
ni/SfAmIgB6Mb2t7+WPz5Z/dy/PX15fDs8WsABw9D58XVYZNbuaA856/eTO8
enl5FW+q7ukaSFO6GB7P1ushLGt/klXv62K9LCYbuFf71+tsnE/zMa218fMi
qwFmq2FarT/+vvJvribffnP01O/8cTmBfVplJVPON3CS8KOa5+vkTVn8ORvX
/8RYG3pYJNEwyXPAx+vkvIDL+iqrb+G+JnA3oXm5zGH/q39KXm2Wo6wEZNxP
0smkzKqKSDU0yicZ8Bba1bajPIY9ik/oKW7fxYvXZ927NlsUoxTgO62ncAFp
427XA8SvMNz+Zo3gWO1DP4/2D4/2n785//Uin+Ww0S8y4B/K19Oz9bosPqSL
Xz8gpK0nU79Z0jbhxkkxTbS5m+Sr4kOGq8bZPurhdN9cvtpyxtlqmKerlOYJ
P/bfZCvocSG7Mlyns8yP/6bMP8AYyJZl5brMq0x2ONmFMfaACP3HBvksBULE
MYM6nVVwg3t4PWOc9OTwyDDGo8eKMU4QPSnyOH5Klx/IUD2fpHfACKbj96d+
TvoKGTB417lOWOZt/j5fI7fBZwK/9vXLX/nLodvDKUAPXZSry8vL4ZODo+Hh
2VvY/9dXw8OD4eHhwdN9fHN9czGEXX4yfHJydPzN0xPCU8fnQ7j4L5Dtw7/f
Xp4PZhnwHLyng6ODo5MDQIXY9vW7q+HzDYBitCJ6ssiROMCOJe9gl+GkLz8C
CE2AygOLAbucXAkA4+Zfvrva6yevy1m6yv8i2Gdx19XyNbXEC3COPOTqLrm6
SHbPry48IjrbzID3Rfj5pnM7gc1dTZB+DvMsy2hDFcIn6XIfHw6sTWi9f5uN
ACePN0toWe3XyG4Abqz2s01OkC478qIo3m/W0ZbgZgN0zXJg1vjun9FlJeGg
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
pieaNv7FznKzqvYZh0GaJXbt9S6TTjPTHGvdiSaTvJ97J1lTTFI648g55/or
/ftLOgI3dXIZTows6DbTSI6YnkG0yWF6IAN5qZWP60Qi2leLSz1t3ObJcZlW
/fRT81V2a57nt6Z59fSpboBUdXmIHJzQTXlzTE9k4t0NbLi9Wux0Z0NyTXUX
C/9oPt9J2YUd+oDvKjBxXXEjx3fO2Nx/yEFy/iF17FIAxuK6W7gTHtTOrg9f
XXfPoqvLZ9G893l88al+fVU9Xzx7ff15v3vU3Z++vvjp/GO/e/nsx2P65tOn
X5+9+eAd9p6NlnfP3hwe7e9/3t+/uXjffTM4gL8Pr6Yvf3vx6XAffv9pfnly
cXpx2XsRXF01BuW3H8/Om6svp8+GvdrbTxcfvNdR/edPk5/LPzXeLJ4tfjrt
9T62n3+6vFq9e/M6enN3++r4fa08ff7TSe3nzujFFxjqLJnuR+WXN4sfT397
dVt+dzv74JWbrf7N88mn9WAV/9Z9fVAPkubH7qp10j97W/v19vnky/H612ej
27gexMlTXblfzMq9GM/WX3zZgI0Lr9/nF37dl/qJzzMr/vzyPLXg8d3zavxz
d/xq/Pynt8Gb8Yve8+v+swH+fXzx23FwMn7eqcBDi0HtJT304uKoOnz29rfh
B+/Z27vj8e04ujyqHn+afzn5dPHl5LdB9dXBuzo0M4l/hGanjaD/7DY5nh4F
73vHzePxcXI8OwnejfF3aPqDd/Xptj47enn9YvH8Yv3655uXr3/7KXj28tP1
3fNfw5vLn6+CetD8+afkt9s3O+7RTQXPU4VBc2bTsCFwWx8PqByNfF7gAoRv
y+LMY0+coJsYR+9h7+Csa4uNFoB/UI3VXEPsrHJ8dI6xxXXGmVB3DtFneW7z
/7h619oETyKEVJ8r2JLUEVFEYTy4FMGm/DavGez6QXtXiOL6UTeoBmHz0X0w
D49zxSYTdQR8/Xb/i/F0sUKE1nwDEmcEA2hWu/XeQauz32nWDw4OMJS+h6H0
PQylDzrVoFptVKt6X+m0jxrwwtFRs0curR66tA6CWrdZax926fEw6Bx15fGj
kD5qHjXo31a1Rv/W22ETlM7wsAbTt5N3MmVldDCq/fCocVhvYZTVUbMbVnvt
bj1otPYbrWbtqFdv7B+2Gqo7d7qNGqXtN4JWq9nuhUH36Gi/XW90G83ufqPR
OoTXOy1VlbtV0JxbtU4Q1mvdVqdXb7UbzfAAXm8G4WHYCXvNMAyaakDo7oe1
WqvdenTPmtupmOrmuNa/+Hu+mzubgkssAPUUnFQEdswDKZWsP4lPS8aNTLkm
LnUTUbM2aJpLwyqlXye1lBW9CSYWTrQWKkYAi6bpoAFZ7ChWg9U/zHWMWUI7
3WHLozgeytmRasfSrGbJVLiqL9bKRt1YBX4W9y7rPTdJNg5ElZZLW12vE2Us
BINE4jH3asU7kyjo2NnDAWY3MfuQAZu8AYNulF5SDiTgPgSSs7AItq3yzHXy
QM+c8KjWs5VkGdwDelTY6Cq6IiNysxru/k1DzY7Gy0QitS3DZCg9o2m5Fw72
vONKqVEYU3MQcQ2LU0+xsnmEek2J4uktspOTKmagnbQFM1hZRFMpm/ONOLmN
bgSwqjtuNW8Tval15L+stDgLM2qqO23hyAg5ORVZoy18Nb/RjwSb19tHysrq
zdrho1LqKcelfx//y73lZAu5nxsHfeZjyfxJfVbl9MxAc0BTXxKITWo6vs9r
h7lA2S/wpxw0S4VfYJTDweFRsxEeEbdtBdWDzlG92QTx0Gw2D8Nqxy9+0fcP
Dlr1o07Y6ga9w26tEe4Dn6/XDgOQILV2d//wUe7FX1KffHP++uYb7n/Qrh0A
N64DdyYx2cUlb3bbsAHt7IahXBE+zQJrW0l1pOydPmpU6w9LLPpERVw3aNYY
EqYdgqhqh9X7l1EH2Xlo0RrtOki8TrUHX7TVA9lstY66zbDerbVajaODVm+/
Vz+EBzuHvU47aO4f1sKjbr1Vb9Vq+9Wjjr7WC1tH+93Dg/39XqfTrO13evuN
w16vWuvVDmuN/Vr3qFfdb+3Dr/VO4+BQ59ardjqtIAwPu+1m66ja2m8fNA73
JejGKMWYzpISaEWhF7bgcRmOM0VUPLYNZEOOkvV4RTYGxhWkoKj8j2mAuQWe
0KhejYg4RhprA8QR85aOdEsLPAL4DaHqhAHcGhvtRrsIfCj/Xh4YKIs1hOEP
+ffugxaygD8F7xUiCWVhggreywAHFaMC5d+zOEHfPP+XPc9Pu11Tt3GziUUS
IMP5Sz5r0oUCIJVDBq3exHdoriN4Q1KKRLfHBl65zlXuTFpjt2tBXi5J7mjm
568BRgcoILbCny2yVGsN0Fbr9Q6olI067FrUHIw6g2r4/7NUKUsVmyhIT+XX
xSrixqzdGx6nP1YC5jQOCZf/Lms/y8x/zFNw/ShuwIY3RsOwPor6raBeb24d
gC0/4XDYaA/rtWEUB612DMc1/k6nZr9TDztB1IH/VNvhaDQIt47Ckp9GVO1v
7SF40K7vbTT73XsZUvWWK3ovuWBGwZUmKfk73fVwPPeNKUbKpD9jeN/E+YIv
LFRsXcB9Vw4YsnR5HTlXMXstcLBZSH+WkD/iRHRlkLxLHKczPNulqP98BZM7
+jpBwfnjy25PA4gxUQjGs/OFfnYqf8QMypYHa5TK2KTQJJUxQaHN6LQxQPvR
58XPb3tskpq8+/l01J921u/CC3y4MTz/4A3C88/1+tnPby9PphdozfptePl8
1Q9Pfzv+tGgdfz4K3j+b3BwfnQTvZieNQe100j87bl7ePT88uxgeXaAF7OiD
l4wvqtf7L86l88/vz04v63dvJ6e16PxzY3B5cnL69ui3d9Mvq/O3R7OX4XHQ
D9+/u3jWePUy2H/+7rLRe3n4wWucntdejn9+W4UWhnfvft6fR5cnv93fd7Zn
aCV8WTv59eLtRe1N8L56enT6Oaqenl9Mri8HR+8PTi5OXr492u9dTt++uby8
Pn9xcT1/O3l/+fJn7DnojN5Ujt4lH7zWafn8p+ur7ud24+Su9+r1m0l/9ezZ
p6OXH2uD69n1/uGr9cvmr705m9h+yShYBcSMZTZv51fHve7V8fTt9fCos+6H
jU/vYUbHvefJ2dnq+eVF4+hk8vyD9+vJ5/b4RVeenr2dRJdvYMe64zeXp6/O
JhfVfjB5Nzx6e/vmbHUcH5z8+uZ8cHN6dDjujbv4zrgfvv3grfSt6O3bn4e9
48T5dvVu2rkZIoH8eHo3vLxIjk1vJ7X+9Ggl4/rg7Q8vTxf9u/03g2nn0/uf
T37r146vzoOX496s+pNLhgUH9YFJv7+USX/wYNr3TPrtBezf6Zvg5O3L2fXl
m+nq7fDZZDb88aLWf3ZhJv3Bw4nJW7WT8+7ty97tT9Ra7/nN+8sAJt5By+vV
8Mfnwfuz2yt9c1Abrt9dBhP87oOXIr7Dzvnx1aLTu9oRneoXywm5SM9BjNzF
PyWFJMKaMH/Bz8v8OZd26cHtlhDfEa+kH/Wxru6d8IRBNEHfoyIkEIgyyP0p
sAZJ+DZvsE40MI3NRx6VZap+qQZcYlyTzilDAksrItg5WT4VV3++0M4U+EGK
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
8DVNfOOqWEUzPmyyOOvEKjj8oiqyudgj/nqKyijcz9nH5F79suVyzAVwpTVW
neualbOsxOEYrD18JY4i1XbErynNSRhShBYCJZ4M7Iqo01YZIEXsteRHDCSg
PUakFIzuMJ+XnBXkQ6GXysjYWyyQihilmB/6JtBtMh7Fac5KcwS5wlbxuUTZ
kb3FiD9bNBXUGzgKdxTAATR/piZsdzQz2V1tWYYw02ZwDOXB3QCP9I1AreRv
BMZAMcWLo1pf7XLg2oMcG+Ntg2+2xFeMeS7+zBA01DlOAgcky+e0ItzC1kKl
bm4pvox5UG5oaI7SYmLfYY6R++v2l0RRczKXcekx1VCmJ7JX4FmgezN+QNfg
2AnFVMLHKE73yw28mk4/OpZEzPZjMx5nLccO3W6aErT0KMmsldtEkmrFeP8T
t+YtEhDRD9v7egcHL0hr0lxuTJ34+hf8+CN8/BE+/oYUhskONUx2gO1NuCpd
ggkb/XiEYafUDH5jvRQmMRwpnCsF80VlgT5ALm6FryF3Vn8LPEotiUTGj2hc
WvKY7bnsC2BPO5OcViIWbY2EEzUkoVkmw9zJfsNJw2RT7PDr13G0KpNgIMOj
hBvZME3Ux6hMpFyHyOb6f8jjhoFIu1+/sl+mjF8k377t8TzTjzJvGFuzF8st
Ytc2tqnMsU2iUKgnkESuC72KoDcypjG1ISZ9TNous+l0SH0n5mrHK7O0ZEg2
KvSNVRuczkILeM3BWjjKk1fnxOSpfvgN2+XUM5gmR9wuXlhyJdH+SrBaQkTu
0tkyZqgF0vC0bdue5NVgI95fTV4+XKwmHHTLdqnhMhqtynDXGZWB3JPyejBI
0PNrNvqppHv8p/9v/2Y/LvOv8g39UX6BRd38yihmfW+HxD8QXFnSa6no247/
9Ae0WHnfPPetpyi8EAsVXvI4Q7c8X5ZB3YWv6EOvoHv/8eOn/i5MK+E+uAvs
Id2Ev3fP23A1/ANvR+vhH3gbbqLZt5nG73tp1h99/0vmZH7PS4PVOPsSu0H2
PC+36P7z3n/vwKeYPvmDl1tV+ho+xTq/P3i5ZaOv4VP4uvaDl1sX+ho+ha/r
P3i5FaCv4VP4uvGDl5srDw2Oeslv/uDlZsV656uTF+/+u/WD7//V/7QaE4Df
5fkTx9JL4G7El4keKTuQXnr+A3bhUP4nuFnseLbVHj7Qcx4Y9OfLHWii99/P
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
a3oCAA==

-->

</rfc>
