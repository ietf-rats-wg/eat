<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="09"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the design intent of the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>This claim is only to give the recipient a rough idea of the security design the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>While this claim may be forwarded in Attestation Results as described in <xref target="relationship"/>, this claim MUST NOT be used to represent the output of a RATS Verifier.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level may have only minimal SW defenses.
The most secure level may have specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
(Note only Section 4 is referenced. The other sections, in particularly Section 3 do not apply.)
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains broadly interoperable. In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">DEB Usage</td>
              <td align="left">DEB may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-13">
        <name>From draft-ietf-rats-eat-13</name>
        <ul spacing="normal">
          <li>UEID length and type clarifications</li>
          <li>Address comments on SUEIDs</li>
          <li>"Attestation Evidence" -&gt; "Evidence"</li>
          <li>Wording clarification for "entity"</li>
          <li>Wording clarifications for DLOAs claim</li>
          <li>CDDL type for CoAP Content Format</li>
          <li>Move Claim Characteristics to an Appendix</li>
          <li>Rename odometer to boot-count</li>
          <li>Correct/clarify section on JSON/CBOR labels (Carl's comment)</li>
          <li>Wording clarifications in Appendix C (Carl's comment)</li>
          <li>xxx encoded -&gt; xxx-encoded</li>
          <li>Clarifications for cti and jti claims</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entro</li>
          <li>Improve SW Name Claim description</li>
          <li>Update commentary on UUID vs UEID</li>
          <li>Remove most of section 8.3 on CBOR Serialization, redundant with profiles</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entropy</li>
          <li>Improve SW Name description</li>
          <li>Don't capitalize composite device</li>
          <li>Reword encoding exception sentence</li>
          <li>Wording improvements in section 1 related to Attestation Results</li>
          <li>Lots of rewording to make profile issues more prescriptive</li>
          <li>Sync terminology definitions with RATS Architecture, include Endorsement definition</li>
          <li>Plug-ins to the EAT format socket must be an IETF standard</li>
          <li>Link to RFC 9052 instead of 8152</li>
          <li>Improve introduction to profiles</li>
          <li>Improve CDDL for OID in JSON</li>
          <li>Move Endorsements and Verification Keys to a new Appendix</li>
          <li>Move privacy and security considerations to before IANA section</li>
          <li>Clarify that security-level is only the intended design</li>
          <li>Clarify that security-level only references section four of FIDO AROE</li>
          <li>Remove requirement that manifests be a byte string in CBOR-encoded tokens</li>
          <li>Add manifests for SPDX and CycloneDX</li>
          <li>Add a standard constrained device profile</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPcSHYo+h2/AsHuiBZnqoqLqNVu+bJJdg/b2q5ITdtv
XocCrAJJjKqAMoAiVaORf/s7e54EUCTt8Y14H26HPWIBiVxPnn0Zj8dJ02bl
7FM2r8r8ZdrWqzwpljX91bT7u7svdveTada+TJt2liSzalpmC2g4q7PLdlzk
7eW4ztpmnGfteJ61edMmye3Vy/TD4flZ+ltVfy7Kq/SXulotk+/SaVU2edms
mpfpD+u8+QEeNauLRdE0RVW26yX0e3py/nOyLF4madpWU21HP2b5sr2GJwf4
u6nqts4vm9CiWS/iB9NqscymrWuxugjPygof1ZfTfNa063muzdqixR/n13l6
UsKPdXrY4rKyFuaYnlef8zJ9dHJ4vp1kFxd1fvMyhR9JVucZTL5s87rM2+Tz
LexXcVXi4jP3+fSiqmHRM9iol+n+7t7j8d5ukq3a66p+mYzTooTpv56kr1fl
7GKezXKYIW/362xV5+U0j15VNWz0WT5d1ThNmHFVr9PXr4/gVb7IivnLdH41
/1+NNGjp/QR2QEf6ZZK+gbNfZwsb55eiLmbXWe1e0Cj/e5XN4ctFep5Pr8tq
Xl0VeQPrnU5wX+EkctjTJ8+ePUnfVHV+Xa2aPD2uixuc5hQGh3lmZXpc5FcV
7np+BbvxMj3K5sVlVZdFRse1KtsaWn48O4Sfy2sCyK0/7qXPnzxPnz7ZS58B
OG6FxS14iv/rP9pi8h8yP7+8Xyfpux+Oq7K6ul6Fnfw1r/PFOn7z8CXuP3uR
/pzVJZxjtbq6Tj9U2cyW6F7Qema4oR/3DtJnr8+iBZZFm8/SfwXomFWLsNY/
Hhyke/tP9tPHTx/vPX8RVvrXakaT7S81Kat6AbB1k+ON+fDz0f7e3gv589ne
E/vzyd6T8OdT+fP5iwNrAMOGBs/Cn9bg+e6ufra3bz3sPTvQPx+/0B6eP92z
ts8OtLPHL57rZy92bbQXgGBeJvD3b7+cPae+4K5n9RVu9tZ12y6blzs7eVa3
1+OivKwm5VU2WRTzneX1cmdW3ZZzOIAJ/PiXy2Ke/zitqno2vr1qnh9scVd8
m3979+H1cfrLybvjk/PTo/Ts38/OT96key+eH4zSt78cTs7O3x5PdncfP/20
N9md7H6iyVAHejnx7zEDylu6y9k8/SWvmiX8yOZjvPnzeXFFd/QQ/1mnj6Dn
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

-->

</rfc>
