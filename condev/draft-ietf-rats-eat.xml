<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">DEB Usage</td>
              <td align="left">DEB may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+S9a3fbWHYg+h2/AkvVa5WVJinr4WemKqOSVNWq2JbHkuNk
enrVgkiQQpsEGAC0zHZXfvvd77MPAMpOMvPp1kraIoDz3me/H+PxOGnarJz9
li2rMn+ZtvUmT4p1TX817dHjxy8eHyXTrH2ZNu0sSWbVtMxW8OGszubtuMjb
+bjO2macZ+14mbV50ybJ/eJl+u705jr9UNUfi3KR/lJXm3XyXTqtyiYvm03z
Mv1+mzffw6Nmc7sqmqaoyna7hn4vL25+TtbFyyRN22qq39GPWb5u7+DJCf5u
qrqt83kTvmi2q/jBtFqts2nrvtjchmdlhY/q+TSfNe12metnbdHij5u7PL0o
4cc2PW1xWVkLc0xvqo95mT66OL3ZT7Lb2zr/9DKFH0lW5xlMvmzzuszb5OM9
7FexKHHxmWs+va1qWPQMNuplevT48Hh8+DjJNu1dVb9MxmlRwvRfTdJXm3J2
u8xmOcyQt/tVtqnzcppHr6oaNvo6n25qnCbMuKq36atXZ/AqX2XF8mW6XCz/
ZyMftPR+AjugI/0ySV/D2W+zlY3zS1EXs7usdi9olP+1yZbQcpXe5NO7slpW
iyJvYL3TCe4rnEQOe/rk2bMn6euqzu+qTZOn53XxCac5hcFhnlmZnhf5osJd
zxewGy/Ts2xZzKu6LDI6rk3Z1vDl++tT+Lm+I4Dc++Nh+vzJ8/Tpk8P0GYDj
Xljciqf4P/+9LSb/LvPzy/t1kl59f16V1eJuE3by17zOV9v4zbcv8ejZi/Tn
rC7hHKvN4i59V2UzW6J7QeuZ4Ya+PzxJn726jhZYFm0+S/8ZoGNWrcJa/3hy
kh4ePTlKj58eHz5/EVb612pGk+0vNSmregWw9SnHG/Pu57Ojw8MX8uezwyf2
55PDJ+HPp/Ln8xcn9gEMGz54Fv60D54/fqzNDo+sh8NnJ/rn8Qvt4fnTQ/v2
2Yl2dvzieWhmo70ABPMygb8//HL9nPqCu57VC9zsvbu2XTcvDw7yrG7vxkU5
ryblIpusiuXB+m59MKvuyyUcwAR+/NO8WOY/TKuqno3vF83zkz3uim/zh6t3
r87TXy6uzi9uLs/S63+7vrl4nR6+eH4ySt/8cjq5vnlzPnn8+Pjpb4eTx5PH
v9FkqAO9nPj3mAHlDd3lbJn+klfNGn5kyzHe/OWyWNAdPcV/tukj6HmfGtp9
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
0CzWCQNYtzf6/7dldMtgkwIA

-->

</rfc>
