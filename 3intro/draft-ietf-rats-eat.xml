<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.9.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="August" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="use-as-evidence-and-attestation-results" numbered="true" toc="default">
        <name>Use as Evidence and Attestation Results</name>
        <t>Here, normative reference is made to <xref target="RATS-Architecture" format="default"/>, particularly the definition of Evidence, the Verifier, Attestation Results and the Relying Party.
Per Figure 1 in <xref target="RATS-Architecture" format="default"/>, Evidence is a protocol message that goes from the Attester to the Verifier and Attestation Results a message that goes from the Verifier to the Relying Party.
EAT is defined such that it can be used to represent either Evidence, Attestation Results or both.
No claims defined here are considered exclusive to or are prohibited in either use.
It is useful to create EAT profiles as described in <xref target="profiles" format="default"/> for either use.</t>
        <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
        <t>Many claims in Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
They will be protected against modification when they are conveyed to the Relying Party by whatever means is used to protect Attestation Results. 
(The details of that protection are out of scope of this document.)
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, claims are examples of claims that are passed through.</t>
        <t>Some claims in Evidence will be verified by the Verifier by comparison to Reference Values.
In this case the claims in Evidence will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to reference values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
        <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IEEE.802.1AR" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>An EAT is a CWT or JWT and therefore inherits all the details and rules from those specifications.</t>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Map labels are assigned both an integer and string value.
CBOR encoded tokens MUST use only integer labels.
JSON encoded tokens MUST use only string labels.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
oemid-claim = (
    oemid => bstr
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)

]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
secure-boot-claim = (
    secure-boot => bool
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
uptime-claim = (
    uptime => uint
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
boot-seed-claim = (
    boot-seed => bytes
)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag

]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected reference values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the swevidence claim to reference values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to reference values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the reference values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to reference values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to reference values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminite: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminite" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult = [
    verification-system: tstr,
    objective: verification-objective-cbor-type / verification-objective-json-type, 
    result: verification-result-cbor-type / verification-result-json-type, 
    ? objective-name: tstr
]


swresults-claim = ( 
   swresults => [ + swresult ]
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <t>Note that unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
        <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <t>Note that the subject, issue and audience claims may be a text string containing a URI per <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/>.
These are never the URI tag defined in <xref target="RFC8949" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

]]></sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON"><![CDATA[
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
swevidence /= "swresults"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL"><![CDATA[
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? swresults-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer => text,
    ? subject => text,
    ? audience => text,
    ? expiration => time,
    ? not-before => time,
    ? issued-at => time,
    ? cwt-id => bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
    debug-status => debug-status-cbor-type / debug-status-json-type
)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
    location-label => location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce => nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid => bstr
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

chip-version-claim = (
    chip-version => hw-version-type
)

board-version-claim = (
    board-version => hw-version-type
)

device-version-claim = (
    device-version => hw-version-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
)


secure-boot-claim = (
    secure-boot => bool
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
    security-level => security-level-cbor-type / security-level-json-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods => submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name => eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid => ueid-type
)

sueids-type = {
    + tstr => ueid-type
}

sueids-claim = (
     sueids => sueids-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

intended-use-claim = (
    intended-use => intended-use-cbor-type / intended-use-json-type
)

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
    profile => ~uri / ~oid
)

uptime-claim = (
    uptime => uint
)

manifests-claim = (
    manifests => manifests-type
)

manifests-type = [+ $manifest-formats]

; Must be a CoSWID payload type
$manifest-formats /= bytes .cbor concise-swid-tag

$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


swevidence-claim = (
    swevidence => swevidence-type
)

swevidence-type = [+ $swevidence-formats]

; Must be a CoSWID evidence type
$swevidence-formats /= bytes .cbor concise-swid-tag


verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminite: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminite" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult = [
    verification-system: tstr,
    objective: verification-objective-cbor-type / verification-objective-json-type, 
    result: verification-result-cbor-type / verification-result-json-type, 
    ? objective-name: tstr
]


swresults-claim = ( 
   swresults => [ + swresult ]
)

; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location-label = 17
profile = 18
submods = 20


boot-seed-claim = (
    boot-seed => bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
sueids /= "sueids"
nonce /= "nonce"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
submods /= "submods"
timestamp /= "timestamp"
manifests /= "manifests"
swevidence /= "swevidence"
swevidence /= "swresults"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-08">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://tools.ietf.org/html/draft-ietf-cose-x509-08">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="J. Schaad">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://tools.ietf.org/html/draft-mattsson-cose-cbor-cert-compress-05">
          <front>
            <title>CBOR Encoding of X.509 Certificates (CBOR Certificates)</title>
            <author fullname="S. Raza">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Add swresults claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
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
C6XOBZ1mI6CPOK/zATWHRGlX73t49+abn96+ffPjt2++5WwQclOMTQ9BJdzE
g39UeC1w975psoCcWmIqeO9AlRMvTD6M65nxqA52clskZOPmslR8aqQgOUOo
sqZYyeSIv4AjzheCVXaD6YTCAQr9xwZOFvFoqDdpdLt/+eXNXopzjL+GVA47
/ni1VwZdDZP8IlHA6Fp1Oo40mEsH9OL2e2tXKAO5hR1vFLA2GUFcwwZqC7WF
U5A8HCypJWOMTCvOLJJmi8zrCvlIZOkUd0NCjFEuyH9ltbRxOSI1endq+RRA
i3RVTO+K9uKj3ogBdMRH49molYqoZcwRpLdATWQ3oCTERSeSS2e2CaImWCDD
V8U28l20ZZh+ZGhipIZDmko5KVXjPCS+S8cEb0f0BxGTenWb0YRxlpF3y2VV
06m7Anfj3a9fEZ5duHuHD2jdDbwn+tK8oTYtqr8iFkwsxUm+8/KFOFGFKztq
AJ71wKKRRdJRrybOcu0bcfPQ/bq7IwWrhlXcyXfpqZ29TLJS3ueSwMIuNUoq
6GVvc17bFs1G58NFDs1j2DIOr3toYqu2g9IrJuFgtyp9gSDrJsL3WbDSpElk
yQMxIv9wtTcJKRkgknB9l1bLFciG0aPGGq0E/sdRSE22GROuAtk1m4zinm+b
SkqS9Dg5qmGhznYqrxvdtmMoPzISpWUY21bQAryIoOT5X5KiWf0oE4/NSJ7f
ZPvbPHx9WLYQetP1g9mgZ3oXkitLAGBbvG3u7+9X03r2AdWbTH798z8sReNf
kKl/leyvK1aljy2lPLfY90dC70gAazxqb7oeyM2oGVD9ZAq6wXyklHfh22At
aP2ZQJiaF4YH+SJzeh19Xe38rW92JvqIpmTnTxx+Xd1+9frk7Prs7NXh/Ohl
ffLqZXPWfGWvwEqVvxEv+/LK4dHrs+vTw/rk+vrV7PD07NXRzFp49fKsqb2B
Io+bDZx+Hflh3dgTTOhWzEI8c/RK0B/iPx21MP2sL6UU6914gxIk1iq+dLR7
dHr86vTk+Oz1yV74V6o8o6vEMyHFA0wA1mSx7WWM0zCi7ybx/s8k/DcRsvqN
5NTnnifq56jKvzFti0FlKfze2Yl2pvItQZ9VP115d548Xx1HIpLQ/OW6XUoK
FX5H8tF5N18KEtA5cwKZ5u8v7GQ/V9/1/U71dZW199xYZZQC0pjjuGWt/iuK
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
j33BfPJ5RDGv3627OfwvoKoz28e6AQA=

-->

</rfc>
