<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization/>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="February" day="08"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 165?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 175?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is “JWT”, “CBOR”, “BUNDLE” or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always “JWT”, “BUNDLE” or a new name standardized outside this document for a further type (e.g., “UCCS”).
This string name may also be “CBOR” to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="5" month="February" year="2024"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-25"/>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="20" month="October" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-07"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="16" month="January" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-08"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="7" month="November" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-05"/>
        </reference>
      </references>
    </references>
    <?line 2589?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-25">
        <name>From draft-ietf-rats-eat-25</name>
        <ul spacing="normal">
          <li>
            <t>Change SUIT Manifest reference back to normative</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3589?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963LbVpoo+h9PgaN0VaRukpYs2bE9k3QrkpIo49tY8mRm
Z2dnQBIi0SYJDgBaZqs9Na9xqs6pOs9yHmWe5Hz39S0AlN3de3adH9s10xGB
hXX91ne/DIfD5P2z9DhJmqJZ5M/S63meXqzgxzY9bZq8brKmKFfpdfkuX6X7
F6fXB0k2Hlc5fAQ/kmk5WWVL+G5aZTfNsMibm2GVNfUwz5rhIsMOkknWPEvr
Zpokk3JV56t6Uz9Lm2qTJ3VT5dnyWXp5cf1dUqwrelw3Dw8Pnx4+TDJ4+Sy9
yiebCqaT3M6epW9Or6+Sd7fQXTFbFatZmrk5TsZllSTr4lmSpk05eZZ+uc3r
L/nHNF83c3hygr/rsoKBb+rQot4u4weTcrnOJo1rsRmHZ6sSH1U3k3xaN1vc
Nm4G/7JNMy+rZ8kwLVbQ3/NR+nyzmo4X2TSHT3ivnmebKl9N8uhVWc3CYvEY
ymqbPn9+Bq/yZVYsnqWL2eIPtTRo6P0IpqQjfT9KX2Sr6TZb2jjfF1UxnWeV
eyFdzeTNaMlv/jDD5767H0fpqy/Py1U5m2/CzH/Mq3y5jd/QxP9xky3g62V6
nU/mq3JRzoq8Ti9XkxHuHex2Dvv28Kun6XdZtYJzKjezefqmzKa417CeZ/4F
7f8UF/D26CT96vkVPdismgravV0VTT5N/wFOf1riktbzcgVtf3dykh49fPQw
PX58fPTkaVjrH8spTfYP/9YUo3+Tefqlno3Sn7LFIpuEdZ5l1cI9pCW+gVF/
gFlM06vyprkF6BzoAmWkCXz1hyqfzrFVLY1oJIT8pirGm4Zhg0f5IV+9S78t
qnfzcvEnHea7Ktus5uVNXqVXl9fwVK9b54WMOodeRmPp5Q910YxurOUIQEtH
u56Xy6xOvyvrGu6LDndaLdPnxRL3NHTZUNPRDTf9Q1bpfnFPL4rZJl+k38L+
wOXLq7J2rybzDN69wf9WsAkrA22AtHwB8Gbbl/5UVu/qMOpyUv0OEcgfam06
mmTW8+sMNnDyLn0LU61uiz++C2NmzbyAlX1b4XyradjfbLUCKLyuJ7gZq2J2
76Ln1HrUWOvOul9nm0V6VpW3i3ybJKuyWsLuvM8R37z57uyrR0eP5M8nT0+e
PmN8xK8ALkOrp9rq4SP78/ipNnjy+OgQvp1OF/L7K3t1/PTJY/nz6aH1+BSQ
pf559PgRf7tebGp+dvL45Im8fhim8fT46bH9eXzyLIG/f/r+6skJPgSMmVUz
vLF786ZZ188ePMizqpkPi9VNOVrNstGyWDxYz9cPpuXtagG3eAQ/fn9TLPKv
J2VZTYe3s/rJyR53xXTlp1dvnp+n31+8Or+4vjxLr/7l6vriRXr09MnJIH35
/eno6vrl+ejw8Pjxr0ejw9HhrzQZ6kAxKv495PN7SQg/W6Tf52W9hh/ZYni5
avLFopgRYj3F/2zTfej5gD6cAikCBHR4dDI8/Gp4+ATXe3n68nR09tP16GyR
FUtABPRgctvYyx/bL//oXp69uroYnS5mJeDjefi8rHNscj0HnPf969ejyxcX
l/Gm6p6ugQxli9HxbL0ewbIeTPP6XVOul+V0A/fqwdU6nxQ3xYTW2vp5njcA
s/Uoq9cffl/7N5fTr796+NTv/HE1hX1a5RVTyddwkvCjnhfr9HVV/jGfNH/H
WBt6WKTRMOn3gI/X6VkJl/Vl3tzCfU3hbkLzalnA/td/l77cLMd5Bch4kGbT
aZXXNZFlaFRMc+AjtKtdR3kMexSf0FPcvvPnr077d222KMcZwHfW3MAFpI27
XQ8Rv8JwDzZrBMf6AfTz6MHRwwffvz779byYFbDRz3PgFapXN6frdVW+zxa/
vkdIW09v/GZJ25Qbp+VNqs3dJF+W73NcNc72UYLTfX3xcscZ56tRka0ymif8
ePA6X0GPC9mV0Tqb5X7811XxHsZAFiyv1lVR57LD6T6McQBE6N82yFPBN1dv
L69HQNmLG3gA0Dc8HxH7VW+KZriU5watiIyGTTar4aoneI9j5HVy9FBRwwki
L0Utx08JNQCRaubTbAssYTZ598zPWF8hKwbvencBNuG2eFes82nBO4G/HuiX
v/KXI7fDNwBbdI0uLy4uRk8OH46OTt/A6by6HB0djo6ODp8+wDdX1+cjOIMn
oycnD4+/enpCWOz4bARo4TkygPj3m4uz4SwHjoR3fHj6+nII3xwfHT6k9q/e
Xo6+3wCwRquiJ4sCyQdsVfoWzgFg4eIDANkU+ABgQuAc0ksBcTyei7eXB4P0
VTWDnf+T4KfFtq/lK2qJV+QMOcrVNr08T/fPLs89qjrdzIATRgj7qndLgeld
TZHCwqHnOW2q3oFptnyAD4fWJrR+cJuPAWtPNktoWT9okCEB7Fk/yDcF3QXZ
kedl+W6zjrYENxzgb1YAO8fY4ZSuM4kKNTLk1GfvbKt8hnd/1DNrewRywxBn
t96MH7wv8tvRvFkuvqh4QOAmd4HH8M3p587zc3cSbvx0MwEpps6r98UEkLEs
4EEBx/+BZnYftAKAHR7tBNeT0eMnJ18dPv0KPyEq8s+PDp+OzlGCcvcYKcnw
A7yhZt++ejM6y6umvxndbiB5wDVPhxNoht+8PTu7cg1JLNtMJjW++/H69Pvu
rl3JVhDMA7+7AQFn+LpYEbBerIBDwgffbVYThm+SVADLpKcT2KQ6fQ0Ujdp+
ixxwVm2HVxNg+E6ryRx4rUkDYk/vEeDGfwDMDdyynYEC6YNHgJuePH7s9vu7
fFxtoHe8HYe4GpBER0tELsNmu87r9qJRFg2vk2Q4HAJXjeAxgY06XX1C4E2R
AAA6qGFpInACCpgQX5DWeZM086xJ4f0EOHxohV3ktA3IA8MYQB/rppjUiEKg
i5xGGyQZfIPQlS6Kd9A+rZdAmkmaAcGivJa3g3QllBdQf7HGLQHKCfLoZD5K
rudF7WaSwq9NDZMbAzpOq3yxRWK8hm63gxRhGUlalQpUg1wMYzREy+EHCP64
PTTxaT4D9gXnSwJ5ukZBCEj6iprxAka8dafXOGoOPBB0nhGgpj/lY91A4K8O
cMwfr1699M9/xOe38JUX4YdwS6Fz4Mp5TSM+q2UBHC2c2xcgbzV8NZGj+IyT
g5ll6RJAE8hsugRBOwV2BlYlW5aNy00TjmSEPfKf0HibjvFU9BTqcpmnKNOQ
6IK7iA9MyktQcaLdQoPNoimAwsIR7DqR9HaO+z8hyCpuaN/n5W1aNLAviwVs
NhwNQA/vkt93HCruCmcLYgugAjxUOjOAm7KR44PZYruCKBI/8v19B+/zD9ly
vYB1SkNpptuwWJS3xNilS4DPBi8fXJ9VndFRpOUK17nGwTMAZ5Cs4Ohwmqqv
gM+AntIaZyX0jgjG625oy5hUYhv8SdPHLkD2SjOmwyVBmXVqqJuvEGB52IAb
gXAER0DZuEgm/QM8ifZDGo46hENiSIF1wh6X6QzYIwIO3hqEG1g7TAVY5Ibu
BsxuWtyAnI1CxyBF9RacZkUvsrouJ0UYYwH82HCynXBH73I8NMQMIAHQAbTn
Ci0YkrQjmB/fF16Gu8e8hAYPAMGMjqRO13mFXJ7Cnn4ECyrXKAyUxN5m2ovM
IpzJgJaxcxoqdcgFqe3cYBduihntJwwsKA740c1NRhSgqhWCM9wrvKJ1vcF5
AvQArN1kIF0WWRXgHiGmDgcVwKkDRbWhYUJWqC6MqE96dycS78ePEaBV+Tqn
tQF85QS7MC8lQdDpDbGCdOVRfYTaRr7rhPuxl3WJzBdfMdjXcQVyCG76KEEU
CbJRYTwh3aYayQpw+HyZFHOsmPbebCqCdB2ENkahvfhTPh0lP+R4KFXOkxIY
Re7+t+mL7B0DBe8SzMZt/5TAFNZVydn0fpABOgEBERFHVSJtLytBDZPNIqtg
EbT3diCGuek76PIykv648zyrYQJMwfj2KPpMq82K9LnYNMzrTEDJ3VSirTRB
a3Wxel9UJXGfgFn6aG5EaIumTr8nIRL4lZpOBUe+2jb5Mt3//vXVQarCAnT+
HQpK0CvwVEEYB3CZ5IAdpkki9A/3FDDmpGEwrjfrNfFCAMRAdABTzmjWAA/p
JKtzpGwvoRkMvMjp7gaihBxTNiEomxIjAbTAvoMdS3uGzJDO3VSAKYlTwLMh
mMWF2UX1N6VBIsk41d67yV2u3GEPaMTABOGfqOuBA4XNXhX1UgA0Gy+I/gCO
IxDhnrd00rK4VZ4Di8qoZVJt1005q7L1HGdnmhS+U/W83Cym2C3ST5aXGP23
T5ghMcyXF0cf6JJGyd2dzLqGmx94NV2KyE58A3uWSlOCTUfhmpaJg/IJZIAa
pgph/oCvjcR+WfOh4RUlMKUzmLFSJq/9BuH4wIahLgZ3EKQqer0U3L+KThGQ
M5wVTazK6zWSH50bTBxxHgIAUaP2V1eINbqTqpn3oGWAcAr0DjeFxgaCuk3n
xWyOYxWIjJiFZOmd79Y1Mg2wG69FPZO+YGUWIhKybcCYPBps0Cs8zZpYDORm
ALQX+B+YYU2TCtgBYBmglW8NLIMQxY3CMDHaxgLXRFDC9ZnKScFa4K7nRq3o
QOcZUPglsmo03GZcb2H6xHcKayv8j4hWSFOE0/0xe59dARCtm/TVGJVo6ctS
9ncfed0DJjWo4wWAgykALpugOufbYoUIXz56k69hNw0k9pF91k+fnuCnmV4a
WkieTeYOqgUVjDfFosGN6+W+ubfjpw+F5vWy4tQIldPSqFjBKhFVIvqBFRfd
e0egSm8CWVaMAFv4HAECJsBj/nTNaGRawuYjxcUjBlK42hp/fgNUEXb+u1KZ
TeLeCewEIITKKczTQliTJZtTb4mtIHXkGFj7CeEQ4B4IP5EQnbxCXhXvBGt2
h1d5w/honW1ReUhd4W+aM9554MpXMLF/h3/JHcmhe8As/LqCE833nqV7Ly7P
v335w8MnRVEW9R9fb/cG3GiTF1N4T//2TmenF8Wfqn84/kd9XeZLe//V40cn
x4OUX9S3aG/gN3unE7ioKA6+utIP61vYlBrgBQc/Hh2NTvaSjzw9ZlyUY50T
XaB5MlsBsDYHRqYWyZHfFIyAxgBRj0821YKhXS5Zlh49BD6uISI2LZfpmOGX
HqFihphl+BwXS5Ig8MMT1Czi6SJzicLEinWYzOHDC9ENbxU98a2UWWlP903q
5MlwDILSi9MzVTsDxgOiPGWu04RZmubhh8OHPEnactNMC+b1vCncLRZzditi
7+5eX7z8+JE7NBQF87VuheNWLEabRCYkugpydgTEE6Vx7W9vNnDtVInLsNzg
3rBAC4QdmRK7DiAaf6Gi8Kv3yM/nt20edlPLclHgBwCm1nuIwKscbYooN+Jb
Us2IpgL1KsmLsjZ+TfAs88OiD/CDEP//SdkaoeTfNrC/C/yGZEYZNg+sXEpq
J9W3VMzb27A/Cxv/Cyz+ebbNka+NJAEkCm2kP+gICNbNgFlpZtvsADdjNsY4
Tme/zlGK4FfASxwAKdVmNXP2gK+NRsEOMqI0/m5IRKouhcvZAD6fF8AHoJSS
M/cH8ECMOLL58bZ5eTgDREDkKlDqvUFrm7A9GsYqkNmDcwFwv2go3TLSPyE6
QwxpI4yOe26yTwAZXI4Obc9gSVtAJ9tlPRDCkJH47jQpIHXWqCtAMTRoyemc
RTpiPpIvYHttxJTiepCKELv2AS6GTWqVo8BPoFwzSPUPx9fW9DgkU+gdZiZP
+SFk3oFIEgB1dWe6qnA6YXbo45Lrpc3j1dIYLIAjQC6Be2zg/4lDmsNN4zO2
gQsmlu4aMeem8h7CFb0pRPY7bfFZ9EjZsosP8I6m4WSmdP/64uKA2qmmcYI6
YDyXtIJLnFf0kv8c4L7Os7UwhcSPtD/DFXBrf4mwk1WARpg4IKjVrE73gbod
BHHuFEFiWgAHvgEcJ+InP8/Wa5YQg6qUphZ+8qyWyFbU4Voi7UNeRp8Lm8ff
6k9esOtKdEp8GZepcAUTuH5VlrRUhcRJAqYvUeDSe6Zsa5rN8IibAHbF6n1W
k3qJmOeaiAH2Q6wKdYaIRHsa4CMiIiULVbAxnVEIsisBGaYRm2VoViHKFelb
xDUHVERAUE+BeOU7FSRNvN0pXH62TMnqyCy8YSGNO+KL+dMcJS1laTPUmjpM
DmOgbEPnG3GVwAaQyCxMXsDvmdyIVcsUrTJWrjiGJASmWsXKo2n4+twmSHdN
lD99Omv5ENUWHSp5dn7+XBRYyA+hBkc4DeLYRT8OnxqOBkqYLwBPuJ2gpiI3
XKn/GxlmSJJm+eHV1cUB7w0IKHUkoOz65kf8BsZ2opWXp2i3+GiJWRCBhQ5l
kX8IpHazUjGYb1ZXTRBAY9vyEthGmop7IYmB0tgZ5KseACuxQQa+qGIa6QAF
J6+DeQSjloa7O/iQfziq9+nzDhpAoGKs/SHhwo2MBvg0GDKBFap74HhVevsB
Ouahjnbr5VvWVE5KOEeEoKAigZMtK2IX3q4Qban0c8+1IWFMV8ndC0SKoHqe
NZkD//R5tpptUE7bR2hWsfLx0SEyD0Cbl8gnspLKjoDgPtxxs0/hyY5LUe8i
XD/AuenlcLcUxTC4GQ9+bL9Gvq9XwCTAwGvAj/EPOBJR6QQtO2FVNLHM6LoR
i7Y2DS3psKeszyUESRowNIIRcl3lt6gEQYc0wQyrndqsAbRECk8Az7J0q+0N
3KJiXJA1Fe7eGa4EFzAg4NFVjBju9cjQrJXJHVF+c4dCBLkhp0/8C3UhrLrV
58qOI7Xh0dgY0EVbeMJOHKCZqDYF5KipqFOICE2AIbUFMIe2YitrUOWxwSpq
CXIHXQmaOqwSUYSBnsmL+/loNhqgafInr8+BjmQGuM0Hsr1whxl8MzkQtpEi
l9PGiYAEp6yaq/N1VrGt76YCEdmpxXU/pgSbtNHIuxLHl6XTYpYH4YrHiUzL
HUsEYxHkcZHGo007ZUVkQ3Qdrd+mv2hRPRmFCB9LJgNiiuJbF8TsqnuqfDTu
PuM+VN7VgjuWmfF0kH1gEZ33++6uZa4n4eO7gm4ea2LgUKUzFkKNlKAELCbg
XGQMkNzxpIIetcptKqusqspb0s5GVJyksn7qgjO8IQ3UsFzZvqO2ckXaCGir
k+lXAdfMgIl71WKrbIAwWa+I9ccNfmEW0Y6ZimGRp8GrYomBnR7ZSBPJsd+R
wS09+qTRa5Reo3ViCVwukJBBJGEHfXSOuJJUQ8zMkyqXrULB10AmgEt5D72V
m/pefwfAodYrUoGNKbhV3EabKB0pIms5zSD+KwqwTqgdAoLYJxWzR6Z4coqA
y75hdT4rvNR4z+YExqOIJGs0T3klWXKK2hp22yKSUBE+VB4VuI6C5k6NTJmF
a8po4wl1Zvi+EduhJ7QkrNJaiH0Rs6gNiMtxS3SMNkwQ8DFQllsgH/MgN4zz
wJ6JUUh0ONctE4D0wIZLJo3GubTcRngM0T2oV0OwIQpWeZMvUXvg/TBeo+Q2
3ahvROywYOxb76wilTfiKL2eQfoMHgkmhzGdQ1VgpiLpwHsuwDXMVhP2bXCu
C+pLAywMnxGLK40/C8ZzfgFqOJ4iqK8mjUnhI7zmX8CGLNiggmbUMcwmh9O0
G4D9+b16Iyu/+6Jy331EKVNsw7t1brhFoulBPhOpHMoT8B/BzKaC2QgGtjvU
Mp/L/o9SOa+wgCASFKveI4O9z931vkH3LzbIwiWfwXWuVkEzG22rf/Blna7L
RTEh3yLlvfXsqV8hbVEPCCD8GXF67PYAuCgHwXoAny7QKsi4X6x7E3FTZhWG
HQpDZLFabxrhGfHukQ4DEeZWVrtzD0h9BJLFxIgRLhyZvnmeLch8xxbsTa33
ptcFxxnK6+i85ByJr6/4xraRiFxhnhEMwteXTOwt1KD66TXgvQc3WbHYsS44
Cza3EI4B1pGNjKy+dEhNFWA6WTIkjol43GYV3ubNCkgXK7n7cM3O8YkFkm7E
LgT8Kcm00o8DoJaRlU5cYKqLhoIElbFb100/POI471blLWwncnAEWkiB0MAS
/GyCV0jR6HzVEGwQi2dI27DtaTxgO5YCAoqsTh25RpsETIbOsXrPC7zx3pij
tP+o3Ph0LAjh8bHtBGjygppyvIEo9QPgCszzRiBYbhC6YAmLEhj0KXokEYcN
gkc2JotlBOhNe2OcE8GarQdiJRMkeM9kAbfISTC2xxmQR5QpksQgJ12JWBAZ
qA5wKerb4W+e8uFRqEWwZeJkxouinpM905i/tDLtY7RSWB3zdgPBOTV78mTo
EiZhB+iCsjDI5VNlBztSucZgjLLPagpSQaMY1SE5ngTqifFDPwmCaHQ5RDhj
O1fe3I/oiYuV+A+M8tsydCPrBvQWZKe9F2+vrvcG/N/05Sv6+83FP769fHNx
jn9f/XD6/Ln9kUiLqx9evX1+Hv4KX569evHi4uU5fwxP0+hRsvfi9F/22OSw
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
EOBiqJQ4JfxmIMRb/XNauJywYeTfIlSvjgGbZh3uI82KQIzwON4+XbieZriw
5jZjmgZ5Ha5lun9LDpfmm8gDlOWiNuDKV4R/NZyRXCbmxOO2PCrI+asgf6E2
eWT9KPxc/ed//J/NfV3zPkP/7Fmq+Cil9R9IBA7OMmkt9Ou0H1elD9JdqCpJ
dn3yNdJIffaCKcI9jb99+/L8+UW7fbJrXO3fnnZH6H4gY3S+4ZCfaFfc+cqu
dBGxzK77AscCviCeU3+z+6eE7KVFWKV3XwTXSjWkCMILkZh4o1rhJe3wbvO0
FHG27W95d9dK6aUBb+Hdj/5dxy8zOV0sPGQPvNc02pLVt4jieFCi5J9rdXWo
BwEDq14lk678aM4cXSOJMkWdzZc4LrIf4wqVL3Q7JwyMbt+c3MXJ3IziQAao
N+pOPEtRHMUbGhjNWINgohSiYVQwKRPOW+50Rez8wvojUoky78gcOb0AMb1W
ClVPyrXQ37YZbZRcmS4kKEiCnxYZLOUcOtGqseXLmffbpmlHuVFIGCU/AN17
j8oDtSmOa/aJuGHxLz55sum0/H3R8ieDo8gNvEN7dspeBPdcvKfYW6neB1kq
m8e+2pR3QfXGjXKobLqj8RPMQKQbTcEfokBO0wtrhD3oJSJTP6H2GcqaxG3f
3elnGJsanP4GgfxRY1jsploxH2X61HxFtyWEkrY9sFFmD1PZ6bfCfoHhBv/r
b34T5Lwh//mvPA/h10Ztz3rYcskIEuXKi+npXzoIYwFnBXXyY7+Haf5hkq8b
0ULRhG7RgRpTGiG7t9iyrmIaiUMRASc2IIIy1e76Zgf9Zmjn39bWDShlJrmc
mbOIyzMzFFzCYllQZodBzx0NY9AIN8RQ398vm7yI9arziF3gABhohX39Cn39
CpiqlY/DbOhtYFLdBoe29phkTKAn9XdsnkGzTnff63C2pcYGaw8WGsIGjYSI
4Se/9vMJPeA9IQM6+oFaADFlKkpf4p8HDN9AL+nNR9NdWJyuGa4orhVZJjcS
J3cBupFxBpJuE3ExlCYc/iEMWM0+3gCoM47BYU2qi5hhl7+1qPRP3aKm6R7H
QgNqdYjHfIOJXhC2Ixp4w6oZjlFQ23dQ2eeTDDezaIJ/hTKJ5oZOw8FqXqIc
lL8nDZ7OgeflZyJ6D0rqw/56sw06axDRZT0H9xG8dYloRj3KtTD8KgsPgeAI
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

-->

</rfc>
