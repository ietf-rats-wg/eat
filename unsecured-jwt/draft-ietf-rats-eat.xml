<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.3.6) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.25.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2025" month="April" day="09"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 175?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 185?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>.
To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set either includes a received nonce or uses some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they do not provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST NOT</bcp14> change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that does not require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given product and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that do not meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform <xref target="GP-Example"/> and those based on Common Criteria <xref target="CC-Example"/>.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, and multiple
security-oriented subsystems like a TEE and a Secure Element. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions versus CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, does not require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
If detached Claims-Sets are modified in transit then validation can fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide metadata about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.
The "intuse" claim provides an indication to an EAT consumer about the intended usage of the token.
This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
The possible values are in the EAT Intended Use Registry defined in <xref target="int-use-registry"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and does not have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE does not require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document does not have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers do not support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they do not have to be standards track and do not have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
It may be an Unsecured JWT as described in Section 6 of <xref target="RFC7519"/>.</t>
          <t>It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT to provide an algorithm negotiation mechanism.</t>
          <t>If not, the profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it does not understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON cannot (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but does not define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic cannot be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = JC< text, int>

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens from a particular entity will be
able to know the tokens are from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it does not say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
a claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="int-use-registry">
        <name>Intended Use Registry</name>
        <t>IANA is requested to create a new registry titled "Entity Attestation Token (EAT) Intended Uses" in a new registry group called "Remote Attestation Procedures (RATS)."
The registry uses the "Expert Review" registration procedure <xref target="RFC8126"/>.</t>
        <t>Guidelines for experts:</t>
        <ul spacing="normal">
          <li>
            <t>Each intended use should be clearly described so a user of it can know what it means.</t>
          </li>
          <li>
            <t>Each intended use should be distinct from others that are registered.</t>
          </li>
          <li>
            <t>Point squatting is discouraged.</t>
          </li>
        </ul>
        <t>The three columns for the registry are:</t>
        <dl>
          <dt>Integer:</dt>
          <dd>
            <t>This is a unique integer used to identify the intended use in CBOR-encoded tokens.</t>
          </dd>
          <dt>Name:</dt>
          <dd>
            <t>This is unique short descriptive string that is used to identify the use in JSON-encoded tokens.</t>
          </dd>
          <dt>Description:</dt>
          <dd>
            <t>This is a text paragraph or more that sufficiently defines what the intended use means. It may also be a reference to another document.</t>
          </dd>
        </dl>
        <t>The following 5 values represent the initial content of the registry.  Note that 0 will be marked as "reserved" for the CBOR value, and the maximum CBOR value for assignment is 255.</t>
        <dl>
          <dt>1 -- Generic:</dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>2-- Registration:</dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>3 -- Provisioning:</dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>4 -- Certificate Issuance:</dt>
          <dd>
            <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>5 -- Proof-of-Possession:</dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>
    <references anchor="sec-combined-references">
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:.plus,.cat, and.det for the construction of constants;.abnf/.abnfb for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and.feature for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="3" month="March" year="2025"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The TLSA selectors
   registry defined in RFC 6698 is extended to include CBOR
   certificates.  The document also specifies C509 Certificate Signing
   Requests, C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-13"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   This document defines the Unprotected CWT Claims Set (UCCS), a data
   format for representing a CBOR Web Token (CWT) Claims Set without
   protecting it by a signature, message authentication code (MAC), or
   encryption.  UCCS enables the use of CWT claims in environments where
   protection is provided by other means, such as secure communication
   channels or trusted execution environments.  This specification
   defines a CBOR tag for UCCS and describes the UCCS format, its
   encoding, and processing considerations, and discusses security
   implications of using unprotected claims sets.


   // (This editors' note will be removed by the RFC editor:) The
   // present revision (–12) contains remaining document changes based
   // on feedback from the IESG evaluation and has been submitted as
   // input to IETF 121.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-12"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="3" month="November" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-12"/>
        </reference>
        <reference anchor="CC-Example" target="https://commoncriteriaportal.org/nfs/ccpfiles/files/ppfiles/pp0117V2b_pdf.pdf">
          <front>
            <title>Secure Sub-System in System-on-Chip (3S in SoC) Protection Profile</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="GP-Example" target="https://globalplatform.org/wp-content/uploads/2021/01/GP_TEECertificationProcess_v2.0_PublicRelease.pdf">
          <front>
            <title>GlobalPlatform Technology TEE Certification Process</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <?line 2603?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'ab86f765643aabfd09c84eebe150b7f6  /
    /                1bc24804cee75e90c5f99cb850fe808f' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A70A4C351574496125
      4B41A6CF9C02190100500198F50A4FF6C05861C8
      860D13A638EA19010219FAF2190106F519010703
      1901048263332E310119010AA163544545822F58
      20AB86F765643AABFD09C84EEBE150B7F61BC248
      04CEE75E90C5F99CB850FE808F58408469C5F3AC
      750981BABE6525ED750F38B4A9EE6656A7E70815
      B34D0B1014E7143CEDAF81F8198EF978BCC35581
      C675A1D4116FDFBC1D1D1258612B255F4692A4',
    {
       / A CBOR-encoded, byte-string wrapped EAT claims-set. /
       / It contains claims for simple TEE attestation.      /
       "TEE" : h'a40a5048df7b172d70b5a18935d0460a73dd7119
                 0106f51901070219011081821901025858a60064
                 336132340c01016b41636d6520544545204f530d
                 65332e312e340282a2181f6b41636d6520544545
                 204f53182101a2181f6b41636d6520544545204f
                 5318210206a111a118186e61636d655f7465655f
                 332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,    /
/ which is the hash of a Claims-Set conveyed outside this token./
/ Other than that is is the other example of a token from an    /
/ attestation HW block.                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'ab86f765643aabfd09c8
                                             4eebe150b7f61bc24804
                                             cee75e90c5f99cb850fe
                                             808f'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common computing platforms.
In particular, hardware randomness sources were introduced in CPUs between 2010 and 2015.
Operating systems and cryptographic libraries make use of this hardware.
Consequently, there is little need for protocols to construct random numbers from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored, protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> does not.
Vice versa, EAT does not define a device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the relying party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus cannot be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; See also draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registry exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology-neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-to-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-30">
        <name>From draft-ietf-rats-eat-30</name>
        <ul spacing="normal">
          <li>
            <t>Minor typo fixes</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3598?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3Pb2JUo+p2/AledqkgJST3ttjWnO1FLard6/BpLTs+c
Pn17QBIkEZMEBwAtK4rnt5zfcn/ZXe+9NgDKSjJzq27Vcc2kRWBjP9de78dg
MOh9PE2Oe706rxfZaXIzz5LLFfy4S87qOqvqtM6LVXJTfMhWye7l2c1eLx2N
ygw+gh+9STFepUv4blKm03qQZ/V0UKZ1NcjSerBIsYPeOK1Pk6qe9HrjYlVl
q2pTnSZ1ucl6VV1m6fI0ubq8+b6Xr0t6XNVHBwfPD456Kbw8Ta6z8aaE6fRu
Z6fJu7Ob696HW+gun63y1SxJ3RzHo6Ls9db5aS9J6mJ8mvz2Lqt+yz8m2bqe
w5MT/F0VJQw8rUKL6m4ZPxgXy3U6rl2LzSg8WxX4qJyOs0lV3+G2cTP4l27q
eVGe9gZJvoL+Xg6Tl5vVZLRIJxl8wnv1Mt2U2WqcRa+KchYWi8dQlHfJy5fn
8CpbpvniNFnMFn+spEFN74cwJR3pxTB5la4md+nSxnmRl/lknpbuBY3yKpvk
cDQfkvfXZ6H7mbQeLrn1H2f43A/x4zB589uLYlXM5puwmh+zMlvexW9omH/Z
pAv4epncZOP5qlgUszyrkqvVeIj7CSeQwV4eff08+T4tV3B2xWY2T94V6QT3
H9Z46l/QmUxwUe8PT5KvX17Tg82qLqHd+1VeZ5PknwEiJgUucz0vVtD29ycn
yeHRk6Pk+Onx4bPnYa1/LiY02T/+R50P/0Pm6Zd6Pkx+SheLdBzWeZ6WC/eQ
lvgORv0BZjFJrotpfQsQ29cFykhj+OqPZTaZY6tKGtFIeBvqMh9taoYXHuWH
bPUh+S4vP8yLxV90mO/LdLOaF9OsTK6vbuCpXsHWCxl1Dr0MR9LLH6u8Hk6t
5RDATUe7mRfLtEq+L6oK7pAOd1Yuk5f5Evc0dFlT0+GUm/4xLXW/uKdX+WyT
LZLvYH/gQmZlUblX43kK797hf0vYhJWBO0BatgB4s+1LfirKD1UYdTkuf49I
5Y+VNh2OU+v5bQobOAY4hqmWt/mfP4Qx03qew8q+K3G+5STsb7paARTeVGPc
jFU+e3DRc2o9rK11a91v080iOS+L20V21+utinIJu/MxQxz07vvzr58cPpE/
nz0/eX7KOIpfAVyGVs+11dET+/P4uTZ49vTwAL6dTBby+2t7dfz82VP58/mB
9fgcEKj+efj0CX+7Xmwqfnby9OSZvD55cvi1tjx+fmx/Hp+c9uDvn15cPzvB
h4BF03KGN3ZnXtfr6nR/P0vLej7IV9NiuJqlw2W+2F/P1/uT4na1gFs8hB9/
mOaL7JtxUZSTwe2senayw10xrfnpzbuXF8mLyzcXlzdX58n1v13fXL5KDp8/
O+knr1+cDa9vXl8MDw6On/56ODwYHvxKk6EOFMvi3wM+v9dEBNJF8iIrqjX8
SBeDq1WdLRb5jJDtGf7nLtmFnvfowwngQEBAB4cng4OvBwfPcL1XZ6/Phuc/
3QzPF2m+BERAD8a3tb38sfnyz+7l+Zvry+HZYlYAjp6Hz4sqwyY3c8B5L96+
HV69uryKN1X3dA2kKV0Mj2fr9RCWtT/Jqg91sV4Wkw3cq/3rdTbOp/mY1tr4
eZHVALPVMK3Wn/5Q+TdXk2++Pnrud/64nMA+rbKSKedbOEn4Uc3zdfK2LP6c
jet/YqwNPSySaJjkBeDjdXJewGV9ndW3cF8TuJvQvFzmsP/VPyWvN8tRVgIy
7ifpZFJmVUWkGhrlkwx4C+1q21Eewx7FJ/Qct+/i5Zuz7l2bLYpRCvCd1lO4
gLRxt+sB4lcYbn+zRnCs9qGfJ/uHR/sv3p7/epHPctjolxnwD+Wb6dl6XRYf
08WvHxHS1pOp3yxpm3DjpJgm2txN8nXxMcNV42yf9HC6by9fbznjbDXM01VK
84Qf+2+zFfS4kF0ZrtNZ5sd/W+YfYQxky7JyXeZVJjuc7MIYe0CE/mODfJYC
IeKYQZ3OKrjBPbyeMU56dnhkGOPJU8UYJ4ieFHkcP6fLD2Sonk/SO2AE0/GH
Uz8nfYUMGLzrXCcs8zb/kK+R2+AzgV/7+uWv/OXQ7eEUoIcuytXl5eXw2cHR
8PDsHez/m6vh4cHw8PDg+T6+ub65GMIuPxs+Ozk6/vr5CeGp4/MhXPyXyPbh
3+8uzwezDHgO3tPB2durAXxzfHhwRO3fvL8avtgAOEaroieLHAkE7FryHnYa
TvvyE4DRBCg9sBmw08mVADEewOX7q71+8qacpav8L4KBFnddLd9QS7wE58hH
ru6Sq4tk9/zqwiOjs80M+F+Eoa87txRY3dUEaegwz7KMNlWhfJIu9/HhwNqE
1vu32Qjw8nizhJbVfo0sB+DHaj/b5ATtsiMvi+LDZh1tCW44QNgsB4aN7/8Z
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
pEMHjB1z9COiTZSPKhdaIexp4VASOkygbg8NEiE6VnJLwDZjpgb28W24Judi
NRMpPlKBvCYfDD5A9ncn+7uYUWvx0lCXfAfSOTs3cGBs7U5Fw8fVjYOdEEhH
od0JPDfibpyzXNsZBNvHDVnKA+qPrrrob5+2XBdgyn59gVXhlblLEcxrldKF
n1AQQoCLoVJClfCbvlBt9dFp4HLChpGPC4FhcGJUn4Gb6D7SrAjECI/j7dOF
62mGC2uuM6ZikNfhWia7t+R0af6JPEBRLCoDrmxF+FcjGsltYk7MbcOrghzA
cvIZapJHVoeqv84DPfM2Q/fsXKroKKHl70kMDk6y11jnN0k3qkr2k22Yqtfb
9sk3SCL12SsmCA80/u7964uXl832vW3jav/2tD1C+wMZo/UNB/1Eu+KOV3al
jYdldu0XOBawBfGcups9PCVkKy3GKrn/KnhXqtlE8F2IxcQL1QgwaQZ4m7Ol
iLFNl8v7+0ZWNQ15C+9+9O9arpm9s8XCA3bfO06j5VjdiyiSByVJ/rlWx4aq
HxCw6lNS6cqP5ozPFVIoU9DZfInhImsxrlDZQrdzwr/o9s3JY5yMyygGpIB5
o+7EuRTFULyggc+MNQcmQiEWRsWS8uC85U5HxK4urDciVSizjsyQ0wsQzysl
UNW4WAv5bRrNhr1r04EExUhw1SLzpJxDK141tnM5Y37TEO0IN8oIw94PQPY+
otJALYijij0gpiz2xSdPFpyGyy9iMxkcRW1gHZqzU+4ieOjiPcXeCvU1SBPZ
PHbXpswLqi+ulUFlQx2N38MUUbrRFP8hiuMkubRG2INeIlJ5E2afoYxJzPb9
vX6G0anB768fqB81hsVuyhWzUaZHzVZ0W0IwadMJG2X1MJWtXirsGhhu8L//
5jdBzBvwn//O8xB2bdh0roctl5wgUbrCmJz+rYMwFnA2Tyc+djuZZp/G2boW
7RNN6BZ9qDHnFHJ7izvWUUwiaSii38QFRFCmWl3fbK/b6Ox825o6ASXMJI8z
bxYxeWZ0gkuYL3PK7dDvuKNhDBphSvz0w/2ygYs4ryqLuAWOgYFW2Nev0Nev
gKkaGTnMYt4EJtVpcHBrhynG5HlSe8dmGTTntPe9CmdbaHSw9mDRIWzI6BEx
/OLXfj6hB7wnZC5HV1ALIaZcRclr/HOP4RvoJb35bKoLi9Q1gxVFtiLL5Ebi
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
rl5ql95pdBUumVFnnvuORSh5uVVDil+EpJ2xdc4tykl57sD4Y0o/rHjmbpWe
v6OY7e5g6xTAgnHNe7bynhSH4ZtLag5MUPqklTbkCVkCTZJRiaUClSIDBchD
Ns/V1v3rNZwqVMSXKJNI6SFnAjJG5qBqFrE68BSIbQrrupoTqNmXxZwOURFd
yQpyL3SJsNViPISnp9M6hbvVEq5QrhpnX9Nzi9NWRPs0dxnBARri3cga+Zmq
dCM5HVOkhtagxMuPNwL2r4USNr1kQLzknJNwdEGvWUXOwFp7VGAGGQ9KRUq4
N/UxCsGfiZWgPrZSpd0t0MEyWy6vgnKOqJam7kdyL061RUjfpLmz2s0oK+f5
+3UpA60dc4Hkea6Ki3upwFV6qZY/SrZWD5OHYpqR0rjSVjpPnPU7flaJ262U
SuklnpQddRiVa8zx/UMFtlX4XqcOm/F1kaNEsnLRO0Z4QOZbroXgvKblvhHy
cCY3BczD9pxiBPqui4SsRcetHmE0WTG24B0DTwTfy+mQYQJayiCgZw1FF90Q
pC8W2ClkDEJfWc+0N01/LhimOdkenwBRTa1NIXXRURQz9Xtq7Scy6lFtKNo9
XCFnTWjZYJS99LaKzmQMOrujCOFKR1Kl09uxTkB9D8Wa1NWgq6Ek15sitPiZ
qUlEjM8j6wMxapNJzdWOExd2eq5qY2rvI6oaT5D+uzuj+S1CKkTh1D61g3yL
QcqQnAlT0ymMoci2AuzqDdziRe68ijbNQLbpcJFnze68gnEwh5mQn+uKSvA4
dp50q4YDqAT3mDOfGw77IryDFtUgsAcEYezoTmVc3DAj6qMbqkOu1AHsQcsz
EBwSeunsnVaLTUvtooLZxJZPm9x2Ephe6BxWVgzFZmM+JUsUy8U0eeadLXwg
SQjtjtZSTDrxZBPhTjrHrDO6DxSNcnc9Izds4RIoBoDQF8zXU3yl0E/1wHBm
ao8r6GgvbZvdtFHmkKcpDNe+iHKNgXe1jEl8GtR23z/B3YZmEKGpVPw2Of2c
VRc2YoUcSw8BMF3NPaWZlSI1cVvGZlKEiSsR2xtsUxheUFj/J+GSMGTTzQwT
V8PdFGQ1DDlEpYmQR01wl66u9YbIzTtvINjGejIj7ZRmRtj4xkoyY10lxlI9
MwHO1y9Fl8AKTWonTd0dVZOkro150+NQ9JJjWFGrN9W/FmwrsYOa0tc5hUoi
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
xc5ys6r2GYdBmiV27fUuk04z0xxr3Qknk7yfeydZU0xSOuPIOef6K/37SzoC
N3VyGU6MLOg200iOmJ5BtMlheiADeamVj+tEItpXm0s9bdzmyXGZVv30U+tV
dmue57emdfX0qW6AVHV5iByc0E15M6YnMvHuBjbcXi12erMRuaZ6i4V/NJ/v
pOzCDn3AdxWYuK64keM7Z2zuP+QgOf+QOnYpAGNx3S3cqR3Uz64PX133zsKr
y2fhvP85vvjUuL6qni+evb7+vN876u1PX1/8dP5x0Lt89uMxffPp06/P3nzw
DvvPxsu7Z28Oj/b3P+/v31y8770ZHsDfh1fTl7+9+HS4D7//NL88uTi9uOy/
CK6umsPy249n563Vl9Nno3797aeLD97rsPHzp8nP5Z+abxbPFj+d9vsfO88/
XV6t3r15Hb65u311/L5enj7/6aT+c3f84gsMdZZM98Pyy5vFj6e/vbotv7ud
ffDKrfbg5vnk03q4in7rvT5oBEnrY2/VPhmcva3/evt88uV4/euz8W3UCKLk
qa7cL2blXsSz9RdfNmDjwuv3+YVfD6R+4vPMij+/PE8teHT3vBr93Itfxc9/
ehu8iV/0n18Png3x7+OL346Dk/h5twIPLYb1l/TQi4uj6ujZ299GH7xnb++O
49s4vDyqHn+afzn5dPHl5Ldh9dXBuwY0M4l+hGanzWDw7DY5nh4F7/vHreP4
ODmenQTvYvwdmv7gXX26bcyOXl6/WDy/WL/++ebl699+Cp69/HR99/zX2s3l
z1dBI2j9/FPy2+2bHffopoLnqcKgObNp2BC4rcdDKkcjnxe4AOHbsjjz2BMn
6CbG0XvYPzjr2WKjBeAfVGM11xA7qxwfnWNscZ1xJtSdQ/RZntv8P67etTbB
kwghNeAKtiR1RBRRGA8uRbApv81rBbt+0NkVorh+1AuqQa316D6Yh8e5YpOJ
OgK+frv/xWi6WCFCa74BiTOCAbSqvUb/oN3d77YaBwcHGErfx1D6PobSB91q
UK02q1W9r3Q7R0144eio1SeXVh9dWgdBvdeqdw579Hgt6B715PGjGn3UOmrS
v+1qnf5tdGotUDprh3WYvp28kykro4NR7deOmoeNNkZZHbV6tWq/02sEzfZ+
s92qH/Ubzf3DdlN1526vWae0/WbQbrc6/VrQOzra7zSavWart99stg/h9W5b
VeVeFTTndr0b1Br1Xrvbb7Q7zVbtAF5vBbXDWrfWb9VqQUsNCL39Wr3e7rQf
3bPmdiqmujmu9S/+nu/mzqbgEgtAPQUnFYEd80BKJetP4tOScSNTrolL3UTU
rA2a5tKwSunXSS1lRW+CiYUTrYWKEcCiaTpoQBY7itVg9Q9zHWOW0E532PI4
ikZydqTasTSrWTIVruqLtbJRN1aBn8W9y3rPTZKNA1Gl5dJW1+tEGQvBIJF4
zL1a8c4kCjpy9nCI2U3MPmTAJm/AoBull5QDCbgPgeQsLIJtqzxznTzQMyc8
qvVsJVkG94AeFTa6Cq/IiNyq1nb/pqFmR/EykUhtyzAZSs9oWu6Fgz3vuFJq
FMbUHERcw+LUU6xsHqJeU6J4eovs5KSKGWgnbcEMVhbRVMrmfCNObqMbAazq
jlvN20Rvah35LystzsKMmupOWzgyQk5ORdZoC1/Nb/QjweaNzpGyskarfvio
lHrKcenfx/9ybznZQu7nxkGf+Vgyf1KfVTk9M9Ac0NSXBGKTmo7v89phLlD2
C/wpB61S4Rdo0Rh0WuN2q9lq1MNwMB5Vu8NOI4oGUdCsDtrjll/8IqzhAI2t
1cYwitrNqFsdNsfd7nDQaVbHUafaGT/KvfhL6pNvzl/ffMP9Dzr1A+DGDeDO
JCZ7uOStXhslVr0JQqDR6AKnVstLY78R9Fr9o26/WrOCK79j8nix4MpLLHk8
L7jok14vaNUZEqZTA1Glrdeqvf1O64hXs9fbPzqodvudxuHh/iGs5n77qBXs
92HR5PFqo38IguywW+03j7rd/j6s3dEhrB202Kh2Gq0ufF7v9eXxdrPa7QT7
vf3DVrPWPDyAv4/qnf1Gr3t42IIue+3DdrUT6Mrs1xsH1X0YcuOwHTTq/cOD
3lEngP92O4dH3XZnvw/r2eyokO+32s1eAFpz0Do6ONrvBwfwnxouXm2/1mwe
wWhqvYbE3hjdGLNaXLlWKgzBsIWPy3CsnRjPx+hQKwo9srhtmcxIektfZ4aB
hzRsVMNm9SH4tiK3Au77WPed6CCARewwRcD8mx1GJMq/mcUo2gRAlH8zHSXx
PXhDD8ELab/5NzehCWWhgormmQYP+ub5v+x5ftoXm7qimx0tEgsZcVDiHX1c
LBZSmWXQ7E10hyVO1iuCPSRliXV+bOGV63Pl7qQ59sYWpOuSQA9nOgZXzTC6
QW5BNv1skb7qcrAG7FzYGo67w2rt/6evUvoqNlGQt8qvi7nEDWa7N25Of6xo
zKkiEkf/XW4AFqb/mAuhWNx+nxHfFc4qg7+vhSKJ/X0tkHzf9pUHDf7eRnvg
vbck1Xu51PeSK2kU3HWSkr/TW4/iuW9sNFI//Rnj/ibOF3yToSrsgvq7clCS
pcvr0Lmj2fuCA9pCirXEAhIvoruEJGTiOJ3h2S7lXsB3M7m8rxOUpD++7PU1
shgziGA8O1/oZ6fyR+yjbJKw1qqMsQptVRnbFBqTTptDNCx9Xvz8ts+2qsm7
n0/Hg2l3/a52gQ83R+cfvGHt/HOjcfbz28uT6QWauX4bXT5fDWqnvx1/WrSP
Px8F759Nbo6PToJ3s5PmsH46GZwdty7vnh+eXYyOLtA0dvTBS+KL6vX+i3Pp
/PP7s9PLxt3byWk9PP/cHF6enJy+Pfrt3fTL6vzt0exl7TgY1N6/u3jWfPUy
2H/+7rLZf3n4wWuentdfxj+/rUILo7t3P+/Pw8uT3+7vO9sztFJ7WT/59eLt
Rf1N8L56enT6Oayenl9Mri+HR+8PTi5OXr4F1ely+vbN5eX1+YuL6/nbyfvL
lz9jz0F3/KZy9C754LVPy+c/XV/1PneaJ3f9V6/fTAarZ88+Hb38WB9ez673
D1+tX7Z+7c/Z9vZLRuUqIGasv3k7vzru966Op2+vR0fd9aDW/PQeZnTcf56c
na2eX140j04mzz94v5587sQvevL07O0kvHwDO9aL31yevjqbXFQHweTd6Ojt
7Zuz1XF0cPLrm/PhzenRYdyPe/hOPKi9/eCt9K3w7dufR/3jxPl29W7avRkh
gfx4eje6vEiOTW8n9cH0aCXj+uDtjy5PF4O7/TfDaffT+59PfhvUj6/Og5dx
f1b9ySXDgoP6wKTfX8qkP3gw7Xsm/fYC9u/0TXDy9uXs+vLNdPV29GwyG/14
UR88uzCT/uDhxOSt+sl57/Zl//Ynaq3//Ob9ZQAT76JJ9mr04/Pg/dntlb45
rI/W7y6DCX73wUsR32H3/Phq0e1f7Yhe9YvlhFy95yBC7uKfkkYSYrGYv+Dn
Zf6ca7704dpLUPAIZDIIB1hw9054wjCcoFNSoRMIXRnk/hRYg2SCmzdYKxqa
xuZjj+o1Vb9UA649rtnolDqBNRcRBZ1Mogq4P19oZ4oIIVU5obFIKw0QfoPj
L5WXnXIAmNeDgfbE2bCgicXoSqgcsz7AGNiIOQ/aIJpc3EqgVISYvIQeMj/4
X4I4/eg5BZ2EsHowSWJW5m9CBbFJuFwcJkwsQ6wVApz06hqkiKffk3F4LkUt
7jBxZAGflZxqx+L1nC8/03QJf9ufz0pehCuoA9YaDzfxaA3dT9hTvZ4Mkgpc
q0yZhDtg6TeRZ59E5zM7kLG0nRyIpCRFbVgK4AInsqch1UMPvel8gDFri+v5
LDLQDQni9ZtyGhEb/xK7CVx5BEcAnXpUZCOo/rsKRJjiZPQocbfernvFqWBi
tsxbMf4dCVIty4IkAVdGoD0qpTCcL0co0GKyEY7COy1vI4+U+RE7RoopkS3F
BLMwucMiI/E0vEJSR8RRPBQqg9mSNIqG4QhHiU3/ug5Hm1pHzFIhG1gCWqR4
GpNScKv3DOqJPOS021zjh4/XhMD/qc4BDJEQ32k2QbXqdpvqD7M64T3EsaN1
vSHkeYbYm93MJ1gwwpuFszn0MF9JPSOY3Z3QeQmGeAPbSI6NGYxuwuhyc8Th
oioPI28QI5bdsSBdkymPa8RRxQoNV4BjOblLYqrsY3YTv4ipHBbHkKKPYclF
JODeR+CulH9EZHP82g9HoyWCVsAYPALsprolDj3DkZhpKRXZoRUeH9qcOy2g
YJ7yCMIDOBke2wFWhSr5NzHCwlBeHKg+n+GT/ck6Ws0xkNecQK3SECcejoEU
PIwrwJ2aRFNKmIp/w4NpR431Crzf/dfRfCGRpr9LYhu6VF4zX/ndiib8VCrj
ceUw2tTX8yUdD+ejM4mEkp/fvd/Lzs9/lXM/BR+V/W0flG9gJkHVHwjN/U5U
mPqh73M/v9Opz3xkjuxuUP17UNtzZpLrpFR1O/qOTtwjQv0097QTHLvTCXbh
dvMdnWTPInXU3tOibLJjZeQzZeP6kPpsUhYtva3qD8XCbGq3H6JBYLFiik+A
haD4E3rfj5era+B0JMSRErme0lQsGJ4VakbqDuQVoPRwcgv/+vVWkws/fTZB
M0b+Loh8DdtHR8VW4+mt4J7zmYfjGfXAxLrbiCoy2YzXsyEXac5IZmbgcMxQ
FqO3FtiaiT6yWkdaYTEJYAv/qR/4ZT/6+9fy57/XHu/WZnvfnG/9DVqQPID2
nfO0ymIFlj6EIG29Ia6G+6X34/wWGWvJDJa4LElJDaJijixMsMSXU52iqX81
nszDFdW4oUJuXL2G3NDA6tVspeWr/PAmhN0gd7NdFCwnwpxMQpyotggsk9bg
wMLXX+Kp0fewRoxW49QN5f2kG6CzuLCowLVqMN8jmmZad3ziLvVDK60LbRQC
zpmEXywND2IO40O90ln/1/Yl0hL13CH73cg1/aDWKUODrDHDn92a+2et2XL+
TLPY+3jmA39693A/v+b/J3CUv5eDJv3ZkT/r/GdT/mw2mYtt5nCmoWo31VCt
m2qo0fWV527gYrah9Ihq6RE1eESmoimxu/mCD7Rb1pT24BV/gRzuBPSpEsUG
CtE8fL0YDtdL0YAJxfAuCpePEg/5gwMypxRQUvyurLqaVgFJk/EQkCoKR1pP
ie8iYUpvNa8pqCKyJRxCBfEnDc6Vl1NLHb2YVDzScFw5RH267WEFSI+6nSeR
fq34z+Q9t6s2umfJ1M5DS7AwsNSogier8pDXAC3O8UqWSUxPEQ4gVVrK1TQx
THISUUQraGTRAotczRxPNzCqG8qBohYqaH0Tddpghq1n6Dumgkiy5LqqWrWQ
pjoaxbyxS7hJQZdmk8dUJJSU/kq2eOIKmWDiVIdBLErW/YD7ors8nogJkOsJ
pdbPc0nO8CF+fBBh+0h6mHh8nRaX2W30wow8NbcU8U07d1bmAisSWY/93d3P
lMm+B2dssWe/9c9xIjx+Z5ReAZ9154RSiI4g0rtnOOeBewy+g136/zyG+cdY
Zos1N1zrRDSyv9ca+jf92bB/3ss0OxgjMJ+NEqvc/T1IN1VPNbWZbXb8aTxc
zrU9bipIN2X/tIzTbGfZ3TuXgxZKUWSlfa42W8J9EjlpgshVBZnBI6asGka4
cOw1aRpUcZnZY8Z8Q4Ex03hG5UCBgrUDPnN8gGZztx3qEJ0cNA66ieMZv+eu
nJjrnamNaYI37JgJTlJKm7EPDwFm4cJuj0HGchWy2kW8zkdeBxe5nja3Xowc
5mbACOHS6AFDXFJptswKoazSiZWkRpuykNRjsJBeGnMycSP2uXpjlDo0CddU
O5lTFWYY1cUFaDlej0+UInPYKuPAOCXL06kzvosv7UkV9War9u0bRgehQj0k
bjy8nuMFUynCMkyc7pzK42ILrIeTuYLv1oaq2N2KF2scDhYztTRGMKG8uB7u
ES44kQlSQCldNLEM1EDUvYRlB5nBHFLK8BktlsQJa7ckcdZU4HQBG0zJAyRW
rE2wZGMzudUZGg8kU42TCUACaBgYAgy/vsBtWd1G0cyvVeHahySG2dQV7xVr
FNCdXs/xu9QcYIEGy3DJdVA/Rwp+T6SpI6l4fVhWrIjJ8U+GYGDyKwTkjiTt
WDEwydyKG0ZxpNnloQVhVydWyJCpsXCKQcDcorx/K+7Shs97OZoLBij2YxD6
YRsLd8RLd8lA/9AEljFGk8piweqX3PgUypuo1Qa/4jqgpKJFozA7vvVU2JBi
H4zpTjibe1xkmJbnDkP/RiPVMr5IIV+JkyOD5wTrhJqqF849N+S7GBMrer4i
3PLFnYmrI9O4HC/XvJbInVJW3qgZWuLaHjI6UdNBPDMaZxLRKjgPiRKl0MHW
tqU1RW1BaekBibXi0WFfUVkiujXGoOTYmsWp0THfncwRSpDoCONoYvdAGG65
xdHzpZbkXA4hMIRR7F4pKWunaGRK6iV7w4SGH2P57HC2HuOGkMYudYstFq9w
tplTDhKNjZSv5N+S+ZZsh7TtsghYZ5lFVI1f3z28OH78stffI0rCS7AiiVOB
2KXwr5aUHcVdr5CnBH3Dp9HEAKAjWE+lU61Vgt6pL/kQYo9jBgsrtgsfAH8V
lVpiCp3KkUoHpkQ72VfimbBNRHxCSKBjaga4tNsnsOolDocr3MDoSs5OTqj4
K00Y1+iMwis9L9cC41rjDpI1llRMLFYeG3qeZbGQsX4thrn6Ozyql4yztIPb
bWd2DeyDh82M8IX+jvYE9GpgOVPjfSZ0LEruMa7o0E817/VcOmUgQnIBjKMZ
gg9fYSDQCh0WIWWN4Vm6NoG6w+s4uuGdJfWEm6YQaKzMLpbymLGBNPK+aPgS
S0tVcdlPPrtTI7JhyVQJHkvwXkWCI1bhaAL0ylu+Tbjkqcf4pPDggFiWUapi
PTGiUGJnOXhNTWnIJOT6I/WDHMRnbs+t1GyTHxQBzdsnqb9ahhgqhaSu+g3o
9VRTNTVQE/iUiJITpnPyTJVMur1RgSKLFiZrjmSepccKHOAll2zDMVDZJoyA
iCcktJCosJRRySk4S060B4mq4mF7TrlmHDRtmkQ73KBc5suwdQOC4qkVfzK6
GbDCK6rZTvI1ZteHdK0nB/pdGQBtMr8BgRLlJuZ75x3ilzR1u0hEXtvTPbJz
skmI1OBzhN2QzBE4dDWX8lRg73FppLgWEgqTOPJrrt9NQjWmyaNujCWLhSSv
Igp4Q0bJj0WkADmVsENTMklZouRUsvLKPV5ga5e4D1jj3esJPLipMLQNQeL4
c9xNV7PivcUxkB7MjeXW2S/caFZmeJT4Coz6x4jqSlCsKa8UJ7bmj4fDZgy/
YEaTOuEgc+dTEZJuYKCpvq1HH7pM3PcpjQIozK2pPrzG1A1uklqkYlNJJHUJ
ZiYZQlN3KzbQaUgGMEqJ6p0b17r0Reo9WV+Qh6Kza8MW87VCinWIo4w1hj3l
gtR+vFLnAYtlIKIzrs+hT3HPu1pGnhA9zWT2jKnO1LJy+7KeRgsI+AnVBBje
ZLSRM3KmcWI9qqF/NZ+PcGoht8SbqReiqUgU4+BLD2K+NDcn1tNE/LjZCEoL
znt8Nn4EZid1YxgICItQw5UR9F7cx2KNg5VW7KzEy8nl7OiYugkYUvYGtzWy
bQptCJZj9uSiA8ao8bn1DItW85xEno3LpiOzjBbLiGgxpFqdsnTUEktFcXhw
RBsfMu68qBcdCrP46AtWqI+pbjpeJWCGmIxyJwc9SbN62Er4VgYnnJBnb7T7
m+iOCruZouYykwHFS0jxvakm/wjmkiydpP9kT/WtVn0XmWRLtDMrplsLtCe2
wLmpK8fmyTGM7pquqqrm483JyS2yg7QF2B3XPUlW7bLEMSRDqhXBxSpIYmvO
O7J8jmfA2xnRzrPXZ3CL4Lx5WDPDzMyqZQlHdrZ4xWSNrOrP1zK3nRkpGBnC
QtJwiAD5l4Bu0XqN+A6Rbpossam2kUZmuCzGlsxGGh0zrAtKCf4SJns2V0fC
UM09OA+nYTPra4yInCUZklC2ykeSKDo9PonuuSt5AyZ5YrZkGinqzqEOUgL5
oQFGPbAkJgLkO64MoXBgMLfLawzbSUlHLnB4R4qX2zkrYTYkVa9qpJGBIoai
MLsecqitVq5JchkdxgtnfDDS1w4NUEJ+RXMhBSjJvF3xXnEgDgZLYCsYtMGF
oTCUV663Uj6S75BikBKRPaCU4oL+hQ+ZGzXWAoKJLdmj4dhv2HtCOWKSAofv
mdbc1GNoCW/jpOvIdNRzzDKgN/N/rjSrXa1WRvqRiCh1MVO0nSgxcH3Evzmu
2eW7FB4mbaUOkuuGMjxJXjKYJlMO7oWWuYWbOrwDenTCCiQPiGLO3FElq/UY
5cLtNUKnpdJS1zM5/TZHUE55wRC94zHvTu47AfqW6zHMhK9p4htXxSqc8WGT
xVknVsHhF1WRzcUe8ddTVEbhfs4+Jvfql62jYy6AKy2+6lzXrJxlJQ7HYO3h
K3EUqbYjfk1pTsKQQrQQKPFk8FhEnbbKACliryU/YigB7RFCqGB0h/m85Kwg
Hwq9VIbG3mIRVsQoxfzQN4Fuk3gcpTkrzRHkClvF5xJlR/YWI/5sNVVQb+Ao
3FEAB9D8mZqw3dHMZHe1ZRnCTJvBMZSHd0M80jeCwZK/ERgDxRQvjmp9tcuB
aw9yLMbbBt9sia8Y81z0mbFpqHOcBA5Ils9pRbiFLZJK3dxSfBnzoNzQ0Byl
Vca+wxwj99ftL4mi5mQu49JjqqFMT2SvwLNA92b8gK7BkROKqYSPUZzulxt4
NZ1+dCyJmB1EZjzOWsYO3W6aErT0KMmsldtEkmrFeP8TtxguEhDRD9v7+gcH
L0hr0iRvTJ34+hf8+CN8/BE+/oYUhskOdUx2gO1NuFxdggkbg2iMYafUDH5j
vRQmYxwpnEsI80VlgT5ArnqFryF3Vn8LPEotiUTGj2hcWguZ7bnsC2BPO5Oc
ligWbY2EEzUkoVkm9dxJgMNJw2RT7PDr1zhclUkwkOFRwo1smCbqY1Q/Uq5D
ZHP9P+Rxw0Ck3a9f2S9Txi+Sb9/2eJ7pR5k3xNbsxXKL2LWNbSpzbJMoFOoJ
JJHrYrIiGo6MKaY2xKSP2dxlNp2OqO/EXO14ZZaWDMlGhb6xapPTWWgBrzlY
C0d58uqcmDwVFr9hu5x6BtPkiNvFC0uuJNpfCVZLiMhdOltGjMFAGp62bduT
vBpsxPsrRV7Rdo6W4XhVhsvNuAz0nZTXw2GCrl6zs08lv+M//X/7N/txmX+V
b+iP8gss7+ZXxhEreDsk74HCypJgS+XfdvynP6CJyvvmuW89RWmFqKjwksc5
uuX5sgz6LXxFH3oF3fuPHz/1d2FNE+6Du8Ae0k34e/e8DXfBP/B2uB79gbfh
6pl9m4n6vpdmg/H3v2SO4ve8NFzF2ZfY77HneblF95/3/3sHPsV8yR+83KrS
1/ApVvz9wcstG30Nn8LX9R+83LrQ1/ApfN34wcutAH0Nn8LXzR+83Fx5aHC2
S37rBy83K1Y0X528ePff7R98/6/+p1VMUH6X508c0y7BvBEjJnqkdEB66fkP
2IVD+Z/gKrHj2Vb7+EDfeWA4mC93oIn+fz8v0Zepxh777qsutLSc3h4deDUg
oiLNRXRD+PyMOcYhhWeie2q4ElNR/BsLZTQ4QiNGK1SUCjejueL3C9+VmN+/
5kGASradmZN6WKIgL3/QaqyXE1NfB6Pt/2o8l4LzslPZEdctiy3UJdAbvBpS
ruJ8IcWkkjtQL76QUB5DK6lJmzgz0VVSV545Z3UYVurBKpZfyio+RV6GO+tX
ltEVlnXb+Vuv/D4s/1Ytdz+Wf/mvDx8qD3wAOwrjSd8HdFHI3EWMPHElhYM9
MByNJjh/eBFacQQBh8JN2YVI91Ji+UAxlTxpaEQ3BUrQOopCyYb9vk0fhQUV
vU/zDv5KS2aER8UHKeajomJitgvkisgpWM2+Xc0E6R3+PA+vrkAA6Bo/pg8v
YPvcjz0admqpViJzP760NC6R5C6V6ptDLtEhWUU4R+iYFU95i6F3EJMF+vYK
hvbU/0ur0gp2qVf+Tjvfw27girGWcVMHkvdhG0UKhOXzimaIq+HMJrG5dCfR
Lc9HE+r6KU8LKo/47cf+dYhXOTiLmCSTfMsGI7ICQi2kfTVMiTLa62iyQOMl
2ngwmoQv0EPKlGE9igxi2OAsunXu9XphlyvmCMNGyO2VDNdJIlHRK866+oyv
X8HdYCHXhmW0VkuUq6+IxQAOW4wSM2JHhRPsRZ/fgYwcTtYJEN2EYwzdUSm1
kzI303ArMWFhnNdy5WOUKEwGzgAunw3tfy5j6ReNhe/T4cpBbprR3XVJ7Gys
oeij+XA9pfs53aaP8cpNVwUJrMMOTuXW/ZqgR1/RhU1C+LVI8WCJhH81D8UO
gH4bY8ZmQxlzSfcGb1IW2TI7obsiTAH0yAla1uQcobpayhhLYfTR8Ho2n8yv
7jLmTXJPciwBXd/hgon5Y9bRETrj1HhVHUJZyseLr0hsHFlPqDHS01N3bM3h
TDHOXtBQJDa3iyWT5BXdTaB3/ojM9fPZOL5aK7ljI1Zka+Ep1NgttcgMoPU4
u18GxRXWCw8afiDEgRboJJrcYEYX0hs5HPV5NnKWWMDRgSRIr6zYDSWmUccx
mY+hUxoNx6VgwM56wlYEjkBg2qBYJLxAYdviocgwYcds5+xueRatV0IcFe8M
pAJqfXQF1BDoVK/CREK5BZmtsh6Y3PqQY53IhnwFm1bfpKtgAzRlvrGIGZDY
jxkKG6dsgNwZA1jiIp1byj3huel9xTEUq4glX7+1RenFT6+4YiWaZwLxxF7k
RIMs0EWkoZUmOI6p1alzmW1IounsktywPzLdAV3ENveSTNHpFcGRGKHutKEP
87h0QWtF3hsOpyAfL4UhVrLrlbGjFKxZar1sDJZbwZ7jC6+W4XSK3U3C2dU6
JAfIH+sMTsGCGrdGJms4z5qi79xe6ICKacHVEEg1+vFSwauZ6UdLaxgxWQNG
iyNvY8Er1iyPD1BAIFktE7Z18dgpW8RQgMuIxbpAoDZsVVJQ7cg5zilBw9Gr
szRikHNW0YI8wFhTR8mkBlJ8gEBSNbjjBZGuOUsvMYDEZbuaZE1CyXgBURrR
SmpBMcy/FjewiZFN5YRxygctD3CiFBqwuIGmCGgC3G3EJhqTzig2V4eHZENz
NOwUZgsaUdkErth5mF0KOYc5/0yGnNBWv1jwRkp+upP4ruvAq4JCDjf9Nn+4
HFrHOSrpWMcvuo8Sztjm2BhzEMTVTEEbVlBpkXuTNGImQjwoF7DMMtqOZjZX
lSolN2zUu/ROx2fNfbDDKrWyztmXsPLTSAJ/D7+QJRwTPcQLlaCrEIeh97GS
AVPkceGb4WSpuVEatcPh+5zQXUqFvhJsp0pUEqgcNxqObkLUvg1dshaIaFIm
GMEouZz4pIF0tM5TcYlmNQOY4qsxEBt6sXByMnw6HRmWxgZIowmgea9AEeCl
HdyxlVFjSBAFX+JJjYcudeWz7Zp4Eo1czXsgE3W+iPEVbfUTILL5MsTl4dv4
Ui3a8sd4w4ATjvuhM09HisJp5GYhwKjiK+Mooo2aEDLaJHPaxLmX89fx4Pqn
L4w+DPxhGZPHqxyLuoNGKTG7CTEsI4Z5yyl4hmOLNxJL/87GGMOo0eI4f0Mh
VDWUFXD8857hyQ3gNfSGsSIYBCE2UtlcNjjTbdRYJbArjBeZxRoUKUrfymTg
oaZkEkFclQ87lgO3cDpVuZGwYiOm3zRns4zMuRSkuJqi0NFyFTWvjJd4Ay5Z
SuMne46E7cEAx5FBtg1XRZ27unmyXiCYazRyGDMS3hTlEvPyggG5+XwRcFT0
kJP3CcXSfMCJguLOpQ3FOBY1yuP4hYKzBFPSNdZLVoo72cU2R1civ23YGZOI
WznC/ym6w6v95+guHslV3tTFIKsFEghe4Vh14eIUJgwITh2Mz5a2SCeMLAQU
THwgqW2hGLuSXLs01gUtE4+foxXDGO32Kg9FnxMZo4+ZWTIH5KT6guGmLvQr
CoGxKVDIhjT5Pvuiwo0ZIwu5yIb4FVJvcjeF15f8gS9ZQazlcuApoYioSYKi
bkhNSobALiUi6YBTAHqz+exuirThFlXZPej1YA280975md9bwplEWycyB/bs
1OuNlGNYsVY0zj0VdujQNppJUAplAip9DXVeJ4x4kFIL6A6/JKqYhMO0g0sc
vrZoC4V8GRUtXpFkwWUU4Eu24JjVzJ9c50LLtuq5iTvLtYXCJjanoCTilKNi
UNaHiaa1FpSDoWk4a77kEjrplL8V5+nMrFIgwmg32dMC16mlxlAeN6BWKIhk
bf552ZSCABLn/LIKQkSTK1IjKoOzClkpFc82BMDYyNBSdlNkm/KxK27cb/bM
kIhQDSm9mdkZTzY+mT/BG85n+m26aiaYEB0n13wbHAvNxjZsMUetuDl69zW3
CVKBp1HIdqJZbocFBiJVBmhXmyyZM1XKZBdUKpU95gIpgK8R5nZGGMXgkKJU
y6AkyklMQb1WLKwo4z8VOCA6bDbyLb9qiVVhgfVd8GmX0CMVYHpGl3Mq42ju
fZxb5Aw+P2IMNlS/bnHoPjunYWA6rjKMq5wMyU+N9sv0vr4kJp146aACPAxs
+jJ6DHNzYld58kDIMHOnL1hnJIMIDtH8jk46igkTOQuTxr+RE2CngmSSy8VX
VIEoJXaXBWcoScdV2cAKE8CILzMYgJtR4USqU1is2xGGdxLZqqLsH0v2Y4bd
CGeygaclsrO79xqj1RM90FZS/iaHBMprFSnbQJL78gz1CR8TeTVUwXJLds4h
2cDVdyWD58f93c/xaM/lkArIYoIXJEUC/m43g+Y3zAHH1idRqFGjKUMgfvCZ
24ajMiuThkhSY2jrH0haNkUDz5dpNJWSE+ieEfqO6AxpAgcR4QXjTh0JtI+/
+9PB0R493FvjLQfpnybrpBn0fjo2oiPPYZHeOK7vvOgQZk76rdqHeNaPEmc9
uD4C4cbCDtEtAdeOu/yRt+W1bksiK8vffv2Kf1R+ht8rBxifITtB97/LaED1
bUKrj/DmKLWqipbdemCTX5qrkv+luWZuiIugEk0uqii17jZedO7YSqHZ2Uo1
THf5tVTtLX0GzIEzfSn8Bia3FqlHlJcrjZFRomjnSuoDcoUFOQfJ6JNfDDGw
jNLx0opCtV6YQOg8w1Ibucgzq8a5IJa0ThVbX8XvO0tDm11EBCDTluzs4RkS
3eDbJ+x3Te+IE3UE8jPbS4KEBJ9V8DMlJFqThFGJlVgF5266gD6Qm9Olz/ZP
BiQKTHNTGSW9JpUJIu8kThCjrUWovVoRKIH8nFReRK9DpNeh0KuuJUVu7JPx
yz3bQ3GpHSlKQH7jEI5MbKVCTsuobCaTklxRBm6HNppCTDmTeuI8moiStVKH
X3rBOGUwQm6e78VPyxK3fw0cUzweY9gixbZACzMRdrO5e6Y4Yiejh01NkjXl
r6CHId8lQqane8VP1zMheA7FnoqVHeE+0TIWh5w6w4EeQBTzgbl4OPNOTFUb
58PYjNNeSiUqoCTIjPSthJxI0KVkYZAX5LViAhG5w4n629+X0RRI8Bfn1ycU
2BDBCs2XT9AihjdE/o51MaRBuk9jD2lNI6X/YPnKmU0DsVNyinEalCKKtEsU
5pGaIKzHWTkUYSVRF8KCUAemU4Vee/Fi46lIIieJBDd/tvLUvUDQpj06y8vo
Wuxb0B1MlNRPG1CKmJQUi3x4fkSW2tUyHH6Olo8SldBFPm44f0fk0MpEDYJW
Uq5XPa/sv4xn+N7dYu6P4y9Ydc0rl8ucKBwP1jAQ8TCgcv/Z5LraBXaeZFhg
7MoXeH7jCvB0UE+8/wvpDwdurnkCAA==

-->

</rfc>
