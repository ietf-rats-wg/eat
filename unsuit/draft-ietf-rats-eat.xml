<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="May" day="03"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 164?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 174?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-09"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="2" month="April" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-07"/>
        </reference>
      </references>
    </references>
    <?line 2583?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the  name of the file it is in.    /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-24">
        <name>From draft-ietf-rats-eat-24</name>
        <t>The changes from draft-24, not draft 25, are listed here as draft-24 is what was accepted after IETF last call and draft-25 was kind of a false start.</t>
        <ul spacing="normal">
          <li>
            <t>Address some small claim data type naming issues that came to light when IANA completed the registrations requested by this document. In particular, the CDDL type names are used.</t>
          </li>
          <li>
            <t>Remove all dependence on SUIT Manifest to break schedule interlock with RFC Editor. Use of SUIT-Manifest is peripheral to the core of EAT. It was mostly a content type pre-registration. The modification consisted of the removal of one sentence, a few more words and two lines of CDDL.</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3584?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923bbWJYg+I6vwChyrZAySVqyZIetqohMhSQ7FeVbWXK5
qqNjokASIpGmCBYAWmYqXWt+Y97mW+ZT5ktm388+ACg7M7t69UN7VWWIwMG5
7rPvl+FwmHw8Tg+TpCmaRX6cXs3z9HwJPzbpSdPkdZM1RblMr8oP+TLdPT+5
2kuy8bjK4SP4kUzLyTK7ge+mVXbdDIu8uR5WWVMP86wZLjLsIJlkzXFaN9Mk
mZTLOl/W6/o4bap1ntRNlWc3x+nF+dWzpFhV9LhuHu7vP91/mGTw8ji9zCfr
CqaT3M6O07cnV5fJh1vorpgti+UszdwcJ+OySpJVcZykaVNOjtNvN3n9Lf+Y
5qtmDk+O8HddVjDwdR1a1Jub+MGkvFllk8a1WI/Ds2WJj6rrST6tmw1uGzeD
f9m6mZfVcTJMiyX092KUvlgvp+NFNs3hE96rF9m6ypeTPHpVVrOwWDyGstqk
L16cwqv8JisWx+litvhDLQ0aej+CKelIz0fpy2w53WQ3Ns7zoiqm86xyL2iU
l/m0gKP5kL67PAndz6T16IZb/2GGz/0QP43S19+elctyNl+H1fyUV/nNJn5D
w/zzOlvA1zfpVT6ZL8tFOSvyOr1YTka4n3ACOezlw++eps+yaglnV65n8/Rt
mU1x/2GNx/4FnckUF/Xu4Cj97sUlPVgvmwravVsWTT5N/wkgYlriMlfzcglt
f3d0lB48fPQwPXx8ePDkaVjrn8opTfYP/9EUo/+Qefqlno7S99likU3COk+z
auEe0hLfwqh/hFlM08vyurkFiB3oAmWkCXz1hyqfzrFVLY1oJLwNTVWM1w3D
C4/yx3z5If2xqD7My8WfdZhnVbZezsvrvEovL67gqV7BzgsZdQ69jMbSyx/q
ohldW8sRgJuOdjUvb7I6fVbWNdwhHe6kuklfFDe4p6HLhpqOrrnpH7JK94t7
elnM1vki/RH2By5kXpW1ezWZZ/DuLf63gk1YGrgDpOULgDfbvvR9WX2ow6g3
k+p3iFT+UGvT0SSznt9ksIETgGOYanVb/OlDGDNr5gWs7McK51tNw/5myyVA
4VU9wc1YFrN7Fz2n1qPGWnfW/SZbL9LTqrxd5JskWZbVDezOxxxx0Ntnp989
Ongkfz55evT0mHEUvwK4DK2eaquHj+zPw6fa4Mnjg334djpdyO/v7NXh0yeP
5c+n+9bjU0Cg+ufB40f87WqxrvnZ0eOjJ/L6YZjG08Onh/bn4dFxAn+/f375
5AgfAhbNqhne2J1506zq4wcP8qxq5sNieV2OlrNsdFMsHqzmqwfT8na5gFs8
gh+/vy4W+feTsqymw9tZ/eRoh7tiWvP+9dsXZ+nz89dn51cXp+nlv11enb9M
D54+ORqkr56fjC6vXp2N9vcPH/96MNof7f9Kk6EOFMvi30M+v1dEBLJF+jwv
6xX8yBbDi2WTLxbFjJDtCf5nk+5Cz3v04RRwICCg/YOj4f53w/0nuN6Lk1cn
o9P3V6PTRVbcACKgB5Pbxl7+1H75J/fy9PXl+ehkMSsBR8/D52WdY5OrOeC8
52/ejC5enl/Em6p7ugLSlC1Gh7PVagTLejDN6w9Nubopp2u4Vw8uV/mkuC4m
tNbWz7O8AZitR1m9+vT72r+5mH7/3cOnfucPqyns0zKvmHK+gZOEH/W8WKVv
qvJP+aT5B8ba0MMijYZJnwM+XqWnJVzWV3lzC/c1hbsJzaubAva//of01fpm
nFeAjAdpNp1WeV0TqYZGxTQH3kK72naUh7BH8Qk9xe07e/H6pH/XZotynAF8
Z801XEDauNvVEPErDPdgvUJwrB9AP48eHDx88PzN6a9nxayAjX6RA/9Qvb4+
Wa2q8mO2+PUjQtpqeu03S9qm3Dgtr1Nt7ib5qvyY46pxto8SnO6b81dbzjhf
jopsmdE84ceDN/kSelzIroxW2Sz347+pio8wBrJlebWqijqXHU53YYw9IEL/
sUY+S4EQccywyWY13OAEr2eMk44OHuqNP0KcpBjj8CndeKA9zXyabYD7yyYf
jv1E9BVyXfCud3GwttviQ7FCFoMPAn490C9/5S9HbuOuAWTodlycn5+Pnuw/
HB2cvIVNf30xOtgfHRzsP32Aby6vzkawtU9GT44eHn739IiQ0+HpCG77C+T1
8O+356fDWQ6MBm/k8OTNxRC+OTzYf0jtX7+7GD1fAwxGq6IniwKpAmxV+g62
F474/BPAzhTIO/AWsL3phUAu7vr5u4u9Qfq6mmXL4s+CdhabvpavqSVC/iky
j8tNenGW7p5enHkMdLKeAdOLgPNd75YCf7ucIuEcFXme06YqaE+zmwf4cGht
QusHt/kYkPFkfQMt6wcN8hmAFOsH+bogEJcdeVGWH9araEtwwwGsZgVwaXzp
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
ilRgbQpuFbfRJkpHishaTjOI/4oCrBNqh4Ag9knF7JEpnpwi4LKvWZ3PCi81
3rM5gfEoIskazVNeSZacoLaG3baIJFSED5VHBa6joLlTI1Nm4Zoy2nhCnRm+
b8R26AktCau0FmJfxCxqA+Jy3BIdow0TBHwMlOUWyMc8yA3jPLBnYhQSHc5V
ywQgPbDhkkmjcS4ttxEeQ3QP6tUQbIiCVd7mN6g98H4Yb1Bym67VNyJ2WDD2
rXdWkcobcZRezyB9Bo8Ek8OYzqEqMFORdOA9F+AaZssJ+zY41wX1pQEWhs+I
xZXGnwXjOb8ANRxPEdSXk8ak8BFe829gQxZsUEEz6hhmk8Np2g3A/vxevZWV
331Tue8+o5QptuHtOjfcItH0IJ+JVA7lCfiPYGZTwawFA9sdapnPZf9HqZxX
WEAQCYpl75HB3ufuel+j+xcbZOGSz+A6V8ugmY221T/4tk5X5aKYkG+R8t56
9tSvkLaoBwQQ/ow4PXZ7AFyUg2A9gE8XaBVk3C/WvYl4H7MKww6FIbJYrtaN
8Ix490iHgQhzI6vdugekPgLJYmLECBeOTN88zxZkvmML9rrWe9PrguMM5XV0
XnKOxNdXfGPbSESuMM8IBuHrSyb2FmpQ/fQK8N6D66xYbFkXnAWbWwjHAOvI
RkZWXzqkpgownSwZEsdEPG6zCm/zegmki5Xcfbhm6/jEAkk3YhcC/pRkWunH
AVDLyEonLjDVRUNBgsrYreu6Hx5xnA/L8ha2Ezk4Ai2kQGhgCX42wSukaHS+
agg2iMUzpG3Y9DQesB1LAQFFVqeOXKFNAiZD51h95AVee2/MUdp/VG58OhaE
8PjYtgI0eUFNOYxAlPoBcAXmeSMQLNcIXbCERQkM+hQ9kojDBsEjG5PFMgL0
pr0xzolgxdYDsZIJErxnsoBb5CQY2+MMyCPKFElikJOuRCyIDFR7uBT17fA3
T/nwKIIi2DJxMuNFUc/JnmnMX1qZ9jFaKayOebuB4JyaPXkydAmTaAJ0QVkY
5PKpsoMdqVxjMEbZZzkFqaBRjOqQHE8C9cT4oZ8EQTS6HCKcsZ0rb+5H9MTF
SlgHBu9tGLqRdQN6C7LTzst3l1c7A/5v+uo1/f32/J/fXbw9P8O/L/948uKF
/ZFIi8s/vn734iz8Fb48ff3y5fmrM/4YnqbRo2Tn5cm/7bDJYef1m6uL169O
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
T1Y2UddI5HgjDm4jiQB2dceu46i9N1UJ0S8rlZabETVVHDTpyChnXs6zRvXw
Vf9FH3E2b/WOFCprdYLDR7XcW5ZJ/z78V2plRQvZv2sDfeFnifzJ/dbk8ExP
xYDmHlISm9xyXJf3DmOBig/wU/c6tcoH6OVwcHjUaftHhG27XvOgf9TqdIA8
dDqdQ7/Zd6sbuu7BQbd11Pe7A294OAja/j7g+VZw6AEFCXqD/cNHpYYfcr98
s759czX2P+gFB4CNW4CdiUwOcMs7gx4cQK94YEhXBE8zwdqWUh0p9E4/tZut
hykW/aJI3MDrBJwSpucDqer5zfu3UU2y/9CmtXstoHj95hAe9JQFstPtHg06
fmsQdLvto4PucH/YOoQX+4fDfs/r7B8G/tGg1W11g2C/edRXzYZ+92h/cHiw
vz/s9zvBfn+43z4cDpvBMDgM2vvB4GjY3O/uw5+tfvvgUK1t2Oz3u57vHw56
ne5Rs7vfO2gf7ovTjWaKMZwlR9CqXC9Mqbs6XGfyqHhsOii6HGXrhOvNc15B
cooqf3QHjC3whoatZkjAMVG+NgAcMR/pRB1phUUAn1BWHd8DqbHda/eqkg+V
25UTAxVzDaH7Q7ndfamFTMKfinaVmYSKaYIq2hUSB1VnBSq3M3mCvjnuhz3H
zZtdc9K4PsQqClDA/DWXOelKApCLIYNeb+I7VNdRekNiioS3xw5e2cZVHkx6
Y7NrRVwuUe5w7pbFAM0DVABb5WeLKNWgDdxqq9UHlrLdglMLO9GkHzX9/xul
SlGq2EVFeCo3F62I7bN2r3uc+hgKWOI4xF3+u7T9TDP/MUvB9aO4DQfenoz9
1iQcdb1Wq7O1A7Z8/PG43Ru3gnEYe91eDNc1/k6j5qjf8vte2If/NHv+ZBL5
W3thyacdNkdbWwge1Os7G9V+9wpDir3lWo5LTpVcIdJkNXdnsB4nqatVMVIg
8ymX6cmsByywUJlN1spTlUHFiMqQ16ElihmxwMrNQvyzuPwRJiKRQeIucZ7W
9MyQpla0kdGprrf77OVgqByIMVAI5rPzhT47jT+iBmXNg1FKFXRSqJIqqKBQ
Z3TajlB/9Hnx89shq6Sm734+nYxm/fU7/wJfbo/Pf3Ei//xzq3X289vLk9kF
arN+G18+X43809+OPy26x5+PvPdPpzfHRyfeu/lJOwpOp6Oz487l3fPDs4vx
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
41NjlHkCAA==

-->

</rfc>
