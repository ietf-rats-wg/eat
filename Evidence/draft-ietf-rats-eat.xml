<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="13"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-17.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="1" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-17"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWJYg+B2/AqHMiLS6SMp6+NmTWaOUlFnKti2PJbd7
trYiAyIhCmUSYAOgZLYn+7fved9zAVBWd89EbMSuo6JSBHDf5573YzweJ02b
lbPfs0VV5q/Ttl7nSbGq6a+mPXj69NXTg2Sata/Tpp0lyayaltkSPpzV2U07
LvL2ZlxnbTPOs3a8yNq8aZPkfv46/XB8dZl+qurPRTlPf62r9Sr5Lp1WZZOX
zbp5nf6wyZsf4FGzvl4WTVNUZbtZQb/nZ1e/JKvidZKmbTXV7+jHLF+1t/Dk
CH83Vd3W+U0Tvmg2y/jBtFqusmnrvlhfh2dlhY/qm2k+a9rNItfP2qLFH1e3
eXpWwo9NetzisrIW5pheVZ/zMn1ydny1m2TX13V+9zqFH0lW5xlMvmzzuszb
5PM97FcxL3HxmWs+va5qWPQMNup1evB0/3C8/zTJ1u1tVb9OxmlRwvTfTNI3
63J2vchmOcyQt/tNtq7zcppHr6oaNvoyn65rnCbMuKo36Zs3J/AqX2bF4nW6
mC/+eyMftPR+AjugI/06Sd/C2W+ypY3za1EXs9usdi9olP+xzhbQcple5dPb
slpU8yJvYL3TCe4rnEQOe/rsxYtn6duqzm+rdZOnp3Vxh9OcwuAwz6xMT4t8
XuGu53PYjdfpSbYobqq6LDI6rnXZ1vDlx8tj+Lm6JYDc+dN++vLZy/T5s/30
BYDjTljckqf43/+1LSb/KvPzy/ttkl78cFqV1fx2HXbyt7zOl5v4zeOXePDi
VfpLVpdwjtV6fpt+qLKZLdG9oPXMcEM/7h+lL95cRgssizafpf8E0DGrlmGt
fzo6SvcPnh2kh88P91++Civ9ezWjyfaXmpRVvQTYusvxxnz45eRgf/+V/Pli
/5n9+Wz/Wfjzufz58tWRfQDDhg9ehD/tg5dPn2qz/QPrYf/Fkf55+Ep7ePl8
3759caSdHb56GZrZaK8AwbxO4O9Pv16+pL7grmf1HDd757ZtV83rvb08q9vb
cVHeVJNynk2WxWJvdbvam1X35QIOYAI//nxTLPIfp1VVz8b38+bl0Q53xbf5
08WHN6fpr2cXp2dX5yfp5f+8vDp7m+6/enk0St/9ejy5vHp3Onn69PD57/uT
p5Onv9NkqAO9nPj3mAHlHd3lbJH+mlfNCn5kizHe/MWimNMdPcb/bNIn0PMu
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

-->

</rfc>
