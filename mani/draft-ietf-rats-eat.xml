<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">DEB Usage</td>
              <td align="left">DEB may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-13">
        <name>From draft-ietf-rats-eat-13</name>
        <ul spacing="normal">
          <li>UEID length and type clarifications</li>
          <li>Address comments on SUEIDs</li>
          <li>"Attestation Evidence" -&gt; "Evidence"</li>
          <li>Wording clarification for "entity"</li>
          <li>Wording clarifications for DLOAs claim</li>
          <li>CDDL type for CoAP Content Format</li>
          <li>Move Claim Characteristics to an Appendix</li>
          <li>Rename odometer to boot-count</li>
          <li>Correct/clarify section on JSON/CBOR labels (Carl's comment)</li>
          <li>Wording clarifications in Appendix C (Carl's comment)</li>
          <li>xxx encoded -&gt; xxx-encoded</li>
          <li>Clarifications for cti and jti claims</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entro</li>
          <li>Improve SW Name Claim description</li>
          <li>Update commentary on UUID vs UEID</li>
          <li>Remove most of section 8.3 on CBOR Serialization, redundant with profiles</li>
          <li>The 8th bit in a 7 bit text string doesn't contribute to entropy</li>
          <li>Improve SW Name description</li>
          <li>Don't capitalize composite device</li>
          <li>Reword encoding exception sentence</li>
          <li>Wording improvements in section 1 related to Attestation Results</li>
          <li>Lots of rewording to make profile issues more prescriptive</li>
          <li>Sync terminology definitions with RATS Architecture, include Endorsement definition</li>
          <li>Plug-ins to the EAT format socket must be an IETF standard</li>
          <li>Link to RFC 9052 instead of 8152</li>
          <li>Improve introduction to profiles</li>
          <li>Improve CDDL for OID in JSON</li>
          <li>Move Endorsements and Verification Keys to a new Appendix</li>
          <li>Move privacy and security considerations to before IANA section</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AqHMiLSqSGqxvPaka5SyMkvZ3saSK6df
vQwHREIUyiTABkDJLJf7t8/Z77kAKKu3iPcixtFdKQK4+7lnX8bjcdK0WTn7
mC2qMn+etvU6T4pVTX817eH+/rP9w2Satc/Tpp0lyayaltkSPpzV2VU7LvL2
alxnbTPOs3a8yNq8aZPkdv48fX98cZ7+VtWfinKe/lJX61XyXTqtyiYvm3Xz
PP1hkzc/wKNmfbksmqaoynazgn7PTi9+TlbF8yRN22qq39GPWb5qr+HJEf5u
qrqt86smfNFslvGDabVcZdPWfbG+DM/KCh/VV9N81rSbRa6ftUWLPy6u8/S0
hB+b9LjFZWUtzDG9qD7lZfrg9PhiN8kuL+v85nkKP5KszjOYfNnmdZm3yadb
2K9iXuLiM9d8elnVsOgZbNTz9HD/4OH4YD/J1u11VT9PxmlRwvRfTdJX63J2
uchmOcyQt/tVtq7zcppHr6oaNvo8n65rnCbMuKo36atXJ/AqX2bF4nm6mC/+
ZyMftPR+AjugI/0ySV/D2W+ypY3zS1EXs+usdi9olP+1zhbQcple5NPrslpU
8yJvYL3TCe4rnEQOe/royZNH6euqzq+rdZOnL+viBqc5hcFhnlmZvizyeYW7
ns9hN56nJ9miuKrqssjouNZlW8OXH86P4efqmgBy548H6dNHT9PHjw7SJwCO
O2FxS57i//zXtpj8q8zPL+/XSfr2h5dVWc2v12Enf83rfLmJ39x/iYdPnqU/
Z3UJ51it59fp+yqb2RLdC1rPDDf0w8FR+uTVebTAsmjzWfrPAB2zahnW+sej
o/Tg8NFh+vDxw4Onz8JK/1bNaLL9pSZlVS8Btm5yvDHvfz45PDh4Jn8+OXhk
fz46eBT+fCx/Pn12ZB/AsOGDJ+FP++Dp/r42Ozi0Hg6eHOmfD59pD08fH9i3
T460s4fPnmqzZ/s22jNAMM8T+Pu3X86fUl9w17N6jpu9c922q+b53l6e1e31
uCivqkk5zybLYrG3ul7tzarbcgEHMIEff7oqFvmP06qqZ+PbefP0aIe74tv8
29v3r16mv5y+fXl6cXaSnv/L+cXp6/Tg2dOjUfrml+PJ+cWbl5P9/YePPx5M
9if7H2ky1IFeTvx7zIDyhu5ytkh/yatmBT+yxRhv/mJRzOmOHuN/NukD6HmX
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
QULzzcKUetKEVYfQieBNc8C+BinV50TLjKh43quT4Yvnz0/Oj0+OeTcm3dqs
TZigAK5i1CEhXjMysF65BSVDDHVnoZRKjuX0tGyDB2DVnnJu7JpgWS7Xwi1H
CCvciEYuna8YI54SRgxmay6fjBzLxU56wNeFM4qYNuYndnX7T9+cHNjcX/jW
u9AuDvjlxUG2uHJaca1Ftq8inxrV3uaVeqrvEbz4+j1XOxklequnxsPiI1wb
kBvoZHPUyculB1WCKZQ44lFp9bsMYjimD8fnpN4mp7+S8Rl5Tp9nmDalckDm
Wy7n7rymDRmxWNxCfFuYA+451dT1Xbc6qraFtOXI2D/HV4NwFqRSJLWswhH1
xny8jAqpRBxlIrQsOpcAJMFM+Q0/c43MLSpZpmEZEngjLY6MEpoVjbU1pLoX
tcWL01edaBlAyIGJVJjzB9ljFeeYsRPsg6qYrLkGBmL3Hj+gHUbxPZSXpDUA
Sf6S2F/xBRvwM9OThDiqR3oqSQCmihf3pUvdUrSJ+LGyZx9RX0+q7b2/N0lu
sZxDFM7tU3sHDmVleu9SAi29iSYHNMaP3OYl7r7KDk1XZ5aLzHBx55WswzTp
ULIVKqM0TYCIsePtQoLoYS0BS8KrwCFwEKEmgJK1qOa/fnZxUPE8w4IAhJu5
PS0jQEY31CdSUQMohdaWpzpI6NBidHU2o41LSrYSW+5v8vxJDPNC56ayurEo
Y0Muy7CQxmWUnaAxCWrtQVPR2PfPceMwDBY3qpS/zczXLEsPQrvaKGOWwo7o
ihXwrbXIEY8l2qZ/Njgf5FRsMTQ6fYsz1NvncIN9Rwk+sBW6KSsDpRWpilGo
+8pLmC9hLhTzxOiSyGRO6bo0MQKQ6tqFWSogQeEOaii98LemqBd9/tT5vCIk
krsCYPFKrIRJAJBsEtAtDTKgh3bmdsbbXjWaDLZYiYK+I96/Mkvk1k84U8lQ
hJxwUGSds8L0PYN5Hz/Sft4Or0M0CwIZSrFoXrHIeo7Vk7jHSiFWfzR10qXC
WQa0Kk6SQmr7knJR3kwjBGACaa42hlS/EaFiL4s2ghV7BuKZIkNanE1NLyIj
UQSOg3pZNLjb88rGYKlafGJYHhAvqjaeteYZkgSzQAbSReXuTAiAa/i13ZfE
i7uyEJOWz6xY4R3PfQdIqjWR9mgP/jEd2VLCP/eGXBkRriMI3rMZsB+Cwd5F
BuZ6IABFuUxz8QM4dllduxaeYT3C4pGzCNCLZR7++3uyZlPtuf30gCfR4Zxh
7kgDz4yEJZGotFOYvff5NyumNNtT51MZylx0O1zW3rwuTLgoGcttHEC0Bztw
g/CO3JrQGRvknVBd58eG8MfYIXy5GZnGWOtMHWpzQbmTm2szNvjv6dNhanoP
gkaMwjy3Rcr0fJ7g7V1cbbDnhivtRbTa0KwWqUiaVHJXDe1n5Nt0liasX/BM
S+DmdkJBIyNkWvtS2FdO6pBdWgeFBZABXOwlidzSoFE35fPsiPwOjKdlsNgV
asgK2zuKoJZi805rBu7Pwx5/Wx1U+CdIp2xzQ3WH7w12yskPq8qELclpCujj
0TDOZVEuNRfG3A9bT7A4bY20i8kqnK79ar1DcioDb2Z8l7duBTfTd0M63vDO
YVWlr3GRS4C9mDO0I81EqkUVXmL4p04ZXjbmp/YqUo1b2hvXN9s2FCEvuiA3
czJ0mm44ZjkYNGIh95irTJvPHPJmv8oC+zGm4WB8MzoYt1HUAzMinMVjilJ2
8Ja9b0HdPmUpGBCwx5R2JsXO8JE8kX3sn51cPIFvysksDfHx44tltDg7hrfg
/q6HCbY1qfhv32ZQ9u1bz/vXxShd/ikPFwyEKAcL4sKlCYQ4Yc2SHi4AihIw
cBQXNbeAo9Hu/D3hsfPGOUqlfOsX0Ty2tRh8fbKwb8kj2Xnn3a07n4fLv/uO
v9GiJy9Onm87dPeZLYfNuTD3IL7Zbm+Xg6aOaVz77x8HgeeYnFMOAfoq34fB
1KYpgYem+uxAChrt/j8F7hs4fM9pIg/ggjxlmg/QSZXAQZNOdoFEZztVpIYS
f//7z2YBjLUp3/6ZFO7NdFGmiBrkfuKrKiMKkpiVhUKj09i2X1jCLAoXf/cd
H2N6GFZ3Xm+20D2zZc4hQ/5POWVOTFbZjjWzLL/j5rYda61PagLwD8F4jdbb
zuquitF4ZXs1SXE7IXnrv5Tga1ece886NXYs2xKLw9PLtu+m+O0EgfZWCGAF
YECAF8yK/r533Ta5FS/XdjxQTURqa1O0oXm9XAjgJMadwLFd9vl9EYLczBQ/
PlCth1VOz9s/yWtQ8O75i9d+VuFaO5FfNb8slhPD6Yk/kNLCMVm4+oN7SS5K
kc8whbP8CKz16BdH+8q6H0GRMX2UkYTo8WyhxpwwWjiefx7idEk5quXwMN8V
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

-->

</rfc>
