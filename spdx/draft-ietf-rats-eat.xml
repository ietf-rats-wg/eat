<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="29"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= spdx-json
$$manifest-body-json /= spdx-json
spdx-json = text

$$manifest-body-cbor /= cyclone-dx-json
$$manifest-body-cbor /= cyclone-dx-xml
$$manifest-body-json /= cyclone-dx-json
$$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+S9a3Pb6JUg/B2/AiWnqq0JSVkXX2e6s2pJ3VGPbXkteZzZ
bKoLIkEJMQlwAFAy4+389vfcn/MAoOxMdj+9XalYBPDcz3Pul/F4nDRtVs5+
zRZVmb9K23qdJ8Wqpr+a9uDJk5dPDpJp1r5Km3aWJLNqWmZL+HBWZ/N2XOTt
fFxnbTPOs3a8yNq8aZPk/uZV+v746jL9WNWfivIm/bmu1qvkUTqtyiYvm3Xz
Kv1ukzffwaNmfb0smqaoynazgn7Pz65+SlbFqyRN22qq39GPWb5qb+HJEf5u
qrqt83kTvmg2y/jBtFqusmnrvlhfh2dlhY/q+TSfNe1mketnbdHij6vbPD0r
4ccmPW5xWVkLc0yvqk95mT4+O77aTbLr6zq/e5XCjySr8wwmX7Z5XeZt8uke
9qu4KXHxmWs+va5qWPQMNupVevBk/3C8/yTJ1u1tVb9KxmlRwvRfT9LX63J2
vchmOcyQt/t1tq7zcppHr6oaNvoyn65rnCbMuKo36evXJ/AqX2bF4lW6uFn8
j0Y+aOn9BHZAR/p5kr6Bs99kSxvn56IuZrdZ7V7QKP9znS2g5TK9yqe3ZbWo
boq8gfVOJ7ivcBI57OnT58+fpm+qOr+t1k2entbFHU5zCoPDPLMyPS3ymwp3
Pb+B3XiVnmSLYl7VZZHRca3LtoYvP1wew8/VLQHkzu/30xdPX6TPnu6nzwEc
d8LiljzF//FfbTH5L5mfX94vk/Tiu9OqrG5u12Enf8nrfLmJ33z7Eg+ev0x/
yuoSzrFa39ym76tsZkt0L2g9M9zQD/tH6fPXl9ECy6LNZ+m/A3TMqmVY6++P
jtL9g6cH6eGzw/0XL8NK/1rNaLL9pSZlVS8Btu5yvDHvfzo52N9/KX8+339q
fz7dfxr+fCZ/vnh5ZB/AsOGD5+FP++DFkyfabP/Aeth/fqR/Hr7UHl4827dv
nx9pZ4cvX4RmNtpLQDCvEvj748+XL6gvuOtZfYObvXPbtqvm1d5entXt7bgo
59WkvMkmy2Kxt7pd7c2q+3IBBzCBH3+YF4v8+2lV1bPx/U3z4miHu+Lb/PHi
/evT9Oezi9Ozq/OT9PI/L6/O3qT7L18cjdK3Px9PLq/enk6ePDl89uv+5Mnk
ya80GepALyf+PWZAeUt3OVukP+dVs4If2WKMN3+xKG7ojh7jP5v0MfS8Sw3t
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
+msEeVmlVi3+fuvfRJT/e4VTN4rSm5XsKNfk8yrnq02KmrPvnPoBaUU9Ad04
dVPYlobgegMSUuROPcOfq5qbyVkFuMJ3pIpFJWHl/Ydp/5tntf6X385/uVDe
tQKgJ6DTJ1Y76LxGHR45cltVYGU6vkCcoceVEp2fNk+iq5gd8OGP+M1b8wIr
dstz4H///r559OFdcHNyeXl7+sOLUfcHO78bBAp/WsqlwxfCneNHWVopbLp5
Jr4UFYQZrDXbINdUd8o1i+SofZEw/wic7BxgWYVpbchDr5IjB+Yv/uWnrO85
HW+1qp2TbYNMEWcbCd/ZtsGwefPTGsHu9fvuywyYFcpPi1DuXnz5ZX6ry3c6
s9GOV7G2jvkb/MmHhVgcy6GYL6/ZFaDiCiAVdecbLpf+SZKURBJkunUt8na/
3ZCGyhkbUUbsOOqPGH1zu45u6bldrgTHrbPL0cvL4Vl48fZJmBx9iN+8b19e
NM6XT15dfjgcngwPr169+eb83Xj49snXp/Tm/fufn3w7OnoyW93CvyeHhx8O
D6/f/H347eQY/h5dXD3/5dn70SH8/k3y9sWb12/eHj1rXlx0JrXv3p2dd9cf
Xz+ZHrW+e//mVdj+/v38+9o3nW+XT5bfvD46etd/+v7txfqHb1+F397evDz9
e6t29fSbF63vB7NnH2Gai/TqMKw9v15+/fqXlze1H24WtW5vfP10/n4D4Pll
+Oq43Uy774br3ovx2Xetn2+ezj+ebn5+MruJ2s0o/TJzXiz8nsWLzUd1s6zk
TRMP3o3NWGoWPq0UvB4qT9+e53chun3aiL4fxi/jp9981/w2fnb09HL8ZIJ/
n7755bT5In46qMNHy0nrOX307M1JY/rku1/g/7en8U0cvj1pnL5PPr54/+bj
i18mjZfHP7Shk3n0NXR61WmOn9ykp1cnzb8fnXZP49P0dPGi+UOMv0PHF+9v
2ouT55fPlk/fbF59f/381S/fNJ88f395+/Tn4Prt9xfNdrP7/TfpLzffOuDj
VWXiS/wTLHDARztbdeAwTOMJ1aSS5yU219HR8dlQi7PAp8oKcJBp0d+eyynk
P1TzJtDNW+2ZmYl5HR2xnOhZ2MUNBxtiKS68HdXCyVUvpZAWunFh4aEmqfG9
bnPPb/b35HBdPho2G82g++iO7Cf+gVPp7zIKp1i8QbjXXz/d3TC6WmLJvEWx
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
fkFOwuxj6MeEchHQLNYJA1i3N/r/PMdOmqeTAgA=

-->

</rfc>
