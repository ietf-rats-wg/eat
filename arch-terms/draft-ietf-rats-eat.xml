<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="07"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>A profile should specify which algorithms the sender can use.
A profile should specify that the receiver be able to accept all the algorithms the sender is allowed to send.</t>
          <t>This specification should be for all uses of algorithms, including those in nested tokens, detached digests and nested signing and encryption and such.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbVpog/B2/AqWkKtY0SVmyfJ1NehVJSSttW15Lnsxs
byoFkRCFNgmwAVAy2+v57e9zP88BQFkzPVP1flhXV0cEDs71Oc/9Mh6Pk6bN
ytnv2aIq81dpW6/zpFjV9FfTHjx+/PLxQTLN2ldp086SZFZNy2wJDWd1dt2O
i7y9HtdZ24zzrB0vsjZv2iS5m79K3x9dXqS/VvXHopynP9fVepV8k06rssnL
Zt28Sr/b5M138KhZXy2Lpimqst2soN+z08ufklXxKknTtppqO/oxy1ftDTw5
xN9NVbd1ft2EFs1mGT+YVstVNm1di/VVeFZW+Ki+nuazpt0scm3WFi3+uLzJ
09MSfmzSoxaXlbUwx/Sy+piX6aPTo8vdJLu6qvPbVyn8SLI6z2DyZZvXZd4m
H+9gv4p5iYvP3OfTq6qGRc9go16lB4/3n4z3HyfZur2p6lfJOC1KmP7rSfp6
Xc6uFtkshxnydr/O1nVeTvPoVVXDRl/k03WN04QZV/Umff36GF7ly6xYvEoX
88X/bKRBS+8nsAM60s+T9A2c/SZb2jg/F3Uxu8lq94JG+V/rbAFfLtPLfHpT
VotqXuQNrHc6wX2Fk8hhT58+f/40fVPV+U21bvL0pC5ucZpTGBzmmZXpSZHP
K9z1fA678So9zhbFdVWXRUbHtS7bGlp+uDiCn6sbAsidP+ynL56+SJ893U+f
AzjuhMUteYr/829tMfmbzM8v75dJev7dSVVW85t12Mlf8jpfbuI3D1/iwfOX
6U9ZXcI5Vuv5Tfq+yma2RPeC1jPDDf2wf5g+f30RLbAs2nyW/hmgY1Ytw1r/
cHiY7h88PUifPHuy/+JlWOlfqxlNtr/UpKzqJcDWbY435v1Pxwf7+y/lz+f7
T+3Pp/tPw5/P5M8XLw+tAQwbGjwPf1qDF48f62f7B9bD/vND/fPJS+3hxbN9
a/v8UDt78vJF+MxGe/nY/fkSPoO/f/354gV1C9c+q+e47zs3bbtqXu3t5Vnd
3oyL8rqalPNssiwWe6ub1d6suisXcBYT+PHH62KRfz+tqno2vps3Lw53uCu+
2L+ev399kv58en5yenl2nF7828Xl6Zt0/+WLw1H69uejycXl25PJ48dPnv2+
P3k8efw7TYY60HuKf48ZZt7Stc4W6c951azgR7YYIxJYLIo5Xdcj/M8mfQQ9
79KHdvUPx4+fjx+/wPWeHb09mhz/ejk5XmTFsolXjguHdd/d3U2KrMwmMO5e
1iByWeZl2+xN71q/vOMfz9+nv+ZXiqmg292U+922CBzeze06WzS5TeuXzrSi
eTX3TeyvMjGd2S8X52/9zH7pzCyaWm9u3cld3sCF/Pndu8nZm9Oz/o7hzFZA
IrLF5Ml8taLJzfLmY1utltVsvcibvYtVPi2uiykdYefnSd7CxWsmWbP69MfG
vzmbff/84KXf8Sf1DI6/zGtG8e8AQOFHc1Os0nd19dd82v4zoxToYZFGwzBh
TI8BZaZv8/YOyGUKSA2a18sCwKr55/TtenmV14ApRmk2m9U5bDDSFGhUzGCb
ratth/sE9igGvJe4fT+dnZxPjt6fn77yS8Gn6RF0gj1Dv1WdHi0W1R0gq/dA
w+piinjrfEVrhWmclrdFXfF5p6+Lph08h+tiVmVwIzK4EHQQuKENPR4rcRrX
+d/WBWBmAh16lfl5jDOeB7TTeYwrncc4d/MYL2Ae49v9ycH4ejY+eAwr3n98
MLlpl4tte4S0npcus3Qb9ra6zfEEUuwJd+706O14/8kwxOFdmDf7vEhkq7J6
1uxdZTXSggZwVzler6Z+x5ljUCxyVMNyF7kcOkwPBtv78O441S62reDni/2B
Qz6uLn49O4FBxicT4tSabLocT6vmrpjhezjI8uzkuCpLAFIEwuFVwT6XxWwC
fI2cHD+AjuhD+G+dj/d/fxz2WBbH/acyAIM5IFWgzvAJ3E4GoryGP7K0ydt0
f2jjXxC2HFj59XqxYJr+dgLsxcdiua6z3jvgAn6ss9ki3/RevZmkvwDhbXov
fpykszx9k89yAKv+6+MJcjltsYQF4T6evD4/Gt66+aK6yhYrYIyBzVkSXNyt
cONaANW99QpJVrMH63u6t3+w9/O7499PinkBWOt1DlxjfX59tFrV1W22+P0W
qdFqdu33V9qm3DitrlNtPgzA+08TnO6707dbEGZeBlQOP/be5SX0uBAUM1ll
89yP/w4YPBgD+eS8XtVFY5D7CMbYBZzxtzUJBEpMkP0dt9m8ibAOvmK6dQmv
4Ks53OB6s/WGDZNB7Tr8NflEAAn/kF2I2aTD/QNlOw4Pw5+OIdo/MB7m8PCZ
sShPXhKLguLN5Kie3gAnN22BN3e3jOShzL3DD34sgG+ZZRsQJrLpx2j9+gol
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
PP0NZYv+Yx1HRy9m3H+6550qRq7NqzT8TeLSiMQW9wA6Dfs6dqDb9ah3rYjV
vuc9ugBjntJuE78/DAZpkgyPngaPNX5oPmXo09edi/2Tb/Chd0I7iL/R+UXf
yEP7DD37BiYcfcPPwkjo3BeliwtKyUdMt0kokz+/iMlJg9X4HuMt/zTS9DKE
Xo1VwUz+R1GNeBHgqmqmdN7ikjiHjPgBwI0tSTeFscahP71Xy3Vp9j1xc/q1
GP9UcB2JfLHAK7obdd3tBXDkeFVhqspsPSsqJlxAnyoUUTZX2fRjPDNlXkKa
jaou2FvG9Sz6bmTJuKhnnDDGkwCp5udYQGGH6JKSHhxYqBvOnO9jJo2p0uwz
fDxi2w21upfZaq+6+ms+FUsNytQb9kzXviYhztXKOml34XPR+6PiXEoIJHHq
bNSimRzKHgNaagDG42KLUkNdgsM5m3WiAgTzYJpnxbllc0Qo0262TmgrzkgD
5O8GfQ1R7ZRFXBCb85gc6JJcAUuyAojBAAWbxAyOMpkaD64ppJqxtAwjk2Wc
kkZc+6fJ4FMS7zmkyq4Y1yBNJNPzQlIBNJyXQcuDitsG5fDVomzBckCVL48c
ZATCQi9K9GUye4raRVktWFJIRkGWJm1Bafphh9EaI2UoZ8VcEghlJAqSj48b
JpC1+ypb0e4HKvYZS1chdwV/h/34AjQr/PrejQL04i0tZXxJx7aXnshUxvbB
+IRm6jRQ0Wb7KYdMpTCzCouxoZzlhhN480kTSceQeWEm/lq1ue5CxsNKqiZO
vXXlyk6qy5kqOAGBw/3nVFZ85VRQIEwSfxyyQGTq0DVdVI19q8iRb1LHgk5a
1Tih1C4NRinnME8WMmnNin2TK+8fl16yfOdyoo269UeYrTu6vIhin1nP5Tly
2WL2COlUDyHE0t0QRoAS/e3i2/tG+JDBXY3n9L3hdK0YqQfr3wQrnhV9zNLr
da3CuB29i6TX6FrXuYCET+CeDQOINxB7jbd9Kr95DYUXd2SQkKnV/KjVWyCM
WEh9PsHtCl0OoZMf0CyXUQW9c0XUnF13/ed61/iGpnxDP3/jL6yqcLdMhoL3
uGDRzMSGGPaDwOXvEDobww7gIQTHze4HmlSYNbIYeqYcTA9gCViPfKD+58/4
bOKfffmC2jfdCUeVr4evr16+fqakK2yn8s/QtceSzSJLlbf5hieJCwYCtWBX
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
pgZM+quMAgA=

-->

</rfc>
