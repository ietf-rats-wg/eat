<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization/>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="January" day="14"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 166?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 176?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is “JWT”, “CBOR”, “BUNDLE” or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always “JWT”, “BUNDLE” or a new name standardized outside this document for a further type (e.g., “UCCS”).
This string name may also be “CBOR” to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="20" month="October" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-07"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="27" month="November" year="2023"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-07"/>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="23" month="October" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="7" month="November" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-05"/>
        </reference>
      </references>
    </references>
    <?line 2590?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-24">
        <name>From draft-ietf-rats-eat-24</name>
        <ul spacing="normal">
          <li>
            <t>Use only CDDL definition names for "Claim Value Type" column in CWT claim registry</t>
          </li>
          <li>
            <t>Correct the "Claim Value Type" for some claims</t>
          </li>
          <li>
            <t>Make SUIT reference informative (it use is optional in an optional claim)</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3592?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
nj7f6zdMsdbTFkpocBCx0d+evf7//7+jE2CY/y+Mlzoiazj/eHL0FfqM3QJT
Jr4oaEbmn2jmGKTrdZYSKUaEP03XGEjCJicyIKtn2W9/xp355Vny95Pp+ujk
G3mAC44e6p5FD2nPuk86H/Mm9jzqGcZ2M3re2ul4vqf/Ev3WfXcP//73GGWR
jI6e/P4bAJnL1nnw1Wf3pQ3jXUQRSbhiTm96dzfCmDY6ipFGt5HQSB42agkh
0VJ/QWPkG0hlCoLmvChRIsHLKlc3cFN3d1cZs4JPcB7kdC9OEHd3p3CqQNE/
JN/zO5pHj1TO/Gy4FqwIQCas7Vhxps/YI+PZYGA2bnX1fzZ4lnQesqNkLPZp
348+fgRZfpyNhyJavH3zfMTOhCCoooZ0VKc3WZDPSC5iK9/jkycI1+RdtCTW
GMRp6OLLr78M7QF/rPKGrkzB/p9KB0i4qk1a3yZ07hMQwt+xgAIoZJ2id6y5
7wZfSDcA7CmpzXHtp8k6z6YEFRbSRN6dgKxpDmxaViZgDB8IeajbXA6qhNVt
lpXEuADzViejPEyMRE+vH250PslLjP2kSYl/Mhoe1ajP5C92J6CpKCEmljt1
L3jIG/WIV3WLDfcP2RZHuxa9KFCENc2OOvJTTHWg/Wsz6lsXe0iMkfQgFGKM
Y3IdXz+ybbGSseUYsEwn2TL2C/ATYUn5fZmTH+kNHz1tcKzUxKbjA13VP+HW
67pEWV9WXi0li9GT5DZiDEew4ptMOKJhYxztH7XTzauTq6zp7J42LYVjjHRw
zqkBnr3PtkFKCYLUZ9/3SPXS0rzART8VZQaDU1Ui8x05aZsoux9cANV59QDj
BWqnAFmhfz7uznoNd1ZEO6DBfGZwccQRPfvQiM2PZYFIrSJ+pOi1jvCFdmKg
480C40XQNQFAF2kcxymQyLTI6O7kzGdyCNafGDZV9GLlimqsYPf+SZgOt3C2
msjU+RxInSJK8CCUqRtJpAm6Ty0idH5H1AXM5o38xlDYbXtKswwRPmn023OK
cFF7Wsy5rzcVcN3MbsGwOXCFW1wlD5iGyE/nlcsmhDFHDQLMPIjm+0DdVNAd
A71dVL7iiceuw6rBU2iyPRODr0EK7YuyguMgsyEPLuoy8+MXgglXL5ZMgYZn
KJo01XbISgiRRElx1lVu6MWEjUPePp6rTWbovF95JiTx3b/1t2T4jnjs9yWA
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
eQIA

-->

</rfc>
