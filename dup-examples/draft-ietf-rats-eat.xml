<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="August" day="22"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put a HW OEM ID Claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as Claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger claims sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp Claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-security-considerations">
        <name>Detached EAT Bundle Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  The attached claims set is vulnerable to
modification in transit.  Although the nested token does contain digests corresponding
to the unsigned claims set (as a submodule), these digests themselves should be protected
from manipulation during transit so that a verifier can detect tampering of the detached claims
set.  A suitable singing and/or encryption method should be sufficinet to protect the nested token if transport
layer cryptographic protection is not feasible.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured SW components and is able to check them.
It informs the relying party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PjVnYo+h2/AiW7alozJPVo9TOx58iS7JHTr9NSx8md
6+qCSIjCNAkwANhqTo/z289677UBUNJkkqp7q05XMhYB7Pfa6/0Yj8dJ02bl
7GO2qMr8ZdrW6zwpVjX91bSH+/sv9g+Tada+TJt2liSzalpmS/hwVmfX7bjI
2+txnbXNOM/a8SJr86ZNktv5y/T98eVF+ktVfyrKefpTXa1XyTfptCqbvGzW
zcv0d5u8+R08atZXy6JpiqpsNyvo9/zs8sdkVbxM0rStpvod/Zjlq/YGnhzh
76aq2zq/bsIXzWYZP5hWy1U2bd0X66vwrKzwUX09zWdNu1nk+llbtPjj8iZP
z0r4sUmPW1xW1sIc08vqU16mj86OL3eT7Oqqzj+/TOFHktV5BpMv27wu8zb5
dAv7VcxLXHzmmk+vqhoWPYONepke7h88Hh/sJ9m6vanql8k4LUqY/qtJ+mpd
zq4W2SyHGfJ2v8rWdV5O8+hVVcNGX+TTdY3ThBlX9SZ99eoEXuXLrFi8TBfz
xf9q5IOW3k9gB3Sknybpazj7Tba0cX4q6mJ2k9XuBY3yv9fZAlou08t8elNW
i2pe5A2sdzrBfYWTyGFPnzx79iR9XdX5TbVu8vS0Lj7jNKcwOMwzK9PTIp9X
uOv5HHbjZXqSLYrrqi6LjI5rXbY1fPnh4hh+rm4IIHf+cJA+f/I8ffrkIH0G
4LgTFrfkKf6v/2iLyX/I/Pzyfp6kb393WpXV/GYddvLnvM6Xm/jNw5d4+OxF
+mNWl3CO1Xp+k76vspkt0b2g9cxwQz8cHKXPXl1ECyyLNp+l/wLQMauWYa1/
ODpKDw6fHKaPnz4+eP4irPQv1Ywm219qUlb1EmDrc4435v2PJ4cHBy/kz2cH
T+zPJwdPwp9P5c/nL47sAxg2fPAs/GkfPN/f12YHh9bDwbMj/fPxC+3h+dMD
+/bZkXb2+MVzbfZi30Z7AQjmZQJ///LTxXPqC+56Vs9xs3du2nbVvNzby7O6
vRkX5XU1KefZZFks9lY3q71ZdVsu4AAm8OOP18Ui/25aVfVsfDtvnh/tcFd8
m395+/7VafrT2dvTs8vzk/Ti3y8uz16nBy+eH43SNz8dTy4u35xO9vcfP/14
MNmf7H+kyVAHejnx7zEDyhu6y9ki/SmvmhX8yBZjvPmLRTGnO3qM/9mkj6Dn
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
RSzQPqkTZdZYZeMHIlW/2Rz8k3HqdyKVFSdYTnjooRbligcjpcghKmA89P2i
QPI/BKm4rEljloweiFFhCzCq9e9Mpv5Bkcz8FGWzh76fl+Xau8qV5ucfE+ro
Z0eM+t3yn0kqIauoG1opBZfQBkatKdiG6dpF8eO6mDZz+ePGPEoxqZv1ciPB
LKY5DJdx5+5R8cSo3u78pl/SnNricd9VtMU3ZA0YI5OMNxipYsbFokAY1kg9
dGy0EhkBVShcUx1KjVaizldiP5wlH+NcEJYNvtTumBIatILVaNEC6cdg1mCq
E2lsZ77elJGWRZidoARL/YgWnDnA3cB1feOrePwRn5+LZRkBnpUX4dbrj1em
8rwxYWpFK2ll7u29WW0y3OL3Ttu1bE/D59yEa+roPtZ277LPTIVvs/ScdK4G
aCZmVKdVytcDyfrwcdL/9lm9/9V3s18vVXI1hYoxRtla+kw1X/x4r8Kkp69z
HXCf3BN7ydt35guqBs+fg3j704fg+OP78Obs6ur2/McXp90f7QK4FCA9WimE
O9Xz/CIpFCncfCbxCHsIlBWWF3JfKLyqR+F6JArEvEx3fwZBdTbb82tY8pXi
1vYKt938xb/8kg+rpturDi3uF0NegIuNFpfdcoJYdfi8TrB7/aH7MgdmhfLT
MpS7l199VTzq6pPOHbQTa6tvJ/wM/hQTGEz1W1eB2NMotuFy6Z+laUUUvJ49
7A0eaETLpT1JNw5/T8p0n3KgpH/KiFk4T4ylLpzfXnjSurg6fXk1vIgu3z2J
0uOPydsP7avL5pvlk1dXH4+GZ8Oj+au33755Pxq+e/LNOX3z4cPfn3x3evxk
urqFf8+Ojj4eHV2//Wn43fgE/j69nD//9dmH0yP4/dv03Yu3r9++O34WXF52
xvXv31+86a4/vX4yOW59/+Htq6j9w4fZD/VvO98tnyy/fX18/L7/9MO7y/WP
372Kvru9eXn+U6s+f/rti9YPg+mzT7DMRTY/iurPr5ffvP715U39x5tFvdsb
XT+dfdiM1/Gvw1cn7SDrvh+uey9GF9+3/n7zdPbpfPP3J9ObuB3E2Ve5m2Dh
9yxZbD5pWOFe0TvgHIM+suUYNiNpz/50rxRDgJ1xiuCPb5824x+Gycvk6bff
B98lz46fXo2ejPHv87e/ngcvkqeDBjy0HLee00PP3p41J0++/xX+f3ue3CTR
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
Do8oN7gBnPi/fMh1CBlnAgA=

-->

</rfc>
