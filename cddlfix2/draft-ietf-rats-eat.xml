<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="December" day="03"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
Relying Party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a Relying Party, a server or a
service.  This allows the Relying Party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>The notion of attestation here is large and may include, but is not limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular it is a format that can be used for Attestation Evidence or Attestation Results as defined in the RATS architecture.</t>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a set of claims about an entity/device based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT), <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS), <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT), <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS), <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is simple structure to hold a collection of detached claims-sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>An EAT can be encoded in either CBOR or JSON.
The definition of each claim is such that it can be encoded either.
Each token is either entirely CBOR or JSON, with only an exception for nested tokens.</t>
        <t>To implement composite attestation as described in the RATS architecture document, one token has to be nested inside another.
It is also possible to construct composite Attestation Results (see below) which may be expressed as one token nested inside another.
So as to not force each end-end attestation system to be all JSON or all CBOR, nesting of JSON-encoded tokens in CBOR-encoded tokens and vice versa is accommodated by this specification.
This is the only place that CBOR and JSON can be mixed.</t>
        <t>This specification formally uses CDDL, <xref target="RFC8610" format="default"/>, to
define each claim.  The implementor interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
        <t>(TODO: The authors are open to modifications to this specification and the UCCS specification to include CDDL for UCCS and UJCS there instead of here.)</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is authored with an orientation around that model.</t>
        <t>To summarize, an Attester on an entity/device generates Attestation Evidence.
Attestation Evidence is a Claims Set describing various characteristics of the entity/device.
Attestation Evidence also is usually signed by a key that proves the entity/device and the evidence it produces are authentic.
The Claims Set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is validated.
Some of the Claims may also be validated against Reference Values.
The Verifier then produces Attestation Results which is also usually a Claims Set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the "Remote Attestaton Procedures", RATS.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing a device on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="use-as-attestation-evidence" numbered="true" toc="default">
          <name>Use as Attestation Evidence</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence.</t>
          <t>Attestation Evidence nearly always has to be signed or otherwise have authenticity and integrity protection because the Attester is remote relative to the Verifier.
Usually, this is by using COSE/JOSE signing where the signing key is an attestation key provisioned into the entity/device by its manufacturer.
The details of how this is achieved are beyond this specification, but see <xref target="keyid" format="default"/>.
If there is already a suitable secure channel between the Attester and Verifier, UCCS may be used.</t>
        </section>
        <section anchor="use-as-attestation-results" numbered="true" toc="default">
          <name>Use as Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Results.</t>
          <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
          <t>When the Verifier is remote from the Relying Party, the Attestation Results must be protected for integrity, authenticity and possibly confidentiality.
Often this will simply be HTTPS as per a normal web service, but COSE or JOSE may also be used.
The details of this protection are beyond the scope of this document.</t>
        </section>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Indentifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the OEM of the hardware.
Any of the three forms may be used at the convenience of the attester implementation.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based" numbered="true" toc="default">
          <name>Random Number Based</name>
          <t>This format is always 16 bytes in size (128 bits).</t>
          <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every device they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM may also use a hash like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash may be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>This is to be base64url encoded in JSON.</t>
        </section>
        <section anchor="ieee-based" numbered="true" toc="default">
          <name>IEEE Based</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
        </section>
        <section anchor="iana-private-enterprise-number" numbered="true" toc="default">
          <name>IANA Private Enterprise Number</name>
          <t>IANA maintains a simple integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as a simple integer.</t>
          <t>In CBOR this is encoded as a major type 0 integer in CBOR and is typically 3 bytes.
It is encoded as a number in JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a simple free-form text claim for the name of the software.
A CoSWID manifest or other type of manifest can be used instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )

]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme / As defined by CoSWID /
]


]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity/client device where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network/remote attacks against the device.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification scheme such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Attester.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The Verifier or Relying Party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the Relying Party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that a device or entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity, device or submodule has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity, device or submodule received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>The first data item is a URI for the registrar.
The second data item is a platform label to indicate the particular platform that was certified.
For platform certifications only these two are needed.</t>
        <t>A DLOA may equally apply to an application.
In that case it has the URI for the registrar, a platform label and additionally an application label.</t>
        <t>The method of combining the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]


]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 


]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submodules-submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three major types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <t>These are distinguished primarily by their data type which may be a map/object, string or array.</t>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is simply a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set is always the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object as that is the type of a Claims-Set.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
            <t>In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does NOT need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.</t>
            <t>Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The data type for this type of submodule is either a text or byte string.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new simple type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with one exception.
The token can't be CBOR-encoded.</t>
              <sourcecode type="CDDL"><![CDATA[
; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token


]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token is an array of two items.
The first is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag that is either a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule is an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <sourcecode type="CDDL"><![CDATA[
; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set


]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
; This is the fundamental definition of a Claims-Set for both CBOR
; and JSON. It is a set of label-value pairs each of which is a
; claim.
;
; In CBOR the labels can be integers or strings with a strong
; preference for integers.  For JSON, the labels are always strings.
;
; The values can be anything, with some consideration for types that
; can work in both CBOR and JSON.

Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)

; This is CDDL for the 7 individual claims that are defined in CWT
; and JWT.  This CDDL works for either CBOR format CWT or JSON format
; JWT The integer format CWT Claim Keys (the labels) are defined in
; cwt-labels.cddl.  The string format JWT Claim Names (the labels)
; are defined in jwt-labels.cddl.

; $$claims-set-claims is defined in claims-set.cddl

$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)

; TODO: how does the bstr get handled in JSON validation with the
; cddl tool?  TODO: should this be a text for JSON?
; $$claims-set-claims //= (cti-label : bytes)

$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}


oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$claims-set-claims //= ( sw-name-label => tstr )


$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"


$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 


$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]



$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 



$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]

; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]



; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set



]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
; The top-level definition of a CBOR-encoded token.

CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token

    
; All forms of a CBOR-encoded token that are a CBOR tag.

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message


; All forms of a CBOR-encoded token that are not a CBOR tag.

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message


; The payload of the COSE message is always a Claims-Set

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message


UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set


DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token



; This is the CDDL definition of the labels for a CBOR format web
; token, a CWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7
; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


; These are not yet assigned in any way and may change.
; These are intentionally above 24 so as to not use up
; single-byte labels.

sueids-label = <TBD25>
chip-version-label = <TBD26>
board-version-label = <TBD27>
device-version-label = <TBD28>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+


; This defines the JSON equivalent of a UCCS message, a token with
; no integrity or authenticity protection.

UJCS-Message = Claims-Set


; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"

; This is the CDDL definition of the labels for a JSON format web
; token, a JWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"
; The following are claim names for JSON encoded tokens.

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The device authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the device, then
the device generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-01.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-01"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-19.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="October" year="2021"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-19"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-13.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="8" month="November" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-13"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-02.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-02"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIACKDqmEAA9y9a3Pb2LUo+B2/AqVOTUsJSVm2/FLfPrlqSd2Rj235WnL6
3EmlukASpBCTAAOQlnl8ncrfOFV3vs4Pyy+Z9d5rA6DsPjkzHyaVaovAxn6u
vd6P4XCYNOusnP6SLaoyP0nX9SZPilVNfzXrhw8ePH/wMJlk65O0WU+TZFpN
ymwJDad1NlsPi3w9G9bZuhnm2Xq4yNZ5s06Su/lJ+vb05jr9uarfF+U8/amu
Nqvkm3RSlU1eNpvmJP12mzffwqNmM14WTVNU5Xq7gn4vL25+TFbFSZKm62qi
7ejHNF+tb+HJMf5uqnpd57MmtGi2y/jBpFqussnatdiMw7Oywkf1bJJPm/V2
kWuzdbHGHze3eXpRwo9terrGZWVrmGN6U73Py3T/4vTmIMnG4zr/cJLCjySr
8wwmX67zuszXyfs72K9iXuLiM/f5ZFzVsOgpbNRJ+vDB0aPh0YMk26xvq/ok
GaZFCdN/OUpfbsrpeJFNc5ghb/fLbFPn5SSPXlU1bPR1PtnUOE2YcVVv05cv
z+BVvsyKxUm6mC/+eyMN1vR+BDugI/00Sl/B2W+zpY3zU1EX09usdi9olP+x
yRbw5TK9ySe3ZbWo5kXewHonI9xXOIkc9vTx06eP01dVnd9WmyZPz+viA05z
AoPDPLMyPS/yeYW7ns9hN07Ss2xRzKq6LDI6rk25rqHlu+tT+Lm6JYDc+91R
+uzxs/TJ46P0KYDjXljckqf43/+6LkZ/lfn55b0YpVffnldlNb/dhJ18kdf5
chu/+folPnz6PP0xq0s4x2ozv03fVtnUluhe0HqmuKHvjo7Tpy+vowWWxTqf
pv8K0DGtlmGtvzs+To8ePn6YPnry6OjZ87DSv1RTmmx3qUlZ1UuArQ853pi3
P549PDp6Ln8+fXz0WP589vzYPX0a/rSnzx480LZHD5/Yn0+P7c/HD/XPR8/t
zydH9tnTY+330fNn2sNzwB/4J/4P/vn5p+tnx/x7ndVz3NG92/V61ZwcHuZZ
vb4dFuWsGpXzbLQsFoer29XhtLorF7DLI/jx+1mxyL+fVFU9Hd7Nm2fHe9wV
X9mfr96+PE9/urg6v7i5PEuv/+f1zcWr9Oj5s+NB+vqn09H1zevz0YMHj578
cjR6MHrwC02GOtAbiH8PGRpe04XNFulPedWs4Ee2GOL1XiyKOV3EU/xnm+5D
zwf0oV3q4+GDp8MHzxJ4enn6+nR09vPN6GyRFcsmXjkuHNZ9d3c3KrIyG8G4
h1mDaGOZl+vmcHK39ss7++HqbfpzPlYcBN0epNyvX0TqV4Hju8nNskWT27xe
tOYVTay5b2Z/kZnp1F5cX732U3vRmlo8t87k2rN7d3Z2PTpHAgONhuejQGU2
k0mDLW5u4Tr+9ObN6PLVxWV3V3HyKyAQ2WL0aL5a0fynefN+Xa2W1XSzyJvD
61U+KWbFhI659fM8X8O1a0ZZs/r4+8a/uZx+//Thc38qj+opgEiZ14zg3wAQ
w4/mtlilb+rqL/lk/R0jFOhhkUbDMFlMzwBhpq/z9R0QyxRQGjSvlwWAXvNd
+nqzHOc14IlBmk2ndQ5ngBQFGhVTOAnrahcUP4I9ioHzeYr79+Pl+dXo9O3V
xYlfCz5NT6EX7Bo6rur0dLGo7gBXvQUSVhcTRFtXK1oszOOi/FDUFcNE+rJo
1r0HMSumVQbXJoNbQyeBO9rQ46HSpmGd/3VTAGIm8KJXmZ/HMON5QDudx7DS
eQxzN4/hAuYx/HA0ejicTYcPH8CSjx48HN2ul4tdm4Sknpcus3Q79rr6kOMR
pNgT7tzF6evh0aN+kMP7Mm+OeJHIVWX1tDkcZzWSggYQXDncrCZ+x5lhUFRz
WsNyF7mcOkwPBjt89+Ys1S52reCn66PWKeNUz6rrny/P3RVqsslyOKmau2KK
7+Egy8vzs6osAUoRCvtXBftcFtMRsDVycvwAOqIP4d86Hx798iDssSyO+09l
AIZzwLxAnOETuJ4MRHkNf2Rpk6/To76Nf0YotQ/DzTaLBdP01yNgL94Xy02d
dd4BF/BDnU0X+bbz6tUofQGEt+m8+GGUTvP0VT7NAa66r89GyOWsiyWsKCG6
dv7y6rR/9+aLapwtVsAaA6OzJNC4W+HerQFaDzcrJG3NISzx8eHRw8Of3pz9
cl7MC8BcL3PgG+ur2elqVVcfssUvH5BqraYzv8XSNuXGaTVLtXk/DB89TvDk
31y83oE08zJgfPhx+CYvoceFoJnRKpvnfvw3wOLBGMgp5/WqLhoD3n0Y4wDQ
xl83JBIozUEGeLjO5k2EePAV07cbeAVfzeES19udl6yfXGrX4a/RR4JJ+B+y
FTGjdHz0ULmYY8cdHT18YKzLI3iKf4MoMzqtJ7fAtU3WwIe3qVLm3uEHPxTA
yUyzLQgO2eR9tFJ9hVIBvOtdIZzBXfG+WOXTgleJvw71y1/4y1EvWb+4uBg9
A3R3dPo23mB4kV4LShqke/RbGrIEAex6/qEAvuZSCEte77khzvOJwtCD531c
jOE72Jec8fysKEG0AujWd4cy4hA7YXSBGPXs1en1pC5W62jKF5NlFuNHmHdo
CxJROd8AOMY0dZA+Hh2lF9MCf+wNqHNbePrwyUO3pvTFpszxUhztYstymANw
pG4OtDB6DH0dwliHOAL+oKuJLO6jsxHwjC9BePXLgUeLSuj+6ZvLFifwECi6
TNpN8EVWbjIQ6WCKz3behbtHNKebt4fzMMQQhjj8hhhl4CRA/vyFVjHLhLj1
0BCQ1RdToAw5MXKAtFHCLjZLohTvLkc/beBdvCR8sigAgaZwudJ3cPkBAV18
BMw2BT4BpBy4/A6eQGx+d3kwSK/qeVYW/y47utj2tbyilsjonKHEXm5ToCT7
Z5fnntc+3cw3zRq352nv9vTApCLeabY8xIfDQKfDX3f5GMSOyYbxynoDDAiw
/0DAN4WeMu7Iy6p6v1l175mgLzlr2mlSIwRc1TtbEIrxWEY9s7ZHgG+GOLvV
Znz4ocjv6BJ9U/OAhVCyPqTw9vRr5/m1OwlkZrqZAPZr8hoRR6MLOIRrn38M
3MAOHIVI4Gg3kkp/BJCCS4RsEUDBq3xdV6tqAdQO5lrnmXLMTXr1ASeQ31E7
j6b7r0w+buA881FWNkWLU8O10X9geji7Gv7zNGKs4Cdxz2+uh0fHD6LZmx7m
rWNl6WKc1dvVuprX2eq2mADnQAJI7+QmTT0ZlXAoo3n1AQ95YQLKlGQSwKmr
5hCGPnyI6DXbydOa+HpZNjDBDV1N3VsPJq8yxC8PjpiPgcu2BDJ/BgsBsSOL
FsjvUn1HS7tUsoqqMVWbbMNeXAAnsgkSSh/+mlC3E+lVpDa6qpNDf9eBu1jw
Vcd5Xl1fjP7tMVCRtpgI7G0+/AhvqBmwFKOzvF73NyM+AaR4YK2BnYVmuAnJ
cDhMszFejAkwLqflF9SAKfJbgAibNCOVH2C+fVb55dMDYmurWTIhWThd32Zr
4CwbWO04T7GznHDc5DbD0WAD4LAmDZ4VgHlO4w7S9XaFwuNim2TwMRHpRfEe
vmS9ERw4tr6sbuTtCOXjHLCxjJoBcd80MK8xsB3J23yxRb4bJdVtuq7gozUJ
nHl6W92ly83kNi3W6V3RQB/4nhTBMPVcJjTiTTm9SYsmzQt4AeOnZz/f4ERA
8odP17dpUy1zr/ocAnKB72EWshkj2ET4boEgAXOYg0APCH+xgJGgX0W/8AfM
AgcispLgMLhjqLtI+KyWxRS4+yT5BrkFRkoIb7DQZbXOdce8FrbAs5pt4C7g
EHBJBIXx+ZCoiS1q6iCRDhrcmAyfL6txAVIabf6Atl7UvsNqNry5hc1t0n04
jgMZewAbk1S0T7CEVQWkGPcV4SaHrW7yxQx/Z2l0NAOEJ5gXsvWwwYnMkQ4X
F8CzxGPpnOj7Eg6SDqAFWEk2rjZ8lrotsJdT4ESA7N/d5jRHOHw68sa1g71G
KbmsaP8QPN12wkc57ikfJfa4BKQCUt5iM4XFj2FEeAvfAtguSfOJUAXdzSpc
BEwd2ezfor4Eeob/47tl9l76gtu50Kcya1jV9A7Bev8PPx/8uk9h14FWAW8z
SFcZytsbmPaCqB4iNFNIGLgCPVk1OMarPGs2jNe1z6aarXke1z8fpPWmJIU/
bEkYEL8EZmpWzDdCaXFmfPWjmWFDp1ABqOzBCm4hCo8AQOlPb65TZf3wpPwF
gpvPJ8m3nBE0H1IBR7kSzRWMx9s1zYGwwLrh5Z9I8vHSzZ9HyWXpNg6BhW8T
kQG+QBO4EmNBObinHnFeIKpE9Wnr+du82SxgJbAgNwGCbjQk+Tngvf/mG0Q4
A0QDA1IXwn9fnF3Tus4vfvAYKhMcbNiQroCh10PZznGG00XgLu1gPHz+tlf/
Okg/fRKN+OfP0OZdCfCF84S+EFWxDhToISxtH+dJXwT9Jn3Upz2VjlFDD22S
04UcDIkIzSD1+rJBOgGGyGALSG4x5Z8E7FPYM2ijkE1GODgEPnZ4QcJ37XjB
hkG0wt2Y1dUS9wKpSVaDLFIhQoL7C7s7ElCLNKSCqBHkgMTG7xqkQLwM1GJO
WeBBSOdtQmBxiGXU1z2wkZWRUAZsh5XSPVgyGgn2AiiWMG/Ah3x1dAuFxMIq
BilaJBGDIRan+wDoHTcKdwH6WiAkMvvFU9QJAYSj/NlMchiiqJrd84WlNoKQ
o82n7vzW47RmG4RynNqwztGkOpX9ESQca3552Qh11aRapPmCERQSKlme4nWC
XyTRCG7C9QwExnkj56THXuAkP+AYOENlHPS60a4QACcvEd+D+MYEO1/RsQvy
swkR1OBx41MCGkAgvBUZYiZAIEgtAF+MCTRROkOOB3BqPpqPBumry1cX9OCA
PmU62v52fcvmuA3LoLRUUgDhjjF1Kis4zI+wmCXwqSB/Nss0m9RVQ6SUPqRO
+4GaDhDkjRRVfgD+q+Ei/wDIcgmkBGCgIQThL/+L6PLD3X+hdx/+oFuPRobJ
LTRFPPUDMCPAUuwD7qJW8C9de0RmOPmmWK4WyDHWG8KBeANvq8UUjh42eZFP
FBSm2iuDDAhna77Osv18LZocUDhAFhyeca8I/vNa4d607/hAloVDIMDCmyWc
hSF64QH74GvEqPr8/OWA3xPvBg0MQ2sf3B6vWk93dIyt25vDOnmVtEFIDWlt
xbrdJ3c4Si7wizXh2MC54iJr3Ag/3oB52KpcbIlSfJzkK1t+Saw9d0TgUqV0
OnTv0L+gaop1zHASVWOUtZuuGckeEA3iid5mxIPDamTYgvAHzKriRV0yAUYs
AwM3xXhBwIF4hoDFzaiP3u43Ody8HFDAASCKAjZIblT+cYXmJhgxa9x8dszi
ukp5osjlwSYBQaXzAZQAAtY02oxmC10sZVV49whgEPXD33gKAxqFOKkZvVQZ
TfYcdxDbtR8T8UNaDiSqyWhbJiRdTgmJjgVTRTdbcHbBCJAOfLXIVBSIQFbB
aolYpB9NEBeEGi1iuhjsmUF4cvTg82cQ5aqE2RsHviyuBRiCnShYnZ4LD44d
8aEu8wT+FdClVzhDHuL5MbAKdgE/fQq6UkAldY7HiXwlrRpEFvocUZ7u8gBt
B3BYxcf0Ap+5icP+JEwoYOXpaSDcNaoySMCcFx/wXpXw2V+aqhRiCp/eEQJ2
XeN2A8Wdwa4hiy1UzQl2babhDjtgHQceYz5DHEx7codk7gMQ5gzBnmSZYkow
iPgcm/TSZBFNkDekbmLEsqwa4hfvCJtE/Khj9gDmQZgh2WHQA1dhDBoB8caX
+mVeT7YDKWyrR5KEcW3S9e71GU63sQvc5v2bq/MrNnfybvLJoTkPoQvuidt0
EtG6dFAoSc/04AM/MVYJnwlPTsz5mkkxIKY8m+JO4O/RAbPzwar8isQQ/IpQ
ZKTRS36+RdG7MIlS+OAp31ckKCp5EAY3RNsn5ziE/COKZ3l6JIfRNvjg1YXl
5AjiSmS8hOPQ26Clv0AspKBLUwIkwrKl7CgwLqVMnybGFKXZLJfAVP47KxgY
c6MmoOxKLsy1QYNeQWuU9IpfJBg5BkV2A/f/AzKzm2aX+BkNvqN3IkcFMo8b
QoeiF0P9U/o+3/JqSf/RdPs0IMttstR4upkIrjHmhPkCtwx3s8tKxExiNplt
XOYZg7bcEBBv8uYWqA3QcREX4WOeLOJbknj6dxUH7l37vGK1WZb+EbaOrBmM
AklhAH1nROxhKBHUkJhc0xx5g2U5SIdpHwHQrGWazTO8QEC/Zzk7BP4xW2xy
ZnTDiLg/Yc/6CD8Te2Ud9KA8TNiWqMh1z75Ir91t0eHmlSp9Ym2VTQNfQcti
iYoR5F7g+tS6JXuiy9Oe0dHGRNu9AVtoaey4d9N97FA1lHk+lStM44sQMEgB
W9xmK9GykbCqaheRb0q2Pgx8C1TIl5MCMAxIc2WTCVNeE3MK1/o1LoH5bzhu
WKpMzk6NcF60AIR2RHPKsMvd2DSKTEmuwWUwHgpy1/3HhCj3G7LYZf1oA/nz
rbDXkULG4zbiVGgJbMAPKmCRabfKTRKmLModd6kfiZQ5ElfY4Lts2zhGWOAQ
RqJLfYdOB7fZhzyWWchHykQaJ8GM80mGBx3AAnWejWh7UxK5gZdRcNXDGSXv
+I4Igi9ImbEhfyy0Rhy+gP+Yz2984/EJor2ChHLPC+NTwkXoAE1bJMO2lFNb
UvMts3Izy4gi1SoSsVoCiSnpOHhmwFsWQKymBD/jfFsR1LSpOatmUQD49Akm
UkyR+7icBdDKFjVQasQKzaZYE4/VsK8AStAlENExXIM8L+PNxK3XbWPtnAeD
e4BPwPP/A9gLF4HlJ2gz2/ClMar373yADBCAkNClL6gRCwepdGao7do5yqtM
V9TsugYs4wNGRI3TKmsaU2pEOKIfiwJjgVpNz8IRgEh3Y5KJsAMS5+yimHov
DYAWjfYXNv3wPMjVeCE9Be2TP/tvm0DiGELfXVyek94D/kU2CoHjZaUA+OmT
qq3pXY1yZ4aCUOO2mnkjPkzcGOL2aEqws0Q5v7CznT1oL5NUT0tAsUXDnGwv
eQ0WNeqQDRrvUXcwzllntg22jeiAUHNFXO9AVF+stgCBaMI875qOKqeblU/e
51Ndbzadhj77qBgx96YGywD3wXzQACScakxgGJeSJEHXiUYbJWhrl40fxF/U
+SQvlE27VnOH7SwtBI+xuVNuDQ+SN5M1dD27yTZP2rBG7hgvphe44VSzMLS3
wugenIVZSE8kR8WKxmhZuF/KA67Qh22yHZKAXH/AgWebcsLCAhIPgA70rlit
SCVR8y2jCUZmXVZ+oBImR32Uyrd9/bdY654DmKJPpCA4vS5ht/2lkaPnq8+w
wtQQBgZk35iOeJbfpe+LBbIeOYh+wE6wEgFJEr3kFyMUsgSl234F+mgYo2Ws
3AWfS8Qg4zwNqtGZKDiIMg+6VFvUWKQNnrGym85hlFzN1rnQAbqBgjGh9z/c
3Ly5RtS2ImO0YKq7fKymXaZ1SKiJTOC/nsFmwtSiqDSQ4xwiYop6fxAqrZ0S
JrFOic+A+qaQunOPifqeKpKQJihXWQez3hhR3BI3YH8Po6PIX2TvgKAswU9V
4COeAC96ZNsuxXRVL4ONg1VMSaSFA4KxmBLm8u4pJAUwniR6L5gSQ5yUKR+l
orrNvCVZFOKyNFY65iTlN/CizhaJrQU//rYZoa8Fyvp1KV00O2zsDM9L2q5i
RqhkDbcFOBGyd3rv79ScwlnYDu3N/EXzhNGjK1esE8SG7OHCnHQ0A7tUZfqP
v//vbLVq/vH3/yt1IzMOqDdlk2Slm4UoO/evrvkAgU1DyzpczkWOWoGMlPYS
4oI7nmDno/RyHeBTrvPNxUW6f4OWeTQa6PK9zViGKJpkiogFcBisrKnIhsSU
l0fvGrljhIdULRkXiClqYBKcJz7pDoP+D7lhoT66PTncrH10FUXClYhr6QVr
Ng/SIazjtgBeIlgjka3iswIqUSLuVBn3Dz8n7Ova6LqYl2P5HUVbD/mNekb0
OHywdTpxPhPqocOIlgWLdTafI4O0JpuxBxfGeiSrJgXynsWc3SphzEu9kIsB
3+iimdSASQOEduAkuWXznFryAmcdRrSLxPZCnFcZHHCSbyRKhMz5rDJEWQJk
0mmT7r16d30DYjH9m76+or/fXvyPd5dvL87x7+s/nL58aX9wiwR+XL17Ke/x
r/Dl2dWrVxevz/ljeJq2Hr06/Z97BGDJ3tWbm8ur16cv97ose8Z2q3Ee9NvM
j3pVXPLD2Zv06JhVohjM9vmzqF2Pnh6zOrlkWCZlPf8k9gkuTp6RVADnDIhy
hZ7xzQAHAGR3x34qo7Z7RJ2zksA5R9BhoyTh1LLsiqrPVAWcEOdxkpykp+mq
yCdEDgrnE4eovKZVstcBoneMCYJLFGxXppvn3VhlRS2qQlT8bFjoN0crDEFA
ekF6tEphaMsqXppP+hqjFGhSG/asXecf18TDEKuJV0ldbfk2iB3iMtyxzL3g
IWeRaQ96suH+Nd/iaDdqjlhmK5qdXlabYiYD6YfEDeqnvFT0/3NyhUxMN4vb
OPJJ4zGvhGhWp0jtcJifbw5jS2xnovpJReciXgNVuUYUFKbQBP5eKGIQOL8a
pCJ1NqLFXk2zakPymo+wrpAK5TUClehQFRGk++YaaAoqNOOhKGosujJgcD3q
rBBZGNAEy5IArGJJIr8NYtdZJ9fWjzhMRO5hgGrWt4D/lWbjTWRXMlGAqDOZ
acBBombkzYsRxawq5mEbld10C2ePPJk6HwgpQ3H1GO3Sq31WD59II3GvNnRt
XCArqVvSW+w02Z5ey/XBzy/CBe1pDehOrTY1skrEcdb5AokB4TIeMAvBN8Hv
hDWLQHzOWM5KD2uZH3pmbQ/Zd4vjWv68Q73Gi3Cqc+UqFcRs88RQa+BDG2Rq
sbT/DJwHIPPx5v6Gt3WAmngV4wBFr8ltZV1vB6zXEXGxac1dTkvvMGznatOe
uNM8hcvBM8EN+sKBBL2diT4fKgBwCXFoH6+TXRFGYimXd1iczz6I4CusDV8x
eYgOK4JkAvec1UoNauogQERJMV5wFiDhvKkAOrY7vezgdLqyd507/XONr2vB
0+pdY7EPOAHSJQznVTWV+Q7SebWA7ltniJ4RFcWtWrtsgWop0mAhSkKE2LhT
AeK4WeZe84LryDG+nSRDOgyYAZ1JZx1LYCPXLPnWwXUJb7rT+SGNwDgW0ibZ
OMJAma1Fbfki5wXvshKkYsH/qohsmfsEQRlnE+lrmF9oxYALL/EivHvh33lv
vMK5I6kMGru/odJX5CtE4BkgcG9IV5dHhB3SWJLTHvslYMKPufIZxCBwtyvW
zDlmu+OxkGCEB+I8cYU1jiBNLyKvHN20zEztcwx5JkeuT5/0M/RaKK2TQXB5
oMYAMZu6ZM24UW0YGHcn+GYgi3IoLATwT7hvbiqBwSTOu48tMnsB60QiFglZ
Kxq65XBC7DW5nJUL5gq0Bwr7UOYIJuN9onZ/7ecTekBuTkw24iGKQbX0ah+A
gmb+l3VxQOyObDlTyj14vac81Iv2y7+4l6zdBDBO0J4O+yisAJ05I4VChH5U
3ZFhKWwju1SF6K2sSYgjnxJOUadBvAKkh4g18wxg5CQkyJHDFTBsgjaFekft
Dd4yFWyDHortvJGAKCyaEO3E/OLnm6yGK5I7u684wLfGXy2yre44osl1tlwJ
KO0X2fqABa49+HOva6fwF9DdItH2EnVJ0JiL0QLmuCvEhBbLNwDxM8qigRsL
4RyJOP2RVDgNXzKfJqoXcuIlW5n4lBCfPFOL+CSYmeEobvMFmdQm7D1orYA7
K6opnQXOR5xv4gFxDegXRIhKPpBuEccM2G8C1gw3Ib1Q/T6epqcgIH5jh7Di
cVWRfScDrK56qYR82EiWLz5KU5zFIkMDBW1V2mSUnmMtZvYFuQeJAnuqnqAZ
uaBMC6CQG7TU6vEirWuqSUGMhPqOBI3/ukr8AYKEhq6/sF4khaJFXRtMWK8s
g/hgDYTs2aLixAUcC8KcBe4kX0a8ZlMk7/hRoh+hZ3D03Sh9Xckp4G6L0EJ6
BZRhxMSQ0EdhJOB9UIG3xY0pVoVg8Ew6EnIQD5SIc3/oVsYjeQBZfJRI6roi
bjB9cjwcI9svqLDlekb0YlUhSBdLluWsAcbcZOWc1vq7w2H6+MGDdFzAkVZl
sgXZHr3YmbKyox6tiXXb8Y7a/pNnQZUmpJ1CfXhOqaaAsiDMyrmhgg/oa1Uq
DItvkfMOYMIJ6OA1YRvBvoR6Dtg7H1o0qlQVhZ1gJtRW4Q1QxCKh3w1hXWlU
NEnExu5QsOdsN4l8I+jgRHZP2lYokRPJaR/9znLy3kfvBBS02RWPoCtc7MQu
dpiRIBnzajMnVm6bNQ4Tq4gfycSdBl3P97Y1V2Pm1JwbziYmUfgRolrfuapB
1YDNfaDsaoFMkWi8Thc5IpJnsPfoSLX/5BgAb90c4NJm+R3SNKRKJdv7EnFE
ICketRPL7GOx3JDCHb+kPohpoxlS1BPNc5kDs4phfOyemzHJUMdP3gfUHcha
G7RB840QkIQeExVEZHHDsLiwDxJ1tVaIZOfNZB16zVHZDfDEg5LwHphmgfdX
6JCDfufUp/heSUIY9HAK3rWwldAUrtw8j+zDSWYQuxIh/2/wP+Tukt/8Jvio
D+WwDw+/5+wefLeGi2ycL9Lv/4VnMKS4gMP0T+nD3/onfz7APFj28/sUozfT
ES10/9lo9OT4gMelK/yuLMhBeKFGmsBObfJiepB++oaM1UmC//zj7//ROCVb
oBzOGWPK9wxZxcOuLSNpxQsCWVqTLxpJnFn6AzCtayB5tyjgA2HjeD/1MMqn
SdCVAydYZ2YcsFnpTa9zZ08iXaMYXKoarS9si6DPgy+p9QE7B/iVXBDJqgwn
0rBaQiIgG1UQZu+Lkj3cGgzZXaQlpfxAFEXSXuH6J1RI1wWWAcwiGfNGbmv1
Dm70VBZsBeS8KehKzUymxGp4F5hGoGvDwsCIfA2kRzPsRV+rd5REONF+NIOE
XIvYhVzigEqR4tARXmwZeDNaNqiou0S6Y7J8pzYKCr/YkigrjBD0gzzaIqf4
C+sN+YsNC30wzpRNb9BNGC5aO+FL/zqxjYjIEFkqUX+LmwPc60yU5eJYxttM
87cTMM39XcZ0p4xoUZErVyWeC0u2xuJwCcULA3XTOJ17QxgxVDXPV3ZllLlP
1K0oWvEB427h4cSq3hdQhStF++I1eTbhnZbGcdvga407w6wrDIg2XAT0kmgl
OjrNczEJko+7xgMfqjUmZWhm4EHnWTLnAHmar29HmFOqheFF8kO6I8EawqNK
N6ZRePRISAlJ6vtHHBaFjwh8Hz5+wkRKrLuG0sl7hAlSoy7IeB20P2/hFwbB
wkWYULPTDtmRQZZe85jkMkxTEHYgsfhImSfR73PhZzMO48JjYP0EYZgWDUk8
DQmQ7q4CO/V3rwBpOzmWN2dEgAIeOu5VK/Ngzz5UxTRdZQS7s1y0eBjpj5wy
TwjwmwezOBIS+XcnoqE+iL8Sv3PcEsuqkJ6yjkbMVQ+fEIT9r/QG9+wH3EL5
GyV6+DtOAfO/oOWDjw+O4MXb09fn2Fa9+dKjh88G6dHzh4iX5diRL5iCCMy4
1/FqxNlwjDE5nRc+GlkYC5HO7NSZ6YSfKN+UkperZGRuYj3tKMVWb1bE8Qc2
TCaBGmyeFcJl4Bph56caAugGIe0Zu5ZlsRcCqmluzSgdW8Px3rRai8bwC1vC
LNgYjlfCtBkXLYpZKxLb7Z4NjbgSWT4M71G5AU6FFjrSs3sIh0ZJTC7eXer5
4YY1KsDRBcEGE0lq04rlDLwuulhAJy7DAj0YHgMg4L9PHiAs0F/HEs09pYNh
n4+rd5cD/M/w0RPmBc7wQod75HjG9lRyFLM4AHhp9BNQ41A2J7Qb4fgSQyKe
OUJrMuIgGg6QQbB5dXqmCQyNuyVUYg770IIWh/LYuKmQOga7I698lO4HF+o7
CgRRykFy69LYVUmmaDmPmuCiYI2iKRGyY6dXEi1RJCSywIhfTWufPkXZa9D9
6tMnS470+bMCwiMEhFcXl/ElPh5OMV2b15QRRbJYN1j7M2lDeAKTLwpknFVT
hsssfSJNIuaLcOrEi48eqQ1Ei8TmfhcamTWM20XpCHNguoUWeNpTUgAyyZF8
EDj2t42YYvfxXpCl8Prs8tJ0uHafsPF34c/0kYxMlgXcqAHdrAcfHz06YHmY
to0710mak4JZlF5ubkv2XWw2ZPW9/uNrb9oZwbFEKULpaD6dpN8gN0BSQjNk
h2ZKbvP9Hh32mYRK4objATR7IgR82xjDZHEQCBlTIAETDjaDXb/dLDG8ROKW
geco+WBL0uFoqJ1BEykzyoq0vihQtPQkQX0ubIoJ/vsd7cABd0yLIOZijURL
n5AQ4ljOapXhnQ5nztQboQtXKOkztoq0EJVLDrRFYhHILQcqYiqF79T4O5wm
XI5gwqIrnxCipIl534A2yMYoeZSKAy0NlMhAOkiVL4tpLPqbQhakmZy4bwYv
NCgJn8jScIZpLzF4m3kvIu6ILD5g4rUZgNBCrPeIEqIJiu6hhOMbYQ+vjTmA
qYsoInRWNaTRlgkzBdvxlLcDWoPsG9qHnBQ+hGkXr5I2cCGWOU1FUvnFAkNL
elfOVtdGk5GZI2eWanQvwgLp6uiM7zLkj7tnj0vFhH/8a5JhwifkxJbiR1/U
LeYNvWoBxUxuiTcjbb5sxxFtLYJKylQVBgtxvRIuS9lLXBYMtb5H+1NgpiuC
CD6PlpzJxG1EcfaS/LAMuPnd29fsnWOkUoULky30HWKVTV0iv5emX9ZwkJ4h
6DYMJx0kif3d0mI8HY0ARYoSA7UY1wDzQ5NYZH371/TvAbmbXgPVJLlGk9UI
NUVVLlnBmMsXRRGpdBkkSLQPvAIj40q9NIlhGoIwtchJnsX4hgvntM9qc35D
MCe9Yn6eO0mNPEjxiDBbPWK8tbhzDcdVVouVHufgc1rhuWZzPmnRY8Cp2Tsh
7uOK1NeM9aBP3g6MJycmigPrRX0mkesiUqoXtXIH/KXkDGAf1EbtpII4+fyw
K3Hh4OBejWerRJydb4qGdCJ803DUJlKfst8x90asZsZ3TbsdRE4gOPvtyrhJ
mif0oEZ1ZWQ05AH9uqHNeSOa876YMY5a5xngwkKCDEkzZmwpzRTNE5JlheZr
+czQGM375ryLqVekYT6wyHis6yBpMvquMeN9SR7A2UolCPRYWOOCTGHL3fb4
zfM2qoqUujebIOV4vioNyt5YjhKabPAm3/vx/Grva7UN179G3fArEM31lzDN
V+CZBps3AdPIb8E17hdgm0+kd/1dukas47FS8jlxeOcPmnrr6uKVZewU2Nwn
QowKVPrjsxgBxBQVuxzi5wLDms1rRHFfatZA9o1A08goOyauVYwEDFNwKqmZ
d+mtW+oWBlpRsdTmr8+TamtiAO4xDwunobMJjDhi7S2Ll5Lg+AckzrJCNZA1
GmFz9EStACXr2/dVWBQtFq2fcC7ReqGQ6KUKAGuBhS1Bd3ivoFvVGvJF4Kxe
drRauXCTXDGPl3pVAkQFioYWEMGAKSxMo9NkhQmL0UDMhWFUKyIuJDklov/a
ghuEP3ifS7ICJruLbS9IYDAK+dagwhCwEvBABfOmlmFONBOCYxg/oPs2ugmw
tVDmqf4zYbcl2BkxCKkYCMGBfDFErQphm3pTqpFXHcxgX0zU5wxMpTxm6G1u
Hb4j1yrOAcj+/mQLVAPTc1bZsdMMZjTdMgFekR8Wuf7pUK7NrlHlXtiQ4vrJ
+0veDaSAQMIpznET7JFkDYmRFAwP0IT8FJIeNd0V6hWJXOiT40298El6OCsP
XQtSaNhtEAUHu3WSfkxUzDYkAlMkfEs4mKb51TxafEMlhBvdLDOQ2FCI8mID
HKwYUiV3lPIgSbBUhxRFyFLg7F6dDl8O8L+v6L/XmkIT351dnici5789BTyb
oi6GPyAX3Nri69iJn1QtJOA/ZMM38UuJ96JmJepttpixGORWP6JZqKpksZWe
nmFPCXNetANRT0Ggcj2x0gZXEyaa2ERZF4RCx6MnYZawOI5M1etiIb9sMN/U
wAngwYakeA0ZPM+Ys+TkZtHCg2MOoYNmhcl0aKcS3kQEd8kSxDexae8InwMy
XJQBt0GHlJBrOvG5pkXNJZmiYVKxOkb8fjU964ISNmsmzUYacxpndue3fQh3
lzN+qZ+AMbjI5cSAnI4X1eR9o8IpMGTv6ROeRD5Tx7KZpDpilK+2NRp8iXh6
ICNwNKxmYYI79wfgdNDBGpm1t5GyIOkopvhokCXM2T/oDKQ5rkGiTiBiAwgE
uknMQw2RH7mIm3ZA6AbJJFnt7EoCmdycWyW7Z9qWgflqMRraOz0bnl8Mj5/t
MWVJ4rxgag0hvZS4zj74eHo2gP+eX+B/UUX4YysDGbszNCFqf7apCRd00Npo
FzF/1KLlkn5KA9nJY2FnIYQkofeIXtfC2UoyN3GQGbKUr/jP0KQ7uy9VWfj0
Cf4hAIZ/vUJWfc+EyUBsRdKC6EhUeUeqKY6OuVHj4IZVD+Sm25kzB9dylj11
yggaReTd/6JyygNzBJJtU1oe/IDNLMXm5agnYXECxTGml1jMIeYu+h6HSOQB
pu+OZedH+kq4pujl0RM4xZ38M7HE/LHx0FLMSp9Lp4epG15/wOSSgz7e+Y8g
A5JWl8faVw54+IFfyCTEz9Cy3cpbcxPHRsoSI7MaZHYOchTBigRu+quoJxtM
XYQSkHkOUh5xM31I7OnI5+dTtauQinFh1pvgITfaMdfCQU8chmTKCC82ozYA
OBVSO3fTXYT8h2ygqFnBqpiKYNEPIhslgRP5VNhqHFt3mrVmHD5EpIur5sCd
4j/MStx7CmqR4uxnxGIdPRL9/KdPXCsIezgl06F0rR3o0JHoR9iNUIbmqwup
pEonCEon3AcNUUptIiPMnku5t9CQJiebCAXiqzfOaqph9zWSplwVBDWDYbsx
t3f2jOTJg903TvohAP2v6Ehik7+mp9YjQBN/oi7k4UlKkvGAnvGuw6PfxGCU
/Nlr6DRlAZl76aoH1truBKqYhyyoIeAG5zjSLWchLZTmmkZgEkCCCwJiXLO2
XDimGrI3PhezZl4rZoa111UlE/kqfULa3A1xTmEjSVtwkPQtO0JysvKONbT/
SnBQLq5Fjfq2X9pSt8hvC1Zo+vV7889vS3PXhbAmBidUt/wXABiQltNg28C0
vLzaQ4A8fwiIsKwIw0sKKBYXN4v9JhJxEKlofO4bn/39ULxEEs2M3PXZ10Bt
o0iTbCWKflYlUBak5H2+Jelk7rJnkFVzbU/RkTb4eo63iSWMnlWbuh3HH4cP
UyJTdMi58b7boeCCfusDss2HLK/FHb1JQk7JSt1kMI8ppWSaLMhpWuhlCBhr
pXVKoB8WO4TMymQsdhwg6ygdpu/KUNJOAttYR0o2H+D/84mPNPJZQlHHm0h+
is4UXN6phjkE1J/gno3Sq7XkzRqQZVIUuiwllRVlyYNPMSGS7RjGatUZxeTB
9j6Eib+Npn2hDpDRUMHNjMOzhqLSTkKChCh7g2VISGc55RBybpSrleVJUFe7
AWX4GNfVXUMGLlEjLPKP6nxXfKDJB/25cZnqxEjQSY68rragzD5KjispllC8
sV1xiRxdZIOxS+nPxfDHIjXXy0EiNg125KSYOayHbNk/QooTTrjeTgFAsqik
4CKRdOOgh5M1ufRmzMhTQQ9GZrV4EKgXC19amB85SbBozo5/VfntWsWfcW5C
giQqjEZVFwzRtBiAii8xOhGmlu+RQGxVYdhryKuCOUIctKJc9QgAjHNHDL8K
zsgwsMxzkWe0RI2LytEAumMcTqs9oi00+XJpy0+frF4mKoQ6B31zcfEtg1/C
aLoRRhP6QNO+1LoSSU+hZ5S+RKkXJ0zzMaiaV9liEIAsXmnhcCzjYFL85UD5
FBeTlhQIRrbIE3GFOZTsPYampamzsCfJMWy6iihf2mtdOsI2hh0WJEJQAg8g
E9L76nbbkMoBRX6MV6rp1+5JSDUUu6MUIDoluWNVrdl5WD4H8EUNEZMZkZOd
+xbeHcyCIvIM9tx3cG9e8bnFeUpUmBGyJwod9S/IKYMJMhCtlB0YCMOJ99SZ
glvWmqQ3N6mbgu05WXejqbM1H1WmeWhcQQJydbLoTM6qE429I+sY1QZw1Tri
UAPFLJoMjBcoGTqyKUbirik5Dm2nhIFq0iGY7grQ3xr9JCTmQ3zlQmSQhV2T
YdYNQgLGBLj8Jrc0aK11kZpg11jcQW3Xe2pJ7yKTk+ZLFodu+YgSfBPtt5yZ
K67NIz5uzuM+r519S3gwJUkc1WxOGlgVLD06fkDogguEff6cJsSnRg3bhbRQ
1IzKbiGSQfgzHfY0TwNbsMgp3QNelKFrIG5fGsv+VYwr85oRR9ij6Gg14Oqa
HImxqw2mADfJauf336f/B0/BE5ST9Ih5YP/o4SBM1RPqk/QRv1Hp/CQ97hnS
ppNKeMmeH3Ev5UJjez2POiPaGx1xL0SWCBb5AeMXPbudDzGkUbQ54k4xQ1OT
AX/eKFmn4EfSguGtn460U3meOG5AmnDwDllGVBgy3+0lSWLkXqGkTZingUQ0
TdkLcV1XVilJ0F7sSaOmOnUoTq4uXoHg0Y6vJh0FW38/R87GIemqFU2C1UDz
t1evkD5oC04Y0s1J5pJQcfJX5I8Tr41Sw/FdZTLf10lv4YgC8MOvxUE42fN8
vJmjp/d60+jRTvEZ1o+EZypHEafJ+Z95m4dUUZNyAEswDj+hj9ELBgWqwjxn
Eq6Ql1qMQYjhIRX5i5vTn8QlPpuXFdpIg2JqvCkWhO2qhIpWkfOymxEnQ5DN
70xAa81gPAJsxSDpJDEjrg046kWO9kTrKRRNi9YssW5A4VfMeg0oMsTnUHRo
v0QRl4exjmnFABN1siTv14iLFzwfJFZLuLRZmsWwvUYrDMIXB6NekEegH8Ss
TrdltoQ9RaaVgDL17zUiWnyusBHSgoQGA2pP/ZL/UmPFOMiVW+wdlOtNRvBt
qzJPWJDkqnlRvjXWD2qWexlEzm9OSRfCAAkMEObHU5cxxpam2uBltuGUtRnp
7ZjkaI6ZxDsZBYcgNRpQ/DV7aU1IeO7k06MQsIT9Sak2dTHrWRhpTMVAjKld
MX8ZbfzWuZwnXAhThYNTMQGhDY3vMaO7bNx4dxA+fEmmxmQSs78nvnYABsFS
RQviWfL6A6d+tvRkPE/ONMKQRQLza/j4XOGCSrnRVWM3olsQKtDRZKxJCdaS
44vGSmi/e3inHr7ln2cSeQ8YRf3/h0WMVvWfZxOFj69Vk2Q9h3tjUT6K49ot
Eg0i4S5IVyDFIdALZjajXG/XBaeowHwIdyg4MFRq74n1riSMiMC3jYyGOoBN
jXYdihdkuONamazZ5NET6Y8nu64q82Bjj7+ihB9YP5fviNZcQ5uHjxXlwM4N
5XEgzMsBpJEHru+W7oUkjYn8ceuQbyOxVMRC38h5QQdJZRA0/C1XHHUa2lKE
lk2PVIObZiAeRmHaJJXmH5FEUApkU/oJcCQBasQV3DI8wQzijMMhujEzIxhc
yEQSFjnaUnB2Gkp0OmNcGqbkmB7Jpx7S52jiZ8YO3T6ineGKqz5rxU4uoRvn
QhNNAhHkxYsKfrXY1Brw2cEexKzhfiFozSQADBfPQRvCUWTzORZ+VudUB2Vy
y6IaVyjhcWFSYFBC2ltTH4U6Xlk8821wKVLV/90tpmCjBKJBg5aynykd20xq
LyRM4UKwUQAniW8le2PYRZH4XZqjBSp0KWeC7srGHKtpHkOdB/+So4k4kG1P
sSnWjrVTXiMupSKugZDxkIpvwgLQS2/iYCy+6OKidcEMT0LYnrIO+2lJXHLE
7xuTEBjNZkDyh2Ei4aJkB9sKonGQbaYyCyWZQutEaWICUECvjmMjB/IO8kNy
m2hGeFf1THijNcYkayJkqqY4EDrhwwiT8KVgJ0nBruyh9LBCx71sxulCWhz6
IRyE8q0oQORTLCdeU75d1qaKFrZnDfGmCJFA2fGf3x/ibNkjHsOomypASfqV
829P742ylYvtPfNDNj6Co9ZUV64Xm2y488RDk0dpLVcaCOqK6j2WxBGF8x2l
VyVm4uiEfCjQ6fF5OXVCqTNdH7iQhKsV2TpatP4/vdm4n7yb7b38caNZDr68
q63ZTLIVG+EKhwj5SBN3pILHWlvuYe9rTfpeyu3RDUWvvWYoehGpg3Z8Ysog
uX4n6QNW7eikTTGkD4a0zyS4m4bI3rllm5LIXqKheDuEA4ibHXem11UcyexM
DaR9dh642XXfuWG7L3tn59RMl8YzY3I5q6TpU262I6QxHW9Irh7kKXGrEetL
FUjnuOAavrnmGRaPRc3rsNCCG+sQxkJ9aSwMZ/mH2TSOm3gvgWIUXDfeWsGl
nkCO9yFNnCUd8ukwo+CgKgR1aE6OUchxQNYVK4zkSoTBPsjewEIoYt0ZUKW0
a5iNxWfyvuAOadwuYayBtz+0pKw4QXCcvzEkGEYHQbPZBpdyn3qSXJekQJur
WetTuogQZtlildGvosrFodwtApE552kdb06HInnAxQKI1RN+gdbaSPIcPH4o
nrbvpSNyv7yvIyt43e7s6eOjp+jLxOZ71OTxW+TYVsR9LcUHbSnFkyjgkj4o
xJ0YUz5Iuqlc0wuiG5NALkdNq7pIuu8bUXVFH0M2GJ2EupDaBFJXqgfm0ZfD
M6qujJpZV9Ij3tCnx085sBw35NkDNCJ0S1VcOnsqTgNkJ7zwZIjGl+yZzWnn
4qs43nLSV65cZPkXsBP2Dc3vmSFOJIdLWm19ZglfPZO4e8ubKhaWSMNglz51
eUiQfPfvTdGkPuuYVrVupZbX3H3EAOsIcNhLtE1i4pm1FTuBfavIEZ/SLjek
Djg3z0lEfnY7JCqyqjjqwEYxCLABRpaCX3alZyUabBRKoaxbTtQ+azoiZUXH
sFXiszuwbwY+AQfpKknNFhh3KacwQBUduqeLlh8e4DAS6UM601J4MMvFZGW6
SFa0+jOi+NakBBjoZZVoGMYXUakact1qRPERF4wSVCmmhlBeoePH4motiFV4
CjcYa5tZoMHPj87Sn/LKhjh9cwm3B56O4ClMXjBKinW81gBHA0qoI39mC37I
rhETYO8wzo92Ao+QHPMq7O6n62fH2pN9xAn0pKJONq4k4ZI1TzEh5aoBlMQf
IoKxQT6EhMycdgC+Zn9n1yt/d5tnU1HkUjF6ELlVZa+16tCaVGJOdg21NJt6
k8pmZrXkEXTdvc5ep/ut9IlARYbZkKdyICzCCpGpSK6Uyx3J1YKzjZaSRdIN
iow7VfQJ27Oi+0JpFuXiW7qI9viyCRgxMwxVjFx6AY8HtXalEUDVkUqcWOhg
1koqalCpoIVfZ5EWyxRXPoBQtEKh6nc8UctSad+4DDIaaShEyd+NUesOhbBm
lCtcZtYspGVNo7SsSGwTzSnbVcmzIjt0uSzKDaJMaAZbWzdsmKnzJEiLlF+V
WJPJWrOD/vTmOuRaHaUXoRp1yLtZ1QnmAgylGbwjKiz/r5ss5H2QpfGiJL7f
ukpCH2hWsYTlGVUXoyybw3ARiqWpnXYOf9dKfoWAg/5OpHGh6szYjRgKJHLM
mSe1uWT5nGDUj5RhK+gFCFKkZEvUkIrIhAOY5Zs9IBnv83qPwQvnJq6HGGJO
Y6NWH/ADK+sk1SxOWV9Y5cVsAsDaFB63KgDxznFqLLTXGGAkCQYVa7OhWv52
BDmTSVcb7whtFs/LrzG32rAmTNoTcZSNfltksmJvygbJCQf5ueLy9ovfBzTd
faM4eOc3w91NFHt2XjCS7DwOtwJe/Q1/DeEYbcA5zW+DMSxARcMy0yMQo/f0
917iFpo+pFf6YC8JK00f4Sv9vZeEZaTH9EZ+h2/cStPH/uNhaGtLTp9gC/m5
l8iK06f4lH7sJW656TN8bg/2CCd8nz6nUeYwuyDUIpy/WxE202Sc9EtzbfMv
TbdtFVq0RA6X34olNMtKljDZ8VF9APIrcsYzTKepctVUT9mjCf2xYuyrgJtn
6VJ7wKkexIsk75Br3DZZJzkeNPBAlhoaGAOcacS3FMCR/DCZ5sJg7xBJ0oLJ
sRDXsEneYoIK479YkS2mnxAzRH0IR6wxuDxeESp5i+pAcwUZK+spqOdq0U/J
qNaOsHXh/JT7fJ+vyLWuxhLUX6Onsg107hsYUNba+Et1A8PgUdl7dQ0bAm6H
7afCdO26scLNU3hGKGfnNi5yTGDq5fsVL64Qh1p6eyYnOiEjk+Z34rokhu5p
zhvURaj2X1I+e899R95o19GuMOOoZp89hN1ScTTKSM9JnVgxaKlKlLKEBZIb
cLHmSGRODXyUDofAdMMJAjQkJ/anZ92DmqM1i+A079dN9sta5AWKR9qshutq
SLkhvSM6gOjScZw8JPuSc0LOS6rmx77zJGWpA2vhOtdgpyFvmk+xMpNFPhyi
m3tIseR9Yi1LpwZkadGGjKRfiTG2+HObS5UmZsOPKzc67RYzjy63k2S61BJ3
EXjBfWBTYqwzbgtSbWdIhg7WwaGpwo83Ig/sIWZI4dLUaOp2i1fTi6tc3Sq3
qKVtkOWn6TVSViiuJNl1yWW935pz24WymC79zxplH7lnBjs4I7V/y31igR0l
Xy2tqTBERs2Wt9uK7K3qYSFrZqfoYXpmbqCARhpAhUg09v3Ta1GhvsUkxw3g
/BP5iGv2cP0r2rv9s9Nvm4M0mrCrYmgTIdNGoYOhwT4MF3lrwY5RyRMKnAgZ
UvQypKdlouphhyI8qLmeTRdc80JgutdvMWfJY4GHaoZ1K95QlduG78RpC3+1
zmIHjOObiUQ944DJSjtfWefp/pvqzQFeTis++aqqcxHpcoyVz1JowintuSxW
6u5H4jxm1iaTSdmDjo/h0NU9ZSWRXaQmJ0dJykmgWqOENL+oRJdb+R7Tn+FD
r0XmXS9BEswb1HrDNGgYknySe0ESU5BqANVKQsBNQ0R+Arh0h7m+3ufXIxCj
mmbUid56o070IjLq7PjEjDpzpg/OuTdgGzPe+KtnRptJU5+kx9KgWp2kjzvj
da00Mpzz7A3D2UM/nD2E4UKDarWXtsPq3kjqK+EgJBMW6sLkT97tzyxkffok
T1FIUgU+1xim2JnI4SLTvFqUKUpzbBWN977F4GgtBfnu7UvJXHLVTQIGby+Z
EQzq3qxjgwjwJQOfUmc4KIUTWZEfl7RUl2HfiFNX/rHALyTbudlfMZ0goOxR
5IzUq2PB0NJpmCJSGGI30VhKOkxyqGQzU10s8Tq51GtuSoFzhuvWTje0jVpy
SvaZFiq0ixZO4kYW4VITWCoDQGBsdiId4dsfz54/eP5AzCF6Bt1Gz54fP0dV
4g+Uro7csO9qLF+qQfkbdbOci/7vSvOtECuWYYLcjaQB5zzlqgEx5Z9cec7R
QJl22/nrdMU0x5LiX7MoG6w0EOhKQu5d4qX4sPZAEvlF9mqPa4RK+aMi5HMP
qtpuQQ66hvy1lqxhG1EoXxbSz30FetNLaKLA3wDBAur6W1VMD1pX+fzl1Wm6
f47R+sBsvGQFOpbSWyFqyBYH5uq9qDLKqrjjk5n75NMnbAMwwHv3b69eBogW
zzFji1vxJeb3pDUchBDcRnWMfLLF6Pu4kiy51tJ0lbXiMBRkKfj1T+x3+wYg
h/TcDHv3haowMHKnmMfL7IniC+asPK2VkTdx3ZlC66Oqnmel2OY6LrGunGP4
3pV7JOVt6QJgugludnwJgK62GR+owLs/cOcRPMT8kbR4qCIUs8GditeBgppW
aoozC3FbuL3muYdPxDzAp/qfmqnN0jmYxmADM6Qj9aCq6WIJ38zyNeue2VdU
iankM6JM6Q071ERLVR2NScyqjQ1F0SwDvVAzRCA0mtIlmpihDwcqNgnB0JwZ
K9IVM2pTauU+IIMGqYTaH6z0Lkhyz7hsmx/fWrLCBUMReVPxiqLi3Rq07qhW
+xNzM0VIU6GpkeEXIqZ/ZYUL125kLUHE6l2Wqj1mtfSt2BB71zzoro3sXa6S
e1tIlwybtFmYX47NDRxwo6cTIAFGHfSNID52227XZJeyxCykZGbE+fVcLKHl
gOn/lP6OHklRIHLmsZ+abQGf/GLzPiHyEF7oCn6hTk+YXoqilhq4Zfg2fekX
NIzlleSbsMAhTUDRtLIv6H1xXGHDJnUfacNGkMalPNYAXvZhsN6lmA1IFpRI
KmocbCAuGss35iRfpmiM5UVpF6smkkv/lIjfdn1rFccB1Bq3kspNZhCgRNMC
+xGYmyWfQHlMuh6MJ6bMIE77JmmBUs36aakj4jo0rAfKvHumZtzexpvSTUEU
M5whyYS5JgjXiQwZdba01AFRzJPsgDmhw8wP5da2i09fSuQRuyTwqJrfV5LR
3zfvtFWtlcLARMo3Vj6siop8Bgl2lLyyfCm8UnOOVq4iHu7bhssvkrv3Pqt2
W7OlcnQ653bSCvrwgPCb+JrpsvubWufYQhMLx0RX/GCMsKqLj65er0zkhha9
UTk+I4Z6KN4wnHxlIGyePqWELCECsZUjV1W47WQ0gbsn5oT59mxO+8BOTxk5
c8zCDJswAWyqWn/msMd52pdVijgM4JT0G+UmfIW8S5cahyZLtHUIqD8f8p+o
3UTjCSV35CNG8rOEy7bMFl64azqF/rSagdk24OLUdUaJfyU9NzFGhsfg3lXq
hYuE+JbCWWczi07TLeS85bn4FCyKcU0OD5pLzPZZEK0qUZzII/xLhXYvnrk/
bodZG8m40JD52XvOuWl3YqvCTPH0SZseygpr6WPecmZJxDeKtmfGJmbLWByJ
aswJBKNYAJ8b0bKzv0HNVhbnfOB7sYI9+IK6QLgh30jcXE3vT4AjRpx2CYc2
XJtDmc/NGkuZDY+Jx5pb4cq+XRNKU6kGQipMxcNJQiTO/n55E77mdJo+T33x
5TMynxLktH/1WYV05XoenYNqAV98VpsQCTXv7PRX7Ubf5kNng/YpcDR4fATd
fR85HUDWPkTH0nN1Ld8FsBuEy1XnQHwVS5maBBDLx69J/+SiZdVqI4K0tL28
vjq8vDhLj54/ffqA8C0epNkffUSIhYHR4ZCDVoSdUJODpcbFY4d2UOxmca3H
gKVL8/GjL8Xz4cb6Zx1LLkZo83Fyw/ZSJxzVKFRANQVLh+zBwdZqa2XkHvDw
+2wuvmRco1SCNIVV5Pn1dC90rZp1qOOoxXcgYLqwo9hIyhnU1CBHdyDkaiwi
Kbx/nb4mXUi96HKx4kCDGAGusi1mgzIqKAqAHNX9VKW3EtD4SnHCJhNEivBI
Fd3xExQrfpf+5jf6VEhFA+LAd+mrcP0ZKemEqa/v0pur86sT5Ym4CeZ3aO4w
8T7csWHRDDNRpmfz4cePMBr8Mc+nQ27137CYWtHkQ/4km/8LJkRszyWFBXIC
2xH2ld43QmLToipAkgyqfo/hpMl3X+4bUe4vFyWH7fxyQ5NtOXmYXHRh5ySp
Mu705FCZHn59/rKUNACghyMZhLNHIPPFxVtJFBmHkcK66RGjdgoOcfUAFSMw
dMCwbEucsBqFLQGMP8QiBijwDMwBTBlHTM8WJeSL598z5xjP2ySnFV0M86N1
Cbr7pRziOMlCboz3jq7xWwFfb9jrZqGTKjNODlEBBDkwUUIo3enLYqcR+xsS
Tjdrll8jwm1HLzhDnPXRcSHGt0ZVyUcl5DYgon0vs04fGVySB6LQPYvE8lkT
jGjExFDrvJubfjwhT1aZQsZTdHEipucndgcASB8ai0wssYCgY4pHZJsiACqa
yYZtrUy9dk3216LnFhZuGD3HKPv6VyQpsm33KTbtmaUaih8penaP70XQNmnO
PSrqlsC+GXacFR8DB0A58CM0ztKcltqq0t1Y/StQet/0vxqnp0kb/f6cvgqI
EbM4Ai1uAg6u+QGjYPkRYeDG/MdI4N6sJ1VIUkv2fMCVas90ONjqmLWVQOYb
89bslH8k7xEzLErkNcbFkxkQM1OGkbCYFFlT/eC1q+9kN194llAYVFQQXgnD
JXP7c2W0/aknGqHFulDeSdkJ61NmFcqfRsy4QyeWW6O7D20LgqWddiVOPXEp
Il981Qxr9lbEIshTWl5KKuyqDshS9C3UC4+XnWG2Q+9J7nt2/cTUSlyaUFFw
dS31Srfh+/aKgwKbv0D0w5Joy59E00k4g8cgcJd6JKLNsHwvnYMUwMDajnUo
ymzh/tqPzup9Xpei3yblgpMUvJq7yeHg0U8elXg0JGUZsE0Z/4VVmJKty4op
d6ZL0cPXnGHaZxBo5Y722aLZlUUnYvmbJIMd5+PkAkFiv/IfxKZ6oCPFpPAV
XFAnLXkusU+pe663Ve6DzoYz1eQ1dSFpWVNJzCBLu9Kd4NVRSNpi25OOeIKa
w2zeyYkd4ZmQEZpvTVXD+a3Y/7fLYQQIog4VijgxTrCYhbBy+UA4EpqRJEGI
ZiFZMsV4RHwKFb4nx0noODnBGmAudD5aD15ZCtHgY8EBZtEtbH+g6ocvr4yy
9w4tOVxnHqQhnpqZKjRkl0CGffjqraUEcduEfOOwJ0lYNH1q+bIoNx+1N/ay
C9/t6t6WqyXd6HZitjIH49kU9ZCsbkT7ACeoEg82yVAGfFCzcxDuiVmlyNVz
XAPvssCEoFktvho6ka4VAvOOJE9oXXz4MN51qOMpDykpaGt1UldESLPEDpvT
QEBIIT1XADuy6i1Em+EIYj9ZIWC0m1+VQ4z8qjdlBBSY4wfAarliMyclm0T8
uCk7iENgyz8aItePubUxRjTnBNcxdsJOZQBNm4FRNoV5mAPG4CqEuOjvEG/d
ZitySK7Rdr6hjeB0c6LYooxj6NUsqQLpLB51psZ8Q9+csGPSZVHRXDNCuQ0l
i6/U1J1KSr6poARslDPimaxZFdNH5QTsOdxfL/pXzUaOeRHLuDLwNB65O+pj
B5T/qZGRjQuFnP7T84hQP1VJ8PURWsTNK7rjy2B0tEXX9zyK2UM42Psxm+Tj
qnqP7jp7ydel9hfiH5uZ9bGYmkHyiABLXvb4QUbN5LaZU+SOewO30Fwke+DX
PCVjQApOk52TPkkfD5Idc+76UvZN2Vwkd0+5vwlP2d7FUw6Ol50pox9mPF87
9r5thm9tV5WA2R4yRNi2BbJjW+aoBO2V28aT9El378JcutsHUwnLlanYAwVO
80jVqYQEtGEq7e1BCI4B0ZWUCJPjHk5cdQmb7kn6xS09NK/gL614kGraXphP
q+fOhXCpg++FwoF6X4QBkbHk1cTlVoJuep+ZHfSvIIqrOcYYK1OBgAEKH1Ts
lszhKuxgXMFpsqzG6Bq6ukUpiZDRvKqmilko16OJL+rcBIJdmUvBgST0Jyqb
5XJTGnsgBeK5OAAlK88XC9RhHURdt3sB6WC4qu5QTN1Mi4q+RNmxQr+b7Tib
vI9nxsbUJNQMwHzIXLGAki5Z51IDEuU6il+Jk6F7e20jES5BchRZZQ48+4qU
HXMx9MSp8ExAk97kgMRFhdQnVGt0ma0O+aS5VjOWq9xy5HjgzE04sTLC2l34
nHuVQCkyDSWxEzXqbM19kX2d0kv1Ac7Zsulz3Shjkijjz44yktKvlb44Mxtz
LTumvhM5Mi3YbUKOf7GZiVVtHEygSwq1HtkEJNYiDFNOWArH9JA8mRoPjhJa
UOZfbhlGJgcfSkc880+T3qejkda3s4uV3mCuE3G3M2lVCitoVRpWg1I5slAF
jt2Y7IKeYI36UwceXAdteJ2v6UWZNxzbAgseiH+BABre1g/ZAlgtDvGhFqSe
k7p/0AEp8Is5Ff+ZkUvAmgPM3TDiLMUZ7iz2jYOgl8DiLbYiXmCJRqtGJIGK
6gvioVX4E3KcqrOtbJ7fvXh0ZnOk5jRdFXISR2ExNPTKXq2WM5YqJP5GuDu1
Ue934mXYW4w46OAkhIK5eslq5hHg3uAKl+KmTumc+DZwdmxfOa2lNs/Mzrmo
GvtckRzfh5aXEsWGxuVyDmg8k/xjmd159aY3LNVe+Ao+vgSQCMJvT2+uo8yT
bCGW3LNkoJYNNekuTK1h7NDeEsZikpnTZyTtZq9aVytOPW8mBOrAcDPXqB8Y
jvRvQhCd1bHPQsIZBydx1k+S+lznVsNC7M+ScrULjc71yG9BZLyW37wKPlNB
TKqcDJeEtWTssJ1HF59Ro0PSmRrQmsh6krnZ2UV6zUjhhnJc8Jg7BiCmMhXd
lspoMVQHX3J/OzJT2Tkv8vYHJvGjczzlbcm1qHsbEAkIT33600+f8NnIP/v8
mSxu45yzczuaOeu/mXqpujnyx9jOihr13GgKc2HJtfyQSw4nXDGQjwU7ie0Y
ck00904V3mXFGYM0CRrX8OK6LI3oxak0TLGmOBVmoPydZ19yUTaLolr1q1H+
H4oUzGtMJOyV0klMJthT5/XVjWX9snIDCM9tQG5hK5eYVbJmdQ7XqmFTkn11
6cTMt3VQLNowYnw0nAdURCGK1fkbNSsNreYuLUN4sbOfbxDbvDs7uybKJ/ea
YmuoLKpfegAZxhVIBlvduj581/f0Jejja6+1xaRxmHwdOzYlr5RcMMvnM9qp
U5OSl3BU5TSyp/p5Ul6UxpEh6ddQp/ruUS+hHrC5WTlU4w8h2os48C4QQLUG
Urk6Rwg1dIuTNEmSOrpULbNyyEKD7EwPFBSe76P3bAkOyQ25oKjWVcXFREn6
ow2OkqfHeLYHVLr5hHn7XLKxma6e9ffE5QSMIT7QNO0LKcJ82UpbzIg6ckBb
q325fQZ+f/jwIp9FplwYP9cYkxwst+YDibZQO83GHNL6BqQ7grSZ7gix79EZ
nV/8wI6DPUtyuqp7luS3Xabnq9aqiwuXPKbMb3QGQiaB02Cl2q2kUuxwPyW7
oHE8NEEgCVMfJ/nK7DsBM3xLMkS8zUE19p3IIxKqwTkrsTvW3agJSZcmSxWZ
IoPPvQutXF5i0aPvO2egfD500MPlp/sv8IjonPCUBnQoo9EBdx15TEAPbRyz
C624mJSJ4nSeOXSymx7TzMzLjfKZfgcfnFqUap1npIT3tbIx3ZmNpZ5EfJzi
dApdMM4u/e2DaSkCangcTfdmqFrvLgLVF6AQPucFDrS8PVEZ2NUXDPsRhsBN
lg3OykY218lPVIpOSzn3pof03cG3zNQNbwQsOiuBbrBY945F4Mk2Pm+pivCI
IIZym3xkbawCAOAMftKJn0r6PWmdqLjtYYonGW1D1JSKRJK+iqc2ZBifTKeL
Ay5mTNXGyU2DHeLIX3wojGzQYO3AozSy4tEW00NKjh4c3nKrxzizgm20N7ca
KkfoymvVff6Qls8Tx8qRn3PWiOyPUvwegMoeZoAgzoTPgMwhnZDnp4+PniOn
u4dr31NTGFK1J8ebemHzl5ryDn3bL2Mx7Nan6qDv4BOGQNDlWeFfw1ecyHeU
7scPAn3HooTkKRVtZZBBDqBT6FpWGl0IVS3gYf0ABxdXDBbc6SN+o/OjpUm0
gWLM9hUJOizyE7Nz1W0he9xmJToiujR8kFWtDv3Qi+RXDfhXzSyOS1f225zV
AxrFwaCXCD0RcupcHNZA0zxOUoIPTPZFp45/0NngH7ifpI32twY+gS/sgILu
OfzvhyfH796+HHZuUm9jGGRI23lfjx4mKI5PTo1IMu1RdzC69KzNDrddjwQ6
MMDWlAGw522nE+U0vJ8ZZljGVDJHePAd97NU8peJb0B3kCTZuT3fMzYbgcSS
f1yle386Hf6f2fDfHwyf//L98M+/2/N4KIB10F6dk0ItaK66UkBMo7wM751z
mAlhOItUECaSBrcZtO2qatLUD6Odwj8lJWzYtypTDSBfj4aF6zgpOmzkbVfd
cNOZGadNCimI3VQu46m3g/r6599S1sX+nDJtYiREw2z6S36n8cu2SzZ8a0M7
3wf1rkh3RbnamLNbGNkzmH2kVLEfWWdlbW5sK83uVfbZOtJrkuKbAwjN30zN
N6EmlEeW7FbR2gvNra2M1qZxgiqL8y5yjBx54vpWrBXDesji/Eemj0xk9YE5
G6zg8YICPzTBshZ1xW8H7Q/DMA1danNkNteaLJ1pkuwmDEM5V0ztZ7mcY/mR
wA6xAB0f22RkO2I9e+j30cMhCU3Wo8b7NVjSWZxq6k3JZQAiX0IL0W+4sLAY
RMhIEAagakz0fiDgwRkBxDOCJ7eWFAG5PcFh7+pivdZycgQ3dBytHW38lLEL
qVoeq7b7vuT9NqEK27Hydcf2RlOWTCYk14u0LWmFpQhaXO46AMebuhpn48VW
K1W5RAOqQYWzmhUfc6w2Xs4xb7PcyXU+rzklmZXI1islJ8A3Kb1Gmw5FfWpy
YSsjauVp1e9fnO1DsUhMW2tFauK0ax72RPMgqENibRXxWaSVzs+6p2I88HTi
nsV5yNN9dtlxywTpTWGPcZEdOcdnoVe/czb24GhOnq5EessfBOUb7VBtOAh7
5PBJMCJQdHNxYSmc27jTgifQWnpnKX3hl+j7rbr3r9OfKVtHwbcGqsC3h6QZ
FGecLeaYSO526RMysdrPa0V6iQonmLj4YdCu1wrPsOKAD+niQD4gK33Uo7H8
Rsy1qeIYbWUd/EzZ+qUo4sCSJ2t+OKlDlrFS5RSkfnGPE01X8//SrEIgI+u7
emyEjJ008SmbsAZuYjwT2eKllKDHqCn1f+bUAlQCkyL/hXvAVHVYjVzMq6+r
9DIU7DJTnll5lCpKHI8U9wrZFQwiw5knXs3S11e7WJ6VjTEvyKLmtKXNKPUe
x5RshFJmkV8D7/1Cy9iXlVZ9Qy9egWy0MGDBbS5AgvgSB92yiZqLdYhPhi9c
ltQ0UTohNnNTzRhaLMVDyiUyp3kxJeC2fqOlmBGJvuTaiJrzxddMVwUQupqo
8ruzVZLtgNWMyRhLPTY0LzIHUpaWVMrihSAIu3yBpQnbV83CkFFhw0uGH9K5
Nli7QXwHgj0Ix+Ys+rwOokGJ8hZyHBx4Yd9IkUvDS+mOCNsEMVqrK19YHOeM
TVAxLT4sjPKhf8F9V9cHmqJWA9No36uVmFLUPRxrFSjJiHg80i5t7dKRGwxf
Yazv6XB7RLB2rgmeLgHLoSAtn+Xm1BIb59H7UKCEHf0wHhktRzPz2w/ounTs
LTmdBN1vIggYi/yqvdzYYLzrrRBaC4EgMxWOqG4XFFo0M0tz01UryJ1se4i0
QszVU9wBGibI/c65upjhr6esk/Pz5NcD4V+hB2fJBUi8rRbTvuGSe7wreWnB
t/JT+juWu+HvcDifD0gq9x4jTO1P4OkQnzNn5gSMfZeqz7ZXlNDemH0gPXzB
X+QL/UEnadrtNNL1RL4josuKVNqqwvyRTf0D6nTd1mZHumxyHotJfUs/ihXa
MObSwk813H6nMjuEVC621IG6NpnyJxQ/KLctu5DTVWBUHH1PChjTdEdmKo5/
pQrMi6ZSK7PANeVqk02AGWOdd+WjNbHCD0+OTRgle9oEmCimszb0KFbXOuNY
Ee2IzRCv2ED07ynp0kcIfS71wTo+WaoqqGUiQihg26CLJoSalevwwabsa6Za
TdRJDdj0BIwR1ppnkIQ+qDobaRoPlMLrzL2vx5rso0Ujy7MDgB6w2mEoY4Ei
fVbrOsOl+96D/2G8iYemIRraB0PVEDn0hPBKdZ0JdhBaETxGfDAS94q3ne8/
mxMCh0vE/gVKz5YBksGLPiQ5CYsf7/72LP72UkqTxcoO1qLBx0GJtnNxqt4M
45zgPGA/yNSCr6TjE1b7R3nB0ndlKP2ECnPPa376Bs/8c8c1zIx8rYtWRr2d
Rb0BS4+ANDqvs9maEqqJwqCsvFBZzaxyduNfNHa/JHeyyddWRA/v2ZZzhGre
Mc6vQhXLP+ScUh4ji1XGiCd0qmRCORkfh6x6GHzeV4vEdxXy4+H2wUr38Z5y
JANlsqLM2yRtr3IJMVcUwEYpdrxZVh9opqKCoHs4xSGCiiPDehuBVmoGbkQX
Jg8To0tIbEYJTe5McCXyyrVDXe9YgFlKq4daZualvIYbSXY4sqvmmrXd6E+o
UyYpWahjawzyr5AShiASVzXtfY9MdercbjQumKUjtT6LTwNxJZgCirxk5a/Y
yRkjzO9twLOpZutcPFNw6PGCnTDt+MWL8Obl9QETB65zdJtHCrVQ/E5wxs8c
Y/ri5wtJr1vmk4bSb+Pj8aYGGoqahANitvqsOHghUSxGkXnqXzPqNeuZpDgJ
m5jFdm0CZo/o6cB7pNdUKpgsSFGpQOO1zJnzKqSE7mLTCBRmIKZbcu2BgflK
hHRenPsdU64SnNIQrc+E9mjnKgNLWjBfh7AR18ss8hkiBQNHHN9V0J79y0xP
y6ZH4ljNVc8tyztjtZ4yTmK2AwhGjoVZguv3Rqs4U689CvO+DneyYsEN4tJn
fuvdKc8fkw7jRm9nzLa1rORmYiU80euBFbJLCG2+CabYsIOOB28rffpUGsGz
VqyzUUvVelrt7IWdiaV/wPNteeVIjrXY/KDGgm6OtXZXfst7u+oxdCkB6V2k
5aD4ogxAJwZS2bL4KHxTqEknmRaKkMrBDKRuLFoeewT92GOOxoKNwAzf/HD+
5MHDdhE0y+clVBTr91H+PDp9pmw4JinJapLATV9GTgu0k+Ji3b2OZmVkF6nQ
QtKJ+aIvhUvSLbUy1W8/FtCTSH9v0n6fNo7U0FIxUwuExA2H1HC8ZSbukMVf
xnablUKnGSCqujOew8ikcbbUA9hVsyP1e99sgV5ZJSj+1sKMiVqaM0tn4AGr
+uRoSdffAMvhGAdEU3gBWp4Bho5iDxnm+Dv+i44rhbGHTKUs4AsRrZnQPasu
ha/1U7ftJ1JXDf/3OzYOg9BNNm25uq41cLjk4tJ9Q318Frs5MfOS4kJc/NpX
l2+7JtB0IRE7+v+i4Rr1qLtm/b13vvGDKU8OxP+inFZ1I7Y63O0/+gBYKo78
6Zv3+baYSo1Ts+4SRZJiJQKpFO9Kuqk7uZqSZUEaRPZnVwkFwSkKvBXGh0uF
mOMpyDOHL9ScqIlS2QwpPH1wNdHANHbsbyUPjMbSOuDq8CmEdQ2bkdVTSf6M
itWbni9RhMgXs0AmQ3FxCm/YLuH7WspsI99YYX9so1hyzHzA0KofzTRRBfE2
5wXt6ingv+0SC197RnX//PQU2biv9LV3G3Qn/ILayUsPCsEjnCzVzkxux6/8
hioryVqeNUVItFgTgCCv5UoXm5XCQlqoo5DKBYlBK1SFZC/bV0IO0TmoNsdy
4lahdHC7r06uFVgX66aoiI9EGdUa7J53sj9HI4fsz/EopOc3FDsQY6TF2qyy
RioM9GXawc3qEUaY9gQo3eZrTmaskMpYZb850BSO0YFelUb92azgDEvd9pp1
cvT4wXNfIGmU+EakjSIg7WwrWY6jXVAaEZRU0v2HRyo5k+R0KZ6iMLNB++gF
GDrTQi1dtRTfvfYdJWtmf2qz9ooXO1t2UcYOfNA1pptoZ2Xb6k3Ii+bvhNns
vaQB/EETEmew66lGT0YnTBwYI2KpStyk+6fmyxEKPkTQNvjH3//vAym/49LJ
lVPg4+KYlZAtCeQ0rBO15Rp61Yqu7oDUKY6ai+2IVW9bcpzu28k40ABEfkYo
UuNc01srGpC6NaYuYBuRm3l3xmTtSFuJqF8RWm9w0zSUkyg2ZlLE3TDbPuN/
wmrd8x2h9l31jz17FQrG01UVH2NWTkoaKrzKOGgs6IQAU0AVG4TsmFDXPZeg
EZOc6sksIsNcFvHjgvODSbgqpXONaxtFAxWahlzToqKTMsU+tfBFyIUn2R8H
FKIR+rb8UUvN1A3grdFKY0saKaYppvU/XyMHkl6e86awK5GiO6zCyplkMiqx
Tf1z83T/fTE98ChulHI5Kiw/dPT4odQoUt/cx+ibS72DZK012624vaKA99w3
atKGVH2LlQsaFIYpWtDvlwv6VhIEjigSuUDkBoLHXcQlOAqbpf96/iN7OkjN
vG0EdbDK/dN/vTQM30WEIfXbTd91ad3JO9XN8dr+8ff/aNy6yZOHjkNVSrRH
POgfePvf6PY3soP89tMn/DH6N/g76Co1FunnfIwVA2EUYVT0EBQqlXlrHzHg
s4+PQbT4+HjDaIuzqzPpkfhj08323A+6g7PYFsXaHdqt7m4qWxfDul0sGytU
Eunnliw1AXTGhcV6zs5S+HqsnppCpbsZJqMBpJGdgbShGgUQRMgexIS53ual
EZ7A1WHOaE5iIvHeeiFRGvMlH+mw+4AAiE+dE3/DK1S7R/qaM1LFJ+LC4cbb
zigNAhLaTPCZ6c/ToHJXYCUWlFi2NWFtErfD+EF52i4V2w4ukW98KCtlBh35
mPk4kCJY6HvgdYLwOhF41b1Efmj4A3mWEcKKaArTcSL53YNDN6g4nWOdD0Pd
2xhXjGKn67W4/nX0AoVgPHF57G4Y5UDWlP/tUdKYZvjxxZxjGRinH+CwUGlL
HGgPuyR+UZx1K9wpzvXZYpjYWUSfkO9jd8hp0bRGxaebUhPrsCpZ7D0UDIDg
xEWBc40pSauxySFu3aF4tnsYIn+CuCppXwfiwcR+IwQqDTvspFeshI2sPRQX
jQ4FlogYM/3pVBE87jQOYidbxcKpLZbovtxupbvEjMIBr29ZDO47FumHTCto
y2AfUBEShZpz8Q7Hrm7WWM10TEcVRVKoABNuGDM+HWANqgYGdZCuZsV8YxU9
Mkp+1yZ/qBQmJhoX0k5xKujPJcnDvP7JFRlidhHUFvpnAaZxBcwIpfdLCXH2
0L4BXDJRLm+KoMpaPwA60cq0puC+6ea1C4XfnNvawMi8A1aFJostCiZVQWXM
xhDnLbmLifmTvN9fEYdPMrgqEwq09Je5tyLGxQhUj/MkZeVTm2svyoiDEHHf
cRCIYbVGaROKkloOX0IVwrBLmW5ljufZBqPsczWlRJ7yDZuLGdi91MN35kNW
F5oFViMh42Ho7qCuQKrgUvHfZTVVx/w7OJbFltz8kKEw2yaVhBBnb2LlSoA+
TGyzdq4PmXlJZ0Ec0S6oB+g9W0T90Ermm0zWHNbEy7DIAqkoymSTq156BykX
GB5XH2052cbVYT9HJV4nUnuNNsZrPi5cPvvWK7XQiosFy3g/mndPZoVqz4X1
9QOGMrDen0dc2st2WUYXXCmISAPPKcA0qPQIIczYiMFpj6hcnNb9iQtKkIOb
IjZJmC9GUNKZSQuFJuXrXTXNCn1YkdXibnVx/k61kapVnmV6vMDQt2kee+fj
GxJhcJvF542mIjCgAQs2WRc2GX8X7rmNBHQd/QgQs6yYuPPJvRSxW08Ny4x3
ky1FEjp5VrsQaJBRBmKTRNI7YN8Z4z4rqSgnvgK6W+rgOp3WVGFe3A/fsSYW
kU0IvUZAi6+FFQOTRLc+rp6vh7pX3aqYiJ0NpGNi2vGA0KXYKXlCsgaUtrvP
B+6eh7uvChY6rJi4sokMnUWLf9cLjBUg1NrnsZOyUGHKsjnOBNg2JuMus0i6
bRvMWumzdeeYglmddAziiKKd+DKqZjdKYmLhZKs0sps7QeVVtqI5nVKs6IV8
+XVnJxqsfMhxKRyY0BwusxUw35jjcedrhREpHkpWU8xVQdlf4LsMs9YWLssK
2dbu6RCxJPKAgJrJK9t/SwPpt6xuvW9uWtiDSysp1E8oGpHJP6p26a3cEdXN
zApKXs+mPYowspCWil3+KLgWxQklmVGoDaINyg3XmV4Ac4Y4yiLMKnmXFi7o
5em6Bz0Eu2JrhuqIXEfAcM0+yf8cFLD1vhcC5NV/zelLZ/Bhw+hzKaDMYc8O
AxhS3DkhQdjjvMwlh/lMJUsRl9pcTrRvb0izgtz2taAOkU+/Zv9yhSXiMfH8
V9Zd47sbfeVx+O4EbtEjYGevXo+I0PLGHPxEUUXqKPwjSmSpZILDNTjo5dXp
mfgyiatVPjUPIYrwOUS4VJGTeyCXcOw4djpkbslclGR8JGuv3718GbknrizY
0Yea4d2waxb1PaD5ElTRlOUverhGkUAm76uEnrJLnDIpwdcDdTFGRMXv56zj
XeVBHT8hZr/vPIlmC49obpZshjLZ26WMQiRjJ27LbfGZo5DgjXGWRiGF/eH4
fk4xrvZO0bUrJdNhvL+CFdG8bMkAZOK7rciWV8l217TXY1aWOFc87/nYirpd
ZFti5CxEQpz5uC9XA4Fe0k1t1goJ7DOI1W5YXccxV/3X2YeMhAUStxHtKkpe
1aInwrcVGSkSRrCz8uI5lKIuPuCNJZ323W0hYZFuRwrZf1efzWvCw3it70wp
RLFHAYK6d/xUHZOb5F71t4EjIwL7SpnD2MfBtopnaIZrkqAaqsTrLDtL4CGv
O0mkynxerQtX0DdoJATjBaAldYpNSeA1tn8RY2jeOM5nTlXCg97ltTy5ihA4
bXFeTdW1tulGo2fONd9TcnWE8dctx1ENpxQPUeRRM9ZgmcMmVwzXsF0GZ9PD
BxkN7xr8fVuMCy4xtmlsIm0flY4G9VqQ6KdP7LriHR8yLd5JafPZuNeJLOl3
EfmiPaXPwNer8uLu4HUneWfbF5rQkWYGbX2/azrzKvhykxcjgkqx0O3zmqTO
zhXLAoXedUUBGIozjAsHWvWF3R9EygA8xjt0sUOE6SzBHXOmSN/OEPwHjprF
jZNd3D1xdnFniRLRT85B4H26zIYrbdJO/Aho5RYOAfDFC2IsKL0sh6yr/oRh
VSUV4p7YCI8W4ZJ5MNVCY+AnyFHlWsPkkVKydyyJ9VtxeMJYMZcOo0UtrWon
btRMp0hXanJbwOymmgRDWIUyLIS1Lfe7/vgocmMsgABshC5XOk4qVWKlIAft
gPqadvVDhFU1Up4cXjIgvogJtYIQzC0CHkyHz8lpaYQ3ct1/1Rhc4vPrBzkN
ZgUZ5KYFrrb9CDeU96K0XBUa7hG7tNS6NVWk15BtY+sWlxg7N/eIpDMupiSA
q3xXWh8AwlgcjJWPrUTZbdG60GJhKlGLxmWHRqeq21/QDfvDz7h5jfCCqtMP
KIr514vT18OjR5GwcJPNm17WL5ia26oRp2AgwQ66sDq4goYW2xib/Ko+iVVd
u05ZM86yY2C0i8ZRzC8MRN9i6jnnHyudhwC5tz+epc8ePX8YGJfwWagZq9mP
KPua2B84TSM67paqKtbwQ0LALlzRW7otLqllzwtphtn3Tg/slVU3pDrR/RVJ
v3SaaEJXJ3EvBihjvYwGsdJFcb23ZtS5BcSCzCtxjmsyHYulfUogszKNPBNa
Pw0+Sp0MNl8ZVhmJx6vLsHpWLRYSQ4Zas0/fqID9OVHFOwbywaZnxFYvVGS3
u8ABUDcR3Y6zRZJrtlUcV62uj7hQ92t6RvGUXrFLymWfIZGTVoqPLILVAZe5
yrTMtxrgLSHswmKJyNW8OQjMKQ1Bk1JGpZ0CshUTwApbF6JA+6jh2qqhAYkR
5Gx8epdZDfEp+xeQj4ck4oV2JNloq+wDoGvKSSKy07pYWlKFoLenPpowLCle
3Ni+Rj0FzLU7UKsPGibnebxOiu9yzj+WbMJurU4c+NU4VoPMbVi2AdA0adVD
kBT5VpnO+oXMlSeHAYrAE4R4dXVE1fw7uY+20nOS3PTjrZcgnZvgaGdVcDqB
eDKaFFlLgmuOZw3OEK2y99V3S1dokkJgMtCu5X7ldYmSqHWuDNVE5IPTzK6d
eA2r16QK9I+kSvW32PbVKpNQwdYDcg0hBsDPQtUVRenDa3qCqAZiKs8wuEYy
8Bu00nmSGC7n7Fxg2EcNyEfLR+05C1WWiU2cBZNvHEY7R4izMhVFIz4SEjVD
t4nCWlwIOA/35OgBdH+6wlj54mN6DpugbnZvgAOCAdV1hUMg/UB4QYcFO9BG
CSXpaFbV5FaSKGFDjhdDrwxKopnMFhUlZxquKuwCmGSu2K5KvHclCf2crEXM
q1KKcJC+e3vZWJIZ8m55e0kktLO+58fP0eZ4o1lp2GAfkg4LdlX37Qx78vEq
3GpY1cNNXWhMhlv69+k3T0ZH+/DngdWb/YaR9WXLsAo0BmM9xN4KZIZaBb5F
wQqrvvQezgWFcqt3DLEtSTCRMSanU87qKAaMg9B9/tLfcnzIcGhg3YlXgTa4
SN9Gu4SuXsP9rYvJOep9IpcplUweItw5CB5Bf/Fe9nfMKvurGg/0qztudUeH
yG0ePX/2hNtUxRTbuKEsC2wwZBPh8AG50wrzug6ngKbQtgvgFoWp0MVCYNo7
Gj0cPXz8YHS0p75eL4neJglapJj2DlyGP8EsFGZDZJQ8wygby0AUzrjFGaUI
xXjJD+JdTwwXseeSCKDhkJtg0StDAJXCeKeFZthW5F06VKqx4jNOBcNp/YOe
yScjjGvsuEhQddKT8WVOoiJWRsgVW58X6HxLtJzUplGOA/VVlOOSh42oFbn0
ICbUKMQ4Ttp3DBc1cS+klBG3Rt6i9g0FRE07xwWEQgYyUVHEdtTgBFRJgMXI
cqOjk3AteWs5W6RphFFLUFBYeFb+4+//sRY9tFWacFntej0zOv4lvHUlzHCR
le/zdexaAzNnvxFecWQqYa0ujEcTZcO6sEuyBU705KQVABrApXEYvOvI+EUr
ThOqvLOkSXU7C+GrW7pqrm1Y8XbELjYUvELebtU9LitiXJsschQcTVTpWTEB
aVt5xlXhzVOl4QLvzuGg1Qd5KPCse0zlMGlcpIYvWN4BLX4gLhjicinhT4qA
vN8n5R0QZzCRaDwAHYZsq7O+bzOAsFU2KTBwjDMRjNohD2IgiZcXgw+pbM0J
dKbShqnI2ECZh8PhAN/oEN81ITtVeyvJdX65JK962R1lWEOEuWpZOi5RCFtE
0WvzhVtHfiNKNbj2GF9XAA/MwLBZtybDqtJGajvQOGdu/6XWTcsi+ltnLG13
57S7Oo/j0ZHRL+ZNFIWFNd6ISlFN9t7wmfEhcLYz0Wb3GFXxc7GP0R5tGg74
IFREzmxA3XClv03vGy0YmNPIr0C8cDE3SNO/zkdIDlsr3T21L49TzP6paSsd
um+6j/6J6Rqda0/zuqrX4rlC6xhv1UP3K86cm5BNEkQZ6og6Pde6ws3aJz+K
VnZtANc+hu7g0OUPWQNdUeEJykrTt0mPR4+60Ks8F185vxTbNV0KUsV0uhG3
MXJvgL1oDpk5YodTLnH37ubH4bPgEMEEO+hrWBIh9px4bqnnEFWID3qbTph5
K2MzKxCAVGAeJQlUCSURBUXSHIfEg6WrrACmi9I1WEgJJRL8TgoZcnGKUnP6
S2Y90xkb34ZkVBk09mqGn1U5h69XAaFxKRv+RLKps5jpenZcoe3ad7QlxjiG
OoKk0RjwkOyW6L3PGceTGCHJ7y0OQINNovh8lG7Dhn4vwfW/TXty3w3kFfO6
xB+no1nOFuU9igQFKsBJ8fYwKB8mm3yW/qX99y7vVPKrpDMHIZE4/rSrYA8a
NSdPciYz0TJpKQFWmMDmMLvs1QEa6i9Ko5DpDusJoNLb8bmuLVsLSC7YDyd8
0JoNHsvdmreqoSz8mhONeWTp0JJtcZ7HqEdcTLzCv7R6xC3rS2EYp5IL7+mr
e7IeAuMUMh7iAR7cmyHxq9tmm+lXt80/rkLbvyGg3NO4HM++vnGRrTuNEeau
zq9OSL1Fmkc8AJK9sZgjcCPThZPRCftJcXhRceFBw64CU1Utfp9Kb8J1EkNF
8i7JoDMBs9/vODaaJaBymeUJB9cc7D4wuq77lNw2rIx/Si3jP6UPf+ufYEFw
91PTUDQgM6X7z0ajJ8eY0XLn5DZ54U6SfmE/8I393erz6Wj06NE9SwA4gi8d
2Mlv6db9MtQVcoLYoIiEkipfws8VlZQo0KucHxR53prUI30FDPG0WsYvj57c
twFcpZo+thlbspKo08PUDa8/YHLJPZsh/U9uixXWF0dbXxjm9s6e0ZK/3M+4
yurpf0VHLAp9VU+tR77wNz48SV21b06lAY9+o5/wE8zZsvME0uaOCm07hIKH
dy/Y8mhaaZo8k3uOr9WgtyR4q41VA8el7/zeir9vSpBAMefIGku6SxV4/0jq
wLP5YOjfSEl49QA7SY97huzWePcjWpX2nkedEe2Njrh33x3mr8dV5TAs/Fp8
DWiNN/MhSsWbpudMotf+RKIX0THs+MQOIS/RBgJb+kBSEBWNPDiKHwwpipBW
ZSdj70B0XmYl2e/scOwlJ9oDPBA3O+5Mr3tgMjvbfu2z88DNrvvODdt92Tu7
+45XHRTC+dgTQdPRb0PUi0wcHZAqkSjM+4RhJr0vfh98I7pvsBhVNtnu/ma4
uwmGzCHX1XnRrFAh0nmMzAEc0XJlrAJyqzbgnOa3QSIDhCcsMz3CAlL6ey9x
C00f0it9sJeElaaP8JX+hje2jPSY3sjv8I1bafrYfzwMbW3J6RNsIT/3Elkx
cNXwlH7sJW656TN8bg9gTFxs+pxGmSMWuIc7WNFOBf6A2frdGIAQRpPnjph+
ieXhO4xsOYkiIO3bt4Y0orceaUQvIqSx4xNDGqQFLCYOac85RpVomiAHSkqL
dAw22pDCpKnh5kuDanWSPu6M18UCMpzD2GE4e+iHs4cwXGhQrSgJ2f17OV1U
mUO9fwL+Ch8Jv0goy34qNccnv+ikYH1/AyoUXqzgBqB88wt1esLMr9wdaiCm
aFyNb0O52nbPVuMUAw+PMuVh+reqmH4RYsznJXweHikUxE9wtb8DRl2fSm64
5s8oNbwyU9ZZhVZpC8KlvlSqkASr3KRJJlVzhxwrCK/DohlmAmnZfPjxIwrH
XBuNW/03EPonBUAHf5LN/wWX2J5LCgvkEHxOJXffCEHYIcf0/6e9b39u40jS
/L3/ig5s3IqcBSA03tDcOIKW6LG81iNEaXQ7ex5FA2iQGIFoDBqgxLH8v1++
q6q7QYK2Z2f3wozdsdCP6npmZWZlfh9j+KDbAEyX6Pf3l33x7vnbD+drUDTy
TfaBidzu17o+aViRp+K7a6Y7hZe0673Ld3a+hS7Ry1V+Omv5YvnZhfogEHw4
RD6mJvRKfHjEjhiuuuofPV7xnUuh+CQhleG61cvO1vNjpVtys0a8BY+tQShv
92uTdcFNdK2yczNFNOtuzSMY1emprKxuKNCBk4WYxZuGtwbN6ECdqyKyrsom
+Q5Xuf4RrrLdC6vs5GmlyiReg5I4sG95U7uLwLvWq4vl9po1eenDj9l2jZKw
p5vJ8gYqdel1GSMktFbLaUF95XXjk3hY7TtXl2r3QVVcc6UqdoGr4m00WhVn
L7iqlLsHVYRwIno2oKscl/DEMwetuk/ie7vU0WXe1+JmrFYW1KdUcmVBeJbe
nbOwqduZ+yDapNya6Ico+o0I5TcilN+IUH4jQvmNCOV/BBHKb6jX/2TUa0fy
XI77154vsYz5QBeV82Mf6l4RKALG6RqS7vjdele+GlFv4r7mR3XUfcAdSDr5
itFgle/gon3/Vmmwldy7pj5/IElz1INIJl56LnpYpVl58Cpe0xladbul36p7
Vqt/7MPYhMqzkYy0mtZK6IwyQ1NWHYtAGsyoaidj9ZHFnK9+0I/UNUkf1esf
XI2oVe6xmjHCqVTb9KjuYToAH3aSk9p3TuWlugr6y6c6A7Tg7kld157yKzXF
1ki1yG0YYToAhVX6nDI73b9l811S2AIpGTTcCnLtkYAG7wd79pJBQenIFWUZ
6z6BPnYSgh80Kbq13T7logOlDLVpTy3TgHuj2ix9uZxoY4EBh7UyqpnmCTO6
1+9JJVYK8G2WFrmDf1NVwCleSz+TSNNgoAjR5EpwmLpaJZJEIlsdra8pagSF
tVNqk3JLJTaHG9jUNOlU+GS+Y2XHJ0KhTpYOThmOA94vschY0I3RU/gi2i8O
9TZvg0TTp9wSVAHQSqxvBNtJXkSHxgbVEcRT1k4AEQqT05N7gQ71BxL/tN09
jnEkg24IHj0psoy3ZK4ab/4Ub3HKZ7Fu46vI8CgqG4w1GT1eMBHHvvoxLJ+y
qVsipMrK8goCaVx0CIwKvMKVlA1aYkO8EJA4ibwgj7gbeWEccS/yAjXifuRF
YsSDyAu1iIeRC2n4QzwSme6lRXjxNH4szWabtdJCVHAYqOdnL8/a/DZniqhm
oDksnFZ08tTLZzoNXsBdDmrNygWGI3OCmRoZS4xEZ9ALQYinuPs33zxta9CE
9Uwn8kMh4iSJgqCAOOmVz2btTj+qOS6Nk0FUdxSK4Qjl47c4GUUlX3icjKOS
pR53O7qBSqy/MRNopwqeHkZvcxznrXRJO3iPzio4UB+9Cgi5G3f7ZD1y+Dpn
EMb7DVouMKRQL6JVklAli+LQmv3vt18/6w6+iuriHPjm8KuoNniB746+iuoj
Evj2+KuoFCPA1yd0ve6VXuerKDy84ssJVqN0RMV3ul9FdWdQfLP3VRQcqvDV
/ldR5RCC7wy+iqpucr41/Cqq+Hr5DnTC3UozWyle+OUZRZt5ipNhiyKGOBm+
5xQvhljNs3LwNUoaKMQcUaqU+WpXG0M/a95lqUZRkyGIKWL7aDnCR0fBhkK2
NQ1NFXgEZ1iGIM4KRxQ32o22F+on5JTXBH/iU6sVt6DsfEZJmi/QDvUbzXDB
y/qMzJwTSST5EmYz9KKnMJGNpdZQyRj6v+37LjjJr3mz2Ld1tJrseJDRa5or
EccDilhzSP8lwdLj9rDHvXJHhOYhLg9u6YfUSKuKB8jiqwvMJY5HzIXpduXN
XJS75zvJrlkLPJoeyhBz934j7lDa3jltkDAK5zJRGLjO0xR5b2TUKDzr3jme
bvNnhVjGGMXpK1KkRlW2eDbYqR5P4gYMbQNPurFI+gf2Fv0DlJ4GGe/+/g6v
+JPBOaXd39fD/rs337dq7Laah1Enp+68q0R/AMXOZxZBnIjUR9WPkXrCbm6n
l+iQQAFVHrs4BChf6oEa4iK44zU0khDsN8GBr5y68SXEUJtmiCRUJcuLDnbP
fW6Gn6MxeT7cssb03a+jMTXgRyPQmhrwoxFoTg340Qi0pwb8aAQaVAN+NAIt
qgE/GoEm1YAfjYo2RbCOpFExWZzuBHFg+eOm7CkwYIA38Gcj3KkfU/XxQiPQ
f/A6/W4EWg9ept+Net2HistmdKlRowTJfYpoqlOG8P58eonXGmWlCO/ppUa4
l1Pj6EKjpDbhnQz6WK426rZ0fAYuw4VGRRfAe3itoCCaUP/ivqMrfnwNXvaC
a8oKAd62a42qVkCl2sVGoGZQ9+DvRkVl4NfkWqOkHfFNvNCo6kd8U641vFgn
6nAeCI1x4jHAGCOLbcJL8MOLaaIrs9m2NppJHm/JAxrChJdL8UtULw5e8hjz
0ESoQPUT0I/k2QcuXIIqF/no4VOcyp4Ib5FbeomZ9E9DMAABjHBsZB61BROK
4cc8vI2C3Qg+DEblK834xx/JyEHzje8a0ABd/8673qRvKwVu/DInJCTqAHWn
R8vCo+5Bb6DHoxacsJSBzRwzHB0NbK2KDEuJX6opigAd/7ZnTBOXd3lHYYZW
Ej+9Ap1uhliGmDJVhy4ttCiX++U81awbah3eD2sUnpDJgHCGMH89M54CNiqj
F3vOFaKusE/gvzkQS47xfBw+zcnRcy2un1bGIZEYmg7lnFcgB7DgkGLu1Xap
mbeRESxPt6gjX+aoExHc2tlbyxgSpjtWiP2ylpkkfXMOKzEuYg+AYUXQDR7w
RBOjofaLlOA2iFsANMardb7KL28dtynlV9K5Dft3dldEnbi8pNCKdmzVdRXl
88Kp5tGuWpv9doPjEaD41SYcY/OYZlJtexxzGFNQjDhck5rguMY5YcoDNiz0
+JW4KVIHH2voO9ooyqfyqBW5BYTtVRowdQD6KDSWlJRdF9nqBpcyKpyU+Oox
IFJWl50AMpt82cRKhU1Q67HKF/BRqg0l9kPFcWLvfCg4mhwrhQtjkNJtttiX
T0Zc7EDqD+862+9kdrSjC4TMxw3KKBUQZMz/qvITiZphQ2UAIdX+IVcezRuC
7zvU+4IqyIlz1ORtdk0hEgTIwstMqyIL6tVGs7MvhD8Eeumta9xLbpxJcCeX
nNhS1oyd7yjyPcAIIWDfUeY6cit56eUBvM411HCJAQ88Xa+Wl1dih5YLKrhj
XJ9AUxFKMfyASp0DX2Hw7wzWxBx1vAPfsMflEwxjgUNiGErTbPcp4/OyoL8E
8OCOPgv6K75472MNEFzlFplIrq8ZIGJ9uU8vs1/8GfQgUeGOEsIwcuMKa82t
/5m/SoACqfl8REpzlRIuv30fs+ppG4aDs9ivFSdXESMo0qTmFfOV0ANTRErN
Pi+JnXptladwFht8XwoLGAdqmALqASoxfSQMAyrv3oQVQq3m0r11arZYefsP
ZAAtrAtR4ePvadraOnqBLkNf5hLq/E3GW5IjizWyIZZ/BCXCOr/Dnw/g55j2
gPoHcXr50fOVx38Ms3xLHD9zQdDhVha6c8NrJkIEHk41emMrR56b/FNLDRSv
JTZQ0Ee0XivPVCmDYDnyWF7nUwKsYHmGnlTtCe4XZmpCJrLKnPfmOzbS01Ak
Hsioez1MxVtF1EMpzwwDtk+thK6O3eL52pKWmJOBaFzdgtGQHlebNbKXzFb7
Itw2PLhDD6kpICIPetZb/6r9mB5+/hnJvBiriplhCoKADMAlZkE3EULCChS+
uePVJaQXhwLTDDgthfiCd1T2kBDkliMdk6mJRwLQGwhYut8xOq8plqw7Gooh
M+du8xuJbimBvzBWZMaNk+r7eDHeqkvXJVC7qiLAfavY7QI2b1gWDiwuLZk1
8rZxeirceR2yyzz3oQYw2nCFuMvbFDvHANxZ+siPxYHqFmUeHQM+JaKD3Y5B
0RUx8w49CEVtGUNVjixqmSPn8dM331dIjMEwXoqyQ6cRfBIoU2GbcexlRb37
5JDriPf4BkXGYpuGYIE2PwTFEvXvg8SWXD0PSXcD9dvhibCieZIpyYA+pcNS
fFvWzMZ70WyKEoWLyR9Plw+Eke82rinRyUta0tjUQE8njzti1eBXctq0hGcx
3dV9HCSy77pVHgEnUHHGXOOOwjK4pkaqg9KYILR+wbshbSj59IbgcwSAiEYC
4eeuBJ+aott46pVHuqn9qsZRIFSc489WnMJc+Ga7tp8a6eisakCg0vm8KEHf
3BjLOV5vhC4J2SQaZs0HqGcKRijgg4o8RH5rz60RuhhuG1FdGQxo2I7P8cQF
8TFxwSIJCsOOKZodGdChAY/J+ojnEqm7lJyCSjBlsBsitL2NbaFRlg4/KLgH
1vOpaD8N9g88oyMJgj9rNOEin9w+Bb1tiydf2wb1QeMi6HMdEOhFcdRcK++3
O1vRuisMJlruvo/Cq8S/Z7fyHf5NrH6MtXhSnDbsUFo9PTZ0uJiCkhDsoUGd
E/qUym82DT/xO++qFBViR1BxYYTIrvLBdU1ZjveUZfs5OU3O6JCYpjOCJp/D
JMi3Tw6flQt2FAPROF2CGUzU2xLM/0ifTp2t6TjIUA/xSfm8+BInGZCoiGqb
Wm3RQyVxyt5SwxND4kH0qga2ZX5jBMMlhVrrRpotacwnuEdmRlDymGDd1qeV
ChB94FYCg2SVJt2OYVy6Eu0cXpEDQ+1PeEuqXa1+KoeO9p44PXZEG+EMbznM
rI94qBSrZzzu7NPsLhwannNluBJdMF4Mx+FAC8Ixcm8/iV+iuLBr3hJ3t8IP
PtFzh/jksFQ5tRKhPk8wVEN/u/UKy/WJrxXgI2WR8iR+fn7xR4SIqhUqVMSP
P77aZOvnz+AtmK27pznC+TfjDx+CAfrwIYr+dT0tNr8v9wBy/tZ3APb2uzXC
yBVItAUjuiO29Zou4ZOb34UD8QRjUv5xDT+6ha/OXxxq4vPz83OJ3YGnDjRO
DpTCIe39V7YsPtS00EKub6Pza//dW7yZM8mYdMKIawgCUyLa67rDnZ+FPdI/
1CMSg//r9QYGRN/VIVn8dZ7vDox4HRkj+TcQY5y9AwdazaeCYaMHhxoNNVhl
6fofPrmfkUfmgtw+97RYfEPoDKWXQENGNRQPl2oabMecYYOH/1WjfKjB38sR
62GZdZkp4bCBRNQ10J3Vhi0cHWrhdbr5h7dOGE7vHknHa64Yl4qsV9dOMBM/
2PFy2NTxP7OpFw4vWIAIDw+p6kJeGpsHN3xCuQPKMynextPaVazH4UE/dA/u
z79uP6CW+5Z86Geqd6n5zanhYOjQ0G4zd2rjtEL0TRnDFXnGLgirqGwJ7nxL
MP7xX1Q/kSN0Bjj6CexePKklR4RqlcQArM5mOkRkNENRuRtGBoJkLGElhF+8
UbUROa2dSJ3fUty0lVowkxaVwrWCC0mvNV9egiJ4vkdbGXcm9BPCJH/JUKY/
/sgEM1giQb3iD7byipw4lzRslk46mbsQFJhSMbDNMba0Yu+mnJyECfHzTHw0
pdpJoM/ZxdPnzznYKYSkZ3xkqg+1oWg6ly6xeTGf2WaLwtJo6u/+JmUx4gH/
yvMMwUfIW6OWPQLsOvV/yxm1pbMHGWminCF3uO+hgZHPp4Ju792gevHJzR8v
EhjBLyiEss/xl/Lw4wKDq+GC+BLDCwMKGfsCVsoaOyb4+xKHXA9flGAZlNL4
3ZuXR85sVD/32/W9czq0yHAmgkBgHEud4s/O/0QfvpAbnvdjT4DdDcH4DRnG
Gu2Y8aHB1pp0egQNC22XUqCdnkirxtOVO+WNAXvybygJm8g/qiq5eZyrJZW7
9wuD29G9C9BrHf7SneUeGieUA2jzaMqOx/VHfjUWZtJ/EkKi8BIUQVI7XjKz
yZz0yAswnI+mIpYaf/P0m4u42KSzrOlFBMvxrzuM4rDf0BFmuKk0RtgG6g86
CnhOZ5WxdpDYsTWDhG9+/WzY6cKDHF7qdXtNfxj34RcOFHqNjJiz21KsEEzq
Dd8IAFcLRDjNtrRAvbAXcTcrd84O9PyP1A8gAxnzW2hKOMojomMWNOmbFS+8
OCX0qwwkNGf+KKpPi/p2e4N2jXIscdY4na7yWJvvdl94pxt4eBDH53pU9gm/
FAlVCblkERRdxGfIRFZomNOjQmpELY32a4suppM+rDZSIUhAD4kPYq+ifx3s
alwKh7r7jEvB09aCFQsKy650Rjs+W98qBHAp9CUiB4aAsRdGXs7HoMjYISFB
NKtTSVxQJ7Z4nSM9acedjYNlhLxGmNFtSdA2Iy9j4/Gsnt+N3Mzg+xiuvieu
CXZ983AVS1ChuG+o7TfLfIXqZnSZg2RYC1SydAGu6/2K8cQxaZopdCoFpVwU
NiaSIyifC2wmkxoGd75HLjtKcZ9u80+FUY2jl0u/an7ejE8lthTmTV1lXKGk
NaWFuo+4t+wMDJ1fkdRKCisySYwTSvULHXnSKO4b/jg4cZIDp4h8bIvsEy0l
7jDHCbDWbuEFRAdwElyCA4eJjbhc6QK7xOxQm7WorVBnCC014XKBmM28sCVP
LhQ7OcDQqbTZ7yL8fuEWCe+A1FdPFDtd5hIrBkqzA/XBPWPJK9YmH45FGKUV
eSdt+IXH9B1JlJAzud3VlokwcQJcbzhvznje3AMR8izMoG7Qhsttxny7pfhw
u1E4InNQ7PB4cpquP6LcolWxhUZuaZbyIRJUZnl5tbNDghlOdj2ZSf2qa7+4
S0oPaMfPqR8HQjEdn3el6BB4PqKTJ8kRdO9PmSI2iMVrlwbDl3usx4Whe9hE
nSwFHcfB7APD0KszHZobS4NXs/DDpe71PhXxpzgYkY6ixfHLZ994C9mZ1Qqn
1SNnAdwKTqOMvIg+v8o1lQzbOEUXNid5phhPnS+ycgQjiRxRCjB+S78TjKYD
6/DCRAqTNbGsct6PvDVmTCWRhTNVVtOGaOlZ1tKxVs2kwfkSucAbmS5NR5yB
05hDyvJ1IL0txkTXX3SzBG1W1l/QFR5eCgcDrjO3P7JwIfkQXa7yKQ3V3hTB
dLbNiyKwFGSHVS/M4b1VN/JD++sfq14ays1Bm0zS6b34VujOQrL/NMCChNly
zSf/lFhkhOy4dZQVmlX6yc43ZN8CsUobm2Vjb9N1oZLN10Vc8KBuOzISdHTK
xCmFRhHQ9Xsqw2xSVj50MAgkUlidUy483M4qEXXhnLiDJKZkCdKGL8FCmysy
S1n4Ojm+YG5n7Qrah+QsqJD9KugbnBPOF12ZCuppnvHIv/Wdz+G8cEqeR08x
dnwSjvhOb2La6yI8id5sWN5QsAkHPflB7zhhmriGNwybtbrlPdxxpkWmHOc1
YxcYkbwakOb6tQeFGUWvHd89JgJSbEllW6YY1vX8sSO0V3UZUX2i0uMsyekJ
pMTg67TTSdB3WBTpZdCuiGQb7N87DCgXj0QYaS0xSCy6KQWXQvb1U5E1QPMe
V7cadcJN1iddU8Wc5jIjGIJstZDsJvj2Yu99m/Ch+Nuav4WkRNOVhpyAYsib
N42o4tojfuRMqMFBMTDqSyxuU9f7oEoX+yU6p269JFB4NN9K4IaN36H2RFJP
rz3LQiKPOXqJo3JYfJQLSNfwPpg1MIiUDEeTts8UKRQRHkRKN+TZxmlTjyXK
8qlSS9PG9DvGubXjIELpR1giFOWCfaT0wMwoh3IWfSXrmeMAr+nMaCk6L5EF
ET0UnbsUsGJQtYLvcvDFCceuYKefspLjTQsMBUU6nkKD896WGojr6oV+MnpD
aQM0PKXnHtAJzajSazjjN2lRmDZKABRbzblF3MZsvkwtFmMrktBvv8cYfdLA
0gntAbOFTlXXtVgCPscO2sATSp+EQRA0kgwzqrcwJ0mJ4mAVnG6oHkcYzYdV
RXVoD6sKFTKo5JbF2Y5SDynuCHWJaowlkgNdQ79S+jwq9zktorp5JT3IXyFa
Q5UyoFliQBWt1usMeuwW8cZeQP/kFkbPr+m6xWbjK1XpMocFNMPEHWfR8qzS
gWTqryUf1UlaEfmLonmGoRmiqB14yaWq8DonW0onHdVIdzAwAgsOcr5zH2rG
jWArU2wgCm1Zofm/3+D8XMsy0hkS7OyYv9qALhNK89J+GAWbGe3Dhbi1FGIj
DDfGEwqQl2IaICAsBkeRIcORUSzpdsT8fYlmHfmwV+kt1WFNrgMqSuaidvP0
NnK+JBK0+ABlKXBMnXNBGKiNdax1UVpEUi9y13gOomZppen3lYGKPCXb5fwS
jKf8+nq/FmdeofkCvqCTlBv6BrTrDHuLlXYJMYnenD999eLF+ctn58+4NUYr
aXWTTVA6rmkRbiK8VmR7Czk0922KgUNsdwhAlCSDC/GPbcyyVUe6c2u4b2bu
siiqnxBOuxFlTSgZeUZwCvHZCrmZL5kaJjjlJ/1HK+7l+WO43rmr3cl3789P
gxzF6EJhEfDmxWkYWVg0fUMiYOvDDBHcqbmmkZ5bUn/x8nuhJpRy6ZEfrxSV
2SwxaZIPVAeqZqYQpFOkmVvexPC0Ys8jqb5In+TJakIUp+ybxjh6Aly0u8K8
VeaG4pOdtXg+36Oxa6aie5fTJ6XWlUBX9t7y0qA5C1opiloOrCPpjWQxngXk
hDjqRGh0eosANMGAFTgOlpGtoppq2pYhCdMS86sqZTNUjf28j7XbJgxcQ5zi
BBrhPsbBxDB3w2EV16mdd5+A7ZdTaezXb/ADlG8m76G+NM9Ym0bVX8A9mprH
h9c8kA/YUXFWrlkDsNQeSiTdBZl1ubg4w7HP8CyTYwxOGvP8E3JBZum1e6px
6klWlve+JNDYYgkFjMTYq7arbtC0dlZdShS7jWrqoaNoYivVjVIVQN7YcXUR
dAXjbqoIb8EOQTSSLE1gSrbRifz9xWkzchkv0IX7azdapkBmHCKtU2OJ2S1Q
i+2MvEPk6+Tp6jVGABPqmuKSin10VpQvqbdS2dxY121D/pbhehqrUTeCGsXI
vDSW5EgIFS+x4VAMJrM269/mzdeqpQMhlq5tzDCqf9uzs166b6dZLlwWW5ut
ViueprOPaHGb/PrxXzQPic3rwktMoiwlRtlhgDr4Pp+QU6Q2bLeX6xwznpsK
KasIL3iEDHI0MJ6tWE50dZZnsLtJ/CWFp0reN0HH2Nuii9HscMiKrNJEbwnx
RiJobw3Gl/ibKXbf9EMfj4az8RyWTNML/9Yk1VuksYB1RmwV5PFhpEm/0Vo3
00bJzk6LamVxt42i92dvXj5/+ccncanfyfWdct8wkIEmDFdAsAxZjDbEC4ap
fnt+LjF5koftZTHwEz6XL1UIX2ETmvezgg/zCcohdtgo2gjhG+B8WkLboTZC
KY8Ky4kTnvvosQeAQ93OM5RyLhxUT2F1b8ePowhBJRlS9rHM8sfeEWrSeRJf
PZr0x4vxeNiZJ720P+xlj5ryQgjggW8mfYSm11s+VZSg1NgdCujjbyWDJyAC
9pkW66N68CPJEAHw8VaV18gKRq8FImK4FvSg4P+sAccJ/ly31UEB8iP3lxGO
GB0cMKO3jNcxZViSI8Js8GaikSY4RY+qBx28r1OXUknBZ6z7LVGjureMq0fx
PB30BqP+pN9Ph53OsN/rDZNet9fvzDpJJxlO7ysC/vrJsDecDwfdzqDfH/Th
v/3FoNeBK71eN+slRxQBj/U73XE37SbjZDGclos8pgj6ajLuQrXrijmmIVZ5
KqbbGaZJksD/j5PxMBse0xD+3mAx6g8H+F/sgeFgNB4OHh18+4foJ4aEVOQS
WeJnZdngrD8a7ov3krfdJmRfiSkirzxBXD2GMnCzTK9NlMA7TdK5/Mm2ogxk
cmqvZRKRKME/LOOasiT3Gy2EhEnSm4y73UkvGZpMecd7plQW/o8WJ4iVRi/t
9hu65JF7Rj9vyzfpGg+GWxwESmPPJFDQ2eya2/HqolF52i806eFn20nbfVeM
Dl/m4bQ5Qmzgn8Pi1pLC2tlfr76e/OY2X2XuV/lNqHMiHURDjVklx9Ttp+Z/
oxZ0/SF5WDPue+gHHUpdF5UKDJ8EzWy32zSdK88lI/9B93BR1yVd2OgaKfTH
h12Wfei1s89Z41dpz0+48B1kI+7hr9lhRGvc0zfibzVD/utVjupmWQsoZfhz
TufGKyxFPIIpvhy0GsoQ/JXWdL9ciZ4f2OWv1E/sJ/NxAk+hZZAOiNLD14LE
LbLGQ3fR2CiUVhXgGbpsXT2qDkeDBYA66RdaBOSl2BGep5PKYG9oGi9A3wNL
rz8SbiWPCYT07JMxZ4aIMykZ8k8qA49jT3+5wkSnusFEShJ8oZNMxotBJ+0v
FsNZZzAeJjN9f9gbZ6kVQIky4RdheQ373T6pR3qmdY6Ous0Ws9UlljbQvioq
Wx9ftp4VKEw1xX6p4tYLFDePTdJK9iFe+b0uvPefJKwbMBLxD6ilCcgzeyTS
7W6NxttyBqUgr4xbMocjHTE09fxrjjYwaOvKgvCnKy0OPg2oY5OpvI7CkU7t
C8Z0scPwmfPRe9aDMwERL5e/g9eZfKLgg1H3OQIryLK5xBAJRYUUq0uZ06VT
zWhWEVA6cQ7q7b/OsX/CmyZm5e5qX6hniI/QcSZUXm1H7EQhN7N5IylYR1LW
ucK2ls0aCruUIovkGxKSjsMmJzBi/IFpll3jjMJa7NcwDcl8v3hfZw7N/SnB
pCsxQt6fknkZ87runvxnJBPym+W24Lgbfh+dlWxOubx4cTpRNJw4l9fOyuFA
qhcYKmFOQTweWgamn+NBcrbfY1tMUmfpNbOVWQoWV6rhN6AbG4aDkTmDaLl2
slbSM9r37D4mermEn/+nJTCkBvWaxrhAtcg8FQSKE2XQOaUgxZT9yK4E1F4J
7y3AGfVmqeZpkGe9WoerR/NJpzuYpGOQr+OyaO5MB52y9JUtuiyE4V+TRbro
drJOv7NYDJJOB2yCJB13hz1U6eW1HtgaST8FK4PNFNCIF/A/nWwwW0wGi3m3
v0ino6TfH4763flczZjxvN+bp1kyGmdgImTd6aTfnSTpBP6nM+4uFjP4yiDt
TB+p4kX/MX0FLYOAu6POmHVxyUi0QkbqY1eAUY3pVOKj+EzcfLhYDw40/PE0
xN0sHdT2dNbpSbeBJdbtjWtMp8F4ML/P+ET7rfrmXbamb0hW36wzLevsxuqb
d7wVmIk1tQXD8T6rEDTFH8AEDM0/Wk4q0m3A6sRISXw0Y1ZkaqWI75RjJ95t
nO93BN28swXcpgJe7TglM13bx6Q09r3XqJwcO72WGvibUJ36eeffbwrYP0kB
wyJqNC+pGOfseb3S7ZRtqbo/Ehn4nepux0UeZyPGrWSI9bv49qzVHQyPfOnq
UZ1EPupVaB8I7rLEPvLVWsF+5Lso/+999Ic7n/ippC1jAM9j+t+LHW68gUO7
alFWPNoMDkHBKHr8jv8udryL85oPU1kkqpljHAphlViTZ3+5Y9IYv4iaAhSy
yRZTTnCoGI7zGS6VUriwAB9nUGPkPKPSIS++umjyqaHIsVQKIB9XWDXNNZS0
/Dt0KyzgF/1RDVSBorCm0kDUtIJiiW1Ro+TF2HoUHv/qoQTuC41yD3YBt6UI
ohuNAmMDYm6IO2gUaSU7gtc/rrusCXT9UVEeThdlhsYMHpejQbTngJVvv8fG
gEUgNcCaSpKEBQXsjtJrf5VROLOpDu0VUgJvDCg418sAwFt0yIb15VHAuFSv
udpnmEJCp3HUbR4k/c44VmQtaLQSbzWUYCfkFMoaRUOfxle3G9yU2fp0TTA9
mvJljHVWoa3suLm2U3+lqcz1LCSCBrrhbD3f5ss5SaKzwNdULeCfcWz1Mw+l
7t+zDcndmnDUsRXaNaGmPO6Nht1hF2yRfg//PTxiUwGlGsyf4aQPSvYIXh4u
QDWdoEoK6nPv2GMaNIlA52VNeTToT6CQ/mgw6o36o2O2xeEE1OEZqM8JvNSH
OsyhNn24CrVBdfqYhnTv3xjRSCJeInGOiqUkZxP0wDFlVEGqOPtAHzimjBgP
agTx4Gm6nebrJbKOP7wMzPGGMpJ2t1F+4OgynrJD/knNA8eVAX+N5+v5HhcN
pvHvdzmHOzXuLcPc99nnzZIj6Gwd9BHMBCYz6NYjUpC7YDm2kk4rGbxNxk8G
oyeD/p+dDqtx3egM5jKGUkAy6ow75QKGTwbjJ53On+sr2BrDwugg28tiiVBj
BAjQqD1ToUcTePRH8newNG8hbzQxn6BA8ynDXcd99E6eEpEl50/hP9kK09Bn
MYiOG+EL+Ayb9m1NVaGUpTvz6KLc6w2HowGspuFiAtJgOOuBzb0YgAQcgeo5
y+aPqq14LJ+iclpaF74Gi+X1AbX6cfy5NcvzLVWgRR8fDjIQS2nSHYxGs+40
zcZdEC6jRdbrjUdgTB+j6CadNE17o0GWTKeD6WCegaI8z/q9yawzHgyS+gbc
ejXpYU2SbNDN5iBQOglMgsVoMcn6nfl8MVn0+sm0Nz+mJrPJNIUdJF2Mss4s
HcH/ZZMsm807nXF/nkxmJZnzU1MdiGIRuV2p26EJctdHG6jpNGQeif2D+3+g
1vmjULf13bP52Zv1e2CCw75fV7a/8LU7tjN78OfuavhX3dlGvd7oSBNpOOiN
ev3hdDTujWV3q3HA1P71YbeCLWcC1rx5kI58ddDtdbtZv09bYa9zwNVU+5d8
Qzvmudsxh5Nj21qzax77qm2uR+2c+Hfn7nmczX1498TN5+gy/N3zGWmNuHD4
5oPKkN3zTbf9rPug3dcro373fEAZBzfPe8u409I/eNL8k4aWyB/+23MIQJNe
ZCnGKF8r2j0C9eRvY4ZVqQlz83jfOFF7Kk5jsJLwRcmJJXRqPfyQeSOHANf0
RfsgR7LweZg8yCZ/nVdb7CGuBBlmdH5EMZSYVmzhk/Sx0vEQusTpNGIp/F9r
r8YK/2O2v290xxpLUz5J06e3mZHRiSmtyAj4BRDlJ/hvDqaBesIFablXAXWx
EnyWgt/pwTl86JTrRba1fabsyA8/y2/QQSX2E/c8ntpjIV7tKNdsL0FA1/6M
kA63D/o22v9fIYX13t6rR+NJf5CCHgK3EJ8yfgpPMUalf/738xzNsakQoQZx
jFO1IQqEF+5S7VCqTF9aX7vV1/VotVcP9eyRvSsfMp4yv6W94bG6gn/KWycc
jpPDYH5oLbwATnRLyf0jS8EDlcwkGC1rjDWiK8eX4q/Vo53ZJZUJzJ6hHJz1
Bp3ZsboIKMvDuXeu1e3OQTcB6wH+uzhWF6ocvYljoFt/dFf7x9/vd0Gl6dG/
QLVBtwRqSEdrZaMuH+F1engYN+6leF47HiV8+Ha0QjmAqg9QL1yM+vDfxchO
6pJj1a0k7XT6/WmvP+mMxt1OggfCHShr2uuOZsf4N6g5vWk/mXSn8+6sl826
/XHanXS7ySBLp/3BMd4eak6STBejFNTjrDuYJVCb/mgy6Qy4b44eHdBSYSyg
Lwbwrx7+u5uNunCl96A+6cx642ni+mSW9LvTSTpNjz6IASW/P52OZyMYpWSY
9nuzyWTQHQ7B1E2Psjbhbwqm4mQwAit5MJxMp6P5DCb8YjJ+WJ+AACclfI6a
NcyQGcyYbtLHZnaPnfa9eW/qeiMdppP5bL6Y9sZgb6bHTnvYWftZP0uycTYe
dqE7xrPufDobdbqj/tGj0++lk6QHy3eeTXq93jQb/vKTp8N33JmUxjmvyyLZ
Ip1VneFw1DctEJUt3Pe8SGhVZfiRrxGoRU9pGvEJJZIulhgQs+dQ6AIzwJ7v
NONHlKHrkhos8dUnuX8ErkohXLl4f6qpxLGELwoYzENjo2HudvuD+6Oju6QY
adNauOGg5kdwa3s8gnYq0t3h09aLv1oA9b2RxS6iOByfewOLHx4S/ZPVtkbX
gAKPCRDG6ODjVJKjY4i9IOLth2W++5AXFEfcrBZQYB5pXAnJQo2wPwDx0h/U
vEThHdWX4qNbYn/Jw4/X7Q90XtvoeAd72PvQytKO99D3dYfUre+h75e3yiP9
Jfh3t0TUv+Ni9R86sUC1z/dbRDraFrMHTqpxpzP5B8+pXzipnKbAKsBDB7Ws
Mjx4UoqKobrDQ98v6xr/QyYVYzG3V8vpA2dUtwczqvffWUz9TG3L/spq10Pf
D9W0/rEqo/09XF+zvyNn1C9WAIPUFj+V5Q2zjqNryWOn812NlAEs3sI6fyNF
IO53SM5H0Qx/IqCGTNAJBQMgm5tx7X/dst6vCdyE0bM4Ip9r4CEwWrkI9opJ
JIyOaeEqLimYMbt9TE/EL/DDxkshNJbsoihHEh1SQptE953VwhDVFWlSYakZ
7N2UZdFlMUCeoMrztRFmegE1s6uMQWivxVmLHV6HYenR/mQU47/FqptnUFnk
ubXtqPEWw/NB2f6TB59RNDSCys9XNchP+gTDbUgarV/1QDnXYaI5ghPGT7nA
+WRR0V6EE8OwujByzJ2XHDL1EbNsVDYhJKR4/m/P/+Pl+fDNX/t/EPnnyFZi
5iAJfZTeU0ROEvseNGPwwFdrPGX6Mrkh6aHlu/d2FV2MdPHsz39Nnn583P30
zdXVLdXvP/r2XaFTCLyCYZ0rlT1c4QdUmgv5tCZKsQNmhjyjNgY+F0p8MTbs
2g/BezLJqq9Vt40DE7C6RTbS1aruMsHVtGQ6zsNUP5N6P0QsIk3IsRv4GXNh
vxGag4wZAvPVipH5Xm/zqdANyjyGmTsTAExaIpj+j8hLy3WmQFVTj2k8hWms
heULgQ2WoDM6GCFMaGXsEottk2/0Exq3uRbahQWD6BkxvCf9DIHQ0DDx8G7K
LI1vr7ZZ5tEUF8a8OmWadQHKYMBQPoewbypcZ4SwrIwlGpMUXCEU5hyD4WAd
thRl1NA9if05JRwU5PwGwQobAgJ9yH2EwcOow4LFVXGVb+Ba00fxZDmWbz8y
BCCyDYMd34yIT1wrzNTXhiK04n1nv5oW7fjMp/Ql9Gr35EohjYipeipU22GM
KXawoJDMUuK9SCMf/tMiNAm8ZW7Sl3PMCjcIHtEy7J4E1Jp0/peKVmjiao4w
7W7oXb+3Y4e1a0MWCRA6JUw5fKcUehs+xED9yGMnlNUw1eZEDf2W0PP4kRY/
4upISqIMKR4kp8Vta5e3ltfpJU5wyveBpUAYz5a/NM9m6RxriUX/bZ/OD5WO
+e4ybVLCDYKhul7umBlZ8hXoS7Tn0Wgb2suUkCdxN5iRnjtnOG/8ZNLp+J+l
7831gxihAS8iNBF17A0BBF6lG5x+N/mKEPnX6TqHT+Q7RSVCknuezk2o4w2M
I2ZCpAT5x2S6+TWC5hF+fjRdbuc6D+QQlZkz8j08qtoHrMvVbYG8uB50Mt4g
6mPxCs05FUuA3QkZwHDX4+evEWYV4f4JbUeBYoIJPWMiO6E0oCHa4fqh0bk1
XDp9KqJQXSJ6WcGSIbCwm2UqfL7Q9vVHuPI16Cu7PCdULlmCCt+5LCJluCT4
OhyqVXZNJ6LLv+PKdLVGTJzoS/w6yzcrJed4JrLgMVwmwUK0H8p6/1juC78E
DerrfCv0KHbpQmwb+fsSfWl5f//WqvzVXGrFxz4od6AlSSeeyqT7QtMw+KP7
lb8vtOxLl2zNniSdvyTdU3en5ivNjv+lB3zFXyT0ocGpfQVr730Fv+F/5wFf
KS9H+tLoFL/ijAbBVuQ564Ua4zz6erndXYGwot0X5xKDUF6LShq5fck2zqm8
AnNV0K97wwGDDn40Tda20A1NQJPcqKYfVR+wHZAIgqoT2b5u/mdn4pDZvNiv
BbCytLmyDN4QlzGZTSCYzBhw6kKoaUSqyGziP8RJ3Iqzv/zY+viX7uOT7vpU
VBt7Ij6gwsgDGCDxNtQ83L6jD2Hi1xmxgvk3HVqZVphkJW12SoPKclVEmXAn
aTONQ2kByjzCbUebHOQPopzNuL4osNWF79ilblIYEYYst47JBTUcbA9iSIdO
UmwnROj9vLw2NQ1RqJRjSIeTRxOJk61vqXOhUzEcdR0zUN+upPU9kYe9d+7u
bexu7W3b3DkiAf7hJvN0yUY2UYrGbhReu7dI5dPtFEXpQQkYJ91xC0pkLRd+
Trr+z+5g6P0MxeVd8u+en9Fdkqwb/w5kw19ayYB+juVnj38O5OeAfkZ3CSst
qDMJCupOgoL6EynosDyygsIadcMa9blG0UtiF0BLXCbD/Qr/DCxO0U4JbeM2
S7eg5EUCRq95WjqiCgRa0SVD/Yy0jAiTQohxg6B2xVBIA6XSXlP0DxQ4WId2
QE4RVXRGT2kl/Yu0D3+HoG/65SFJQ0SfzYtMb19JMBT5a1y3ze/oM3UXUBds
dPmmqB8Xu9aM+wB9KMuddJN4IxABMeKuKLeethtsKTmPQFsy3iVLMjOQRSqh
jSgNouta3s5+jX4hZrrj72iv+gT3Rraeb8HMgU/aIC+yT6qRyw7gc3NNMRLF
oZJRnDzpZSBTEUJhiVlcFrZW6r/In3QmWfj5acb8OFAmtPgq3AnL4xilpa3S
bAjxHjmL0knAHW1Ij+OTk4/wv0nnFNbNBqMY7X78FpvDrfCqGtXIT79luMOQ
gMJZH5k8fOYvhgcIwfjXE4O/TBAOWbPCDi9EY/pLt6+/6Wff/bxTFI7RT5mv
54VTvv6ShEX1gqIOC8NxfL1EwhIpj4tKwqLczyh6uiLi9CZ2suxd5nJV3WAN
j4AetGN6gb1iCpEKQB4KWrrkFInI0Ue4vHvChNdijbKJQi2Dt/EzeJxAXyf7
FhfnHRZoYTaTkZsbEIerKbN/UWalpNgjhBGYwW7mlrxAKWtBJKRiZieKz7S4
/WbuSSXL5EOaK5BkSJ2VVfslt4Y1WbmxtV/uvqjMRed5tRUA2J/nQkHzMo/f
Mf71u3egb3iEbRTPSleFYyHpIm3IlNlGZiQmZ1c5WmU6zibJIscEhgWw6ktG
PhukNlcY60BB0KeZP3OYGoA6L1IyH5oGOMLNkB2pBaNNwmIL3QrCXFFCid7N
lEaS86xMRk9fv2O1UVP6hVPLMvwRHt+Q4OeGdtvtgAWE72EAUDt6VeKT4TKD
ukHDp1uGYycSNj+vFD4YuQogcDdSODIOjQ02NGy3wrkpkTWlkUbbHYdkt93P
duxsk14QRZyabSjRcuIsW8NyizSH0KvKRNqPecTmuaTB4hcFIp3Kru/3KOx4
JlkgAFqcMddM44D9ybZUTpRrK55eEVddeRNwk6BOJNgJboMMjntwSebWOo+Y
BZe6iuBg53Pd5j8vkX/r+U6CzckdSLjDBu3vmZBMfCyTEkPKMxz6za3N4CID
CxRqTzrQFGfCPBNYG5qss2wNY5wXYqWSQ8cR4ESE7GgeHAIrmjETcmxeND8B
HjuAwYzXOFlIhSKyChtphfBdGsEozD32BLZ5Ee8IAJKMM+S1Iimhk63poEyF
8cax2TBfZU6z1A68rDERC4i1B6GLjjB6DhYNd3nNp8OJE9UuWOVfyg3XPZ0v
A7svFV8w3HUSj+W3WYmENQzr2y1tcvRjHsGbbGUgdxgW3h53uu3k7I1S3ge0
tFC7E7jw/NmpaKNKoO3AepU7cI7wR2vuANKSWLBhqgIGnz+nYpC71fsmCNNt
tmIGupwh6p0bn+kJQgpOaEalBEZVwN4iJyMpZwEDDqbAh6n8yIKCKGFEwgvl
v+AMgQYeJ7qWIX0iV5tF2vf6byGoyeZNjwCIcjpIrhFtKcFZx0Hx0Zl/SMGn
qeTaXgghIdNopOxbYT45Y1kR7Om5ntZK0Uimi41VDzARp+7Y0QPvH6o+zQ8l
F8g3RAdC/hrxkVp2veSbhFAB5PoEQdgWat4i857H/ue6wVzZZo6a0JiqJN+C
GKfMvUT0e2w4FEU+WwZ4BVweuoL5WExxw3msOW0n+vqW5UmKOEI407ljikqb
mJZsS/DdMUGywW3YiNayJ6U1xHes1uyumNTJpbtI5+N8L0/MdvQSyZhU6tHG
hwAyyxXtPDi7kH+ryXnZ2qfe7DowudoRMbQUjiQXWZKwgZIIdIM7LdtD7pgL
VEA5/ilrSSB+LrFZvEcymY/PQ4QrqFBWAEXwwPMcmsGF3ffeoXN5azn3ERNq
HT3/m8QLAcLPYxBOdZYeYH2DSUAUJtBZMmMYhQ8FMGOv07a4pMajloqw/jI3
LzOKl8XJzo9lO2FUcQD72oEqGiUKoC2AjvjFd1jaexwHqAnx/xDKhQqVeTgz
0+rcxMpXRBx25frRrh39Cb9PpIpSEN+wLsblXDvMXqfgO1DlbzMCECW0NYei
X6kPc6E5aWOSg+VNsNKnSNgim56fhIap5oEIQP4T/32mkCz8FY4+BUyloyKp
xHMEjC4yAcdZG6SkRpm0HX7mTC0JnQ5OiLAaTu4LlKR4knNggClyRWFZ5RSI
9+hTFXzMlbRTvzrtVScwhS4YiVWf4i+fKAEA5aVaW07N16WfD77ljtFcQttf
Uc+A6q3mBwUkR8YU7rwwjS/zfI5NS7kkHks1XK5lX7HTq7AS+dYsHNarZBPy
ER51Knjv8cr4FiSdIARz3DrS0YDpBnorDmO93sGOIfxYU3iUcRyFOcWLTnp1
/iKWYc1cmTI1JBOxvG7xbML08Ep/pnW9+ZZ2uRJl+jZTnviUUMyl66gk3nPF
/PDJlPnjdV/RqrCAV5Zk4UhEikIK7/CEhyfoYSjhrvLfsBzk1huD1012mzo6
vkLJcpgF90bYCq8VqDIkBZWk0fKiJgFq6yBgl6aVR1YHlCe+NCYOUyputMqy
4op2XfLuin/BA2h1laRd0dkafC6N37BPCsvHjACPGHGJtmuN0UKBz3YGWlc0
d/74+sL4R6HPTJZZr5UnjoxsfY9JH9VRYurCRtlHr9DsS8tTDCeJNx08ehrq
uTnbJeFHyKcZfAVnyxo7yNyy7DbR2kMP4a7MN5EgLFenvIlN5WORgq39TDZf
lCaHClhenDS3w/pJFMttM5ry5CexyzTnNZ/z5gmRQvND0yUTxsqyFWtVqlBb
MSRVuVoKI5hpI0zNdEv6l/9x1sUcIrCaf6SYCR1luT9keTstXTGHS7qMco6W
9mQNxEHJRW0hRagovd2OXq2VWJ5KIUYlAgNHOhBxzwlxGpuj4kKSvXuaFstZ
3fdFIvn2NDZsy4cDnu3IBxHoCykEYBjf841PU8cLpJnkcB9tjh6t8m5wto7/
T3vQmeDBC4bJkp4km5WewVIsmWg0YE4yNSvGRvoSmMKgpKxgIVXoxr2XLBL3
mjNvoWQu4aYH74A+XbAiyRWi2Cq/VsVuv8Ad4tMV5vwEULYKEOwhMMsqr6li
9HzBo1O5J8AVYi5DS9hsk8Nj1bDSNS826Zx94VQdflEV2kqIDd8mLiRm2ZuW
rMGSrRcqgoSB5+w3t+OyNod1cB7qnRy5BMRHVpxE26ToMdDJQzNvI3T1rFM7
nYD0sdeCCzoTtPQMI38x/sGuN73uC8HbhBF+uY5dYLAEFbEwdH6o1XKRhWKV
GgjbCzupcwklI2eL7YK6XaBNjuvglkIcYMIbXbtfm7UMrZYsVTAFHuvQmt3O
cD3fSABx1TIwb8U1Go9U5WXhdQd2PGxny0IJ/1ioyK5YZNlHDqmmj2MjsELS
fV4pSmaldgx/5hPFULEAqlQN/ZMKePkA34wYscdbiqLtlAxy+WJQUI1JRAuB
LB68QLZw5sUb6qxHn7V/84CgZi6rPe2xj3bcYVwdryuX3rQ91CIo6FFR6iq/
iCIoxQ7Rebfy5g9NH/b9PRVlgMz813rK+2ybLnZF+RSWrJEVTfAFxe2vTZeo
HhTPqQiNgqO3KBRu3UJRAlNgR8GGnLuK1AiZzMSrbLWJsRSwzrfkXnYbMgrD
9S5S/8Usk8Oab/Dz9MUWNLlogXrU6iRR9Lv4bI5SmBYau6XjrYYyx6QdzJef
y0VAf85v02uvqI6fzbFIl+iF5JAeWSJihfHMDpxU83y2x8nFXJBrECzZJ912
nMs8xWq2scIXCvDqM2/S+KE/iEJPxY/49Nmz79v4Bh7rrVXZZuYDkMLfvX8L
N/EMCxWvDe9TekpAqlOe7z644AhVeaVy5U4Bk2JR7tyn0AcuIl14cSmbgn6j
Ss4oJFQkvPBiuUb/3iZbrZTYj3esxfJzVvBwecoevdbE/xC35l93Synp7rp1
sW5vYNqSAXb+7nlBnIa88aJGy8bq7SbDBznkXCQZcXPjwGE0OOxgl7urgk5w
m3g0zsdbg2HbzSydQ+TQgUpis/zZxrykf894bAVZjXBLYf04RCEhcMw0QUi1
81utGOYikMMviuX8S25oZLOrenaNsQW/i7/POTCb+lYVZJw0rvYHPGbRPR3c
o8aAIbrzJxF1rw++wlIHIVYk1cKm1u9gD0cQX72usFyIzc2ZTkiYAv+0SLev
c1Ct0vur1qd5yYvy+Yvz5y0O9+BBZgVVVTNSWpJ+i5hyGHqFXoYegorCx1B9
2/BpK/ay3RSVd8GLjOc94jBRw3D1SaqXgQyxoep9RyFeaCSC0nQmILGPMJjc
mHfPe5xwn4x+Ap8tTo1GEy6LxcGTya3VWyKN3BOjJSkoa6I2v/QexCWo5zli
0NM0pXN9uW9nwZph7wYWQ1XYO019RfvvJ0SSWVGr2gLCz73shAWtjzcZZVOF
c4a0fofT83sTB+xwN5+76OnTVcZiNEhPY5Kn2iefX5M5GXJO47oJBSI723nN
u1sEZDy71Q7T/jEf/F59FffN24HNLpk8y6JAIxIToTFWlLuWuguK3VqqHPTO
91qZ1+XK3P3JoZMDuFxbBR6jS2VxLEj/YYMSVXJSJyTySL8QWwnQh4wW5DrL
qnFnLUb4sW90ehBTqbcvFP5e4oJx0ezFmU9eXxgqSo1D+GV+8BPsL7AIQJ6B
iZ7PbXbeXZOxJzqkOdIakRvM8gX2wpvvY4ZbewWC3pdSabwjAgARJnd/b6Kz
5YIDfOSX7Sh43JCStHiu1hubxZ701lWqPttzBYnALqxJUtXOVoUFV7c4UT3n
c2G+7lm63GE4o5veb4hJGjUdzEPx10chi3GbbVapYMpx+UXlA64RDmyTUyfk
7N3QLpxkIcHE4lMQxlGb5I97kOP7QrDvKBmXPfXe7euMA2AqC/wUv3F+9rKV
9JDbQyRbIXTD8DBC6ZLPXxQ0zg+NX7LHiLmUQVkWpzztLgKPolKymMHmnLXv
mRhJB2vybVnEoo6czmWbxbm23abk5N19yoNJiL99eewUMuxhWNXkMFuy2OPh
pkCNQGIWThJQv4dZsXp5vspTXfKtVvwM5sQO/fzfM38XVO4MI81v0hUmHpjt
4BwbrG04yRd7RN2u04UvQfodtlV/QmJsEJSLkkCicTjdMF/ll8K99+bs7UVM
fOB4Ekm+f9HKjyzA56jWVwt/NViwEyvohD+InsI5Oo1/z/Ia1y8U1KRS8Ilq
teRwkzYwVDu2Wb69hAXyd9uULmTNk/79AjndLXRWTaKmqJVYHfrEmfeJprIU
kGlxk7VtKJXExGExKpMb63FyG1VUZiEriIasoHXzEmrAXkZGziStdL9ektqy
konPMVosWW7VZ03amLh5jcictBFqIc54VMYkF562IxoJXNxEpYi+lmtQceeh
QpOat83cYlaqhGa6KWXTj4uF8smJpyoB216Uhsa6KzkhKWPbqWCoCp5qb1qB
qRxFrPz0bXJ9gXRkxnQspxnODBHzb/ON6C9WHs5EUZsoZGtB/HQ5wXXjK3Lw
hU4l1WfwdAhf/fY9sybgvy/ek4x5r8+jMYF6Gh3fvT5/ecddjRkO4pNIdn7e
qM/fuAFLepEfWlXSHVFgYjpl/FgGYUVJd5SQiO0jSXqf5Ey8LdzpSNRvOHFw
u6b3sMQ33zyNJ51JxxOS7MbH8xZWF9es/Gtrov8H4nDl3bM7AgA=

-->

</rfc>
