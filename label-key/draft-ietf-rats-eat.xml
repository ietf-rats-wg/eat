<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="October" day="13"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID <bcp14>MUST</bcp14> treat a UEID as a
completely opaque string of bytes and NOT make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte <bcp14>MUST</bcp14> be treated as part of the opaque UEID and <bcp14>MUST NOT</bcp14> be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this <bcp14>MUST</bcp14> be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy <bcp14>MUST</bcp14> conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity <bcp14>MUST</bcp14> still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it <bcp14>MUST</bcp14> be a CBOR tag and <bcp14>MUST</bcp14> be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item <bcp14>MUST</bcp14> be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token <bcp14>MUST</bcp14> be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token <bcp14>MUST</bcp14> be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule <bcp14>MUST</bcp14> be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they <bcp14>SHOULD</bcp14> not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and <bcp14>MUST</bcp14> use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying Parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792" target="https://www.rfc-editor.org/info/rfc8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165" target="https://www.rfc-editor.org/info/rfc9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="7" month="October" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-20"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-09.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / secboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / secboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements      274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "secboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-16">
        <name>From draft-ietf-rats-eat-16</name>
        <ul spacing="normal">
          <li>Add some references to CBOR and CDDL RFCs when introducing terms, examples, ...</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963Lc2HUw+h9PgcNx1ZB2d1OkKI2kRGNzSM6YE90+kcok
n8+UAnaDTVjdQAdAi2rLyrOcZzlP9q37XhtAU3ScVJ1TFVXiYQMb+7r2ul/G
43HStFk5e58tqjJ/lrb1Ok+KVU1/Ne3hgwdPHxwm06x9ljbtLElm1bTMltBw
VmfX7bjI2+txnbXNOM/a8SJr86ZNktv5s/Tt8eVF+ktVfyjKefpTXa1XyTfp
tCqbvGzWzbP0203efAuPmvXVsmiaoirbzQr6PT+7/DFZFc+SNG2rqbajH7N8
1d7AkyP83VR1W+fXTWjRbJbxg2m1XGXT1rVYX4VnZYWP6utpPmvazSLXZm3R
4o/Lmzw9K+HHJj1ucVlZC3NML6sPeZnunh1f7iXZ1VWdf3yWwo8kq/MMJl+2
eV3mbfLhFvarmJe4+Mx9Pr2qalj0DDbqWXr44ODh+OBBkq3bm6p+lozTooTp
v5ikL9bl7GqRzXKYIW/3i2xd5+U0j15VNWz0RT5d1zhNmHFVb9IXL07gVb7M
isWzdDFf/KGRBi29n8AO6Eg/TdKXcPabbGnj/FTUxewmq90LGuV/rbMFfLlM
L/PpTVktqnmRN7De6QT3FU4ihz199N13j9KXVZ3fVOsmT0/r4iNOcwqDwzyz
Mj0t8nmFu57PYTeepSfZoriu6rLI6LjWZVtDy3cXx/BzdUMAufO7g/TJoyfp
40cH6XcAjjthcUue4h/+vS0m/y7z88v7eZK+/va0Kqv5zTrs5M95nS838Zv7
L/Hwu6fpj1ldwjlW6/lN+rbKZrZE94LWM8MNfXdwlH734iJaYFm0+Sz9J4CO
WbUMa/3d0VF6cPjoMH34+OHBk6dhpX+uZjTZrUs9maS/ZItFNg3rPMnqhXtI
S3wLo/4RZjFLL6rr9haAdqQLlJGm8NUf6nx2g60aaUQjJXB527q4WrcMqzzK
H/PyQ/pDUX+4qRZ/0WF+rLN1eVNd53V6cX4JT/Wm9F7IqDfQy+RKevlDU7ST
a2s5AVDX0S5vqmXWpD9WTQP3SYc7rpfpi2KJexq6bKnp5Jqb/iGrdb+4p5fF
fJ0v0h9gf+By5nXVuFfTmwzevcX/1rAJpV01ALh8AWBn20cYrnEgOa1/hzjx
D402nUwz6/lNBhs4/ZC+g6nWt8WfP4Qxs/amgJX9UON861nY36wsAQovmylu
RlnM71z0DbWetNa6t+432XqRntTV7SLfJElZ1UvYnY85otu3P54cHhw8lT+/
e3TwSP588vTo6TNGXfwKQDS00g+eHBw+tj+/O9I/Dx9Zg4dP9bMnjw8eQI+z
2UJ+f2evHj59ot08fWDjPAUypH8ePH7E364W6yaBh7/8dPGExgMqkdVzvKY7
N227ap7t7+dZ3d6Mi/K6mpTzbLIsFvurm9X+rLotF3B1J/Dj99fFIn8+rap6
Nr6dN0+OdrgrpgO/vH774jT96ez16dnl+Ul68a8Xl2cv04OnT45G6aufjicX
l69OJw8ePHz8/mDyYPLgPU2GOlC0jn+P+dBeERXIFulPedWs4Ee2GCPNWCyK
OWH3Y/zPJt2FnvfoQ6MUR+MH340fPMH1nh+/Op6c/HI5OVlkxbKJV44Lh3Xf
3t5OiqzMJjDuftYgLVrmZdvsT29bv7yTH16/TX/Jr5SwQbd7Kfe7bRE4vJvb
dbZocpvWz51pRfNq7prYn2ViOrOfL16/8jP7uTOzaGq9uQ1O7uT1xdnkeDGv
gBzeDG3cnROcVk2+7/duB/tLQ387/R27c8Mub4Cm/PTmzeT85dn58GRWwOVk
i8nD+WpF85nlzYe2Wi2r2Rrw1v7FKp8W18WUwKrz8zRvASc0k6xZffp949+c
z55/d/jUr+RhPQOQLPOauZQ3cGngR3NTrNI3dfXnfNr+A1NF6GGRRsMwb5ee
ANVPX+XtLeDDFHAfNK+XBYB68w/pq/XyKq+B2I3SbDarc9hTZIugUTGDnbWu
tgHcQ9ij+DI8xe07qS5+OT+F7R2fTogPbbLpcgyndFvM8P3pi9fHw7s6X1RX
GaCPrAXmY0kbe7saI32D6eyvV4gZmn0Y59H+weH+T29O3p8W8wIO4kUOvFz9
+vp4taqrj9ni/Ue89KvZtd9MaZty47S6TrW5W8Sr6mOOu4KreZTgdN+cvdoC
A3kZABJ+7L/JS+hxIbs2WWXz3I//BtguGAO517xe1QVwYnwC6S6MsQdMwL+v
iU3Xa4GYfdxmc70Q3A2+YvRwCa/gq3kBTNDmb7wz2nX4a/Lppl0uaPSLN6f/
Eo1pZPVNNv0Ay0pPszZLzz4BIS7h1y5+sDc4g2Y1+wScwsehgwR+Au7K0QGc
6OGD/QdP9rGbcXQlxofjQztHBbPDBwRmmymKRjpTQ5z6eBjNTfk1TAq3JBpr
H46+/ljkt/sDmMrOBO7TeJXVQLThFIdOBi58W2cFjJG+Pbu4vAa6flZ+LOqK
tx5QefX2bA/vsvQR7ds/3gPdRTP4nk/s3fnlBESD4hogiK+eEwSbddGOl/IW
2iPZjRmMo4NDJelHyFUIF3FwaNT9wUN4in+D/Dg5rqc3cHjTFoQfd9FJ4Mzc
O/wAmND2ZpZtQFoD4Ik2TF+hKAbvBgEILtlt8aFY5bOC9wJ/7euX7/nLySDd
Ozs7mzx5cDg5OH4bnxO8SC9QugaObpTu0G9pyGIbAHj+sQC6fy6IMK933BCn
+VSRxIOnQ1S+kc4b2Jc8p2lfF8C3twj18m5fRhxjJxO+e8AzPTyZABPyAkRs
P2V4tKgEsR+/Oe+g+kNA2WezwnA1z/LnrFxnIHgCJnuyFTvcPqTZXb7dn4ch
xjDE/jfEeQGpgEv6vkCcdc0SyyAtAH57MQMEnxNrgJcAKGSxXuKaXr87n/y0
hnfxkvDJokAuGqAxfQfoEFDy2SdAETO4OyCLATp0BwDC/bvzvVH6up4DJP9F
OLbFZqjla2qJlOwE9QrlJj0/hYt3fuqZt+P1fN20uD3fDaOu/iEqBptly318
OLY2ofX+bX4FfOx0zde1RbkM+MlmP18XhMpkR15U1Yf1qg+YgtDlrGmnSdkR
UMDgbEF0x2OZDMzaHsEFHePsVuurfUR0BHXf1DwgCNVbb9Hb4/vO8747CYR3
tp4CumgQ506BDsgC9uGe5J/4PtxxqfHWHGy/1SCK1ilcIiD3xwAFL/O2rlbV
Aug/zLXOM2WJmvS1IH1q5/Ha8JXJrxo4z3ySlU0Rby4BBP0PTA9nV8P/fBcR
LviJhAu53X95BJf+FFG0w5/IyY4/wRtqBiR+cpLX7XAzotsglFRwWcZTaIbf
vDs5ueji4/V0StLYz5fHPz1Lt+8YXsK3ORwK9PemKOn2nJVA4PHBj+tyyheO
NFpARtLjKZxak76Be05tf0DNBOCb8cWUNvkrO4kb9QkYAdhLAwq9NfuPgB49
efzYbd6P+VWt2AzIfzIej9PsCuFvCis/Lr+iE0yR0QN808BURfEHOGZKUkva
5G3S3mRtCu+ndXEFrbCLnJaFugYYA/jkpi2mDeIo6CKn0UZJBt8QoVgUH6B9
2iyBRSet0Sg9ry7l7SgthQMHFq9Y4RIBa6bNenozQXGjaNxUUvi1bmB2V0AX
kzpfbJArB4IP46V4W5B3rVO5N2lbwSAtMfV5elPdpkvoNS3a9LZobmAl8J40
xml7k8u0J7xhx5c4VA4iEvSYDUucMNCgvHcLX3kFKghUBXSezxJeyIRPaFnM
Zgu4t9+gBpZvPNKoe5wXzCxLlwBgyG3CLFp6t8yAwIBUA4cgG5ZdVes2nMgE
u+Y/ofEmvcJD0UNoqiVsEcA6sbK4h/jAlGkJqpa1W2iwXrQFMElwAOE80ug8
0tsb3P0pAVZxTfCCR0C7v1ikRDUBeHi7/AHgUHFXONvpTQVX244MwKZq5fRg
ttiuIIrXP1BEd/mnbLlawDqloTTTbVgsqluS79IlgGeLdwluTwnCGW1+VeI6
Vzh4BtC8LFo4Q5ymqqnhM6DXtMZ5Bb0jvvAqdNoyJsXYBn/S9LEL4FXTjOl8
ReBmnRr65BsEVAQ24FrgG+ESSAIukhmTEZ5E9yENRx3CITHIwDp1jwFiaoKm
pgHcMsP1wW5cZ8tiUWR1OBlcUxO6CgvurbMxPAGCcpl+/txjib98ob2DURWj
wSfXxOoQyKGWGI0ODGuEenC7VhUyF3zEAOFXNUhJuOBJgncVRPTCeB46zQax
GgiSfJgKuSWj8ut1TTutg9CydbeLv+SzSfLHHAbFgWlSAj4g0iS/TV9mH/gY
eQ9gNiA+rIEBbGmX0V4E66rlag1+kAE4FysC3LpCUlHVAprT9SKrYRG0s7bd
hkLoO+jyPFJCcOd51sAEGIFeM2ypaFqvSzLrYNMwL+BEr4v5unaQQqidJmit
nIAGkD2E8iM8X4AY99Obi1T5ZejhRxSo4FMgxEHxA+A3zUHImiWJYNspSYeA
BhkSm/VqRfQzJda5JmkahkMrzTRrcsSjr6AZrGuRE3EImA+pbDYlUJoRsQKE
Y9/BtqQDQ2aIVa9RdCRqhAdAgIn7prJwBOyEdvni2ns3ufPSneiIRgyEFv9E
FS6cGuoJimYpUJhdLQjJTRc5wQH3vKHjlMWVeQ58zYgf1ZtVW83rbHWDszO1
Hl+c5qZaL2bYLSFpPGFGMQxdYXpCQrCBrkAwnNCLBo+AyTttHd4GggjaiTmr
4ZCiOjIBnbWbFWrfcB3AoNPrpdDHMtrLDzkg6nOi73XerOBYCtyIa74hiDrw
GLD33lcXeEH7k2qYzNByQM4BtI4KBhobcOcmvSnmNzhWgfeeeQWWlxmML9+8
bJiVIJE3557hWF/TBiLhQBoFsLTA/8BkGho/vfgFwQYAgwEU5koX71rBhfgm
Y2gaQr8BUhk/0YRRAyQ3S47zJvsIAIOkFwdq1lfNBlg1YiiEZxF6JqwvYmBh
YYhRAWzMxo0vX3BpxNTws6dH+CxT2KJJ5BnwSgEa5MZcrYtFi8sdZIm4t4dP
D7E3WOggf0SN0AgjjYoSZohoA28pzLaoe1iGYIneBAKkFweXn3zzjTJNKrMw
+BqNWTcCncgOpjsM1jt46nWOpj3kK/AtceIB0snYvFF8KufG9Iq2t40IGaLa
Yd5rBOxQgbxnQ2zux2yB7RHm9B4glOQB1TIptXH+RHTUq49+naQ9dg7nCGzX
Ije2LgtgEv1gvO3e5e10kpxUNd++GSLVDaMYPHhWiSlljchmxSqHHDEHriGc
C18k9JVgzT+dYsnSBXTapLtNngM0cIvmy5e9iUc50D3vWcYDphnqj3O6MUTc
tGPcH9ndFhsB4mxGzBfzmVar8SL/CJRXegZuFFrOqrwpv9UvsJMs9MlXStoD
8wMI2famYT5wR3bSsMvOqHNoOLh6VwSXh58WZC7d8D04oquHC4f9nesrGlHZ
IgNW3D8d1Z4x2wRwSPgxCzxtusrrBpnXWs/IeLTbHG4a0bvuGohs6amTRucT
sNo2gzJHvpNujOzC8CATckUxcYJYC+VFaJKGq4nJ6cptQaS4BdxBiFBXFS7U
1ZoZ6Ghx1DlwOwwi9jWADPLb9jX8qhWOQqO2yRfX/loVJBJ3iB0crC5sFFYF
/V0BbQW4ufAMI94z6qwQ5vFYlahn3Cc9ujw7o/+qJDxFnQMBZA1YJK/pJf85
wh2/yVZCyghJdz/DVXFrD9LYSekEb/5dwF0HnmQN/JmwovwcbgVzi0Fqp1mE
nzyBJaJHd8eRciAu1+dCovhbwz5F3LPKNzlxyEu6u4hugRers6QjthIVBK6t
Qr5ML5WS3DSbZwXwdAH2ivJj1gCfKdS9ITYD+6E7Rp0BUrOeRvgI71JZMe8F
G9MbhfBULWAFgnxZLNfL0KxGFC+cuHB1QQZnWoUyC96/H5XfNC54Kw96b9aT
ReMsvGHmjjui25n8coO8p5L0DK+bSADka9YS80XnC2SdKfkvlyPEmsRZ485d
5U7UywS4y451VJnAXBENcTdMPgoV8sbIB8HXpzZBujYiCA4pUuRDFGGCSsIh
3pPT0xcirqJ62VEn4lpEcQOfG1IGypsvqlXudoMM5bR0+APaOlbO82+0Qj4O
YiZWQCXw4HEjF/kn21TyYBJ2jm5DXwIIx7npGJs3kRDC58k0eRsQMDwZ14OO
NPvAdaxBks6KuolUD+6McQ06pscNqrn6/Bk+5B/AvSmF+vpRBUEeRHWW73AG
fmSyEAZ9+yQ5bgZAsKy8Ggq96bIWPQgdW43QD8JlNWe2JAhBIIJUNQr3ybsS
MQ7TkDshHjfRVsndCyBV5RSt1GTsDZCbvgAxdY16uV0EQuWIHx88QCIPtHVZ
Na2IoXYEBK7hepqS81qICm8VQO4+zk1h2l0weI0Avf9z9zUs9QWi1t6aCDAi
CMcjEfk06JAIIaKmbk63hATIlSlapqg/mLFahnAbybjou0d4scxvUcBC9zG5
1OVWeXUELdtMEB2LAZ2213CZiquCdOxwBU9wJbiAEQGPrmLCcK9HhmrSTBBl
Kfd3ixyG3IzTGPyNIhhrYPS5KNFrAOIf17gaHpLAq+mjHJXaloBKRWwjgjEF
dtBmzLyxsM9BXGdFZ9QSOFu6AzRXWBbiBIM1Eg2x6W4+mU9QJkDYCHIjdCQz
wH3dk/2ES8vwmskJsGYdmY8uLgTkN2M5v8nREk864uu6Wjp1lq2dBAHeWWQ2
kXSjOqmYoxFFhC4eJ7JI9DSIjDaQKUV6jObwlMRoskgSAWIYwP46FEpGISKF
NtZjonNN55qJAFTV/TUI7w7TWeTXrahWrisUlcZVaXOEOf9Y0L1hsQpOSIYX
nYrSgwJJIxsE8KSx7+tsitseNCx1bpMvs7qubvOZQyCNLORuNgEPuT9NlaZf
r8ixCgDlpam2yT0+Ml4RTDoBkfvjSVYrcc0C8sGKz0g1/CNqHvP0YLuaOL1E
JeASuETA4yNnnKqdwilHhIX6G+F7cSKiYQ1WIxkYV/MReqvWzZ2mK0Bk1iui
4rVpsFQs+ZBv+GQQY8qh2OTsWlon1A7Pk6mWodfIrELmLbiAa1YQlhV+qoYY
VtsxMkNM1aCqF65V3twASiANEKq12MRPeLkmpKQ8HpD+guZOjTaqTMM1Zbjd
jL8yfN+KHt5TO5L4aC3EQzADHAbE5bglOkYVJghIsVH1h/HdV3lglUT3yvoW
6nigBzYCMH0y9qFjADQVC75TC1XQx8tNf5svK3jsjWtvUPKZrdXOFRufjIca
nFWkMkO8ofcrCGrBulQ63UbGJuJMpbeRt0LBTc7KKdupnBlKzKLIR/AZMbvf
+rPAg4wXoNamGYJ6OW1NIJ3gTf8GNmTBGlM0SVzBbHI4TbsB2J/fq7ey8s/f
1O67LyiliZ1lu36sqk0tQu5gQHmQF4f/CN9nmqy1UCG7Qx1Dk+w/6xn8RBx7
XpSDRwZ7n7vrfY2WeTZuwCWfo5+bXPPetvoH3zYp+kxMyWCsDLCePfUr5Cbq
AQGEPyN2K68JXQF1A8F0BJ8uUBvPKBybi0SOR8nSvh0KQ2RRrtatMG5490jc
R4S5kdVu3QOiWMDeT42m4MKR87rJswXp59katG703gyaU53RqYnOS86RmOua
b2wXicgV5hnBIKLtq/uoQXXrK8B7+9dZsdiyLjgLtiEQjgH+ja0IbAtxSE2A
0GCcLAVXRDxusxpv87oEkoXnNoxrto5PbIl0g63hFzCJ6Iys/TgA6iiW6MQF
pvpoKIgxGSucrofhEcf5UFa3sJ3IVRFoIQW6gY0UgGP5Vvei1fk2YvIxiMUz
pG3YDDQesZFAAQHlRqfTW6E/L0yGzrH+KEyUd5SZpMNH5canY0EIj49tK0DP
Uc0zYxdyUcAHwBWY541AsFwjdMESFhVwSTM07xPXC9x/dkUWjwjQ2+7GOFvd
ijX9O1W+LGY7ggTvmCzgFjkJxvY4Axw/KGLSd2folMc8aFqSJ/QeTl6Npv6u
KTccOeySepvQPg5/tSgavNOk+GTn1rQ2fV20NlgPc3EjwTIN28FBlMrUN3xB
zmMKq3yO7B5B+sgYcFECKWfAm7eKQx1a40mgkhQ/9JMgGEaHEYQs9grP27tR
O7Gu4sSPoXAbhmdk1oDCggSz8/LdxeXOiP+bvnpNf789+1/vzt+eneLfF388
fvHC/kikxcUfX797cRr+Cl+evH758uzVKX8MT9PoUbLz8vhfd9jXcuf1m8vz
16+OX+wMm41YT2gLJcSXRAzzDydv/t//5+AImOX/S6KevnyRHxi7BD9ugQ3j
0chhhX/Chm8SZ+OAKzXNVujs39AJA165LVNUZ8L2/fZPuDO/Pkv/8Wq6Ojj6
Xh7ggqOHumfRQ9qz/pPex7yJA48GhrHdjJ53djqe7/G/Rr91393DhI0c7gj4
frMrwJqRK+KBNNwqp1j8/HmMkVy0+2ON6RK3Fqf5J7lGf0FjZA5I/QjS6bys
UOzA+ym3NbBMnz9f5MzvPcF5kDOjWEo/fz6GgwSy/Sn9id/RPAbEYWZaw01g
CRw5ra719USfsdn2WZKQTvVZ8gx1lEU+pd0wr3gyIAFeIghlG6dSuAl8ILiv
6ZJwVDqK4Z+pP41t/nWonkRcTHKV10Ci2EzzSV9hKCBNShyp0DSFR2aGLxXs
vRuCUhn2f3AveMhr9eFTtYgN90/5Bke7FM0bIL8VzY468lPMdKDdS7MuWxc7
SGkQy+LuY/RbehmDHRk+WI3VsVAvsqt8ERuo/URYDPxYFeRwdL3GYHTe4Fht
hk0ne2mq6/pn3HxdmSiE0Rs9aEJkOXqW3AbV/mTH2AgM0+1o2VZDO0jtdPua
9CJve/unTSthiCK1j7Ovw7OP+SYw4UFOuDekR6oKvNGDKgYA9mOR2hm0arSd
By4JZX2T2XaDM4t6PO2htb1xkv4SnQpxn1arOitEhgHSw+cHl4iFZUASrRiH
mOmN9AfilwRdEuOMjopAvtobdHFF/1U04N6QQWdaEJMJv+geFcxQsbv5XxhO
VcZgLYKqZGAf/1lorVs46+hl6nwipDcQlWuQPtS3IVJ53CX/C3nb4ioKs3kr
vzGKb9Od0ixHpEf64+6cIrzUnRazqKt1DewlcxkwbAHM0IZ8CdjIEoLSnJcX
K6wnHCEB0LMfzXefPTLYeP8rqkhlZ3jisSuaqqoUmmzPxDJokEL7ohzQJAgn
yGyKXog1O+axh5cwFsGAjpGnEkjSI5a2ReQiDVFfitcrChuHTGw8V5vMyPlx
8UxItLl762/JQhqxlh8rAF/Pc7qDdLIgQoNKioSummhfRXhUQy9fIHkYewB6
+ZNoUM2ePXb2pW6/cbMs1ChjnabdmZhLaFsgXifULOIt3nS6hqZKxUGRjS3H
86qayRxH6bxazNBfOzo3NFBUFHxq7VAOp3wN7PiLOK5xJ8FOu7LComElNXoX
kXglBwAzoHPoyd7LYn5DqGqJQbB88KzlddoXsuFXvGthHAT4clbVDc1dz4aw
LPmPst2bcAm6slPL/uEHqxKrXhVyvm2CjjZbsb0BSbqiPqMRi4WwScRJ6G2R
BCYTkgSq1fgFOf6w+1kw03kn/yzdEV96ZNXTHVKa74xU2yYoXm0J9AHTuDHQ
uK6flylsWWbz7h/kWIJjEkedLW6zTeOtHqFTvKvOAidOcrpd6g8JK6eerpxe
FDcXXas6fAbhvZwQqNO58UlAM8GQk4QCzBpSP5G2oidUAnNNfKyqowEyZ3Tr
wqSEDe5bWcjnta3g4NSbMqh9I8OBAiOxASVrw8weCvNv1JSJvhzxMB1KYQNO
s7o2pTepmSMVKlJOkemvNmI/IoOQGMlIMfDHy8s3aPZFMBhf4ltAaovZHvXF
G9LtrL3hhCtrjt8jRojCiSP/keviEznnqxtANsWEGrHPco/xiTzEMrK1Bj83
gedRbD/Dfb4CURzIqnjenZ798OXLnirObwAvYV/uaqEc1De/8QHIyZkZhAM9
IluxtyN7uBUcsJwkp/3JGe4W6cC7bKhnqwAZQw2Z482Erky0bca//eY30PkY
uxlfZvN5PhsTOvi3UfTqHVxE95LmL+9xZH48/pGdLv4NgGf6AXdCdlJFtoeT
p04wg63NS1S+wAyv1yRZxr4brfjRkPA3IRU6nqRY03hrF+s57WuVoqcUbARh
bCaZTW4TUVygkiRzG5iZysWRZHJFX19752+EMvMa5AkS9MdHC5A6K2pk3KNj
JS5jADfhGWPHHESCVgyUMxrvH8rMXXA7ILNojqoh1GCHMBiJgoRtxhg+kned
Mw65khZiZhEv90icfkU2cz5AdrUkE6tY2lqxqktvHqoLNkZfE+ls3amUHbO7
Ga6cEwf05QcOFJiHdAAbDCWNotBfkL/nO+3Bxbk58d0O3g0dfEsYK3IWEKrT
xBCX/Af8w7kk4Y5Q8+fplmuT7qdbbw1ImVu/eo6oW5+9ZAR1V+sf3r06fXHW
/SDZPraMYE8Hxuh/IaP0PsJt6WxOwAK2OX3EoBPsv8HRgGZ1pjXc7u5ZIWeD
EMT4+PM3wSNLFcFyBUPIJoJSx3m9G7plDloil3TdtD5/7qTwURf/8O5n/67n
zpUcLxbeSWHk/STR+qVODdgriQb8c6XG2WYUcIIKyJl05UdzBrQGkaZpX2y+
xA6QxQtXSLc33jmhrrp9N+QgSgYyFN0zQAZRd+KQhnIF3jztsBuVZDwxRmqg
pkC4P9lyJ/SzuZ4VAaTnYsaGCH9JL4DrbBRnNtNqJRShy7FNkgsTaoOk2xje
JBOLnEMvgCbW3DuDZNeY5mgJcrWT5I+AiT+iFKhWkKuGrbjXzFPHJ0866Y6b
IFouZHCUnYCadWenBC949eFVxd4qtZdmqWweHuSKgyRVGdgq+8SmBxo/wfh6
3Whi3UUrmKZn1gh70EtExklC5XPMKESs4OfP+hmG2ZTWySjgfWoMi13XJVN2
U5HlJd2WEDzTddxE4StMZaulHUmXv8HAyQT5Ysx/KhMjc1eE4hgIiUeNEjbF
hORvHYSxgLPiOJFo2E8t/zTNV62oE2hCt+h3ifHxyIAsNix0ziJenbC9RkER
/YugTNV0vtnesBnNeeR03TQx8LNiP7VbYRcivsN06nAJi2VBcZ2jIanKxqAR
ronFu7tf1t8Tz9F4roNZBGqFfb2Hvt4DphJUrffKbIBdYFJr0w3B9YCe3SRR
0mPGOnfU1ff3vQlnS0YpE/0lCpGHJi11QsTwq1/7+YQe8J6QARCd14CQvGf/
KQyYT1/hn5KHDeglvfliKgBu6KP9rzYtx9W7kZBaYhx3nXH8cb+JOEVJkxVr
FDmGtWHXUADUObvLsUrM+cizk9JKBOhjt6hZukMz3AHU6hAPefmw0yP8JGxH
NPCahXt2bVbbXdC95tMMN1PCnwgaNM7WvFdpOFjNK+TM84+kitE58Lz8TEQo
h8VX4mE0X6OxmYguC+Hcx2Jj3yDRjHqUa2H4VRZu50hG0wg8VMvBzAmfoXSf
qGyNcFaqWkS1CqLsIJjiXQz2h51XfpVkIUIdY57NgmhgObjo/aQDRrTj5HgL
l2ORZ3CNHx+lV0WrkUB1tcJEDIDsP1HQSPi0Kf5Cs0aeARAqpRkQJn9Z1RZV
IpxbNyxpQohV3APqQB3VR8H7NlOnMj6OOiGDKN7dkSJkuxRyGxjEGcIt3kUm
/ISaCPj7fvElrp7f4hh4hENjuGuk/gSWkwDRDF1+c9mMrYtiJELhr06/C3uN
iI3mrt49eAMwYquHRZQcgHw9RjavhMuETAT0pxcGP3kCj69c4KDllqUNtrPt
bZEaGSPYxSUePOC9Meey7uZ9FzYvyCIDRDbdB6GBEsLs0qaOyXiYPv+e93hM
0vx++qf08Lf+ya97mE3VfoJ8cvKPaQubkk5oBrsHDyaT7472AJm4h08mk8dH
e98nIo0AupVJnAYvW1KzkUI08S6uHTnXKI5305EoPPxsM9hArV3o2JBWUxAI
uo6C9nDQR+SCFDaR8+IXjrQqmumasnoj24Y8/5Aliz7MvRche0x/k65z4Nl3
35V0AbOFBiSfnwbSg249X3hLdrC5ohq2eDbi+GOerIG4ZlGkXpRvQraFk+wk
y+oKncglzU4GqLplTS1y41n6AzCSwFBjHMIqzz5w2KX5oALuDBIWBd+R/Zws
UGrv1pOoc6fyjiJnzx1xCZ+hD/6IHcEpsB4W3rBVLgkacrn6H1gmytLIAQqJ
BKlTPfXSIIerHKYO7AoFo2CED+xjwIJrPZQFKyY5mSYmdZGkLKxydftaNwnT
5TVz5JPU9ajcb/y1aptF9OTAkFGCXgcSclLngSaxzOdjPihkMqibou4SDfUH
ZiaFs0o1RxjaaIg3HqWIuSiqjiLPKO7CekPJZs2SOCcKQqx5W7nhorXTTfWv
E9sIdUTkjVd2nf3Vimu+lcpo8jbT/O0EDAmApDhiz3Fv/C1yzQwieGTJ+BuH
Syj5D6ZoEHV734ff+/tVwFbmK7O/mP9zoj7O0ZKZ/9esL+q/GOsZOBkfwsEk
ZTSCl1jaxk3NH4h2piDfSxgPA0EQygmMOJpa8oRy3Ai6MLpY0WP73Gcq4dh9
zntCmJvIHCvDA0Fk0hLUOs4ok9eIBlmfwcEx5OEn33e4hQAiAYZGg4BDBnLW
EOR8fVqJsKWgUQyEZ9dDUfwyGVXtwypjo2ykxkmvc3Iq8QEvqBalScuXiDYv
TMV9zKSFxa+Dw8d0ELiLF7RItC0ST7TIyzlqpvusEXeuvCqDBGUu0HF9mH0n
3J+1/CLmbtNYKE8m3JpgFnagfPhQDg4ZkEliPyWqgdiSpt0u+BN2Kz6Szk81
6cKaaDaVKzKqkv8ZIzCOIGGAxrmMgZIX89J2rkmDfx7OX3gjUoTrBAHtu8vP
Leh6m5lrvobbCthP/UyMWTUGzfGqKPKzhShJ/pqSte0HBHL5G53B4O840+df
oeWDTw8O4MXb41en2JY0/QgfB4dPRunB00OkPIePHo+Rj4PZzEBGEUtt8H2o
NOyBshna0cql5E7NvT3cyivCFuhQX2aSzYOplV060qgtMRkUnDWajEMmkGAu
llkRGyt8Id2CmfJVbhBS27KJMev4fYEIf2MO10bFTW3TaS1OA1/ZEhZHruB6
SjYpxreL4jrv4N6wewHbCfA0SyxfINADx0IrZXRKnfG1zMpssWkK8aKMgVIP
+hBOmNI0nr0718M2Jzp6MZUEpx3jiAabsEUePnbCPz0YHwG04H8fP0CAob+O
JETKkuxB09fvzkf4P+OHj5kLOkHmLaBGJ6F3p5JjjhJWUS+NkQAaMVY2OKBq
HJ8xdHXd5mUguhlnKGLdEsLWy+MTzVaeqw8AEQjTMEELWhxMvrrC3EVtHjwh
eeWTdPdV1cotvaVEAUZCOeWDKQok74QlwG1CggZrFM3JYQQS6dCiSRROZFpe
PEZNR7lMv3wZwSNLletg4CHCwMuz8/iyH41nmM/cbSITcm/leyJtCJ8AttYM
wifVTJL0pY+lScSFEpmcZk7y9GyEsu7s+exSMWWNF6TJiZ4h/eDIZfKgJuKm
SmOTNwwqf3c1X+Dxxcn5eVCPapAsNv6H8Gf6UEYmJyTcKM4K8eDTw4d7rDeh
bePOdZLmr20OZy/WN6UEkazJ1/Pin195zy/lg6KyAHw+n5+l3yB7RMJlM24Z
u2N21ec7dOYnEmKNu46n0Ox8UXpjIWu5RF2yfEbWZxTHYedv1ku0fYrWF3iw
kg+3TAhJZk2Ux26PBH+gQij3owhlGoRMQ+6DTfTyJo4alHAMwmItciL6BNWk
iWO3q1WG1ziccRDvcVOXnAdwo/4gRcs6KmCLFok5n0/SbuCJBf+QUUS0EXAb
gkcb3fKEcCJNzDsod0G0E8+VnrOGSyIFZCQdJYpp0cOmZxSgS057WSOscUKs
CJwdJQPhk2SOiSJLkRW5BjDReHC8/NHExIxQwhFhLEL6yjgumDJ3p3QXTwGJ
S7RV4rQD2/AdbwO0TlLXPkTY+KBaP4WI92wA8EnF99v0MtpEx+jGmMv7IWAS
P2HtayqYxKG0uGoNNtezykqayiTtrsfPDXrA1WOudAYKdJNBPfMS1TItZUfT
ScH9aACrTCkrFGtiZWcOkpT2WX4SQ0Q5l0g6E+APQkVh8a1trN7l40D/IKN2
jjm+Im0dMg2xmOgQMmEeVlNLvoIIYsUIFDLChjkpG93KoTrXTvxSLiFfUMxv
3VWCGxPWGNuitzAOAWlFfCNBrJf0Pn339hVHOhiR74mH+g7x4Lpmjvqrirxd
wpqmwjMcupck9jcr6xCcHx+N1/ViTPpMVdsdTiZHR3tprLf7bjIB3P+9ORF8
g3XsoD/AoRdwoccmoPISVGm1e8E/RWvFn3T1Vt4zqRnozHohlov+JiOTnTQT
lNFg4j9vLGaLKyvJyMJx/K96y0hhFKCRKVtVBv3YdT7GChc5KUpQExjySmE3
BKmUbiULwMPTxhzVxB+OdKUEaHRnk+TM5frqjcI5AW80eWl1KzVqRpjUoWW9
Pmr8OWprfFVp4GjJyQFDvi5EBtmcHSdZG6Sq8qt8U4kGOXYFMKmwrSyRqE/6
qbj1QqiudNJfBF1qoGpzlvskRSOsaaLmD81egTsZ/Ln67giiY8FmV45L5BlM
2BzJ5kevoefLQNYkMd9YvHDRdFETBqkSfcHzEbMEd4CjErfrehpFIQBVbcgZ
21zw9e9FgnJ36srM8KzBDT+en75OX5d2km/MCVUDeHd+PH298586PGQeeDSa
AWWFIiLViMKcEk1jBnzkf0I8A6JB3vEonC3OPIImmusBBv2Cr1troVM1Vm4j
n2V0WRCoIe9vFORNy8FzZAsZT9p8CaNIYC/BkMsiSG4vAN3CB0EOwGogqlP7
uo7u4m9Q0gXUXn4Nt1/8FyB3RqABvctvQfDuF6D4z2TT+R3bZDwpSL54NE78
WLr7R0159/rsZSdBdLBAMO8myDwOWI7D517DbadwhDNLy//Sc0q7MMqe3hPN
tscurJpSB2UCwuw+Kzgsu7pVaOSwvFb1GoBsCvUTCuCGGYUQ0TK3KTojvSXc
pKtZA9yEbs6cScpmwfkuvknfspZDCkz9QDwhrOb8lLclVoJchdeR5z6MdvBY
GPxd1WPsidqO+sFjIPpEfIqgTQy2hZ6uNsIOdjQx4zs1MVUt1/yWUInGdtFG
yHUNmXC8Wka1D7A1qtRhjMNKZBHAm6wwRUU0EEsDmEQBkScqpNHglrNqkWPr
8w0xVeJdy/qMxaYHVLAlnFUS5S4k8QBgsMNFo35tC0zAq6ozEUYYuyDHl5ew
zYsFYmqeZ5E3nd0mFRcZ92MdGBvIQMIdHz56zEirXpMmjYk5R0DBBplOiuMY
NMUGg3lz4xIxWOJVnxzM7P5PH3ft/syyrMgTmKLQdKjIN2B4VEXfluuVw1KC
AjclrSRyCBK9NcUeSdKV1CpShgPACn0OxXtBjPLm3CyZDPEQ9VIxlwlMpvO+
p3tEmLp3fegpRxqSal6MQDYNhLRIKWQpErkWkWbR4JstCj20F0hihki4hXHF
DUQCdNQKxLU2LLGZafdodi+Pxy9G+L8v6X8vxLuH3p3AOoTsvD1GIRc5Vv6A
okIxKTsFdUn0CukASe10eERqZWI8Ex9wfF3UlJF0cc3Culv9hGahFHCxkZ6e
YE8Js7C0A1FPQex3PY2Eyo8vwkQTmygrKVGkfPg4zBIWR+mt7S7B7cGqEKLD
Aw4JuDxYSEJcr0QcYGjwCRul6K7FCw9+P4QrmlXG6WqyMuFNxCuA0p7GBxCv
F+0InwPlK1lT4grYyVAQK/EFsUT/KuWsiGFwWkJ1WdWc+wuqKpVolmFuy6Wm
iHif2Da4XH8VpywuU78HKQm/ERynV4tq+qFJxFTS5BhDQx/xLDiIm7K5VbVL
de6SMZ1QFiFJECdpN/JPK7olxK/9EZhQjPrFagpvYwVWp/JG0tOgRvlWMIIw
Z6bzJCsrLpHJKGCSUvBB5I+VmFMeYkoKZzblllAbkjTVzqja6dCcWyXbF9BV
5fCdY5y1c3wyPj0bHz3ZYXqUxCnu1UTGuf05vPHBp+OTEfzv6Rn+79ETde4U
NEf7QGT8YVgGe92wI9Q2zDj6CmpkzTF3HZx3GFuie972OpcRHqW2iKY1ODDC
nls7aaRa5ufP8B888mOs0KlprLf4bbLySjvSPHBXgsJQi6VGLrYaUOy+U+Ts
vkYPF/anYV+MNgrNeo2idD1NNaTGESlc5rMUHla7B3uhz9nY5/TefbgHNGu2
+3hP1DR5i61XvAm7R3tu+vAC8yxyFKRFfo/6rqeSg6IJSf1oywVmZdNgTfnH
rNRaQ2TehXuLC9JsB+I3x1DBnSpsOM0/Ckp/VtHygU1CWJ4Q0htsqeoq97V+
mT+8l+BBsgRx/EH44J8riurhv7HemP1gJjQBuSQ0fI7T1wfUmlRR4ff4zw36
2bsHmMHk+6TzAD5z2qmHSacDfD2o3TrSsYVDdqPzk2h8eeRn4B7Fczh4nPT6
2TqNw6PEi2A3t5ziMghhlDZT5C4Rt6SRClymqyqIU7KM5ewjNfIuPjP2Wyjb
yEdJGD2n0QH0wYI60p1wn7AdCYWnbE9VBX6ittngy4RIlFzo2ROFv5qoScQZ
nkWykG4pxZGtjxJxGefncAWHAYf5yhKFhQcZqMTHLiUA72o3uK0JBUpw/FYL
jVlu96uci7xojyEZY8hfQCYA1HqzC34wafU6Yc/h0AdhE8mex1l3NdZUj2wy
fOIycfLALjv+YsoTkV0r9ge/vFEFKce6R7Y/I9PORgQzp27GyMypTIzujdW6
Rhf0EMJNnI2fi/hxeGdsDVKtKfEYp/ItlVMcF+UYu+uMF87cssZfURkq57AQ
uyioZifOqS9GUnLa5eApPHBNJISnQ/4Ezn9CPAxxRJYC0auX7AYhx8+l87WV
EWDYh4eKfmNX6rtVDerE07JbSORV/TWNBRsTCw6ET79qSFQXP6ekIyDOVpjj
Ar1IsqXEKgRrognHCHyoCkEt26LNQxaGQcNHow5kGbsixcmTUNgqynUuMWKx
sL/hAhB0DvenTIr+xvRhIFGd56T9AoI08PhOm8gRmURGXL166B+vVi0ok8nD
w9hWcnOruCLg+H/mJ10sLw3drc862arsPns1NpoBAFETWvOGPz7CcEDsNVKz
uVuZcQItP4hcuaDvZX0Tji3zG7PqmNM4cYwkVafH4CH6QygEu9Vgre5OWj5K
DSKdNepYX+a3lAmBRndqeUUdRJ0Ws/sxLV3Y0Jn3oUPf9ODDvwAI+RN1KA+B
90TVKkPF70WVDg9/E+9Q8mtkNLslE8Ku1X1HZ7QYBLiJM5IpG88Yi5OZ4mUc
s/4Oj02kZ8wDw7eYBCkdQ40LznCfnJPCo6gkqXhZWYyLZFWsPdCQZa4V3Qp5
3JERtMAwS6yBnmm9tZAgnD2A0KQCkhpVO+CpsaFAn5GJrpgDacFAIUVBnQKE
aioJZnJfxW5H66+bYfHzZ3sEcnycFJjcFe6FWOCsxngSAV5Ik74XH6fdazvR
wXvddO817l/jrchyfbQ/uV6UKo3zKVTKGQkIaEvdnVBu9ZhFDelR94KCG5hu
i5HK3siF03ClQjACke9KxruffeK2f8vcM7VT3N7nYn3lXqWdi5UDTw7cy65U
SPoBftgRHMMB8HsLQjNxn/a/Xucuo7HkI6L+0LsPs3Cgv8hF9DxxIdfShFOr
ia5tadWrKk2Hn1gxNSrpOmPXsrauFsaybvW18Ry5KERiE0yndqqx6ScywoDD
mY4QzZbdIDSBv5TeCQluCuQQ2cicvn0NEgP/igwRHCoRasniVSUW5aqIBQAM
EwheiPcDMTqEMR5CgDH4tdizmKJv0tnVHI0E6e5pfrWeo4N3u27iGylNdPe0
PhwHY2HVVCocSnmcJDiFn8yoRymqUOSmMvaRNJ8/Y01w0SG6jJ0mpXEhRDTT
J1iTlYNX3BQ4d5YglN6IHEXEabFhG0ZJ77jIV7v4WCxyVJbE1dPIxUga8pI4
RjCB67/i2KoRRUoIN8i5rEMqphKvIA9jHdOqsYJwsiQPSJctQJVnwTnDSsmh
j5zq57tr1DQ+crEwCgT4Af7BqZY3SC2mGAlC9dOIX7D3xNoGPxIKF8HkAVyO
vKxCah2MrpAE0ly9jbWI5J0kQ/i2WMqMw8mZe44LJhdNiLRsZRA5QCqd7AZI
MPGVTZDnLmNcWSp/A5hrEfu49i8bLdRCn3ing5AJquAYpzb7kEuiAIxVWGMM
SaQtlYCoBBtLlmasuN1bGKkLRCrHXOqYFZl2fuNcjxPSukvm0MSqMIXweabZ
LqVDO3AZOTMNZ6TkgkwYZExJjki45aTgH13KY54l56WT3HaMOhkiKMrfINEC
hTHBNWctw2NCc0QTVTLS1Pw0DF0yPk7LCME5rhB0Od09CcCRkqKTpl1pRuPF
OU3fnM0wAV+bm9QrOSbIyHdb9otSm7ZBu3UaCqn9ZIOIlJjVjZG6gQVYoYHB
8biT2sJHZpFnDlXFhTmQNqMJPQfYtpgbRUTdFolGBXAXbO4nikNW4+tryhR8
UVDN3RuO221abm69J9a7Uhmqy/ptI6OhS+e6RpmXgtwYaXCKB+aPePREY4vY
f6mqOloGqTybCRxLlKoWK7L6ohyKuAbgKSpCj/gw9ptMfbcEvZJuxNcCxCh0
DYLhFYalSVCXDJLKIKiyWK44UDK0paDJUHMRB1+zcqB2tRg5rNnlybBgWgGO
JEBNrr68QVfhM3O8en2Z2JU0VF9wBhMKSLtO4/qpPnC6liBvS7GiejPGDv0+
oj2YDNZ/NMcxmkoSqA4vRJjy1WJda8Rh79ITw001lZJQ0BSXJ+p+JuHZfF7n
c3MOcxAjN8bX5KX8NpQaBzmCtNIa8Oa3TMlvJPwpmvkmWMxVGOBCvlonnjsC
JoMnLjWXmCBKNXkL8gigIQGWpFIIZyOaQpfsZrFJGEHbroS6HzSPsc6Df4lH
YkTyN5pZTex+lII+Y47VAAtRIqkQ+EAC1lK04UqJNoojhu6rWtXOmDyQRErx
s9GURGMWMcxGkANX14xIGDCMIjRHdo8wsCRWlEwBKmiYK8Sp4CChT9w6iCMB
Tzr+iDxDe1gM+chEwCWUxTBGpL3JrbaEBBt2grsMs8D253UgoPIRYJPWiudu
tk2isyzB1yiR/f0rJE6QvW0xCrepwknrPUfRIJ/tA2jUA5ucvlGma7G5YzrI
5UYn35nZyvVicws3lDhM8n2q5QJSuTeGYXcak/Q1gHrSE8wMRnTnY1mv1wuu
I6Ez9IV5IiL7n95a3E/ezd5eYoFCDtj7+q5un05Hv9PZXg9X99DaUO9jxgtB
QIyeEr+8lyT9h8/TWTNWmN8f1Pfabt39ekx7R2Lq11r6tX6lKep1NmPYb/8R
LCRMeugf5+bYkSY7o/RB+n0A2uF/8o22go8O3Ed+dds/cq3g+0P/vV/z9u9d
K+jgoe9gcCdSSWQy8C/uePBrGOIojdT2Fte3+6Lq+sLqO3WH1d96RTmOmpnU
uFqkgDlxit0M/sorkPssW/Mlh5czoGHzXx6epD/llfV9/OY8/fwZnk7gKcxW
Enyl6FjRAmEfkSFG/swW/JAdTjDhCbpCE7eGSeJJrVxhdz9dPDnSnuwjDqyl
rCBUKUlidKx5mi8WwMFUxUyCb26rMIgmYK+JQBUkxZXif2K98nc3eaZlsAqU
hYCXUuWH+oqg3q7E8gYaQe50xLKZWS01M113r7JX6e71oiJOcryqipLcysbZ
WKolidVkleczZUmoLAIq4xeh4H3nRBHHU1rbsD2I8pscNlVDA+3AjBslZDvl
RMacx4FYWMrUgIniocF1pcl/E0102RfiWfgNXS6Lct2yJh9YtrrRGJskEMxF
pnkkp63aRX96c5E2WHgVkDOwB2eFmHpzmgxs6hJZuQQtwaGOh2hr1OkHpNgQ
jCVL40VNUmKxrask9IGKGEuJn5H4T4Usx+HEi6UxzluHNxWsHIpmighlzbCb
hMUHce3sZDbD5uyOC3e5wowhUh4DX6AdBNegCj+6NRy8IN/sAFP4Ia93mOLh
3CRbP1ryaGxUJ8BFYHEDl1JoST5+YYUUsykIgE3hsYcCEO+cFRC3DKiwQRhh
oM3GqizcEvBAumJtvD3O4euE1wY0mmtPRO0f/bYABUVQlHCKU/Xwc0VX3Re/
D5io/0bRzNZvxtubKILovWA80Hsc7gO8+g/8NYYDtAHnNL81OjwBjbBldomd
vgDqY/+Q1Ib1dz/QF+4LpK22K90P9IUfAWmp7UTvA3nhPzhyI7g9jEcYuy8f
wQe6o70R5IUfIH0MH/BOp/0P6EXUPE2/gw/CGXQ+sBfuoye4hnmexv90DfO8
03+aPjV2gFJ0rQgd776j/8bWBH634/0zND+v1qwibGCR45I7XD1PEiYS3nkY
7u0KEVpPvjGbBKVSJBzOIs/94kNppi5CFADUm06wK1ITp7sosaUn+He8WGsy
YKTmTwVX8fL4kIZXgI7aRK1kBemFJJS0+hKs+HHZelZoBmyongZmCcEDrVRH
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
NPAFk6OU6NG2118jSlsmMkhAgr0KP0LVqdMchW7St1yCaBALSnkijwvhURSC
rDovVV8E7hWZLrZQEVJBl3PAKFLi0ONF9EP9hBFGKLZpQWNxCIpUvS7rksQ6
ahFq9gmuUudvzHPne+sGRyvTejql3FbXWbFYY5Eb/IM+X4MkMpmgFNWq74Xo
HOJJayGeNLjFUiyss0fgt934q1HAIMjhmtNwp8aM5LThADoZdeZtb96FV7cA
0aVWdtRveBQOlYgeS20hUU3CVry++LbZMjvLkVisClw6uStXV1xjlvR1luUC
vb7WLU8DFc3RPHhyrfP8VG1ALwRMKaWWjRpwkCM9PcNDB5HHyWx/4QPqwxBB
7xb4weSBU4UT0jIwpAwMFKS9EOLMu40ArPkcyMmo6MA99U9psGUElbk14hon
5ZIzADWCTecImv4WC2h48jnr24WAMoQCHKIAi1SFpPodVhN2Hcss9Wy4bsbk
WJ9y9UKZEZ9Pb5C9QnEo4sRAJKKj6WKG3uK0EIkvMRI5/0VgpKmiRSojaCQ1
lPEAmNNbPbTQ6kInirUUSqlhqy07e5Oll2dn3u/OD+M6jbkbnlyNKsfXF5Yy
y77vrj+YiPgLVARImp3SVN9RLW4JCXKRq6OgUNDz06QqFlnXcyfUEkVNUYd0
JR20K2qZAe7XsaMjjjBBz9Jivq5FHR/MBLo1I8TLJWfXcfhJNPFJqCvSKfcp
uW8CDSKUTEbCRUQeFFgVxWIJk8Vm4OPwkaMow7B5HNfWc5hJOimargqR9AJx
XqMuVuOS2XC8WEWCY30pB4Dg/TDHiSadneeS6YlgZqDLKHs+1WILdRQ8PuXg
eldXQMr8fnWVIbEkVWtOrdCV2aiphE3oxooqUv/8UT97N4dTYIFegMqRs84z
0V4OIWtdBd4BubihkqQUidSiLk1XPcz1teWL7h0UqO8eDMFqI3nrmmdJcpCO
xx54hMZcrxfPkmeYLFpTDdjzr4PaYadPJCXYGwtI9pgsv5INaCYR6JzZiRth
4xolam8n6g32sDMYheGuyy3jyVupGmSxZHldV5TiYCYFptUBSC86chHEcaF8
CqMe4ajRRcBA4VZH9Xo510hnkH2EHbFUJGGK96qAupt2pZaxnHYQXkwQQLPx
UEsG4l/TWKbpvFZhxbdgMH3mMsoQE76Ovn9G44YbJM/TX1HY6D/WcXT0Ysb9
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
NWMg7yEPhB/N4wcZbVmU2anNaKbaMAuO9V9M3UgpqmqKb12JvxiXPSsPxcVk
j1cGXdxgdihQkda03aPSuDDR75xKWNmehsblgNWkqjx3IbPN8nBbZgI5TV2d
y8TYHIxyYF4fPk773zyv97/8dv7LheiwBr/W8fUZhFdEqis79eRFBoZGTL+3
7/QzQgZHvfbHD8Ho4/vw5uTy8vb0h5fH3R9MfwwAV615OxhplvuJyo1/cTSB
WVj7jMMpzSq7Vwgut85z1RKP3Yvm83IgwF62oSC0fC6Yc+D1V/r353ykNJ1d
vaTich3k0z/fKMiol0vzuqQaDHhEsEiyevu4DBFW8ehxFY+tGz0/rdOiv/7Q
fVXcmWflnelefPnlA6nBibSVNxN6opCWYJBSrYmxp7Frw+XSP0nTvZyj2iEP
+K4BE9cFN/J8T6Ccjzko0j+mjl0CwJBpdwf3wqPW+eXxq8vheXTx7mmUjj4m
bz+0Ly+ab5ZPzy4/Hg5PhodXZ2+/efN+PHz39OtT+ubDh388/fYn73j0dLa6
ffrt8cnh4cfDw+u3Pw6/nRzB38cXVy9+ef7h+BB+/yZ99/Lt67fvRs+Di4vO
pP7d+/M33fWn10+no9Z3H97+5J1F7e8/zL+vf9P5dvl0+c3r0eh9/9mHdxfr
H749i769vXl1+mOrfvXsm5et7wez559gqIvs6jCqv7hefv36l1c39R9uFj95
9W5vfP1s/mEzWce/DM+O2kHWfT9c916Oz79r/ePm2fzT6eYfT2c3cTuIsy91
5X42K/c8WWw+afDg1oXX78sLvxlLnfVnhRV/9u5NbsHj22fN+Pth8ip59s13
wbfJ89Gzy/HTCf59+vaX0+Bl8mzQgIeWk9YLeuj525Pm9Ol3v0x/8p5+d3ua
3CTRu5Pm6Yf008sPbz+9/GXSfHX0QxuamcdfQ7NXnWD89CY7vToJfhyddk+T
0+x08TL4IcHfoemfvIsPN+3FyYvL58tnbzdn31+/OPvlm+Dpiw+Xt8/+EV6/
+/4iaAfd77/Jfrn5ds89ubkcB/8EIWj4wOZxYcBmTyZUBkA+r7iSPB4dnQ+1
KiA8qtKb0xHL8eIMeFN8UG//qKKytMzyf97AsCMnzzKDM8tpaVi0E4WZXgCS
FBHRQkFL5zCqgBzwXjfY94P+vuzn5aNh0AzC7qM7cDL8x05N4Ms4wqrg6sv/
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
W4hmAgA=

-->

</rfc>
