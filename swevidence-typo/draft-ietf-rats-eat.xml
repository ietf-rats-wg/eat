<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="18"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AiFnRFpVJGUtXnsya5SSMkvZtuWx5Hb3
q6nIgEiIQpkE2AAomeXJ/u3v7PdcAJRd3TMRL+KNo6JSBHD3c8++jMfjpGmz
cvZbtqjK/FXa1us8KVY1/dW0B0+evHxykEyz9lXatLMkmVXTMlvCh7M6u2nH
Rd7ejOusbcZ51o4XWZs3bZLcz1+l74+vLtOPVf2pKOfpL3W1XiWP0mlVNnnZ
rJtX6febvPkeHjXr62XRNEVVtpsV9Ht+dvVzsipeJWnaVlP9jn7M8lV7C0+O
8HdT1W2d3zThi2azjB9Mq+Uqm7bui/V1eFZW+Ki+meazpt0scv2sLVr8cXWb
p2cl/Nikxy0uK2thjulV9Skv08dnx1e7SXZ9Xed3r1L4kWR1nsHkyzavy7xN
Pt3DfhXzEhefuebT66qGRc9go16lB0/2D8f7T5Js3d5W9atknBYlTP/1JH29
LmfXi2yWwwx5u19n6zovp3n0qqphoy/z6brGacKMq3qTvn59Aq/yZVYsXqWL
+eK/N/JBS+8nsAM60i+T9A2c/SZb2ji/FHUxu81q94JG+R/rbAEtl+lVPr0t
q0U1L/IG1jud4L7CSeSwp0+fP3+avqnq/LZaN3l6Whd3OM0pDA7zzMr0tMjn
Fe56PofdeJWeZIvipqrLIqPjWpdtDV9+uDyGn6tbAsidP+6nL56+SJ893U+f
AzjuhMUteYr//d/bYvLvMj+/vF8n6cX3p1VZzW/XYSd/zet8uYnffPsSD56/
TH/O6hLOsVrPb9P3VTazJboXtJ4ZbuiH/aP0+evLaIFl0eaz9J8BOmbVMqz1
j0dH6f7B04P08Nnh/ouXYaV/q2Y02f5Sk7KqlwBbdznemPc/nxzs77+UP5/v
P7U/n+4/DX8+kz9fvDyyD2DY8MHz8Kd98OLJE222f2A97D8/0j8PX2oPL57t
27fPj7Szw5cvQjMb7SUgmFcJ/P3xl8sX1Bfc9aye42bv3Lbtqnm1t5dndXs7
LsqbalLOs8myWOytbld7s+q+XMABTODHn26KRf7DtKrq2fh+3rw42uGu+DZ/
vHj/+jT95ezi9Ozq/CS9/LfLq7M36f7LF0ej9O0vx5PLq7enkydPDp/9tj95
MnnyG02GOtDLiX+PGVDe0l3OFukvedWs4Ee2GOPNXyyKOd3RY/zPJn0MPe9S
Q7vvR+Mnz8dPXuB6z4/fHk9OPl5NThZZsWzilePCYd339/eTIiuzCYy7lzWI
UZZ52TZ70/vWL+/kp4v36cf8WtETdLubcr/bFoHDu7ndZIsmt2n92plWNK/m
oYn9TSamM/v18uKtn9mvnZlFU+vNrTu5q1u4hb+8ezc5f3N23t8xnNkK6EK2
mBzOVyua3CxvPrXValnN1ou82btc5dPippjSEXZ+nuYt3LZmkjWrz39q/Jvz
2Q/PD176HT+sZ3D8ZV4zXn8HAAo/mttilb6rq7/l0/afGI9AD4s0GoapYXoC
eDJ9m7f3QCNTwGTweb0sAKyaf0rfrpfXeQ3oYZRms1mdwwYjIYGPihlss3W1
7XAPYY9iwHuJ2/fz+enF5Pj9xdkrvxR8mh5DJ9gz9FvV6fFiUd0DhnoPhKsu
poisLla0VpjGWXlX1BWfd/q6aNrBc7gpZlUGNyKDC0EHgRva0OOxUqRxnf/7
ugB0TKBDrzI/j3HG84DvdB7jSucxzt08xguYx/huf3IwvpmND57AivefHExu
2+Vi2x4hgeelyyzdhr2t7nI8gRR7wp07O3473j8chji8C/NmnxeJvFRWz5q9
66xGAtAA7irH69XU7zizCYpFjmtY7iKXQ4fpwWB7H96dpNrFthX8crk/cMgn
1eXH81MYZHw6IfasyabL8bRq7osZvoeDLM9PT6qyBCBFIBxeFexzWcwmwMzI
yfED6Igawn/rfLz/25Owx7I47j+VARjMAakCSYYmcDsZiPIa/sjSJm/T/aGN
f0HYcmDlN+vFggn52wnwFJ+K5brOeu+A9P9UZ7NFvum9ejNJfwVq2/Re/DRJ
Z3n6Jp/lAFb91ycTZG3aYgkLwn08fX1xPLx180V1nS1WwA0Db7MkuLhf4ca1
AKp76xWSrGYP1vd0b/9g75d3J7+dFvMCsNbrHFjF+uLmeLWqq7ts8dsdUqPV
7Mbvr3yb8sdpdZPq58MAvP80wem+O3u7BWHmZUDl8GPvXV5CjwtBMZNVNs/9
+O+Aq4MxkDnO61VdNAa5j2GMXcAZ/74mKUCJCfK84zabNxHWwVdMt67gFbSa
ww2uN1tv2DAZ1K7DX5PPBJDwD9mFmDc62j9QtuPoKPzpuKD9A2Ncjo6eGYty
+JJYFJRpJsf19BbYt2kLDLm7ZSQEZe4dNvipAL5llm1Agsimn6L16ysUD+Dd
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
FLdI6CqiKEzFieD3D44yM7GKWsCpzsfBCSjGFJO0Z6qj0N2uCqGI60/3N4wC
1u5zxNn9UdKYYkTVvliIsPTvs7sMJXbhgweYJXMIKit/p7g8R4dd4sgPfUKR
tf0h0bs1HhWfrktmQUTrYVlCMCcYghN7SOWa2SSqvRDWHeqRu4eFzTPIqlIo
ZiTeOPSWQaVhzuSCNbpRLWaqToaWXLZu0IHE+UyogoIuaZCnYsnU1kpE3zJT
MNElThTOt73dOLtIfCrSD0od5HbIAcYiIQop5zJ7jlddt+jycU0nZVpjn2Aq
XDDmenqwGtQMDOmavV4Vb0Bu0X+7Q/tQfUwcNC6kW29BsF82gy1gTwEqpX1x
01Kc5TA17WB/ll4aV2uYMPqwiBAXKxgawNUuYFsSQirrBwHmRCPTmYJr088c
HsoxuxC0YBl3sKrQZK69wdolmIx5GGK7pdgRcX6tFhb5ap4/sYTxZArMIFfm
IZWf88elt6rDeZay4qnLsqu9WhgIkfUdA4HXSX2lm+AcbWV0CFMIty4ui8oZ
z7O1hGzw6qI0DMQBasCqF3kmkqK+LrTohAUXRcPQ3UFFgfgJkYPUsppp1od7
OJYFO1sgP+FM/uIxonxcCdCnHv7xEJJPues1QD1A79ki6odWEsJUwpp4GZa2
QjybmWqyi7D3JHE5WmMv6E5Mbuyl/nvkaj4VZ1HamG1RUsPRSmRGrVpmUqRO
FvPX6jB/KnyvHzD4dkj4LoeUVSJldoqlawRD4OAkzwJHrwZ9HiGEGzZ3cKbm
anlNqQ3IfSuudEjJ7BSxSZ01MZuSwky+UGhSpt6VtqcaTshpSfiMLM7fqS5S
NQ94JscLTIA5y+PUD/iG5Bczho94KgIDmg3DJuuyRcXtwj23kYCsY5wOYpYV
03Y+udcic+upocNlPz10JJ6TawGZOEE4GRG1hT+R3BrDWUk1aNa62Q5pgOps
VpPmjpmyD6x5RfwSckEjbMU3QRpbiI5P3ihh9gyFwSUIOxtJx8Sm45lgAIBT
6gTP/POboecjd7XDdVeFCp1PTE/ZfsbuM3pnsVagy3hlCEmZpjBl2RtnH+wa
o3GT1Z+4Y03rFOjRnWOiZe6jmBQkyp7D9081uVFeVPOCX6WR3d2JJm+yFc3p
mDIWnEnLbzs70VjlY85zIpkd9pbZqsHo9AdeK4ywYVDzYx5zQllol0lhFkvc
Spa3BzrkcjZwX9BPv82jtjSQtmX16kNz0xKQyMXWBvRTym7FFB9VufRWrojq
Ym4KqpbOhj/KWBPqptUEHuQChAKEUskodQtiCspg35ueC0AhiCMHV1bBu1C5
oIcfWYjjCTPSdTDQxhQ6AoZLjij+r0EBm/YHIUBe/e85fekMGjaMMZcCypx8
w2EAw4NbJyQ4+jov4YMputNbeKUISF3GJtq3d6RLQQb70nvefdv+5QpLxFbi
+a+su8iRb/KNx+G7E7hFd4GtvXq9IULLO8vbI6opUkDhH1GxDaUSnG2B02O8
OT4Rhyfx1ctn5l40ScjZKNtYEmfq8+2H1699RqQqOPj5REQI6XZpysq1GLH/
GMIITUD+UqeyUqeSuopcx5Q/xbiM4NaBuhSjiEgiMYkwh0Z7aMXvOPBl4EiI
0gpn12plBrYcmcDsEkkjnrBDszX2Qv2ubvMAKq2lHAmbwjVB8taK7hWNqsdD
KCO39w4JXL8D+awO5x77BfIe17TBEmIc3DEti1Mfv6SLbEPsl+UoUEds6ovs
uXz56CVdtsbyzVckYOZZIzo2TrAyfCN90oawQI4Y9LuK8hJXT+skfesE1Ihc
EEyjvPgo7pDU0Pe3hWTKcjtSyP67et99p3S1ybp2psmh7B8BgvrX9FiTwjTJ
gxprA0e+y9ZK2bvYK8G2imdotmaSe5ocQ9qdMWbpnGUsWrTM51VbSK28WI0g
OCvALOlAbEYCrrHFilg787ZxLnGqxh0Nrq7jqFWEVHqWaKWp+vYx3Wf0R7vk
a0rOjjB+281BKymTxBEUucyM1U7ml0lbbIncGJpNdx4EK7xq8PdtQcHYLVlw
dSJdp5Ke1vNSEOeXL+xr4l0VsrRcL6+5UJ+a48hV2qUkzoZ9Or5qARkyyQ3q
qbi7CtNadEp/RP7NtcSKa2GRTvtt05lXIcEgOSlyvLZun1f/9HauWBYoqbYV
+XsqyjA+Omu+tvujSILHY7ynFGJVZLvtGSBFZHam2z9zZizcONnF7RMnxChi
4EhCRLNmUAFJJyHa8581o0aS/EqsAQXPchJDcyeXEHSWNYj/YbM52nBL5qJU
c1xw6oay1cSJFF9NvrKcn0M8lKpFlEe9QywtDQxuVEj6gVdqelvklllYVVzw
v5/DV+VXnXV8XkFjJiggnMlypeMQOCrUvNcMc+z51VfqEFLV3InkokJV0qah
ziLMLQIeKcyrI7yT6/4PjcGxOd8+iEuDLYNcdcDVth/hhjKhWlyDBYzETiiW
fK+KlBGybWyR4pjxU3NoSHrjYpJKuMr3pfUBIIxxv6wx7BTk6grHUuM1yMSi
Jtmihqnqbgu6YX/+iJvXCP+niviAojQE/O14/zBi96+yeTPI+QXjcFe54VQE
xEtCF+zGa3kbWVALfLA4fMcYZss41LaFWTlXVek85Ct4//NJ+uLw5UFgMUIz
F8TP8+NM2qLf12IW67JUVaxmXiRc6dL6e0NyCEeLzWXios5WRJev401WFjeW
nNWy15o2c+ie9DYELdTqru0ZdmWBl9EgVq03Lu7cTHoAS9zCvBLPsybTsVi0
puy/K9N4M0300+Cj1Mng5ytDABPxJnWFDk4seRCpqL48Umn2dwuFhPO4gU3P
iAFeqHxsYIvtuiF5ogiTkDxykqagMVOFaYCchEcoc0fP8PpHilNS3goXSdYF
+OL7Vv1PEax2SQGtrnvSmEILJBIJZi2fk9M3NDA+koagSSlP0S1Z3/HOn7hU
ZhQsQPuIHeDRu4xPINTiU62+6lJcoY2lE0LTr9EqUg7mrbGKWiHmkbN32bCk
5XBj94Ik1YqChr55Hq+rqmNPGkvEaLdUJwqsZBwlQeYrGIDSb6CWOoQpSZKc
UTwtTDwNhLqxGFj159Q0ybmPdNITkXpzaLsMUp3ztlMxDlfoJXnZ66CKlmgb
LVajhZg0FkL0tD4Gz61XQUaivmWM/hq/8TZECe57N4IqmPM5UcJ7mU4/oblX
Rn8O6UPkktpmWiXSy4/np3ABpDJ6HSVeV71BUfo4loGAppFYmjOMYpFKegaM
dIgkD8vhOgcS9u8C6tDx73rJ4o2FJ4qjXfLIIaxTBDCrS1k04mGwDol+OH7E
JWDj4Z7tY9zn8WqVA/H4nJ7CJqiL2jvgRWBAdfzgWNgwEGDEKGVPQrnPxkXp
qtRNNV9mzlmsJOE1fsjpsUMGr05OqjgNlksqFFAOxsfQIl4+efmE94gQiUIu
rRqopohfAkadOjXksUuoU+AGxhCqFZct0nBL2gVNzr9TlhP+32SyA5P8UJLK
gJOtiklVioGMMItRY/loyaHl/TlNsHcoL49eSnQyJ7BlI32YjWB8y2GGPUXh
LHYSFIiyj5mDdpPE56XlBACdUIwRBVz8CF/Gz7WU0KTO57C2dOcvx+P/Jxv/
/cn45W8/jP/6xx3JfMC5jKRvCgCBn6P0P/DhjxISwh90uoOO/uck6gczJP3g
Eu3+Bz74MdQy4jM775h+ASZxELEI/861RRzjp2ePpXQH4f9skqLrivDsxPgl
wYjHtNDSVzs8QONEJdz/wMErWJNcMEcvbA6+oaxu7hurKdOkbzFtSTE9RR1X
5NOlYtgBQqBDEhPoj+FjXNW0gcMds4Xhokbw++aOO90RyPE3hy9fPONv8Gjh
GzdUptcnmNrJFcucypETqbBQ0ngGlACtz3A5oiAausUIgzv7k4PJwdMnk/2d
XcEHdB6ac2MHgeXHHUMDRcmZk8QkbWmchFCx4wOyVppCipC4Onr62kJZPV+r
k73xaTeC7s0PUUJBC8d6kPsfg+trYq6SBG19zGiN0lCLQ+gMxSsRz0RedpSl
diSqfISGjIrdYJiq5Cti7pozXnH+wIZjl4Kt1K1LkUfvC1uw7E3pCCuh74JV
VpLm1uv/fH73uMayxmFeBYdHGV/m5A9RD4sdDOYFujFbRnlZmqTqtf1myJKH
jWh7iZHDEPCyEE8DMpjg0ZgYrseD/kDCsuIWdZEJl/nR7AahTICojmILdfCo
qiRUxSpLSZoeykeWMekwRb0k3qyFcWfjgBUFddUnBp1ceq46vHElzG+RlZ/y
NvZSgnmzCw6vt5ehghhPmqbmFGNDJ2+AUwjQNwgYwJBX3VQXJhpYxeGQKYLl
/4ZsiyJCdQwItDOzCjcj9lWiECByG6we8P0Rk+V0kWc1sHoqkw6slwC0q9Cc
DKegDJ4bnT7I1YPnPOCAMKEcfRYEoinchEuxtHLiuqo5EgRPdpKhmVddHpLZ
KvDshZpIN0NtM4CuVTalXC6Y6A2t553AEbFZxcuLgYfU6OZMe6Nipakt2eyb
h8OZWdo+O8QPyo86Dw+bJgYgLJecBIV3R+WVkeUAUM1Xz7cMIYvYJJ90ZKA+
u9Sd56sK4IE58NdtZzKsvm40bziOc+L2X2oSd+zMf3Am6G53TuOu8zia7BuZ
ZYZP0VdY45WoedURwpuTMz4ETgEvLO6AqRqbi8nS7L7o90JoiLwCgQjjSrlq
/LbRgtk+jbw1xJuZEgMPr/MQqXZnpdun9vVxipv/0rSVBj003cP/wnSNxnWn
eVnVrfgD0TquN+rq/A1nzp+QmRiEWuqIOj0Vl2jMHDANJD1a2aUBXPcY+oND
lz9lDXQF/EUxQ6w0uElPJ4d96FXWkK+cX4rtmi4FKWI6W4v/HTmNYE6nPWaM
2HOXZpB+uPp5/CK4mTCxjhRzosoXF19+QmQrKCzyoFKhq9ypY5/NxFWedZNF
2VFziDJCdRFfvmDPv8EF+u3k4xVCR1/vox7HovYaWSLaVdXm6qQveR0sV0kT
vI2D3irmSTVVB/NpxMHSLAdZWOadgSv+MWaUI3Gzuxa3d2vK50NSuviais4o
qtWoWuhO+CTODXm4oYkZAaO56bSYA4oT3uNoqICKKyaLChveuWQ6YknnIkj0
nTr+DhSidY6Avrp3d5huGeouMWn+/yF0b03aSNkeHlNtgZCxkX+SlLKX/iU9
+IN/8lfYEfdTBqN5NcBKp4/3n0wmz492R5L6gR++mEyeHe3CRLanj1znxSzM
gX7hCDCc/c2jdXdZxz2YTI6OdtN44OeTyeHh7gM78LjB7pswsvyWsd0vGJ0z
b4SsGzaz5PcHRqBGVb706+OfK6xaKn8XeZ7bD+C/ZtUygQmED39AVkwf0Ne0
HeH3GCFl5LobY96NH5POA8vKQTt0mHQ66Of3kC+PdGyenB+dn0TjyyM/A/co
nsP+s6TXz9ZpHBw9AEWy2Vae745Nk2Hfe2/o9GCfB19YnhZ5+Cqlo+eUKn+S
NBnw8DttxE8we8rD0GCjgRieLwamx897kwuPH7wLR3QVtmR+wX8c06Y3B+7I
wYN3JG3uxxh+ESZKN2D3oWt1399890yv1/237PdXtjt9YL8ZwVkmZvYidzOK
n3N62jRJhp7/kK5LEAsxnQqSo+Ekspio9quf6HECavM9Rold/RvLPIuJZzuf
W4P+52l68KOBjhteGugbnz/28EFMSZaqMdYtCTsIvxYPwQGQ4Ov1fIzC7Nph
2eipZgXuP/whBeSbl2iO2radaID4htdjCpikyX/tS5B1l1nJltWvfMopCgFr
+UawkDDpoX9yAPIJ7P8ToNG2juF/0ka/gkb7rpFf3fZG7itJUDy45u3t3VeS
uvjhneh1MPjVzgOIKvp39BAr81gdVgKQ2RPBNtFvI+dYxYIcX5D1ITGc54Ox
QoMv/hR8ZfpvMPtjNt1sbzPe/gnGPVKm6O6LZoXKmN7jUPYFXv2Hcq824Jzm
t0auAdgTW2b3dPWFxwMIW2H93Qb6wrVAYLJd6TbQFxGmwQa6E70G8qKbAXtg
D+MRxq4l5sLWHe2NIC/8AOkzaMA7nfYb0Ivo8zR9Dg3CGXQa2AvX6AWuYZ6n
8T9dwzzv9J+mLx+E+PWKzjwwzSywbGeOCHU3sBCHv4N08xAar2YVJRX45sH+
bzr4/4+kg/8KJzpbVJmjy38B6QYfibCHzGf4qdwZPvlN11e/8kVxwnuQ7FvU
Uf5Gfb9iE6CgJvrA1Rfw3zzIPP8j9Xi+snDzYQudhUfKeMdPcAP+aF+N2WXq
r+EreWL7RGV8ypbaAttKV2aURq+4BRek/e476+i6mm1EnNpKG7ufk1z1I2/f
wBtYuHD99HOt2SunVXNfzHptSAbbG8j1+C2dX344v/rtrATWufp/2/vS5rat
LNHv+BUoZt5YmiFpAtzdk1RRmyPHWyw7Trpf2gWSoASbIhiClKw4fr/9nfXe
i4US1Ul6eqas6o4lAHc/9+wL7OPOXWebZN2YUr7B5CpuSHa7xjRG2368IHQf
DO862Oxa/RBdycM806MtPOKzdR6a0y09+8fP1+nKnvAtB1z8no9Y5J3Kl3ee
ctUUKg/jFszO98cWNWyIJ7Xdb7MmxCdVX56v0s3S/xmR//bXJkuq8wUn0Xjk
yOH4drXJtX9E41p7pzwHfPaz55Uf6zg6ejLl/gGjOOSx7nzzyLe/0/HX6VCc
B9App3BMUH2XbSipOrC/JWrjfIWO57e9XwD1Xm0WpU/c/SEPekC0XvXovmVo
+KEhF0jHinMxP9IGH7r0Jcy30fnl2shD0wwpXMWEc234mR2JGP9bdXhU2tfC
3ydU0pEK9hunaPBngDb719euc+DDvE78ob+1nDhO5E+sNf4lk/H/rEzGqg1n
0HN+VMiP1u/oC4TmAAV9R9Fd8T2+NYAfdkkmcTXUpQb8VpqEXZRJXF1zuQG9
1SHCLsoklepIKytd02NuEnaHboOCjk8byGNsEvZw0WXdUW4N8USUEjhCjzQT
ZbWR02A6PsdX2qBN4mpO/C8sWt9Si7DXYW7c4SWrzk1rSdbDXpfOwcUy5XOg
tzolPLiiGrGwr/CWnlMTuKEIG65EV4YNeitHxw2KEl2+Ab7NVG7lBhVSmdMA
3sLz3AiugFCeEr1VYOIGeV1xaZuu8WVuhJKquNDAASZuUGTd8w3MW9ugxBIW
RtC30EJG2M7cyCDIdMRZzdcWBQG5eOfkrXMQnuMKS27NZxqawcZIY5ZEZEsf
MGn6GvhC+4jxthIt543B6fwOieeWVl+jgbtAN277ukxlcp0XBpbuS8Tq1hbV
5C1v3f2ad819xv5+jfxnRAaoIgY9aJySGdndUWan7IPyJ9Lxtg5yxGHLzrEn
8y1dEP3zCv7RtwKF7dAAhTMG56PK9GzKb3Cjn8DR5E+k+rvdDoTa5g+k9EgZ
BuKRH/k1mEENILeGe0G/wFCsEGazv+EpnKlWamzKJ+TsT1WDKm4GuYVbO6pg
GbSWAQWgUUGvYi5FCuqUSI68HwXmkuOO95wom331cHllKoN54qOSK/FGySg1
V7yTepTTveNgTsCWVBJ3HpVHwVpiuIImfNXktyaUhZ4/cZ7XpRqtJDh+nlLU
q1vR7Maz+ZgxvmruZtfJ+2YUg9ht3n7yonFLpI0oedN1VVeUu+OXDdserD/n
LZ2ZcDf/EHiaaIJpK9AVqyr9l6StPd8kU3I7xyOg1eH7/IzqTg43Kk4gCUDG
tnyvJpKkffW8Z5jaUD0rzRD4u5Y6hlOY5HIuaEF69rZcyPx0Mk5tKg3HJLRS
irgoFSH0X6wS9ef1TM2s8Qr9oc5TDAii0PrRaxPOLJoajoJy+0picSTXknbX
5D98Duwjxdk4oU11VKxtZhEFdFHyx3U8uVik8/T8xpapIWcfChziyNH1BRW2
SM4xCU1sK3zZebKz1dhU1Wto4clcwoZKL2ZcndZU5dgiPHI4UkBBbImhFdgq
cHSgbg6LTI6Nc4dGNtePLVwsayr4j8kKKIy7cF6apMyNapyoR1x8mcXzK7zJ
6KZH/rROeQrK5BS7MbJbihw685inM/RtxtlQrABMHOF67Ub9E2zMNTKc09Gs
YtQ35B3xbDXQyD3dRbxZC3A0vTPklNB2YlJeYjy5O6qmj5ZEf+aoTMRZeX9I
uiawoUwN23ZfEkiw3x0tGXhAEGwlAw7fMp2K3KcXS3X6PpP8rrBLr+3invPi
DAIvV+u0WU3XGi9GPpZOqC5GJZhxtKwARZc5Xuu5yM1LmGGCiSIZXC+S8wtJ
oVfsKOONcUppx5Q1Iz+AIp0to3CmthjuBPlibhnDfC5DcGQMHomJyRV/w2Zx
vySK4pY9y+2Xf/bWDWCgzCQrzBR7eckxJ4vzDXASv3sYuABL6tym7LTZkIpJ
hW/cUd6Lty0HJZK2ODN1Mb9967Poa8iFDZDZLDQhkikjHVU3MSkw6YMxOnjG
HxMqM7Ywc0f3WHv2Lg6W8B5yKuAwIRDJpaC0W9e3SLsp+ohWzb071xQzY4/j
eFEi/jkUQPfqTCtYPyWoNdfomRaRV5RLGQKvYiZItpCPyQXN6I+Ck1gLYXMF
5rIXcIpK2h+MIqEvj+dOZSqA8RVlYJ5K9KCWkhey7eAPyS2gwrYpOodJiNPr
hqnObdfh5suhy1r6ppzPGe4in+RlOqYgGC1db2JRZFc4jTZmiS8BvAPsuEaH
O5EqRqaokpOP40bTMSCK51yQhkjNpZQABwqnC+NjxdkzKVzX3haNlLKzWWBq
WacctECakyvDCanNFZTL7axz+ZXzMTz48UdMtM6R0EZMelsIWJnktomiLubA
7E1txSOKHLNRZfVctRFJUao1g9HlmQK6bUJ4rcn+cYkJuTExzWbNWZgMU8l8
o0mBwTWNVulVnFWFk3GikZgXpylvnAg0585Fi0KGhDIXwHurKfokkaCJj7He
3VFBpJHWptqKZrWrihWbpm74AoZzzTG/1ioyhSN1K01uv9mW6WbFJMcmwQ2l
pKRit+vUZE28hQlCRFvMlSOVZyurekz9w1dPS+WloqyRZBW1OgkUVhietCgf
osXYUpHqClHGbBXlM08Y+JAUKMh7by06wtNzMiYtYX5rTD+jqWBIjOQQQWay
DcuGreXOLJ2GRp4oJNs1+Mfh43PIKBK3fVpmuUeLL+lKlwqtYZ5Hin+jUu5E
sqQGRrSuGtxlp222SKes9OlCyoQTCq6YkPKfdCSYQDFjUkjUJB1fUUSexDTS
QWCagAtJQzazZZaLB13XbVW5KIdTdDecC6eRM67ErsunRdpU4xVRpdFUCp1b
efbKlJ/D57W8NkJoRM0I8rl4b810IZktNBaEVDiORiOvXbipeVV9cLaMpn+M
RWox1wreV8xWy1HMGsdPsnNedvf3OMTZ06wcZGXR5N8kHFLoK+Nsh67NWCp2
QxJz70Bw1vD0mubgwhCqpdgPaoecZuaQC2TP41WN9qB2lttzPRDYRdHRXGpB
NlvzReeu0UUotLvqCWcS38U3Mg7/TRUXOJHHXrbPg5h6urabG7pLuZ4wKp2i
7KO8OqnYsm7yXDxxnkpXRn9ku8vXslmXBlxU9GVL0jBqPyZ9yShDhEvgjAm3
jgEI0tUjE8WTYBA4pwGViGW3BqdlJTg5rSpacvDv6deRlTNtfngKOnIKJriF
fQ1mwIzSNNvIzBaVU1laL1w1rMhDNSqcqYFcmV6Z2k8FblrnRmwtsct7SCJj
k4b2IcWJL/ZLE6DSDistRc23NAhbJheJ7ZHbQH9XtmCicxEkO215q1VFZQOu
31Lm1jVlB7VCt0QmIncz4aQ+mp4JVlnqVisr2/xGRubCo2GYy4NcZi6MuR82
OUt5WMb2Uyzi5DdaPeKAePPmJtPdtRtTarKXKXWllaOIUNWMMwZJBVqpBgW8
DHeDd6PYiPc/c0Qv1SiZq0gJw2htHFa5rSsCXlR9bC6pKqKObaeDYaF25x75
zxFVmmcOerOv8pv9CP040EDm723HqPumRziLR2TmcuCW4MwPWvYri8EAgT1y
2ST8pIhkH/mnx2ePMQ63Es1SF58+vVjGi9MjaAX3d32YYh7Luv/uXQ5k373z
vH9fjLPlX4r7ggWqqrcFYeHNIqEww7l/zAH/9HFpo8iCj724oLllO8Ju78/c
j50XfoYrz6qXfhZfJtZd39cvS+sWR4SdV97fuvLLaPmnr/hb1QG8OH627dDd
b7YcNjtT3AL4ZrmDXQ6aI6cpWco/bweeoXdH9Q7Qq2KFThO+VLEf6iuyAyoI
u8N/Cdg3+yB5TO+ABfnKpBOmk6rYB/Va2GUnetuxImVP+PPvP6u7DtJ0Xb38
06qSM6QZROrHerVKpCCePfldCHvhtvXCFOZxtPjTV3xEyswz0pjesWRRq6IZ
gRqBeIlCHFplK1asrknFFbe3rViTI6Fi458D8U+Fc9hO6s5jrapmgqiq1mq8
qnYC8s5/K8KX6k63n7Ut6ahpaTQZRtXyXR+xnXagu3UHMBkbAMALJkV/7l23
yb8ks8h2OFBJRBIV5nOHVTMB7AW303Zs533+WIBAGfM1Wa9GKvWo7mvvuChB
QdvnL177eYFr7eTwbvqmyAey644BTswIVP/iRuSO/VtRrrFvVB+B9Un4NVcN
3mi5OTm8qS9BKdHkeLZgY/Y4LB3Pvw5yekNOjtX7Yd6VmW52jdx5XZuFAMI/
i9tC0opFwKdbEJDN7h0xXZ3cTKoP0Th17rxYigj501d4qsrbN9mdWNYoep38
toB1q5YrLqn/whB79PTFaAsPYatJk71D8r1RZs2j5DxZgyz5lDTExF6Mlmjc
ieaVbAU52u68C/8ktvEt/bKdfqCvr54vfLzaLBZOLl7Om1eJqNhLeOfl/jMY
iLO3t0sIuF5h+nHJ91vuVmnhv3nFppzAFvnQFAIQvZkmP4SmySLDnPrWkrx9
/dZl+18PwLVywpYNsI7imQX0un8ZX6ZoRnI9v9jWSH5+dwOEcUn/19sRXjMx
S1IJd/uF0BoraMjnQDF0lHrrhqxlXBpWkz6yPrp6U6S3/749MdWk6JafUfqZ
ojlu7Zrj/E9fqaJUrjjnrPnseeQpS8Zg5TRpH9Tdh5w4mVMW/FEz1Tyw8El+
ElKAu1Y21B2mmBRfMsPFbq8ZV62iXiSTTuQH7cYUKZN/vEGDJXKX6KsBktBz
TlH56RMXc8EeKYUn/sGmtiyl+kYLqUpCnqZcGxDoXKEbIM+cL1hzqlKy6XGE
SvRpLKruwuwkb9zo7PD0lMP78knmOestzYfWkNWtWw1VzuLaYcsV8gimjvvt
Y1LKQ9KoO9Z5GCSny8fEqVaCWKFwVPL+kpOmmjGcp9CxksPJp2NJBe+8oHmx
69zjswBO8DfkoeKP/m/F48crAk/z0PwbfN8lX/fffDhJ3Jfcz29+vpjDb1qN
+Pj0CCTS5zsCNup9N6vFnSCdt4ohIIKwwsnYFcKPjn+ggc/khWOB3lAO5pqk
bs0X86o1fU77S7UE2pTxE9YuvcA6HbxUDgQoboqtak9/Q0e4Qn5XtgFY3Wip
o+Lu/sbJ5ehdUat+S7/bjgmxAAqnGsjgVNUjYxdnGJbtEwd+im/EsjJoF6k8
LoFrEmSdzPlY5oAAEXv1Tw5PzvxsGU0AtM2tUO9b6wxIkO7lfREMpqcjwjXQ
fpAz1im5ivq6QWJKrDgjbHlw1GuF8CFXqnW2vWI/TJXB3zhM4yWWnpzcFCI1
AKaX/GKSew6QjYx8JBmvxVorDj+a7HINkvoHzmt5veBMzlKGhH3sPXJ0Q6tq
veQHJToEHZUzl0y5/BPNp0F7u7pCcUZLJGlahLWyE45Q5fiXofuW7x+rr+I1
juRJKRLyisFU14I88zW/Mg0yeZDJjGil3mYRbaBnqg6CQIPTxuT2Ek5B2IOK
T9FvW7car8K27R5xL1QJgIs9U/Wb0mY0/dHiRnNfFwIPPCkSTyJXZgp9sxsq
louQgAyC6sj14JVDE+cfT52dkbZxuIIUqJFK4uZaSN1wPXHSCXFbj6EDM6EC
ldlQ6QB2PeKzypL1RjaGFn6VpHMUlL3zFNDCgstT6frxUm/mnCIai11wGtpS
RxF3havwxAPQreM1EYiGk51usGQcehWjJ/91Zmpyo5eBjmr8bGJ2ClvB2OI4
YUpyki9zlKn5nrfJuCCi84Ens7JKtRVwgpyIFbiJMz12YibuOns/5/An/n4e
+TjM4mu6R7xhNs37QreFbw+Z3MSxH08MixjhXaUH7JJgPIqZgVpJJQSp30wZ
fgDHxk7IiIMUsrU4kCkMLTdrjyyo9oYw9aO9eqTpsAWImCfQcjQwHyQYCV9X
A3V4FsaZlCUKx9ERR3hI4zR9qSt0w0e14nqTCACXyzWdpqnRZj/wMHX+BOYG
azhfxVzV1vfznn/6IrMVv4GnQ+/QcbT4gEiLrsMKFrkiKGUfPphMcn6xNk5a
EwR2VQlF7tR1X+wjUyVEvX9zN5gc6j+uC5758L1Hnn8+u7Pa9mOuxJoLg2oW
DsNFeszC5aOmcIkKLBl5Q65Q1+M5cyafZZN435lZfuDC9jpDeTwUx4GRJ7A4
3rCJFl9hDWQ13tDtMeUc1uR4iIvw7IPclCsmmV/jGF2IMorViDCAPp3FxeAx
QjnCEVAubhknd5q2oKLjo58ZXOPLLWdi5NwxU3rCM6Ekpdu0jBWDi1thBdAg
vHjW9UbApW5rISAYczhPTlZv+sbFX++fd5UAJyv3L7cV6tsOg3Ig1iK2xJGR
C+EH73yejumoNoYLjCarNMtyQoKQVzXebSesSsW3EdfHZeMezoXEMalF44QW
wnZmKdddUz8AQmbJgh2vE6ozX2ERMdzMPLo2/mVCtwCtEmFTdRGc8CJTzOYy
IjZwS8mOOPqS1oBrYWTqxE3P75gM1zEy/cMGA0IibtWadfO+xXEpmikPE7fU
/SgIgUTwJVZjeUESKSNfi8dnXEJZt4LokPjiZUKvcnvDMGGMC9uBQq0G24AC
EZ3tht3O0NkMdoKycc3J93pNRy/rdtxC8MZznCf6JbIBg+rFAS577fC9psIP
pvqivpzIGLfoSSaqFZPjv4L+S2A1VUl+aWu+IjDoNqCQiu+3rRrZeTrszA9x
iEt0+LyM0XSXZMIAs8u6VGN2asvuEaXMNFzRM6oPblAzdZhr+5jHGFmjdfLw
/TqR3VW/acdvmXcr/52nhSofUnFHqkCUxFgOGrdGqLnW/yVSKFUGRaYm734u
awVPxN/cE+KkkEycq3jQJwsbW2uOOmN1LlY+QFaI5+l6XMMXFPHjUUASa5i0
xKXycTooOr+uEaL20s2akvrn2Jd97r5UNBkxN7I2gKnRKqqhtVfxjYOkGm5V
dgdHaaHHZBFNAWesOUYcPfRvWHBidpooLy8VZFtgW6yslq7ErJtSpWo8JbPC
vOtzRHd5wdFcWTqhPbNUUfZZyqOhx+5msfbm6XmywKVL0am11jCA2YgzK8U/
tFfTxpIo7ZprSdAndp0TNUcrD6obwgedblaT2EvdMbA+0kLnUTlj/k4mnEiJ
Ivmelql0lcKC8JAtZO8zn56u4AWeXnSFtQzWHPUIZ0dx7hRgwhd8Fc8jLvdg
12TrdLrXiKoz23LDdeEh6HZknhvfxmDHqB+wWDSXahMmcDxTKXC92sRCq+ZM
5yTbvRToEVyfrnjXpAaIx9uKy+DPqbC6FFyi0sokB1zGsRa1XJ3Dr0JNclWa
EOOUcA2iOuswUMLt6g4wsajceAjkUZ6V4526MgNbCMbWLtWXQeDlawlSBPCN
FIfFbjCy0M0qgcdWR05tqZSDIcDUZPScK1Um0DktIeP472JC8CZPqucRfgcW
8gP5Wqwpfqske1GQ+GL6EEnwgvhiRYhYK9crfO7ALZay4eckzkhShXxXjC1O
Fx4xsIoxROOcz2Tg4jZGIZQSQ4fyzAKyGEMFCDNKZBcvWb+0S81bFOEE4vlM
kHJxbARSGVuxFRYTG881rAukf5bQ6EDlODBYkYL4uaZvZioWY3fLqt0fx54Q
dQO5yD2uEiKh+WS8W9bjKbWx60kyCe3nCEGOfGMesdhBtID2gArgEPcy1QZ3
uLQRpVzIpSKoybe1/bq6LxaZ0NIsjcit4+REK8YvHsflUigZ7pHWb+cqkEin
UBkuOI+1puXNRJpPcKVlaiVwOYMbg/IzjMskeo8DxHDT91mSdcACg60jSvIo
cTavCwvEe/VMh/ReUVoOOp7Cd/fYhLpX2jWE+GVE+JBVDigHkflnJeX/LuNp
EpmAp5Wwu+76Xbarhr1Tij5MmbyvLJAJ2OHAjdwaGKD0SzgE7BegM8YyVCuA
SZKUOSIMwQ05Ow8pB04VZd4N3CqkrDDJFWMzXOY8ouA+FBjLccxY1OsS9hVr
NiLPskzpElXBlewgj0JUVrEMMDwYtUi3lU3KSE6fwf6kJk8FN9N7i8vGJmXs
wol1Ma7S6CsZqvQguWRfwi69kraH2BngFjH+STjzLY1sKhi+56QwU6CjGSkB
87xRxmkEbiVDdb+Wo2SycxyhNkcF72aJ8LmQa6QQkhPfDl+cHddgy86Sy0QU
Q25qphwtI2ErE8MFsdzQMB/Sj+ZjwJei/5kg97Fce6StYlaEMR3OxI/OUXe3
FmpOc8AvBM8KLOo2j288ay0wnD1LSktznsSmk0kLN8NsrNmiKPNkXqSQd0wA
9cJN0/G1chzpwlfJ9DzGhK6Xm4XxWdICYA6iE8abxoB1jXC3WDMjIp736vjw
xbNnx8+Pjo94NaYUrJmbEEHZuLoRhwR5zUnBeu4wknArU0BOxJTisRblNEuY
hVR7Srk1pD42BhHPqwYIy9yIRC6FVBkinhBEjOZYnfz8gm1bricmsT86cQYR
E1d7bGe39+Tt8X4uBxjM5hyuF94reHm2nw/fzequtihXZRNTsCCl5pl6Ku/R
fvH1e6Z6Mq2BSZaaQuhzvVD9lqxcelAVkEJlPDxNjeQAhqP6cGxOam1yCtAa
mxGZFaTCG+aqQNbMvqWDdZs5wZd8kWAcrKln9YG2Lacnk1mXgsnZPsdXg2AW
uFJEtSzCEfbG6kg5EVKROPJEqFl0LgFwgrmi437uGplbVDFNQzIkSarE1Rsh
NM8au5lVFpZMsAqMXVq5ZO36wtkTcVz2R/ljFeOY0RPsgaiYrtk/EaG7xh9Q
Qidph/zSNGZuGjl/KZRY10RZ+CxTaCaK6pGcShyAyZ1DidrWudRVqdix8mcf
oyaB4w/2atP0Gmu4xtGl/aq272BWxvcuJtAAfom39USjV15X1aHp7Mx0KRPT
jVcxDz1Fg7YiJZTKADJhx9uFCNHjCsyKwhtAIaj8K2MTAMlm3PRfPz3br3s2
qwxs4ebSnpZhIGPOQ6CgkWAGGZjFakImADJoMbg6i5GyyFVLsUn7bN1EYsO8
yLmpLG4sqsiQSzLsTuM0qk7QqASpfJXJIkZapue4cOgGk8XVq1sz8TXT0oMQ
QdcQZjjVXzZsipXtW2smGe6Lpc1Go+GPo8kHFLgN/vr0lab6Aen6GarJTeqf
iHk+VvyRlj9y04o7KoAx5TdxyopGprBoHfNrIt6bbdaMXpyKomyq4jFI2XNN
+NhkwzF9JrZIqqMQYbU+EX9i4igcnXVn2Cc+QGyuxtpLSlKTrCnIjx2T8DOn
V6SdyJq72Y/cHtgqnqWsCoav345ePT99/viR6PRMO5p/xElMOGmuRkAjNNzE
axujDrdW0iR6TqlYPR/JF0VaBf/18bHEQ0j+QicFCH/hqpkJeLAJi8ZMpzJ2
wiKPVCMz27NjhzpJREex4rQ70MuDzGSTkrqi3kPfjC/lrqUXyVnCHTizg26a
/kPP49ToDwV6HzrOL0HrkX/xYNgZzAaDXmsatKNOrx0/qEuDfM5peBD2gkd+
WIffSqXp5Gsti4aPwl74iLRg2p+biJs+CXtt6W97bbWHuIHsGKxTD/vQ7G+3
Vfq69SWtPAxw2MN09JJcOZFVR7v2iN5uq7aX/8GZAVrYLInR2QDfMqffdm5O
eTMELildCIMDHNmdTRUUMB6jIQG/kmve320JDwtQSJbsc/ZvYRjcpQ+T8gx1
t4wl1OsRL+NO88BGOfd+ipZjPjVB7m+HPj4BJNfaUdgp1b3ST+7uA4DikR9s
ab9rHz7ckNpocsk7+OKsOJ+d5tHGxTSD5pbV7DQPWMvfPrXLs2lD5wFIxDt1
gj/bOgk//7xjL71H/qfbPtl1JkF/a0c794E/YecRFoa7jN+t4/hduxl/jGv3
6ePzLZ/s1MctHezYx+097NDHxQM/6rVavU673QvaYbvTmrSCVtAb74C7OkGv
3Zv2umGr2+l0O/BvZ9Ztt+BJux3G7WCHLuCzTischFEYDIJZb1zscpcuaNRg
EMK0q7rZZSFm8tRN2OpFQRDA/wfBoBf3dlkIj9ed9Tu9Lv6LO9Dr9ge97oNb
W/+89e3P3md6p+nAhfiPilyD1fcQ0jx7K6lQgYgR70beuGwsTQGpP/SI4BCe
VQSP4SUoZbkoe05ZPclXYSGomBgM/ME+mK0DoiedEIsRtIeDMBy2g96echtv
mEuWySJZw+cWTctnwLZpyQZ7RxkRK18hJIZKQVhcUMRJxa/dTl2EKt+JmsFF
Cz4jzV2It602oz3lZ2d+yrjTablK57H9q9gS8bRsEB11uq28YOHn8041UP9J
KwjdI7nfMu766Gc9Sr0XpQn0HuWW2Ww2CZxL3xFdyQ3HH2dVW1JFPP6Q9Xz2
Pu87NRuc2HrkDQ9SkKLognLYQl4oUHkdBaxMlY02vB4ljHPJAGlUUHSbo3G6
YYUwpvCt+2MzTEpeqXNxMWiWpout//GfhzRzcetzxSjmiUtuA5Rg2PyFrQ9f
vmHrukRGGifBF2fqlHmteYKNJZZ4Umy9dJXvJG6WV7h95r9/3bzP5EM7jdkb
o5g1m3Wouvimtn4Zry6ipWZwJtOW5vU/TV9zx9Vr+WNmrq49MrbRw1E2b/LA
UDnXLo1bVy/Q9caQDNhr3aCmM/bvm/m3MedTcABcFuLcEsBRiwfiVnGzJIUX
txYnCzcRsO8meFMa/Gr0+swnZRmabVD/QuuWIBY2ChpdEbk2JdPybW06M7+3
8D6w4js5iOb43m4Pm7SC4WDWbUWd2aw3aXUHvWCiPfTagzgyHXz7VtJVaS9h
d4AdDGDQsP0ABejTYyQKb041V69+b3vgvE/aR9gdYg/dznA6iSeTwXg46E/6
7f6404k7rVl/0mt3J/Hgdt6Jeo4yKnJBMEOJopi1eehM/occXxH2YMP+Vgua
bZKrApRexKYRrdYLVAECGBu2QbqRuHS7j2HfEESH7TgrjdZHXgKYjm6zy6P9
TjVJG6drorwaojDxzURt9eg9wJ372BBOO+iGvW4nhBO7n1LnxZnV63AeFvqy
QFFHFmqRxFyk6J9EURSsiXeoS7KabJK1XD/LANToQc1/5JcocB76BPSG43g2
6A/68TgK2nE4Gcx6cX8y7oyDWacXDBV2c704ECjgF8eD1qwb9XqTYDYe9jvh
cDiMBrNpNB62W4Nh+y7wK4Mhr0u2wgXE3EwcEBFoDJutCEs6/4zapAIs/me2
mc2Sj85uAWt3x+6XNj5Pxt2d5ye7bn0vABkRgeTl8XPJdG6/2WWlnRb20KX/
9LCmOi5ZQmwFeeyNAXfCYe27S5bai5+1OBLyRqj9fMkUnHCvo6W12dUO5ikq
38u601xFAVaQL53OIpz/GBvnVoVMA5d7aYw3yVysHjkr5Qv1mnG9WTl3T6Z9
kMcESlYu0yNG4gXGmQi7sqKqnkIcJ3in7DzK7hemDAFq/mWEBtX/01IVjt8H
9cG+IZE/A/Kz3/Q7fSn2y6nSyVxDWUP3BpxBT0zrQY//pD6QwOz/PhXz76ZR
lHPR7YGhtRN2CKWpd98xWi2WK8yNL1HjD2/Fh4Rtza7yK2OU+r0a73ZO421w
+vzGpZtXFcSLhFikJj5eHkxNQHxWkYY9hNtiaol9JV6PD+m/Z2u0zuesGl+M
C1+MC/mmX4wL+T6+GBeK8/hiXKjsA3++GBe+GBd4IV+MC1+MC+7PF+PCF+OC
/fiLceGLceFPWvcX48IX48IX48IX44L/xbjwxbjwxbjwxbjwxbjAP1+MC3+s
ceEfsC2UQia4dB9FMWvcJv6eUWcKlPksl8wESnAs892cfAkZ1yYxkm4XFR1o
PV1zPukqiSmTL0hck00huSt24FaA1+QKzhXBMtt8kC/O6hxuJohAGVTSZuSn
pkmIpebGLULC7+NRdQaaQoyoaOEgKlZBMUiWZXnIiSgRHv/dKeC+yVQiyoUr
WeohAUZ0CiwxYeZIG6EmF8AIJGZ/7HaZJdDzB1nxOG16AspSA3KoQ6S+fYqL
yVJfZoAzlRSKJpp0vZOA9oecwsiAOmYE4jIWzhlQ6i4nPyC+4kxYMF8+BUxo
4ixX9wwTTFKcFG0b13l0kmNG9i5omDtjL8q965NpjBV7iQk/u7hZYiTlWqQV
XYLJQkbZNDEGjG6yFh42cYqVm/oHgTLPM5PQa9iG0WK6wnRAiIlGOcpZ7uB/
hdkyydkt7zZb0s/f7jBO7mhe9G8xUN6niy1Gyp26uHhANoZBu9+DXW232502
/t7bafTWpNVqBb1hp90L+tC8B6x+b4h69ta0197JykB2hrAVt4KWWBr6IHlC
N51+F4TOTj/cqZPesBf0JmGrE0CzDsxjCjPqwFOYERoOdltOuINUsd0qYH4A
PY0xE6jwssKu6an4Ox3Mw4oayZx8UT/YpQ9fhWOQhw+j1ThdJGsypN23DxQW
oI+gGdaKH+zcxyHrlh9VfLBbH/BTO11MN4ggsIDBZp2yovRu06CR7eOPy0Sq
fyi+6oAM3gO4B360T/JT2AqDRtBqBN3XweBRt/+o2/mrwRkm4xHy7txHTzoI
+q1Bq9hB7xFwu63WX6sn2BjADWqBgFebJVjpmkoh1CrNA/Rp4KN99aGh6Y0G
oByMsX+HGLso5/GMPzhGFMWyx4fwTzzHDPwTH7ArJo5BePsIXMlNxVShl8Sq
70NE7u1er9+FK9ebDQFx9CbtWTeYdQHN98fDDghqD8qreChDUT8NnQs/g8vy
sgGiReXgHxuTNF3RBBo0eK8bT6NuFITdfn8SjqN4EAIW6s/idnvQbwXRLvc9
aEVR1O5342A87o670zhoDaZxpz2ctAbdblC9gBtnJm2cSRB3w3gKWKcVABDM
+rNh3GlNp7PhrN0Jxu3pLjOZDMcRkMlo1o9bk6gP/4uHcTyZtlqDzjQYTgpo
SXUMruJHfsJejyDktlFryMvVBJC4By4j6zKu7jFUEfg7SLxpWU3piXhuFiVa
n292C8k3H24h4bduAP38L6Lhlor32+3+jmP2uu1+u9Mb9wftgdDxwY5NO0CV
gbAOQYQ3bgU7Nu2G7TCMOx0i+W0m+Ts2DU6IMzi2nEFvuOtaK3iDXZsaFgK4
g7uhaif+4HYGYZcT38odIHHdrQOXNTginh+RAr/cvQPhC16FzaPwXnzF7UzB
rh1sZQju7ODWY9pqCP7s5V7h764Wx9TisvXHsOxS+tpYhEvJLyS1CCUYo9z7
Y07BjKItNhTbLmUd0WwYAiiikr001b+cgmecc08+ZD1NlR+iCLE8CZKmKYUy
5TaBd9MkOl+kGfIIOFghh4br4JpkMmtn0lrPyehsXGWJ+Lq4Wl3jrWJULJGj
ANFqF9g/kKc9cklkbxeyKOvanfHVyokCtimKrdpbGGmfp8U6ETOQlNbN3Jor
dmBugn4WtFVSNi3zxQppJ0jZJTfip5OrriabbkbMCdf/C5yBq/W9ZJPsRlNr
kzyEryhFtWn5j6uafcMQ5fmhokGs6qcm3JBjtyntJHe1dTe37GjFrm7ZWX/H
3ZWBTDVCd6X9zo6uUTt9hD9/hAu2nfXvcsW23fzDLtnS3qLgKoy4q2O4OQDH
NRsVqPJ+x16wdkds0DZhMvR/oie79+Jip/sxjCC19sS5tN1tTXblxEDW6U0d
R84wnAJnBsIf/DvblRN0vFHZ1VTUPyF2vCt3RuN34Gb22/QbMHaofkL+cGee
tB+yh2qrja6lg3bURufSftCjBe7MTndh6l3kimf9Dvw76xs302BXZjOIWq1O
Z9zuDFv9QdgKuvCfFvQ1bof9yW46LFhOe9wJhuF4Gk7a8STsDKJwGIZBN47G
ne5uej3kmIPxrB+BcBCH3UkAs+n0h8NWl/dm59MBHh3OAvaiC7+18fcw7oOE
1mvfa09ak/ZgHNg9mQSdcDyMxtGunYQg4nTG48GkD6cU9KJOezIcdoE2DDuT
aCdlAfyMQdIfdvvBrNvtDcfj/nQCAD8bDu63J0CxSASZolwBEDIBiAmDDi4z
3BXs29P22O5G1IuG08l0Nm4PBp1ptCvYAw/RiTtxEA/iQS+E7RhMwul40m8B
Idn5dDrtaBi04fpO42G73R7Hvd0cM+6Wkm7/Yrur5mdrWVW37EURWxvHbOXt
2FnoVQOwaAO5AcdxW9k6/uQAaxGpqbHm71Ea3VmCeY437LmdUX2FteY7zIRJ
rSxL7O+l4lknVrtIeoZ3+5pI2RePAnHyvK8rNwB42One7cwdkslbl9ZAWoRs
MJUT3KBp3jKOt3t7m138w/y973SEtg7Q+fO50w/6/h7cn81syxwYdriLPzM6
M+/Gg+3s8uz4PK/eJen6XZqR23PRwwk6yDCLru+XOgBg6XRb6PtT0QgZlYpG
/s4rMT/EUZ59O9qi6731ByQBQw2ZzN2vPayyQBbv217JqNLH+7Yv0tNd3dj8
3RRLu4YW3BewQOChgipZc5VN7glUg1Zr+CfD1O8EKstOMJ9w30Mt8hX3Bkrh
Q5TBuG/7IkPyPwSouNJ4c56M7wlRYRsgqv2vjKb+QZbM/BR5s/u2z/NynV35
SvPzjzF19LMjRP1u/s9E4pDm1XUvfUWVD0jPRvn8WU/q6l7xcUPUp7kQfaOC
Jb/czXq5Ea+cHyhTfSw1OCUJejw1orc7vkn7fUnVHbh8EOr7mzIHp86o6ReL
1aFrJ9eANW5XNnsy5352K9diAnfRUVKp4IIrmHFB1TIv4uVUqKmK6kwzC9Jp
8lT4Uy28/gPWj7O6UGFnp8jDwjVepgsOuOCydjrDyUXMFbgvRX+NW15VqZWr
E2PUxXVM+b9XOHWjKL1eyYlyTT6v9nq1yVBz9oNTPyCrqSegG6duCtvSEFxv
QEKK3Knn+HNVczM6qwFX+I5UsagkrL3/MB1897Qx+Pr7+a/nyrvWYOtp0+kT
qx10XqMOjxy5rSqwNh2fI8zQ41qFzk+bp/Flwg748Efy5q15gRW75Tnwv399
Hxx+eBden1xc3Jz+9Py495Od3zVuCn9ayaXDF8Kd40d5XClsunkmvhQ13DNY
a75BoamelGsWKWD7MmL+G3Cyc9jLOkxrQx56tQI6MH/xLz/nfc/peqtV7TXZ
NsgUcbaR8J1tBwyHNz9t0N69et97kdtm3eUn5V3unX/9dfGoq086d9COV7G2
Tvgb/CmGhVgYK4CYL6/ZFaDmCiA1decbLZf+SZpWRBLkunUt8va83ZCG2hkb
UY7ZcdQ/ZvAtnDq6pRdOuRYetc8ujl9cjM6i87ePo/TwQ/LmfefivPV6+fjl
xYeD0cno4PLlm+9evxuP3j7+9pTevH//y+Pvjw8fz1Y38O/JwcGHg4OrN38d
fT85gr+Pzy+f/fr0/fEB/P5d+vb5m1dv3h4+Dc7Pu5PGD+/OXvfWH189nh62
f3j/5mXU+fH9/MfGd93vl4+X3706PHw3ePL+7fn6p+9fRt/fXL84/Wu7cfnk
u+ftH4ezpx9hmovs8iBqPLtafvvq1xfXjZ+uF41ef3z1ZP5+A9vz6+jlUSfI
eu9G6/7z8dkP7V+un8w/nm5+eTy7jjtBnH2duy92/54mi81HdbOsFU0T9z6N
zVhqFj6plbweak/evi6eQnzzpBX/OEpeJE+++yH4Pnl6+ORi/HiCf5+++fU0
eJ48GTbho+Wk/Yw+evrmpDV9/MOv8P+b0+Q6id6etE7fpx+fv3/z8fmvk9aL
o5860Mk8/hY6vewG48fX2enlSfDXw9PeaXKanS6eBz8l+Dt0fP7+urM4eXbx
dPnkzeblj1fPXv76XfD42fuLmye/hFdvfzwPOkHvx++yX6+/d7aPV5WLL/FP
sMABX+181YGDKEsmVJNKnlfYXI8Pj85GWpwFPlVWgINMy/72XE6h+KGaNwFv
3mjPzEzMm+iI5UTPwiluONgQS3EhdVQLJ1e9lEJa6MaFhYcCUuN7vWDPDwZ7
crkuHoyCVhD2HtyS/cR/6FT6u4ijKRZvEO710+fbG8aXSyyZtyh3IE5lMIGw
ddDptcLOqHfQGvYHR8etUWeIriOtsNVudVrdVq/Vbw14ik7Ut7QfHgwPwpPu
caePTm8nPejvcDDqBN3+Qbffa58cdroHx/2ucrvDUbdNKSi6Qb/fGxyGwejk
5GDQ6Y66vdFBt9s/hubDvjK3oxbwuv32MAg77VF/eNjpD7q98Aia94LwGIT9
w14YBj0V+UcHYbvdH/Qf3LIrdndMBR3cjZ/9fd+NAz+K1xHwOlzu5GCzmCLU
nUp1EKwkQkBg6seWIplcuzhFNTFXNtVunYCAUnOyRDPbNccQWFMVfGLr2DmV
OGydFGZI1Zg9Tc7JiYpqh9rhsOdZHE8FUPkr7VZjsJq02AirzCCXquyv1Wfy
yoqmfhPC5ZRj0bKl64tNpheUa4lPNqty06Z3Jg73sXNCk5RqkONDmbCJMDGV
RfJbyl4PPEaT67XisUmVQimkB+x2fImEG2exWayRsyEOuApjTF2QGBNI+HvQ
5z6qGpus0X2ersVHAe4UJ2bC8ituveSI52ErsKzicyxXudLAe6zCQriiFe79
Tb0CT5JVJiEFFn1RhR2Lt1zBQaq5LfKG+KZPlXVMFS6sx5jkarI4sY2mKIv2
YDZAjoDLYwqHfiEhmaRXhzOp6XSwDpL2INw/RdxlUnaXUCqVlLKFe9D9Kcv5
D2kPn8xv9GO8J07QeeAoaI86vfbxg3ruK8fj4KQL6O3kpHdIHgeH2qjXHhyP
Sq2ciDb3OboMdOp+4aF6BBQeS9xZ7lmLQ5QDDYfOvaSsTbk1+j5vKDIDxRf4
0wh69coXsObj7uHJsHtyFHaAFesHnU6v3wmPjrqDo077aHQcVLfz/f7guNs9
OQ4Php1wGIyG8J/WIDw5OYQVdUetgwelhj/nnnx2/vrsG2pxNGgfAfbuADYn
wjfCY+iNBnAog+IhBsOWas1aQIXuOj38vBUGw5PRiZIDetRtdejf3kmX/u23
2vRvZwBLabfD4zbMhJ6MlIoEsEZKhzQIgbQNwtbtuyjNjoO7Nq076ACFHLYO
D1rtgRoXe/3+yagH9Lfd78MQ/cODw84xfDg8PhwOgt7BcTs8GXX6nX67fdA6
GWqzw7B/cjA6Pjo4OBwOe+2D4eFB9/jwsNU+bB+3uwft0clh66B/AL92ht2j
Y53kYWs47AdheDwa9Ponrf7B4Kh7fCDeRoZvxVgs5PeNwFXlVUH1CxnlwhUn
Z4mHtoOix5WULRZHOELaFT+mA8YgeGsj9BEaFP2j5Gj5KCsM4DM97BD/pcxS
YTDoD7uD7kATcJVb5VNyVefbKrcq+jxUpdcqt3L73JZNa4dWpeRZVX4Wt+fK
+uz5P+97ft7AmstvYw6zijoUqELdZ0pYSRxygZBcmh5Vclh5kTkryQmDHbxw
zag8mPTGBtaKeHKuL7+QGbiMSlVs+a0/X6Kr//Do6ovru6KrsYuKsGqZGCtD
7uUGiD+WdpYYGAmU2M0UwGT2nvaDiwdxdzIbdmfTsDOLxkI7dtS8h9NpdzDt
tKdRDLQlhqsb72rcHBMJioQEzWYTJEE7to1a47ttA3eq8r2t2rtbRSvhq9ck
TCOYrq/TKqkpq/u1w7OgRiwu/BbWWPDB6sCRFHJeSwAuJSDifi8of5D0ZsUL
JxsRcdLWh688yIujF4+4IPBax5usN5Txb2z13KyWJoqHFY1lN1js/1tejfM/
TYHzc4Fb8GujzTRJfau44mNCfVd8nZ6fHo7c/yfjy+Hmp/ANrESeXX588l1r
/tfXH96Eby7T8PXNaXaYjArtnix/+vF72+boOHj2/qfg+dFp58Xr779zv519
n37t6Mhqj4FhAWKU/YMTfJKdna2fvH3TPXk+f/LL8w+D5Omo3EaO4I7JHQxr
QnJ/NteDycVRjNDovyJyFQHUfPoKnzf4+WdSkB2CXERl3zELyzgaJ3Mq9E6k
ehLN0fqkORyocCbWIk8WUsDUtmCKOTGdpTMPh8o0mp6CB9bR3F+mGWu2xItn
mS51CE1IwdVEsQv6JoklfYRjDpPGnIeCFMwY1IJO4iSWr+LYSVGGFuKp+SAz
pWOxNDMWq33tjin+U5kH1AZzNGUwMTKLwVWk3FQoYy8a/CbSZDzIxQBnElFl
4BnmUJujhRBL38p70u6lK7Yp3WDoxBKe1f1ZNMENTPTFdbr6QMtFbUbqp4u6
F+MO6oSRW3bqas/ZELmZjzN0t5aABiwRfRFdxZ79cq5FvhFHKcxm+eQZuMFS
l3cCm4xMtXeZjtExaXmRLmKTeoLKGU+NOY41Spk9BK7ejDOAQT0qZBu0/o+i
TVjifPogc4/e7nvTUXeYI/PWnP6P0K2teA4s2goGwg6wtvpqitxlQoqnaXQj
Chr9pMGf2DmS44AcKUZXRdlNY502ksvoHAEcE67iVUAlkVUwTONJNMVZYte/
bKLptt4xZauATUSVtOGoLhMiHdfKedJIhM6lqq/UP4ZLxYg/mpDvwxRNyEyK
glbLHZbGm+qAGJgJDTGPH20sbP9SUwwurtI5VnP2FtEihSHStdbpRrU0g3Md
5ngF54g8bbSA6c05u16K6cjQfIp1uBPM5XcqGb1JxUOV5WGxmGlSzNFwL+c3
WYImUnuc+CJBqBNPwSlrtyfxCgUBSm5L+iuCm9OXfjSdrjDrBtafprzk6drP
ATTciQWroE3WpTXeHzqdG7oFRD3lK49ykAACw3s7xjredf8qwbQ0FBU2TxYf
4MnBfBOv05Tq1MsVpIrZJCp4OAfiA9B2jEc1B8yPMUPJr3gz7ayxArT3m/8y
TpfiT/ibBHchf/uSEctvlnzgU36PHyoUvUxXdD+cR2fi7yI/v3m/NZyf/2yU
fioeNfxdP5Q3sJKg5Y8F6H4jMMz90PvSz2907QuPzJ3dC1p/D8J9ZyWlQeot
d6B7DOLeERqnu6+D4NydQXAId5h7DFK8jDRQfx8GscakCQp6S+HlnAQqCEQH
yWp9AZiKSC8C0jVdiEuRST1LlAzVHEsTANRofg3/+u1et06g+sH4NRj6uSTo
M2gbtdc7zWe0Bm72A0/HM0TdOCRbhxeSwWebBWldS5SVETDcEqSlaBIDrGRc
QyyvkGczjNVy6X8N8lvDj//+qfHh7+HDvXCx/9l562/hXeQDlNhf51kOS3D0
I5TdR8Rpuy+9b9NrxIt1M1lCkkTlMNPnJlaEKjisznKGLnEV/7JJkNTP5mmE
pdu9ZQqIB3YinvB8EVOrIoLd25BOXEVwGjjRxG5KumJ3mbO3iItwGE/LoS9h
Zz8ml4Y/A4wGqPkMeJ9Pn/Qo+SQ/f27mthW2E+V3WOkJLTDP6z1yN/muPdYt
NqScI/XgFwu944S9rJAjdHb+pW1E/J3STsSbW9GdH4SDBnTIHC78OQzdP0GK
dv7M48bbkN0df3q3oC0/9P8DUMHfG0GX/hzIn23+syt/druMfrajJtNRa5jr
KBzmOuoMfUWWW9CP7Sg/ozA/ow7PyHsOjE2d/LAEBu7m7ieTzUpYUQrOu4mj
1YPMw4vuJJvTA61rIrAi35jnxYij8DCzVRxNbyjdWSxCQZRjIE0zTciI+AWn
0MR0liZhllfiDx0GlXgt4jRcekBjuv0dg1Tv0bBpFutrzUNNtlG7a9Nbtkxd
+mgLliY9NvLC2box4T1AlWCylm0SU2qME+CtKK6eqAuulDwHgTOKl/ECjYLW
jgkY54oiTqiHJmpEhK81ycc2C7TtIfqRr8yuEhMvPo7A1SR8sCsQaWBIc8iz
+Fq5b0H4NtMAaeczpxQN5cIhHgzQqAR3rm0Ud37/PBfkDFrhz8cx9o+gh8Gm
F3m6VzxGLyoQRiMuiO3QER75Uq+J9jz09/Y+wH+D1j5cmeW+feu/xoXw/J1Z
ehVo010TkhPCTAjvnkGER+41uAf28/84/Pf7MGCPOSjc60w4o7+HHf2b/uzY
P2/FgQNUFqeLaWaZrL8H+a7aua62Y8GBf5lMVqn2x10F+a7sn553OIdf0XoN
myw0y3jaKiOwgE+A4SEFHzkfrCnBK9F70kPQpSXVh0eeCpcJCFKbSwQ67Zav
CcP8Is21xmFQEUyjkxSL1/IWOTMzklH8ccmykLGH25lSKklODCkmEcwnC8Ku
hdyCrkfclQg9+YieQAYaaXeb5dTBRyYRIchbHuAwQDBZXN6X1CyszpyMufXF
7fPy+SYz15kZlh+jXOvCOW7oV1/5z1P/Dedff/MG+AxvxJdA8zrQU+CMXp0c
doIw/PwZ3TOQWZ0QgpxcpCh76TkbHObhcuArGAM7YB6XRHkWOw2ssG0KZU4c
bhy7kEMpQHnzPDwD3FACAzzhuj9Z3SzXmNsXVYoNOG1CFivYVkDjjLR4XMsh
EoZnztE7fPmGeUQ1wzRZXDVWmesIMd3a+NWAlBzHCz9sgaSD7TA+tOm9YOIN
aFUlUnyXmxssfLyKVong9FxaTGBM7fiHsGNwqjF7g5izhnWtMal2LCGVhYNG
AR1PhLzgWKMmmyBMN62ajTlYIYNDjYQoJIDYr5HOar7qjs8HNk0liSeOaDL0
Q9+V2+7lt50T/UMXALJjVCksl8z2iMikObkJ5Kz7Hl4NpBC0g2Qj5BXIydgP
ExKqFqlH71khgv47QG+Vun+EWZEIx95HpPEDcg0Clla9cARFNhsIRKLVIcZz
X94Y8M1ikDMxxTiyPmMEg2nsJEnIJvECDjjNRBYlnY2eEtJ+rD9klDTkMISG
3FU6942izE3eixuwoZjTBUIKcU6px1oZ3gUcGI9V3JkSgnVW9jX5Bq+pTBGJ
YQkwG4QiFNTqtmwdNHgIK7iMFpsZbgPxp0B9CURNkINZjMfYYWHdPUnXRd/B
jeEtrxg6DzZe5W3lMh4ivK1IlzhNchJeJOpeeGvRHSNvIw+iPEe1Ucy9ItU+
WrhexXOTbhxzpDQHrbAZjF754nYtmqTTqSjK9+DB6dG+MKHiJeUUmsxigmO0
tQIG4A0g7oixGqbrwUwsp9QNIFF3TMCkK5wO16aB2dUdTT2GlaR8jCTFksOY
55V64IzQuFukRySmLJ4B7TSM5qKYhhgoFjrZRX6NZ/WMk+TUMITEruwCLj5P
m/HZU/0dLXSokJ/WHV9YSm1ESC3Gah7iWud2741cOwTbu0l7PYsXmPf3HH0a
1qhrjyimBQBGFLukz71I4ismHMQdcNdJxotVJW/CGVTU7Xfb9Ak+2LkYtgh4
f3KLQ3TCalCTGVhyLuXTHJN2E9Bgk82kmLTYfo/7z3MDWFmx8yMNBxMnm1Ik
HgyIMqwSCToQpkAL/zi5lrk/1PZyLI7aRfmsOXuVd3DD+CRCpw+EdN6YrLQm
WhLFzqOcgT6W8Bqo0EIIUpQPHTL1LEnwoRpDNueTbD7CexEwm95zGMdgPaJ6
aOtN5kR3ELqwGlGdU67qnjrQtQW4mh4ujiTeNQpttLO0QPUWRzLLYqS1ZAH/
pzV7CiwSoJ9zXBZTyISV9zK03iAYd21yWJMGCgCVIDgz7502FItlVs57BGu4
uQf8g+C/IGleshzwfRIoNV4iqjHkpQAQ4NZIeSyEGHarRQSMmyhkMaHFI4sK
QK2weR6TFw8CO38WEz/DkIlx+ORaxBuoqFEiv5iH5BHfYG9v8RxgJsBISoZu
UyMoD5lRGTZx8iUUh1u5eLBuej/g+Oi1EklH/MJsMV7nymN2NgXbwJS/jamU
A7nN8TY5ZhA7HwJ2B9sYzMH4JnfTQU5IL4Xoud5OmEU2hwJg0MxtT97lGHxn
bziqEjCjHHVJPR5jtagslsT+C+MjrpGFTeu1MVExQsHBIhHmwUlrgZgUjTVb
DpiiFbVAhhh6mEbvK+Kj/pO1as+JVu0BCJ1xTQz9ikfeoy2IJB+jWcu+UXGZ
WlTuWNZSZnO6vUc+A6YHlGEbguRoyMyaBCP/PE2nuLSIe+KzVKnlUuiKMVDl
J5GujHjDfJUQIdfLWkHBacc341vAdFKrhdOVYOVqkNuAb8VjrOY7WB+Eg9V5
O7kcHV1S17Fcqs/gsca2TwENScdXvLdogTBseGk/o6rdfE1UzvqY0p1ZxctV
TKAYUa1N2TrqiWmuCB/M/PEt48GrRtGpMIIHoXyeTBJkPEkUgBUiz3zjIA8H
0cNRwluZnOBBXn0mJhN0bqTCbHxcmSnPNCaDvxTPu9SQCMkMI1snQRHFS00I
1NyDTHlXpVEsdUB/okNLTV04VuvNYHYXRHVJqSvKBSfiwk6SqKKVNdj0jGOY
IevMFU+oWANXiyByrXG5iPBZzkDpimDn8cszHyQsLj/geQaXmV0rAo6cbPWO
yR5ZIYLFKqcfwn3UhKAvKoIYAokDDojIJEkQ7dyU5ZL8IKTLzI2C0LLADTLa
WNaZ6Oxhh5Aq80tY9lmqqniDNnGiTsdm/Rfoar3ICsChCJYvJ8F2fn7iqHJT
98YM/IR2SZNRNZwDJ4ia5aMx2u+ZIhMosrQqU6icGKzt7QV6oCilJG6ESxXe
EP/lDs68mPXBU/GPGDPgx6LzuLQfcr0tl65BRAVexosWfEXyNFl9bRBz0VqI
EcoKrZveC/YpQbM/9oLuB1yWCR0URTcnhSBZHBX9kdDuMcUrVowvGMmVp3Fh
K7YJOLIj2x8oCkaCfLCdK3wadhx6Shfs0aPLUSMqU4PRwv+x2W0NtXwY8UlC
rNTaSu5iwtGAOIl/s7emi4HJ00n6yl0k15BjsJM0MtkXLjlqAHrmHq7a0Ab4
6YwZSZ4QuU+5s8rWmxlSiOsLTPWUi0nYLAQP2CgoueUVU/ROZ3w6pXeSsFnE
ZVgJi21iJlYOK1rwZZPN2WSW1eGGytCWvGj49SUypSCvs5UmJw0WZL08I0j1
e6z8Zikuc3M4B6ueXoupRfkesQxKd+JQE6HGQIGHIG/JSSOEp7Y8AfFjL8WR
eyI+ujFme0AvB/O87mxfvvBM5KvexiaDEL8hRoZWDzVPZnEerdICgbywhjoV
bzFSthgqaIuiTjGqOr0hRwYA+DNVJ7uzWcjRas8yBcPA4xwak5sJ3ucrSRpR
lgyMtuIShUeacpI524EbD+QsQVU78UWMVIQqZnH8gdNo0OC4CJyQbJ/Ti6AK
W+uUhrkmNylGQKWpoX5Si3XdQzcjQuzukqJwOwWBXEbMdVQhEtFFIIkHH5As
HDsuhQr1qLB2X25B1HT10bQD2/VgzRvG03G2MnHAdtuKoKMHWWGr3C6yXC/G
dp65JW0Rfgh8WPd3eHT0lJPZSgAsuop/+gofv4PH7+DxZwSwVyeHg/YQjRyo
+6eib9kFqf5n6D1J3eAbRyGp0bQI4FwImMWVJVrQuPgUNkPMrOZd+JR6EmqM
j2heWtEY9fyMntVOzRCnhYaFZyPCRB2Jh5IJy3UCe3DR7PTOtg320MFRnr94
TeiMimFfsUpKTVL5zcfJcTdUE5FWIx5KGR2pu6urmKOxiZfRvm1/4n2PnXh/
MQG9IEzM2VGSNTHTVTRbN4C/nzXgcLPGZjLJ0NBolvW1uLz/h/9v/2YfN/hX
eUN/NJ5iiTG/OYuZs6kRoYPtbUi8HJUgq/lff4M6Gu+z57b6GtE0pi+ERh6H
3DXSVQMYO3hFD72K4f2HD7/292BZGY/BQ+AI+S78/Vtagzj0O1pHm+nvaA3S
V7H1/yPB4bZGi/Hs/o2SaH3/RpN1UmzEhTv3Pa+06f6Tw/+qwVMMavrGK+0q
vYanWID2G6+0bfQansLr9jdeaV/oNTyF151vvNIO0Gt4iqVev/FKa+WpRWt4
3fvGK62KOawXz5/+9F/9b3z/L/77dUI5t96+fuToNikbE2EhgkeK7qFGT77B
IRzIfw88dM2zvR7iB4fOB5Nxuqp5cC0PUBxfxcbeNZlO536rOWiGQ18K2cSq
FOEAB6QiHqznSZ16zc3ioe+O6SaPFSwwIsQBrF2GcgaynlzzNYLnZ4x5jsXC
s0SWidUsya9MydB7EDoxfJRGrrvxjWhZrWorDqN/Kaf1qNt+Fk50Up0ci/xx
r7NZzU1lEfS0/ospuCmZI2rNmpgtGdkjAUZL6HpyQSafpQQEZjdAkz8SKZtB
L7lFG98mIfA5ISFll36Dkj3YxcYz2UXGT35zFZ8DgPq1v40af40av7Yaw3df
N37+z//bvOsBAALMJs8/65aQoojIgbHA0PnYCGSEGFw9NIReHHLCzleXbIIj
OY4IB8BLswwYpoAiqkFpF4UHY4X4oY0vg+0UVkk9zv9CG2ZIUNMH2u4jcTfu
vhXUSagd7OWh3csMrwn8+To6Pwe6oTv8kB6+gcNzH3s07dxWrSWnwrtnFsLF
CdmFUW054UIAElCCa4SBmVeTVpzKA7M0wNhexdS+9r/qNXvBHo3K73TwfRwG
uPKNzJsGEI9/2ynCH2yfV7VC3A1nNZkmavEPReNCFPyletAdISnPih5upPKd
kxQxo4R4C6OwKTvhETeQaTQBtaKQgkUD5TXgs9dyxOKwfRkLu38Rz5c+9hJf
I2sEDL/VeiAftVh7ikgnsbjDnFj+g1gPQI6NVuB5/+GPpnjXSZph27+/MhFi
pIKZJh+LXQDTOr2JLp2uWm7CpFmUoKmXPaRFDhHmicWHnCVwmk42yMGTcwWs
HxjFa5XtrV9ChNNs4oTPtAIwZwa0jD8Z3SiER4y1jECgBTpOLVSjGTmcH7xE
LyHUbi1ZGaCuGKSfStP1O+t4qnpFmVxxUyxfZzcX7oGTa5C1vhy+SX8jreFI
bOoSGjxLFsixLuP5nLCBUZDPko8AlHRcjkaNmtXxnxUqwJCWck+3zy3Eub0C
sCUt9/GbU7h9aKAm7QaqDdkicLOM8UMO3RNxEd/SwWFU3TxenK8vMvKRq6Pz
ITsQdXtNC1kKQ2Q1E7nAhTYmRL/GfLZSmY6y0MD9sXljFhysFmseLVWB3ujE
kGNgmuWLi5G80AgxO/X4Esd6mjI2op1VHSShaDP3LUZJ747tbdNSgPdfuyBE
m+vGvrNgh5HuEtRuAOs//COq8azPE7EwYbw6JxDFCuHwqwkbOEjTOeCHO6fW
IajkK3n67Pi0wZ60fMSsAzTkH69K0GlQWXjms6kxEqwJDoYasiVTMdxj81K0
iiKjMdS/OTw8o4Xh3ZN8aE5INNoCnHE0AwidRK43hQNHPLsyBlTncxzP3zMK
PPg22zfCHDwWpS6Dkr2pN0QmNkQQSAeEw7GKWj/EC6guM2IzISAlv0l5b3zt
NBuBPVh0BWaWjPaKOKBrLN8yp1U1JSkF77JFFXQ7XsXEFudhhhSrNl3CXwwy
YJ8Gw2SJKnQ8jxmJ5rK+0vyqvzy9JI19XkzHe5NHh+zPwDfevqI615Mb3TDd
H+PmsFFz0F1w2zXQJcADwg/q6THFOAbe8NbSdkG3K5OBFnbnqU7mZXEytw/Z
s3gAryswgFjVgCeLZ0EqJtbZo9aTNDbi2Z1fLrt9cIUeu1fmm1sn0cc+ThQ6
OHGXJQqZS0hsYBMaFhDwya6OvB8N+l18wx9eA3GBO4DywBoNyAqct89k4GAO
WY6sRtCGSjdvXj31uajbC8DyLpKK/DXlxBBccvt4QwWWM/aflr8MOSGxiZDF
qerH2fDgIG+9pGoVP9bqC7iFFcmfdbOVW8HLLWZqx7yfGW+CSZSsMU7EHver
+DIlrVOCwbzu9VA1GCqFIklox/1npQHsImyhUo4/Fe9GU0bCIhbCS4w9pf48
spI8uFOQfpNJhT1Kcs2+EM7ry5j9i0v3ex/HOB49bwRtTHUjiI0xN/Bsc7QQ
rcirQrgzzroMota18W1ETlncHoi4SN0RRZIZiJCXrNq8BTCCFs7k2yKGRQYZ
K4WxgQYGWK0iMqNjdg8XCPFvFx1bbgx3GC41mSQTxnp83OQKm0OYmUUEtO/5
XNP6eAqykl75RsM/AphYoyfFU055CJMbYdTeVTTHAE4jOFjTETMbFvGxmM4d
2k1nr1Xdd6CqLkCi7zXm/gNMIN7OnLMhnafnNyyVvBq9PoP9mlwkqCwg7wph
yXfswFWUatPMvQ3Gl5y5cypyiLbYKZrl/8LomiTnt6/rnO8EvihPS9zHiH4h
17GK09U5XJBfDU06kztPzPez9IqoEcckqTxUF54Sp0NDjJwh6mzEmhn52hyl
yehi8lNp8ktm4+Q18qecCCajzI0Z3ZvnMAO243KJTmJJN4uEuJa5AD77wDtp
HNl7GpgxMaRHyvwQM0IrRIhHXkwyzOc0D3TjyJp1CRzuNM/PRMaeaQyPpleJ
fLEgZcCPu4X+SfWlHAELXhTLz6wrmXnfPMlxYMgJ7utumg4jcfaYu8p9Mi4C
dkQerk791POQIWj+tdGO5AwhwjWRU/yMbAcpifbYRFyLXKsD+t9g02/fslkD
fz97SzjmrX6PkgSyaaRNeHn8/Ja3GpKV8wAn3PlxqV4VJp1qgS1yndcLrCMi
TMxJ4T+UQ5hT5gJS9OD6CJPehTlV3se580006EoIu2WcaDcRnJCIU284Dmqb
hq1hy0Gd7D6Bfi7MQy5YIohNfmUE0w+UfVVjMch/krxTqImLndv+Htu66sB0
oc2GROaLZLnv4BNhji8FOxMKwkeUf41HxAs2ETgWv4Mae3hwqiXxr6CLOF6l
0RQjU3KO6uqrihmaeEo1ngKqKLljFHQsP0y7JaSUNZzzSNY5TaZoPDR2LwOi
rhy6ipX4EJygV0NMbixY/HJm2JnAbVNJrhLDkWDKtNyiJNmuIHKrK5zD6W9I
z2cZftP3wpXUpOdCv+R5k0rAwPkmyS5IRM0Y6UxjRmLOERbSx9EZFjdVoZWE
5RTzjqzVU1BfqXyRl88JeInPunE8mO+6HaEBVaVzANhPDv/rG8ZRgOfIR2BJ
WUgMxiG/pxxe5FUKZTLebsSXdAzHXtg/veSmgod4I5FQZR4aDP2clD96QMBa
ZBRoJnZkiaCbOoKCCx+utLuSyJEMbhixHsYPx3CYFGbHzA0dJiwacJQep3aU
c5HLgMGcXBhFD0GCnhgq9xzOXLTcAgZS1hqVG8Y3JU9qlLjZJ2KG0ITOtjNj
sOdMQeIOgwfqwGFeSU5aA1JXENFhVp3uwFqdGHg4wDOS5xq3VFprIKhZRGb1
QDm0T7DgGmKsnl91W7Qemo5ZBpFFJ0FTRu73hMH2TtdkwF+QY6d4b9ykG0yt
M58aDbEOaU85wZDyLEHkxxFe1IhGpPUCPSXEi/mkUTOiDsyZ//ogL9uhysMn
xVFJUqOeUBix+MZhACzhr7uMJPay95Q0yGU2z1UbA7uVzHkbNXPVlVPghfLo
obBK60BlL9UlFnOEahNYfHTRlwpe3LFeBv48c4kDoX20WFiZDY9ED6nOGCLH
mYmeymiAQABIpswgG68ReO2S0DcLU72YdAB4x5n7dAgdnonGsOvu7HEo6BWn
sFL3xihjjwx0h0QvWmllNlAmxM5i+NF+ThWUR94GIxfEIFVuOVVy/JKchNnH
0I8J5SLAWawThm3d3uj/A8jrQLb4jAIA

-->

</rfc>
