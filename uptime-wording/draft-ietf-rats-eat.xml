<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="07"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+B9PgWE5okg7M7mIUknsq7JZJKvMam1XpKzu
W7emDGaCSViZiWwAKSpNq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcvw+Ew+XiUPkqSpmhm+VF6eZOnZwv4sU6Pmyavm6wpykV6WX7IF+n2
2fHlTpJdXVU5fAQ/kkk5XmRz+G5SZdfNsMib62GVNfUwz5rhLMMOknHWHKV1
M0mScbmo80W9qo/SplrlSd1UeTY/Ss/PLr9PimVFj+vmYG/v2d5BksHLo/Qi
H68qmE5yOz1K3x5fXiQfbqG7YrooFtM0c3McX5VVkiyLoyRNm3J8lH69zuuv
+cckXzY38OQQf9dlBQNf16FFvZ7HD8blfJmNG9didRWeLUp8VF2P80ndrHHb
uBn8y1bNTVkdJcO0WEB/L0bpi9VicjXLJjl8wnv1IltV+WKcR6/KahoWi8dQ
Vuv0xYsTeJXPs2J2lM6ms9/V0qCh9yOYko70wyh9mS0m62xu4/xQVMXkJqvc
Cxrlv6+yGXw5Ty/z8c2inJXTIq/T88V4hAuFrclhkY+/+eZx+rKs8ptyVefp
aVV8xGmOYXCYZ7ZIT4t8WuI25FPY/aP0JJsV12W1KDLav9WiqaDlu4tj+Lm8
KRcwoa3f7KdPHz9NnzzeT7+BU94Ki5vzFH/3L00x+heZn1/ej6P09den5aKc
3qzCTv6YV/l8Hb95+BIPvnmWfp9VC4CbcjW9Sd+W2cSW6F7Qeia4oe/2D9Nv
XlxEC1wUTT5J/xGgcVLOw1p/c3iY7h88PkgfPXm0//RZWOmfyglNduNST0bp
+2w2y8ZhnSdZNXMPaYlvYdTfwywm6UV53dzCbRnoAmWkMXz1uyqf3GCrWhrR
SHgTm6q4WjUMqzzK7/PFh/S7ovpwU87+rMN8X2WrxU15nVfpxfklPNXr33kh
o95AL6Mr6eV3ddGMrq3lCEBdR7u8KedZnX5f1jXcXx3uuJqnL4o57mnosqGm
o2tu+rus0v3inl4W01U+S7+D/QFkkFdl7V6NbzJ49xb/W8EmLOyqAcDlMwA7
2770fVl9qB1IjqvfIEL7Xa1NR+PMen6TwQaOP6TvYKrVbfGnD2HMrLkpYGXf
VTjfahL2N1ssAAov6zFuxqKY3rvoG2o9aqx1Z91vstUsPanK21m+TpJFWc1h
dz7miP/efn/yzeP9x/Ln02eHz44YP/IrgMvQ6pm2Onhsfz56pg2ePtnfg28n
k5n8/sZePXr29In8+WzPenwGyFv/3H/ymL9dzlY1Pzt8cvhUXh/QNODv9z9c
PD3Eh4Crs2qKd3PrpmmW9dHubp5Vzc2wWFyXo8U0G82L2e7yZrk7KW8XM7iv
I/jx2+tilj8fl2U1Gd5O66eHW9wVU7T3r9++OE1/OHt9enZ5fpJe/PPF5dnL
dP/Z08NB+uqH49HF5avT0d7eoye/7I/2Rnu/0GSoA8Xl+PeQT+oVkZpslv6Q
l/USfmSz4fmiyWezYkoo/Rj/s063oecd+nACRBBQzd7+4XDvm+HeU1zv+fGr
49HJ+8vRySwr5nDl6cH4trGXP7Zf/sm9PHl9cTY6nk1LoAQ34fOyzrHJ5Q1g
tx/evBmdvzw7jzdV93QJBDCbjR5Nl8sRLGt3ktcfmnI5LycruEG7F8t8XFwX
Y1pr6+dp3gB01qOsXn76be3fnE+ef3PwzO/8o2oC+7TIK6bPb+Ak4Ud9UyzT
N1X5p3zc/APjZ+hhlkbDpD8A5l2mJ0B/0ld5cws3M4VbCM2reQH7X/9D+mo1
v8orQLuDNJtMqryuiSGARsUkBw5Gu9p0lI9gj+ITeobbd1JevD8/hT0dno6I
namz8XwIm3tbTPD96YvXx/27Op2VVxlAetYAGZzTxt4uh4hpYTq7qyWCa70L
4zze3T/Y/eHNyS+nxbSAg3iRAxdTvb4+Xi6r8mM2++UjQuJycu03U9qm3Dgt
r1Nt7hbxqvyY467gah4nON03Z682wEC+GBXZIqN5wo/dN/kCepzJro2W2TT3
478BBgDGQOYwr5ZVATwBn0C6DWPsADn6lxVyewaliG6GTTat6YpfvDu/HAEf
UlxDI7+7q6IZzuU5fIwXPcZjh/sHiloOEY8J3to/MCyz9+gZjYHc4ei4Gt8A
Ih03wGO5cYgpzdw7/ABoXXMzydbA6WbjD0d+ufoKOUx417uFsIO3xYdimU8K
3kb8tatf/sJfjtzxXAPg0sDnZ2dno6d7B6P947dwtK/PR/t7o/39vWe7+Obi
8nQEB/h09PTw4NE3zw4JRT46GQHOeYF8Lf799uxkOM2BseHjGh6/OR/CN4/2
9w6o/et356MfVnATolXRk1mBVAi2OX0HhwiAdPYJIHQC7ATwMnCI6bncHzzb
s3fnO4P0dTWFI/qzIL/Zuq/la2qJ9+8EGeXFOj0/TbdPzk89HjxeTYHBR/D8
pndLgZdfTJBQw6nlOW2qXqBJNt/Fh0NrE1rv3uZXQBLGqzm0rHcb5GsANde7
+aqgiyQ78qIsP6yW0ZbghgPwTgvgChn1HBOuIAmoRjmD+uydLbC+iFhGPbO2
RwB5Q5zdcnW1+7HIb0c3zXz2VcUDAlO6CTyGb48fOs+H7iSgi8lqDPegzquP
xRgwvSxgt4Dj/0Qzuw9aAcD29jeC6+HoydPDb/aefUNYFEnUPz3eezY6RcHQ
XUQkU8NP8Iaafff67egkr5r+ZoRCgJ4C8z0ZjqEZfvPu5OSifbFX43GN7368
PP6hu2sXshUE88A2r0BuG74pFgSsZwtgtPDB96vFmOGbBDBAR+nxGDapTt8A
uaS23yEjnVXr4cUY+EaPaXqPADf+E6B9YLrtDBRIdx8DXnv65Inb7+/zq2oF
vePt2MPVgIA9miNyGTbrZV63F40idnidJMPhEJhzBI8xbNTx4gtyfIrUA9BB
DUsTORpQwJiYjrTOm6S5yZoU3o9BUIBW2EVO24CsNIwBxLduinGNKAS6yGm0
QZLBNwhd6az4AO3Teg50n4QikE/KS3k7SBdC1oFuFEvcEiDLIGaPb0bJ5U1R
u5mk8Atk0El6BegY5M3ZGin9ErpdD1KEZaSHVSpQDeI+jNEQowA/buD/YXto
4pN8CrwRzpf0DOkS5SngFxbUjBcw4q07vsRRc2CwoPOMADV9n1/pBgLztoNj
/njx+pV//iM+v4WvvGZiCLcUOgfmntc04rOaF8AYw7l9BWJbw1cT2ZUHnBzM
LEvnAJpAo0FynuQp8EqwKtmy7KpcNeFIRtgj/wmN1+kVnoqeQl3O8xRFI5KA
cBfxgQmLCeqDtFtosJo1BVBnOIJNJ5Le3uD+jwmyimva95vyNi0a2JfZDDYb
jgagh3fJ7zsOFXeFswXpB1ABHiqdGcBN2cjxwWyxXUEUiR/5/r6H9/mnbL6c
wTqloTTTbZjNylviGtM5wGeDlw+uzwJYPtrzcoHrXOLgGYAzCGhwdDhNVcPA
Z0BPaY3TEnpHBONVUrRlTCqxDf6k6WMXIMKlGdPhkqDMOjXUzVcIsDxswLVA
OIIjoGxcJJP+AZ5E+yENRx3CITGkwDphj8t0CqwVAQdvDcINrB2mAvx3Q3cD
ZjcprkFcR4lmkKLWDk6zohdZXZfjIowxA8ZtOF6PuaMPOR4aYgYQL+gA2nOF
FgxJ2hHMj+8LL8PdY15CgweAYEZHUqfLvEIOUWFPP4IFlUuUNErijTPtRWYR
zmRAy9g4DRVp5ILUdm6wC9fFlPYTBhYUB4zr6jojClDVCsEZ7hVe0bpe4TwB
egDWrjMQXYusCnCPEFOHgwrg1IGi2tAwIau7uw6n+/lzBGBVvsxpTQBXOcEs
zEdJD3R2TSwgXXXUPqHylO844XzsZVki08VXC/bzqgLhBTd7lCBqBIGrMF6Q
blGN5ATEAr5EijEWTHOvVxVBuA5CG6JQXvw5n4yS3+d4GFXOkxLYRNHh1+nL
7AMDA+8OzMZt+4TAE9ZVyZn0fpABGgGpExFGVSJNLytBCePVLKtgEbTndhCG
sek76PI8Eim58zyrYQJMufjWKNpMq9WC1NPYNMzrREDI3VCiqTRBa3W2+FhU
JXGdgFH6aG1EYIumTn94c5GqJAA9fI8SFHwKDFMQ4wEmxjlcfRBihbjhxgE6
HDcMo/VquSRGByAUKAqgwSlNDbW/46zOkWy9gmawrllOFzNQHGSHsjGB0oS4
BED09h1sS9ozZIZE7LoCNEhsAB4AASbum91Cfw0apICMMO29m9z5wp3ogEYM
HA7+iVoiODXY0UVRzwUKs6sZERdAYAQH3POajlMWt8hz4D8Zb4yr9bIpp1W2
vMHZmQ6GL059U65mE+wWiSMLQ4zb28fI4Bbmy4ujD3RJo+TuTmZdw/UOjJgu
RQQjvmY9S6UpwaajiE3LxEH5BDK4/xMFI3/Al0Y/v6750PAeEizSGUxZnZPX
foNwfOCxUIuDOwgiE72eC2JfRKcImBfOiiZW5fUSaYvODSaO6AwBgEhN+6sL
RA3dSdXMWNAyQPIEYoabQmMDtVynN8X0BscqEOMwf8iiOV+gyzcvayY7SC3T
nHuGzXiNJ1cTr4BsCYDxDP8Ds6lpAuG6A9wCZPINgSnTzb9WeCWO2XjZmihD
uCoTORWYdw3I3MgOHd5NBqR6jjwXDbe6qtfApBMDKTyqMDIiIyFxEJaVGFMg
FKzWBfiBUYiJ5WfPDvFZpsBNk8iz8Y2DPrmyV6ti1uCie1lg7u3RswMhQL38
MDVCRbM0KhYwQ8RbiCZgtkX3fhBI0ZtAG/XmwvJf4MHBBHjM95d83SclbByS
PzweoEuLtTHJ10CiYNe++kpZ69cfkT/Ib9u0cVULbKMAkW7xXdhCmKlyNHUg
H4pvSdQTyQfltORlWRsdkONmOivyhR+E+Ikv8uoof4Bs9DGb4TfEg8qweSAR
KYmxKr9VzCvYsD8Ro+DVXj/DLrzI1jlSzojHQChtQ+Ggw3r0dDhgss3UQ9ky
gFXWJjuEu12D7HV3x68Ape3AjdZmNXMRAI52fWBXGQ6MzAzp/tSlIFsQFeFu
AzrC2eRMhOAuENFHliLeSs9zZ+kW36SAMLYGra3D9qjZr0AuCHbZH2Zk01kz
TB/SNSK62Ai+dc+NzwpghMvRoe0ZLGm9KBfreT0QuM9IRHDSGnC2NcojyOoG
TRydvXBiTM5YlmmvjWgjrgcvCVGNTyBH2aQWOQoVBN41g1n/cMzfmqxI/Iti
QKY1ipaRhwAcQKDUlc91VeF0wuzQPQBEjqsVC0nRamkMZvIRNOdAxBr4f0Le
ICI1fMY2cMG4wF0tJiDKWyJc0ZtC+MxjPmaYCK+CHl2endF/VVsxRj0S7nta
wcXNK3rJfw5w326ypdAeQqftz3CG3NpfEuxk4ZQj/LtYTAqg6Stg5YRr5efZ
csmMZdCs0CzCT57AHBFgHW4Y4njEuvpciAl/qz95ba4rEUH5Xs1xrwnDwU2q
sqSlWSB6BexFiSycXhkljmk2xdNqAgQVi49ZTdIokeOa+ALsB+SikjtDnKA9
DfARQviiZDYNNqYzCgFpJaefzoGdnK/moVmFGFWYdmEAHXwQfUDxBlHE98qa
GsO8kV19MJfK2ossvGG2jzviO/b+Bnk3Jb4ZKlkceoYxkFui843oX9EwE447
d5U7pJ0JcC9aZjHl2nJFF8SHMFEqFh7jwtenNkG6NiIz9qm45EOUdjpE8OT0
9IXIu6ggQMEPtgY3kHgLUafBp4ZugdDlM7jybidQs8zLhj+grWO4PJdFq+Oj
INq9BAYQDx03cZZ/CvRutVBGmG9CV1AIR7luWRjXkaxy78kzEBl3gQb8XaDs
K5C0s6KKyZM7WJy8DuYRgioS7+7gQ/7hCM6XzycI+kBAWP7DGfiR0YiXBjsF
cCZ1D9wtSq8eRC8eVMGsPdfLColxOV3QiQchCQSFsiJK/W6BaIbx/r1gTmye
rpK7FwgqF2O0SZ5mTebANX0BYuwKOcBthD5lWJ/s7yHdBrI4R7aNxVQ7AoLT
cCdN/Ywne1WK9gZBdhfnpsDsbhW8Rkje/bH9GpmvXtaVACMCbTwSEeqCEo2w
IGpQp3Q9iDtamiKGVFQTVtsQQiMZGHXchAwX+S2KQei2Ijd5sVGeHUBLJK4E
8Mylt9pewy0qrgoylsDdO8GV4AIGBDy6ihHDvR4Zaq0zuSPK6m0Qk5ARcRqF
v1JCYg2NPlfuGKkDj8a6vi6awRN23DnNRGWsOaBTEbKIaIyBF7QFMHO0YCNK
EOZZHx21BDGArgRNHVaJKMJAjwQ5bLqdj6ajAVoe3nspDzqSGeA278j2wh1m
8M3kQNgEggxIGycCEpywcF7ny6xiVf51Vc699kv3Y0KwSRuNbCMxW1k6KaZ5
kHV4nMhy1FE4MhZB9hJpMpqsUlZFNESH0bhFIIH9taiUjEKEioWCATEx8a2z
bSur7qny0bj7jPtQeUsqdywz4+kguWevEtW5tqxxxPd/X9DNY90QHKp0xjKh
kZICKSpbeHJh76+zMZ5U0KRUuU1lkVVVeUv6mYjqkkDUT11whtclSlDDcmH7
jjoM4OCAdEJbnUy/Eqhmhkk8L2ZrJdvCFL0mrhs3+KUZPFASjG2gBIs8DV4V
M+vsMMW62EiY/J706en+Rp32KL1EveQcuFEgHYNI0A2aqBxxJCp2hL9G84Ao
fYMJUQbGJXyE3spVfa8ZE3Cn9YrYf2WqLZVw0dRBR4lIWk4xSOF69a0TaocA
IGYHxeiRhY1snXDJV6zIA6FwHGxyrEhk/InIsUbtM1zdvL4BtEM6IdR3sTcG
kYKK8KDyksBtFDR3arRWLRuuKcPtZpSZ4ftGTAOewJJ8SGshtkWsHTYgLsct
0THEMEHAw0BRboFs3AT+/ioPbJmog0WVctlS/kkPbJdgkmgcS8sazGOIuK/G
ymAiEGzyNp+jwO7Nq29Qwpqs1OQZ2yGNbeudVaREQ9yk1zIIhMHQaPIS0zd0
L8hUShx4gyRcv2wxZpOls0iqiRxYFz4jFisafxaM3/wC1C40QVBfjBsTfEkn
9hVsyIxVqWgluYLZ5HCadgOwP79Xb2Xld19V7rvPKA2K6Wez6gu3SJQryF8i
dUO+H/4jGNm0HivBvHaHWlYx2f9RKucVFhBEgWLRe2Sw97m73tfo1cH2Frjk
U7jOlVzzzrb6B1/X6bKcFWNyGVCeW8+e+hWSFvWAAMKfEYfH1kzARTkIwAP4
dIb2AMb5otcfi2sjaxXsUBgii8Vy1QiviHeP1AqIMNey2o17QBobkCjGRoRw
4cjs3eTZjBT3bKBa1Xpvei3rzg5WR+cl50j8fMU3to1E5ArzjGAQvr5kQWuh
BtW5LwHv7V5nxWzDuuAs2LhAOAZYRjYvsMbQITXVOelkyYRwRcTjNqvwNq8W
QLLw3PpxzcbxifWRbrA1WWCu0NtV+3EA1DKv0IkLTHXRUJCcMvbWuO6HRxzn
w6K8he1Ezo1ACynQTebN58HoC69kvmoCMojFM6RtWPc0HrDZQAEBRVWnAVyi
wyhMhs6x+sgLvPZOVqO0/6jc+HQsCOHxsW0EaHJumLCPsujWA+AKzPNGIFiu
ELpgCbMSGPMJOhoQZw0CR3ZFNpAI0Jv2xjjz4ZKV+FtlPi8mW4IE75ks4BY5
Ccb2OANydDCFT/ruDP0nmc9NF+Rqu4OTVzuuv2vKcUcO2cEegsNfzYr6hmwi
xuallekFo7XBepiLGwiWqdk0n6Fvhzgfo7l5ZrDK58ieMqT3jAEXpZzFBPj/
RnGoQ2s8CVTG4od+EgTD6DuEkMVux3lzP2onflW8xDHqZ83wjMwaUFiQkrZe
vru43Brwf9NXr+nvt2f//d3527NT/Pvi98cvXtgfibS4+P3rdy9Ow1/hy5PX
L1+evTrlj+FpGj1Ktl4e//MW6/W3Xr+5PH/96vjFVr9FiPWRtlBCfEnEMH93
8ub//r/2D4FZ/t8wfGKfLGr84+n+N4fw4xbYMLE7o+8S/0RbQpItl3lGxBdR
/Dhbojc5W3gAr9wu1FXk1z/hzvx8lP63q/Fy//BbeYALjh7qnkUPac+6Tzof
8yb2POoZxnYzet7a6Xi+x/8c/dZ9dw8TNom4I+D7zd4JK0auiAfScKucEvPu
bohRLbT7Q41vIYmQDOhqYSC5Rn9BY2QOSNUJUuR0UaLYgfdTbmtgme7uLnLm
957iPMgPVmynd3fHcJBAtj+lP/A7mkePyM1Ma7gJLOUjp9W2x57oMzbkHiUJ
oqEnh6tqpt63R8lR2nnITk4d3yQOPfr8GQT1UT4aiPzw7u2LITsEgRSK6s9h
nV3nQQgj4YetZ08OnyIok/PAjPhfkJWhi6+ffx3aA8qYFw3dkgX7bimyJwmq
NlF8naLDe3oFEvYHlkIAaywz9Gwz17vgz+QGgD0lHTau/ThdFvmYoMIiFMgz
C/AzzYHNuErpR/CB0IC6zcqgvldd3lgDjAswT1PcGpwYyZde+dvofNJXGP1F
kxLfQjToIeiyTIc0Tv3ynZ+GUlviqzP3goe8Vm9W1aXYcP+Yr3G0S1F6AhFY
0uyoIz/FTAfavjQDunWxhRQXqQ1CIcY+pZfx9SNDE2sQW0b4WXaVz2IbvJ8I
i8Mfy4J8wa756GmDY40lNh3t6Kr+gFuv6xJNfFl5nZMsRk+S24iRGcGKbzLh
iIYtY7R/1E43r04v8qaze9q0FLYwUrA5BwJ49jFfB1EkSEsPvu+RlgbxWq+i
Ba78seguGLCqEnntyNXSJNft4Oujrmg76PVbO33HHL1scZ+WS7i9IskBAebT
gysk7qT5p0ZMccz6R1oUcRhD31OENPTcBSLe3KDXNxr/AYiRwLG3MUlINznd
ooLZSo6P+DNDqUparEtRxRTs4x+E43ALZ+OITJ1PhLQnousOMpg6b0SKn/u0
IELkN/hOw2zeym8Mllu3pzTJEfWT4r49pwgrtafFjPpyVQGTzbwWDFsAS7jG
VfKAWYj9cu53bCkYcUgPQM9uNN9ddglhhwf0LFFxiice+wiqwk6hyfZM7LAG
KbQvygeOgoiGLLdox8wbV0gnXMJYEAVqTo5cTbUesM5BBE/Sk3V1GXpFYeOQ
lY/napMZODc3ngkJePdv/S3ZoyMG+2MJ4Os5b3eQTiJGaFB5mdBVHe2riNBq
VucLJA9j10wvhRMFqth1yc5+odtvPD2LdipepGl7Juar2xSI1Qkxi5CPN52u
oemhcVBk5hfDaVlOZI6DdFrOoPvWuaFlqKQYT2uH2ggK0GdPeMRxtTsJ9rOW
FRbouEJzx9D6gnWCMHOYAZ1DRwMxL6Y3DfsNwWs+eFZwOx0UeUyUvGthHAT4
xaSsapq7ng1hWXLsZS8DwiUY0kEtu4cfzHmsgFbI+boOmupsyZYdJOiK+oxG
zGbCLBIfobdFMmQ8mFAIX2vWUSAJHIN7UY4/MA0LLkLkD2IG8qu1Km76TKe5
RBf2OZPxYD/TzH+SgPGfSYIrl8MX+cd8Jo6EwaJLPidbZ8eXW4TjF+b7uB28
CnbM749kTcZ7Qb9U8BpQrXrN0T3s7ACk2pSfQGnYPZcs36xEJzkom91m61rJ
dfTxqCNUOPW7fJfFRNz3TAZBb+oVZ0kFD3WPRcDzhnq1EotGL54BGqnE+z5c
R8SkLG7ITVWerx2OwEc8Z2Al3TwJOF0bHXkdNyUAozrQBoV+ZBLSC0aszYL1
nGZch1XVuiz0BoqHaVE/G3CcVZWZM2iSkXIcuQHR1lytnY1PTax0iL+/vHyD
PgTIjQwv8S0g6tlkh/oSF+5WZ80NZw1ZMWgRc4fhzrEH0nXxiSJw9K5kY8wK
ETvId+4oKcTMZr5Qyw+B9CC2uuL+Xq0WE2ARxL/y9Oy7z5931BRyAzgWoc6h
CZRsu0ZbiXRZBJOvuZTHDgcRhAaYVHw2HyWn3ckZHRI5xzv86A0W4GJoIZ8O
QyYqDgBWmBFW+OOvoO8h9jK8zKbTfDIkPPHHgX/zDq6oe0ez59c4LD8dUrBE
U/8RIAbxXK3bqBL4o9EzJ2fDvoLwekXi6PWKFAVs1GcWQPk7s56iRQT9Lvi1
7OtsNaVNLSnwCnaBSA/T/jq3iRBSCJ0J24S5klyEWCYI4fW1jyZA0DLnUZ4g
gXx8rgCek6JCCSQ6U2KXukiHDhg75gAmxJ4oMNXOMVu41NKhJPSJQE0fGiRC
gJvEH8M2YzQvu9C2PH8LsZqJgB9pR16RmwUfIH5Mt8cMp404YkhvHqQL9l/g
2LbGnYpGgKqnBvsZkPpCuxN4bnncO/+1rr8Hto8bstgHTAA6wgI/WGcd7wSY
sl9f4Fh4Ze5SBPNarXThPcpDCHAxVEqQAn4zEOKtbjgtXE7YMHJjEapXx4BN
sw73kWZFIHYtgQamJNLTDBfWvGNM5yCvw7VMt2/JD9JcBnmAspzVBlz5gvCv
xi2RZ8QN8bgtxwny8SrILahNHlk5Cj8X//5v/6u5r2veZ+ifHT4VH6W0fnTE
+Vf4h7NMWgt9nvbjqnQ33YSqkmTTJ8+RRuqzl0wR7mn83btXpy/O2u2TTeNq
//a0O0L3Axmj8w3uR2tX3PnKrnQRscyu+wLHAr4gnlN/s/unhOwlXiQmfXdf
BQ9KtaIIwgshV3ijWkEd7SBNc6gUcbbtVnl318r6oxEz4d2P/l3H/TI5ns08
ZA+8MzOajtWFCHsliZJ/LtWzoR4EDKx6lUy68qM563ONJMpUdjZf4rjIXIwr
VL7Q7ZwwMLp9N+TFTdZlFAcyQL1Rd+JAiuIo3tDAaMYaBBOlEA2jgkmZcN5y
pytiXxfWH5FylHlH5sjpBYjptVKoelwuhf62bWij5MJ0IUFBEtyxyD4p59AJ
S4vNXs6a37ZEO8qNQsIo+T3QvY+oPFAT4lXNLhDXLP7FJ08GnZZbL5r9ZHAU
uYF3aM9O2YvghYv3FHsr1dkgS2Xz8CCXHD2tGuRGOVS229H4CeYR0Y2m8ApR
JafpmTXCHvQSkWWfUPsUZU3itu/u9DOMWgu+fYNA/qgxLHZVLZiPMs1qvqDb
EmLR2o7WKLOHqWx0U2H3v3CD//irXwU5b8h//pHnIfzaqO3wDlsucf1ROq2Y
nv61gzAWcCZQJz/2O5Lmn8b5shEtFE3oFv2kMTEJsnuzNesqJpE4FBFwYgMi
KFPtrm+202+Ddu5sbd2AUmaSy5k5i7g8M0jBJSzmBcVpD3ruaBiDRrgmhvr+
ftn4RaxXnUfsAselQCvs6xfo6xfAVK3oejOgt4FJdRs3BNc9xhkT6En9HRtq
0MDT3fc6nC1ZdE1jBD1YxAabNhIihl/82s8n9ID3hKzn6O4JhOQXdj7EfCPp
K/xzh+Eb6CW9+Wy6C27ok6VcrRsSa/xInKIB6EbG+QS6TcSjUJosWRHNDFjN
rtwAqFMOjWFNqgtkYQ+/paj0j92iJukWzXALUKtDPOYCTPSCsB3RwGtWzXAo
ghq+g8o+H2e4mUUTnCuUSTRvcxoOVvMK5aD8I2nwdA48Lz8T0XtQag52z5uu
0FODiC7rObiP4JRLRDPqUa6F4VdZuJ0jeRxE4IHUi13nkBLzGUr3iaovEM4W
6tioihvVpuE28C4Gs9XWK79KMiuiajrPJkEQG5pxAd+PWmDkFGENsNYZXOMn
h+lV0Wi4XlUuMUgWkP0niuwKn9bFn2nWyDMAQqV0LSLrzMvKQr+Ec1u06OGI
EKv41lSBOqqDj49FoE5lfBx1RN4EeHcHipDtUshtYBBnCLegNJnwU2oi4O/7
xZe4en6LY+AR9o3hrpE641j2EYqaxMvvTOfeJC22RRS1q/SbsNeI2Gju6hrH
OQ3qsoNFlByUi3yIbN4CLhMyEdCfXhj85Ck8vpKbs/iauTfKQUsbbGfb2SKV
EjsS5f4e741J3u3N+yZsXhBEeohsugtCA2Xi2qZNHZLFOX3+Le8xOfyDuPZT
evBr/+TnHcy6aj9BPDn5b2kDm5KOaAbb+3uj0TeHO4BM3MOno9GTw51vE5FG
AN3KJE6DizppMsnamnj/8Ja4bxTH+7jB8eWza9rGdW8DNZKS4FuOQSBoe9na
w14HqwtSj0Wev585HLKox6uaHS8WxPP3GUDpw9y74HKMwVfpKgeeffvdgi4g
YBqJ1D8/DaQHfeI+85ZsYXNFNWwor8VrztzAA3HNonDaKH+MbAtnK0vm5RXq
HSRfWQaouiHdK5nysvQ7YCSBoeZEQdkHyT2kDtyAO4OERRGy5HRBhkt1ktCT
qOxAyigWmO5vyGRgn2HMyYCjKChMCRZeszE3MWdu9af8wDJRlkbeg0gkSK3h
qZdGIV3lMHVgVyh4DCPyYB8DFlzpocxYB8ypTjE5liS3Yq12lA4pYbq8Yo58
lLoelfuNv1aFvoieHMg1SNBVRULEqjzQJJb5fFAWxTUH5V7UXaKZM4CZYduO
5EJE0x7xxoMUMReFvlKIKAVGWW8o2axYEueEa4g1b0s3XLR2uqn+dWIboV68
vPHKrrOzZ3HNt1IZTd5mmr+dgCEBkBQHHHbhbfJFrpl+BI/MGX/jcAlbvcYf
NiSliby8yQEzz5cWKmDBA4nayKIl7xjQWLBBLvEyjBxI0Yy0ALbuZjVH/aOI
HEugIqytXSTk/ZLVUVKkHaI6i5KIDt5fI1+ZGhkjvaRkklIH5FjXwYlPcaKj
lFEZIhJpGzclvfQx4GXS1rpcp+/evmLHLmMgO53qO+wcxFTq6oskaBtbB+JD
v/DiA52xv5nMsC/eEJ3xiBIrwTkYjQ4Pd9KY4nwzGj16BBRHCQ4GfJjn7wmp
jdBBD6efiEjETrls46esN2qt9oFqvGAmUBphg6EwAbHgjSRfdYxQEvia06YS
wLcyQnHeNs4vRUsl9oPtQYFREaTBlJ+nlXEQIU8lfMkhUrVeI/5QZyIO1nzp
r/t7DrebgwLJCXo8JqTMSQfl/grsX1ALtNoT2zjLF1M0lXS5R+5O2XmGWNSH
k0VpqM+plV2r4CCLiE/4KzJdPHqkbM65QyDcglCEWSOnK7jxgEHVxckYXmPy
HL+LagM+LwZpnMbwlC613Aw9xGUOAjFlGkEKRCiek4qgYWiaS7Yr9M13yRbI
7NHaYAWqdH8n2rM+NEsYj/VpSBkP4i/qOeorqLNB+siSnaaUJzAobJUXVRVe
FBZ6nQtvOUbmFBHxBBlTfT9KNK/KisLXAR6I+dW9RaUx7RBBZBESiRVNx7bH
WTcsZzBj6dVyIqxS26R/HOFen8kkfXn8z4Rl21sbw7OSP+ET8SMiynpgKHyi
cZKthqUZof1JSh+pmAWt+bVGLLLJhe6a/0JyYUqP9gn9hLX9JSX7+3d4g+Vv
dHiFv+MM8X+Blnuf9vbhxdvjV6fYlsyAyAXuHzwdpPvPDnBuB4+fDFHsAMCf
wKqYF3IeXqWGuNUN6kFb2WC5UwtlCsjqiggLBk8tGH+KzciYTvaUmWMuwtWS
HFVCMieZBDri8axI6hIxhgBvomKAG4SAlp0OspZv602GKgMJrjGm07SMrdbi
GvWFLWHp+QpuhCQzZCyJGT9brELYvYAABE/RPVREBcdCK2UiSZ0xiswW2Wxd
F+IxHyMaPegDOGFK53z27lwP2xyF6cVY8o63TJoaWDjCJCj4sdNV0YPhIUAL
/vfJHgIM/XUo4bCWWxeavn53PsD/GT56wkz7Ccoa4VI5fqA9FYCGgVhU5kZo
AG0OVWqzdiMcn0lNed3ki8AjZpymjlWhCFsvj08sSL0WSGVcowpRaEGLQ6x3
hZS8yYO3N698lG6H7FVsdDVcwmmETK8luYwoQuWaskpY0h9rFM3JER/SQCCK
IIwoKhhePCbliFKMY+jA3Z1lsHcw8Ahh4OXZeXzZD4cTLI7gNpF5Pu8C8FTa
ED45nmm2zPSknAg+Sp9Ik0hoIieEceYUJR7zqqTJUS7OLSCrvd6HAqYY0vcP
XXYo4VLYowfHJp8/tFVsa5rg44uT83OX3+A6NP6H8Gf6SEYmV0vcKM40tPcJ
GD9W89G2cec6SYvNMbfaF6ubhQQMrsij/eIPr7x/q3K3UY0RPp+7o/QrY1KB
gjEjgVnYn2/RmZ9IBg/cdTyFeutzlxklNtJxo98r2yn85UD5NtSCMGeadaTR
cpnhf9ydinlUE37pQrI4di/LquwwoTkNEFIrWIbZ5+DDDpcpxppNdjfltIQF
E8aHY+iUoyMmbpTYTwlsJ9aubjabr0hGLz6S5Vq9b0TBppk2r8ijlEKQoilH
OxX4ZJo1lmujAMqMXcpMTpYdD9Ae9HJGDOaclXetDnNFwxrmCl19bVstiXKt
shqtDM6D0ljxJjFH8xFXdQ2AqBlMEL1EfJHY1RYgIWFkW/oKHWNiRlMoe5Af
f51eti55lBjC+yU1G/gl6dzzTbBudJRm7vw2Y79MH1xKgQwe0hUuSL2LvRIJ
ZPUW9eIAVzWsgDLZudtH5bRxVkjcQmKt09D2iAnGRJuAYHMZJacblB+4pz0s
6KjNtlJwMUIFx2TQtIrK+ErCk7aplku3Vtt03H1K/ur5Qo+E9F+tJpx2CPXc
qEtRQ340KpqgyWIxiE9Ddlt3Ogr0VQVmjfivTrcv4N3QZCLeP9Vhbl/wT1Fi
8idtNaZ3C6x7OrNeiKWhv8nmaKwCI+xBb1pV7zvAF5mBigxeIAf07x9TjnIR
1KWW952EntpnLsVuCJlStizBIDj2hQhkC+a/BrpSnLjy/2cuP2NnFE6deqO5
qctbKSg1wIw6DZt50ADEEbDDq1KD8Bd0GV2ORQTFbMquyqwcVMvJVb4uxaAQ
e4YYem1KyxPtUzgrZrkQPZh00l0EayyqYsoivCTAhTWZq7lm68GdDM6UXe8U
UXdhsyvHhV2Iaoas02yN9gYb1jA1m33jvSESA/4JvdHlY/zMHeCoxE26ngZR
IFFZGUbENjStnqh67k5VTAzPGiL1T//8P9LXCzvIN+b1TfexuVnhgaVb0Gzr
bzpApEg8Is2CMvoBBzTPVTbOqpAi20VGIWnjXY/Cg+PUT6giuO5hgi8Mj8vN
r7DoH2XXQi8WgRyKI0G0aywDz5GNpjxpc+aNMit4KYF8hkE6enGaf4QPAq+N
xac0ZvnLKtOL/xSdadzr36Y0ZRwa1KbyWxSn7lf6PL0jK99v2ErnVazJZ/MO
BExO2D3d/r1mKn199rJVAiDYpKitGqXi/A9xFO5ruPAU13RmFW9eenK4DaPs
6FXRJKnsQq5Z0JDtJuTuI2lg2eWtAiNH9zZKvADfFOo5FqANk8ApV2waQL0k
3KTNpQJ6whgDzgVosxgpB8+KBCkI9x0lsYDVnJ/ytsR6hqvwOgqpgdH2nwjn
uK2qgh1hgakfPAYiUciH5oI5MXcB9HS1FhfrlrJjeK+yo6zklt8SOtEgUdoI
ua0hsZjXfKiAD1ujehNGOKy+Fhm3zgrTBUQDMR+BOWkQf6I8gybYnNl0TlWS
M3Mk3u3Mo8/WHaCCLSlFedgQlQcAw4xvtXo6zjBnuHk03wjaxBuP3BwwTCAH
zBBZ8zwL72vQ9iaifVHQ6OQDUGggdNMBAnqq6ZtNagtpn3C/Iu1BaklvqZac
ptZh+BTND6pwJVtLxPTCuOLeYlUS+OC4BJN58ZsaiGb38nj4YoD/+5L+90K8
lujdCayDcefw7TGKvMh68QcUJI3FIyjGUQKfSFlE+omDQ9I/EgeV+Oj766Ki
dMizaxa03OpHNAtF47O19PQUe0qYF6MdiHqyuE7f00BI1fAiTDSxibI2C6Xq
R0/CLGFxL3HTDSLgimJdG1H2AKkHdgUWkhD7JnErGCl/wpI56R3jhQd/JoJ4
SsDAO5XwJiL7ibKMRpkQ0xLtCJ8DJTFaUTYb2MlQ0DDxBQ1FUSflCInqOXWS
uuJqwYwZVQVMND85t+VSgUSCTmwbXM7RkrOeL1K/BwimaQzH6dWsHH+oEzHf
1PmMyiwtcpkFZzSgnJBl5SoimFGfxp8jMhrIIEiR8k/LkJzy98BNYRA8Vn15
G9tGWzGXSUfVFiVhwoDanDmnExBduTArCxOj9D2LqM7PLDH0gPw7Rfeb7C84
k+yQWeVM3QKy3JxbJZsXMEojbjHjO8feGlvHJ8PTs+Hh0y3GqklcCUOVJlwJ
hKN99z4dnwzgf0/P8H8Pn6rTqkQChTjNR2EZ7E3EDl4bUePgC7iRdYzcd/BK
YnSJfoeby6tGiJTahsz3WYw+N3ZSS5HWuzv4D575MRaGlQDaTQ6prPPQjjQ7
5JXgMFR+qDmE9cuUy8LpYLdfo+sOOwp9zFUZE8L7XqNQWI1TjcxigYyYflzm
UQoPy+39ndDnZOgLAmw/2gGOfrL9ZEf0SHmDrZe8CduHO2768EI0LsSdSyaE
QdenVjKy1CHVJ225AK1sGqwp/5gttBgdrmoFFxcXpNk/xCGQoYI7VdhwOmJk
9/+kQtKeTUIodwhxDwZe9QH8Ur/M5jyIfyaWmBjXwEPzzyVFKfHfWMHSfjAv
lQB7HRo+x+nrA2pNngrh9/BPNQYQuAeY1+jbpPUAPnPOC4+SVgf4utf54VDH
FkbPjc5PovHlkZ+BexTPYf9J0uln4zSw/K6TJG5uOfFtkCUog24QH6SBChDy
U0UIU8AUxDVZ6QT2Axt4N6YJOx5wfLfzb6MMFk5NAZiEJU+kQeFqYTsSc07Z
CMdizWeSqZ0bGKp5EaGSwZqtuvyV6didtVJ4ZemWcqDZ+rgMoXKBDm1wNHmY
rynm+vaHZkaX+CpPNcc/VZ1syWKtJFWyOnJe4K9ExACpYYHDumwcfIDtOMk6
1EzC9TVa9NKKWFzlXH5KewzZYEPqEFJ8ii4ysrN0OmHv69AHrVnSd3JqcQ3F
DKb93h2TiZMX+6Llc6f8F7lnxT71lzeqVeQ0E5FBylgCp5OGmVM3Q2QcVYpE
F9FyVaEbP1kB2APghohQmIv4sXiHdg2rrijzIecrXyhXOiwWQ+yuNV6AKSuP
cUWl+ZwVPbabqyqkiIqHiOVO6w5lDPGawQtPh51NglFfvDRxRGJlyTOajH0h
udal81eWEWDYRweK6WN39PuFczUhNeyrEHmmf0nG/yttOgPvMcVbRUCcLTG9
DLo2ZHNNxB7bdHDTEPhQeYBqqVmThwQosREo8NNiR2JDWJy1DAW7YkFJZMuO
eLzmSjd0Dg8ngopeh/RhoIat56QvAtrX8/he77xDcs4b0FC9/3i16ss3Gj06
MK89ISaKKwI5+QM/EYJid14auluftdLE2X32ul/UnQMhILTmbTV8hOGA2JWh
YgO7Mv4EWn4QuXJBQcoaGhxb5jdkXStnUOM40/LiPQls/IdQIPb1AC6rnReU
svKYNadWg98tJeyg0Z0uW1EHUb8ZqcCOezZrI1HpkueYqigtb9GVL0JfG/x0
c7oAqG86IOhfABD+RB3KQ+CkUd/JgPdbUW/Dw1/Fh5D87GGtviXV/vaFlvhC
J6zAtvBr5Vr4lzNjqXjC6JFTN+PNH7J6DWFE1AJokmOUQRKijqbqf+eKlZyT
JqcopebCorSgJMkhW3kIJdtZI0ojsl6SrbHAuNioJGaoosA+MGj0gMOjcjI8
NVbj6zMyohVToGMY2aX4rlUBVo0ZwWrsy4huwd0qrvO6qTdAkr0HWIrzoZNx
8kEoDY5wSIk2DYxI670Tn7JhFDvoXoxSty8JbmattnxSGPDF7bvYjVadVlDQ
QXWXQr3xYxalpDPdhpCpU81J9kZuucaZFYKGiGcoZTy65p0V3HPNY3hunY2A
/l97ybfhODoX2z1Te8XtQ+7yF65yGt9l4HavSuDJ0MKQHoe0iN/BQzvmY2aZ
saHFKZrmhA65QqeaKGO8QDd+o1GUdgNc+sUez6m2B2FtPVvzhzDwTByiOWHd
CytQWFrhEqlyRndzxc5CE3YUa6py5kUV1XQIF1vlVELJYaOJVR0nXkiWoYoS
Dri7lZBINjYLu0dJVyiFHA8a0lK16jDFtdxbuGWgM7Gt5sKPsC9vX78cMBd3
VcQyGEajBCfbDn+t4N/dd9Fbavoy8Sj9a+AeuhsihASoh1+zCA1NrqZov0i3
T/Or1TS9oKoDMQKSJjotsjIz78cgNKSq1VQfQyKp+MmEepR6O0VudgAf9nV3
9+Pl8Q+iGHa5mU3c5iK46ESQYEFwjrRyU+D8gFYNuDUih7xxAQTYh0HSgUpy
ySo+FrMcFWBxVU0ujMoNeUkc0JoAyltyIOCAwnqE7eaqBQF0FogVeBjrmFaN
QJzMyf/RpbZQjWhwHdHKZhRQqkaX9ho1vRcmx2JtZwKMF//gpPprpJRjDFui
KlvEmNl7kiGClwvFNmGmi4RGW5Qh6xYCq5QKIO8XUQ1TVjMZwrfF4pic+4DF
lPhmkS5PwoIbGUQOcEp5K8IACQwQJshzlzGurGiLAcy1yNdceJ4tUeo7kHiX
iJAZrmCfxCb7kEtWC4xnWGFQRaQCl+i9BBtLPn4kWp2FXQXXSKqagfnvaefX
zvE4IVOK5EZOrMRfyPXA/IrLP9L0XEZGbJx1l6v9cS1ggyWLS8diBJgPkks9
oJWojgrdaRkVkgnpmvCBWAISzl6HwMelSQiXRfqiVkkNdU+oPcbTVPvZBNOE
NrkpCCSlCcVA35JKAu5l3qCnobh6iWJGu3XKHCkNaIOIQJ1VtZHNngWkWhSm
dzzupDI/z0nk+UOlzWEOpPipQ88BOgW6a0Ml7RaJevVzF+xLUDS8PWl+fU3Z
zC8KKpx+w2HidcPNrffEeldqQ3Wqv65lNAydWFWoHqCYSr72nFGEuToePdEo
HPaPKsuWQkbqhmcCiRIUrcXrrOI0R76uAHiKkhAcPoxzrqW+W0Jskt3G14fF
pAfqCJloUWZf+dsGSWUQ1O7MlxyXG9pSjG6ow4uDr1iPUq19oWyMondpWSx2
W4AjCVCTa9GjoNbxiWBevb5MJCmuQ9YFJ8yhOLtrCTiywTteoFnI6KMqRr7f
3T6iPRj11gQ2xzSaShLoBi9EpIjlbFVpgGvn0hPDQwXzEp+HNlMjDBPhbDqt
8qk5nzmIkRvjS5dTOiXKxIQ0HdtrMTxhzCjXkkRzRTNfB0cGFWFubzBN95jq
T2lHwCbwxDkLKtfuSpgmhCCNABoSz0val3A2olR1uZVm64RRrO1KqNFE8xjq
PPiXeDxGRHutaRPFHEvlQjJmLA2wECWStoUPJGAtRRuuvHStOKLvvqqt84z5
A5KnKVw7mpIoFyM5wUhq4MtqdKxIAkYRpkN2jzAw4ydNTGGihU7jVHCQ0Cdu
HcSIgCcdh0Oepx0shpxgIuASShgZK9Hc5FYHiKM728FZhllg+/MqcFDyEWCT
xuqhrzdNorUswdco3v39KyRejr15Mei7LsNJx/LfLoBG1bPJ6Rtlm2bre6aD
fGp08q2ZLV0vNrdwQ4lHDJLZJOfinwzD7jRG6WsA9aQjjwbxU3Y+FoM6veA6
EjpDL35GRPZv3lrcT97Nzl5+v9IcDF/e1c3TaWmnWtvr4eoBaibqfch4Ich4
0VPieHeSpPvweTqphwrzu72qcdut+18Pae9I0vxSS7/WLzQlXcEQ9tt/BAsJ
k+77x6lgtqTJ1iDdS78NQNv/T77RVvDRvvvIr27zR64VfH/gv/dr3vy9awUd
PPId9O5EKnlzev7FHfd+DUMcppGFw+Lytl+UbUdbfadKZ/2tV5QDnhCsp7mp
UizkLNY3EdPYLjmibAO56ZIR7gU8aoBID8j+JH9mM32YYaKcbLwOz4bh0U2e
TTTnG4h++SSY7aKEdDj++0cn6Q95aas/fnOe3t3B0xE8hZ34/DnZptlyRkhg
wci30KrFQdsfLp4efv68ozkAnOJZFpZVUqdYJwavXmWv0u3rWUkM3nBZFgty
whtmQyk4F7aA1mG70Hbc1bKsIyXszNebHU9rVaBmf0Heh4NA0KSQk3BotgnG
PRJyHHNKcQ5AJ5aTEkZQVNVVfl1qJu5EM1R0xWYu9RC6nBeLVcN2A2Cxqlpj
bpJA4GaZphnVgKQs/eHNRVpj4WxApkDOzwqxYuc0GdjtObJeCRq5Q3Ug0Y+o
6xRInSE6S5bGixqlxBJbV0nog/V0UmgjI4GbigQPg49VgbkoYghAh0kgjmN0
Q9RYG/5BbsVk8Vs1EiVi5YWlKIctiyXyj+hcrBUS8N6MQVyKL5gdn4a/cBZp
yxtCn00tPbmqCoJl41IacDR4ncPuU11KDBHQzoeqUtsQsEAqYm28OU7hy8TN
BjS6Zk9EXx/9tgiDmd4azCHG2Zf4uV2g1ovfGgrpeSM4ZfM3w81N9LZ3XjBO
6jwOMAyv/hV/DeHobcApzW+Frl6Ah22ZbYKiLwDD2z8kZ2H97Q/0hfsC6Zft
SvsDfeFHQHplO9H5QF74Dw7dCG4P4xGG7svH8IHuaGcEeeEHSJ/AB7zTafcD
ehE1T9Nv4INwBq0P7IX76CmuYZqn8T9dwzRv9Z+mz1KXCihdLel6b7+j/8Y6
d37XMeuSid2cXeSGpsE3Gu7mEvFcR07w2nlKgknolaWHh+VHogm5DEkAhztu
MdgV6UzTbRR+0hP8O16TNemxVvOngsh4hXwWGxeBWJNoiSwivWinjGc1iunh
iHZhagKKO2xK8oUqVePBtqIHbATZU2i6929GjZDHewH4c9LdCmzQZ7fnYncU
Z0PxRGJBIP5TIpnVNlFHXopCCuLUf5zElZiuEFJKfdV5bYG4kRpXdltShMHZ
5BXl+saAMcs1zNMk55AVOcqyOltdRijGHwG0kpDQTkJXTkSxtjhIUfbIJ7R7
znSvpZdqyc+SbQ4qelhQXYAQDYHTM/k7iJZAB/biTG4FMoBDZCZiyxswf3W6
fYpZJIC4v8ibRvzNjpfI1GXOVZXaKvdNP+4LXL6nSxjvxetjCl9O8S+sWgP/
YZN65sI0WXupaeQZCIJxS93xHKOjxZFHURhx9Fkn+2nGc9AcGFxkrKjrFb/+
gU0ob4CkkfMK8zXYxthvDtBIT6oC7WVS0oM7JRZLg0ZFSemgvLUgiWNvT6H1
kXeC75hYXIW68L2rYMd5L6zK2MjqH9bhdtCX3pSxWswwlKXFVVolamIpo5V0
jPm4G/FcKZBPEvjH0TTcFrhYUxsTuMhlopMb2Ir+jmk7g0UMITBROj1XwA7v
Mks713kzNk8yC8DIJH6C0iDVrCPyqzXcqnUQjK0P+fRdPAWWyyUMQaOpdxRN
KiSGDhBhk2htcU9kgCbh5iw0IruwcwAHdkr9Lon05sgyremlHeLw796emx7J
jU+WTmIJOl8BftdLxHjJGRdYFrf3yBzImYhQaeuPzO7edG36X4KBKoxfaDJ/
HsSmE32todXsqAE3cCKeGnwkegThuGH9g/aCKKSLtcDrbuedWtKK9sxNFzOE
qkGHV0uT5ZgZVc0DsskXEyvXY7gzY/VnevmCAhc5qUbDpcNEqiObhkh11L2H
XpHGMfMfV2Yv6mBW5o1ZeiTYWZ8FfQkyEhzAj8qKEoAyCEfqx4f75xLNCTTt
p/Q39EiyMaM/ZPipflP45Bdb5pG6DA5XVRHe67p+ob6P2EFRRB5q4Nbq28Ru
Vua055zpXuqzQEaDb5+Q0o4zoCELZwOr2Vol3aq/Thklq5PknWEenDG3bjis
L2ocMs5YpyRxW2MO2zMWMJQNbW6sU1dhpq45dYo9peCydXNjRanhDtbOt6V0
kxmEW6N5PPwIrLci1b48poR7VNDuY+y+EsrW+MJa6IscpUIRs9c6WmPbrarr
AO3SZbBeq1OJg2MVUD2xZuOPViaP3HJk8VYQNsIb8rJdGfgC73N8tCFIraGY
0d6Zx4ZDl4VO8/QKEXAmYCyIFdU2kGKiqj6Kuh8TsyI2WGwoxC+O2zSPTi23
KnOPJqeKPLY0C0Pm0mpIfTP5NN4LLNurWV6oelt7ol/X9GFGll/xarvKwyji
y8eBIdRH9AV5EHOQLBc+ugmnEVNdEYqMedEibNdl+6tOIhTzarXifVFFEN5D
ioL9p5cv7DFtrHPu61TnJJLYdpwNsa7EIZ6Ux6EC5vcSDivxiFwz5eAx1WLx
CU0WJX/nwrdaCT6iVWlaImTylAqH9v28i68a4sULO33JchPW5WlQXy/A7Xje
hlWroph0bfy3uhG9m9RKMyfMj2psPcuEkMjp5xVsNuZZCAscUBUbYgss6oou
yMD6FgdV8seISkHQdWEdMT3XYWyzOOt9H5SRtpnuFLzvzrEFrz7uGZNn+pKe
7YtBBXr0coRLXDDzz+piVh1Zq0D3svGHbCqWBEm628QeqcTAdbuX/CjoI2Ua
CCt72y4Zi5jcuTb0eODrtWKICWEHRRQi379UypDT9nB3THK2BpYj3HaR2KxC
Az9XYu9KO0rhIoubSVCwvnh3fjlSLqQVTSARyH1IrKi9o56GSXj8oWjNsi0h
GZhzgEZPTkKuhxNEllY/kXGDMaO70eYMKG4icZallkHt7k6e15hIVLxnnO1F
Mz+xNNCaxzYwaizsUY6/h/OmdrqBPw2PNFwnfoI86m+s1ZAn8HNoJU+MlZVU
JvTtEf3OlkN9KLg1asjPjkgV/Cvr9aqcrDkWemMkWqsxhUR/C8xu0vcCtkAC
1+jnSqsujsv6tpi0P6Hg6d1O9PSDukZY/uVswZ4dD+7Yc+iu1Hy6/dL9cuy5
e2ocunt2L5M+SDGnJnn3hXoq0ajtQCFijfNP+FWLQRfVpIlw0Afa0tGVUN3G
I0MfqUo5opXV8k1QrNI1Cc7mSBA+lshcz9SdfOd+fjmOHC1E3Y+uiZZgp8VK
W2721rKkTDlmwivRJK2WRmVgqDyd8z7P4/3qSjytFD82SeFhzZ4fNCd9gShh
g9OwwbylwZeIvT6DF/0ViJTrnRhziqU3i1DxexW2BO0HpMdVlVxK+C6qFxLQ
Igycz4JQsIujlv5dNrDRhpLtYQpwWJ6xSb8XNo323aVs6Qqq7Vi1vwJdujvh
MKZ/akiz/VDwpn8ccGf36X8U/vQ9PwiHdj7weLT/5Rdxae8k7kF7ivVQKem0
EqGb9C0XZupFgFK0yaNBeBQFFas+RUXjwAoh08CmH8In6BkNyEQKP3qUiO6S
nzCUJZ+EatfiMhIpUV3OJgkk1JIJ7Lpaps4tlufOV9YNjuabFam4MGdoMVth
QBX+QZ+vFiwgS8ADcuiNusiKIBjPXusUpcGNkyRzp/LHb9sRPwMXJ7eYBCfX
VgkeyYzD8V0y6sRbt7zLqe4FokwtfKnf8Cjs2h89ltJLov+CPXl98XW9YXaW
MLBYFrh0cq8tr7gELymFLIEFbCAqPWgaqMuN5sGT83F7Vl2mHXSk1FKravV4
cZEqnAGjhczj5K7v+YC6wERgvAGQMJPeWAEGSZSATM9AQYYIAcW82wjJmqqB
vKmL1gWg/tHEqCOoMKfxzTgpX6lmgkUXOeKju8UCGp6EtmVrpg6h4INoviJ9
FMcD9uqi2o5VY2Wxw70zRsf6lDsYylr4tHy9LBZWAYi4MWDn6WjaKKKzOA1T
9CUtIq+4jocUyXIsXnA1koXnA5xDFGU/oRPF3P2S3ttadtRel2dn3u/MD9Py
sgocjuScR+nk9YWFo9r37fUHKwx/AfvxXjL0LEy/GpUqlxAW58gwCGKqnp/m
S7FYro47naZOr4sqZCJp4V8R93s4YMeSDjgiAmDiupiuKtH5Bl10iHwFBL3g
xDkOP4m6Nwl1LJpO1FlMjAglkx1uFtEJBVZFsa74Vfxx+MiRln7YPI5LDzrM
JJ1sh9dDfrQjmdlYuRDXskDNlJroSBCOUye1sd829zgsJjtSdgdAAjOac0Sq
i0TU2cgUovTuPfSOMyoI/Lo866jvZy28piqKgJzTRUu4cviMy55Log8qgcAp
SDoDu7rjvtKOX6apHT3QFRqVaBXA7z+UonbpNLkEN0GWxP6x1ZoqvIRurEQm
9c8fdZNvc7QClluGSQ2cvZ55jHkfbZFAf7qygmdCXVAp+alwUrc1pVwtXb5o
owy5pG2YoKtVi+GxPkqS/XQ49LAuJPF6NTtKjtJzo+Th+ZdvxkGrT6R82BvL
dPaYbMGSl2giIdqcY4obmXHR2046gz1qDUZxqqvFhvHkrRTVsVCtvKpKyhkw
kXLh6hGkeAmZHmIQUaSGUQ9xVH+QxFg2OqrXh7lGOoPsI+yI5SkJU3xQPdvt
tC1oCXZx8pYJL2hK7WvJQPxzGothrdcqX/kWDKZHLvFMz/dHNG4H/aU/o4jU
fazj2F2XZBjprndvGrg2R6lrj4A9wMwYiXsAnYZ9HTrobceFuFYkLdzzHj3o
Mc1Yu4nfAYaDNEn6R0+Djyg/NC9O9KJtz8X+yTf40Lt9HsTf6Pyib+ShfYa+
tD0Tjr7hZ2EkdKeNsssQe4GCp+nSdzB3ED/+LDZNDbrkm4z3/JOIHR9zxrHG
XmEW4OPU1+gVIbQsJ8qbWIAdfR8+1Ts0Xy3MWCzehe+L4feFVPqbzfA67mDE
x+1wSUWxs9WkKDnDItCcEqWl9VU2/hCYJiv7Oyyrgh3L3MBiZEFWkCtNXWDr
PD1jMs4SZ96MJWG1hDWXUhZY6J6wY3TjSI895TLOcSAv2ok32S3U0OtVk70V
npPvxBRsOVNczCzRfSq9M0Vdn9besQoJmIxN/tbyX2xoptxiUfGRawpQZYdL
86g15zwr0taqTr2pLvUbUfoPWgaAOTk71VSHs5iTjsLPgkpuqDccE2dA4ssV
jq+jcmIbF+rKNgXnp0h1WjCkY8xhGXVdjjllJ33r8LzrRolw4DpfAKSg/nPg
eNF4Tn0ltf/u6VGD7rzaHgjH7picBggrVrDzdzmbSDpA5x4eAt+ZLwp9FJQ9
i8VP1CSrU1g8H8s3tRwFDgZ7Jg4RlVTrdjR7sJ4bZcSaM3Wj1kuEo1OQodGR
b2gXZnhaTMkQRkTfWSvj+aCqJa8+5hyCw4kbDIBIud5ItmfrgO90YhlDo86u
HNDnE6mUPFszrOsvEIdGOaCqicy6dRxUYlwcWDMv1mWabZnwSXVVoBfU2mWM
wG0hW/HvAdd9RA9RBwmiQpdA7uDPY4oXYYU5AyluLEmrrUwGNjHLKjJqYyll
qQX5sb+Q83MiYRYJATBgq8UkjOeF2B6HipAWVd0g6CsjD1r8qA098jIIKFbC
KEuvV5UK/SUWpaFys9HXpH5w/QvvHVJfQ/OhGWhEnKHZkQdmKNhqcCEfyZZR
KTR//AHOpX7ZhCCZpRcFmbjVcXQhtJChGi9gr8+OL3naFwFYkWFiC5GFeL2i
XoaXtK/tBkQnDMWotGlJUNNgcQo+8ZEvAkyi7gojxvsm0ejP+Vv/LEk6j9Ln
xJaRSwM9GJ6Tj/2QWnIT5tzCg24T6XhTB5o/mrT4v4JVyEvW5ksP907hObO2
yX11b4iNCtz8HRa2QUkT/g6H9nnH8QS4R9Yb8M3d3dmNA3o3Yknh82IA6QBE
+3AjRxI63ILSu1LeGZG29NJx4RXfw0fg/yireuELG6rjGvat0Y5NNnWplTi3
cVSRUwsb3+SzZeypGtEJGEjS/m+EOVrSBTkjlhUcV/R7SPVG4bS2fnx/uQWb
u4Xd0R/fvXt1+uKM/jw9/+Hs4nKr/e0fiNLBx/Dt8CWudpr3xqt3QTGAVu8H
dqoImd+tqLTPve06p59EU1XRjHb1KO3ZA5LKeGuHvLWdZrRcFM/uXU6f58B/
5g2JjzcA/catsXLf6pKyAXVt7kA2Ey35w2w2BZGiuZmn4pW8m2o4puB4/Xfk
hWBzTH7loNl0ulayJFCbdky689zRKm61tzBRM17WEBB9iJQQkeru7t3JyQUF
pMdT0FoglHAmXNEr9cehW6zZ5ICJnIgHKN17lsEsjZOk9JlMLAJZaTPPF3HL
mERKTv6Ljo6r6VzoKc6iHzUDDzv+wBpyatRzpXEmvdeVP0Upimz+k1xc9rIO
7htERDFii4Fk59W8BT2YxZR2R0ttRGkvo+8950t2qZBqiwxTA7FMZTF4D0Ii
6JbDpKmc1X1Dh769yRsNf29Noc1wZ/ew3MEd04I2vEdmvFTaMscZNsHrUr62
iBELEPz3f/s/AIv++7/9nwP8E09c/2Y8DL94jpylZxiBemPMDXr2RPA9+PLK
1WNeI6JYD8XsvMPsg3vR+KAPZw/8lKnf7sKVuPRO9B4Z6Nhcj6SrkKwnxgPi
Jqhe7UW3RmX7IrQ5PJ4aE3ZS8XMN886Rt3NOte4GyqF+ltEwfbwyi/4tAGt9
d98ORQzFxh46LBZ+6Q0C/ssIR0R3k+ovVXn8UB2IWADu31cFgFBGl9Tl9bJk
OeoLhKwdMitIVw+kNWqbeRIPc4fPxNTMxXGAS8MvVwt2GM+utSaA39nbKlsu
JR6pyuflx971wn9nZR0Jhq47Yhk29RRtequfznKjxg9eriyFzDs6oh2ilPuR
j2NM1cJOi/yWO4muYLlqaqsQa2T7WpBDoIhKnKFfxF7Q644oO/z8XHIyhytJ
ffYlPtlVAiSGV+0cgp3lruEdD+7O0E580ci8A/S6Evle4g4e7z/7/Bk6JM75
yz2S/qlbf0uqMUmRLwQ9b3sDYIJptKVPk5zR2fiKUC7MQxj3B63NA8up702Y
7nvYLtxDubp/81DdO33/gMdkd8JbMKtzSps7MPYKC5fCxJmzisumcwSJgiQy
XZyAR+utxxRBYiK0Ph4TxyafVpHLz0K/paCeJhIzJYmrlvT2KkbJl3bRpxqh
m+yYe+EjzKfM8nNHapeNaUYpOL3M2VRH2p5YG0gxaouPRVUuSM2fMMkvGhVS
MemulKcYN0GnZrpEruRjpRHauq+RrIVYaq9BzFoMYHvn4gh4BQP0MeKiCWOt
G6UW+8SJ0hpOHWNbQSzMVUZhaeJB6tTWsOwdQau+jFDWS6Oj+BnvjGqfat1z
tz1E+yRxBDC+ff3WPSREdIOSNLKFzzgNn17hsKNyr+6+2njnPj9UYPRFm3sn
DYv6NM6XlI7UFHxNDNStwLnGvARMDecamxcWJ3BAPilfZugHMFtrNJP+Hlqb
eDSpGen0jAJkUn0DbzAGEsktlokHuZY0Pmq+V86grSpyQ3YU8qMoSTByDsM2
51By1eFUI5MKKylMYfiGSbiCTZ9Edo83TojkP+KiVLay4JnDmmPP1XjNuW0L
a0TJhb+3m8AlGLY4eX1xlh5bY60HiRIKVi4c4fuRvUcfbZ+xTAPbuHQKsUZh
NGc+fMDEFhSiZvP6sX9eZLfooauDdoGH07Pv1HrnYncYBvtArbaEY9hpa3dj
jte+5k1HwxQijBs1gCBSX3xtxkqNfMr65u0FpVBM7f+dWZ92Ffs1oy8pXcEx
x4IIKiBu6HCEpB1lukJSCJBBFz0GFMmJvuaS9TV3X3nZRXBZV22My4i5WmYU
Qmb3v4G63nQsbPfT1P8sgsrmRaZqxAOJZHCOiLbWjEe+RWYZtOPSHsRsXhWc
LyuXzjbMBkX5ohH3J0G9WCYvQ7fFfOZNt61P1fB+q365aH1HTyUcWXNSwq5k
4w/oPMfuu+hqgAnPmlwdKjzRlpJ7DOiST1oxcZQ9k1KR5xWmTfdusUlsb6KU
SgSmEnLOtL1N1DvCGAkrnFaVncIwvWdwIWFrKlfr0MB7zAeOTKklHJAhtMIU
9bLQjCeYmb0rSZNCUgx6bTWe1Fv1i+uoKeFWCWidMpZTGBRLkPP7UHZMzIN2
geZw2ZnUsGt9MGY2GHRQYo46+FiqzIvh1nLIN+btTJicU7MDccyzjn9Fv0sI
+fMUWKLlUnPQhYgReD6k6WugSBFqQzhpA0UswhPvL01x0ZIqMdtlPiyvh5Yv
0tttRWNaEEPp0reO7domgH5nHEkS558sFFzkDd9VzwRca84U6U1w+E0+I7d8
l39Ui5VwCtIkSkEaDcjBcGLWkg+kW8x3yOnOYcnrGoiy5qui/A1ReAxVBMkk
YRoJ9SHBbWIJbq+LT9IUJ0GZ9XinQrJSTmcwI5QSMmVdmpOO82W1TIN18BaZ
GMoJmS+aMvHnV1Sau5Pq66UUk9YYSFivWNUcoYFdJLAB4oFWJtp2hjS8bJhQ
mD5K9CPU+kffUdUWQ9NBgaU+Blgb1gFosUi641LBc6TsIdqFUDx3KYlg488S
iTbzfdPYoVRII7iREsQdAzc6vCpCloUqrtyurD2yw/myHN8MOd8Y7mFCmpGn
zw6fff7sSuVFMYjWHaepm9JO/WZ3mD7e20uugOjjIGtAABTuE2wyvAccNRrv
S0hLSVlOOHM5VsXjHH7sEKaHTgEUpK9QJ1oWlDmXHp0tZfRgzAIf/qLR3Nt4
duLNFXCMvDU8w+nygqOXUSOOjSHtTVRAIo4Z1+q4bmADiKgEuo8zx8qYzDtz
gi7S3WHZb7hEqkpiHIXJsYixCp7ILq/dJCYCNqVj6gx36k/IxWVacNkx2rpK
+0acHSmCGP02uNiRSH7YW1PlLRHJFzmxuibsiWVTxIwKlEsRlWOcEepKRC1M
aDhHw3ucDad/LzdUZ3VLsMAmNUlJAffWScnGaB2yq7qcEauCpn2SPDQJ8khh
g0sJkZevwsdrceLB43GC4Jd9qRX6zJLs0kilu/arLCZRdkW4NYiitqlyJYL9
uzqkWCX3ByEHOeD+cu1EdhTMPzUcyC0J48wXKSrXxemit3ikraQdKGmp+MRA
IxDNtZ0RkImZMFmQJrlCc1TiCa9c4SjAOWSQQM0RJ9KMcoJxsVdhcbXIL1cX
0IKslkw6jgShIp1NMSv+zLk4RsnjEOnoIhh01e3yCsxycNkMmBTKwSaA6vQ1
Uj0qzsGhqLgNQuVksJDqEdWSIb4P9oiRGIVH/IBQUIxRWyt/RsyUS2QZbxRf
WScE0tEkrnYTinJwvVfLYVOifd9FRFK1oXqeh8S1XlJiju+8SSifh8TYhhCp
wnXO12W2HvLBuvnZKg9gkW8llRq+wZWe4RhF7nz2NKOPeR3SpqHLJLLECvA2
mTIxGTH27G2lHKvcwJZyLGXANPAHkbqJbWqG4HzXQosM4jUNLJ7sFcsMNpbG
jrzBWSKdg/6jhWv1F32vfFKAaYEiZB15fpxzia5ioucNazEeUD0mPxCnTklF
Z6GsEDrFww1l/A3YXZGAQQ7OSJUXmfJCAika9GgAREWVWoG1S6ropIXZZNEa
znJiuTLz9LyuV1jfBzfkJMoAKmVGaYe2T47rnTSaVY8b87Y4H6Cwje71UxJq
U2C7xx+4lLdEUmonzMISoKv8IrmAcKkT1qOqG/UOxVtiBeAJlvHlXHEmSRWy
jjhbbM7e4bh/rbQ5HjBde0uUhlNENef2ycVbVHY/FggCyQb+701ZS95j3Lfj
Fkpund6GK4FvyLcF4BbruC2186V1nm6/Kd/s+Ks8Sl+W7FWLlYwpG1wKbVg5
xFYbViDzvUhcaT6LrFJ+uKPXGPJWU7wSzSbcvTqnYquoownTS4jHBBDXW/yh
WEzauaNl34O3H8yDxiEeIrkXijEXa+CxmKnAGxUs5rh2vz0PCqvS3UFEGRiC
6KnWu+k+fM68ApCG/sIzEZbb7S+u4i/lpjbjutowwrJcJolOgv5JNI8803Ae
DDSKZiPN/DMpMhNNSJr5Z1JKBudk/6QZPGsn5IcJdprBM9/ssasa02dXRbUl
KpA3KJslbkE8KoOCVtn92aruV9ZGtjGAbSKL52pSNl9z7Vmzq7Fp+cf33BgZ
EFXXcGpnTN8m9NM15kaYpiJ4tTPDFdSksdqplQYrUtx+3qR5N4rMkk2f+WXj
pz7kFE0hiJw00pTduQhdsf2kpTMLPpG/ZjmZ9WtYWxJ1FxKA79XBnBxcpxFe
TvpM23d3mw1yn3FIzoFwz6o51FRsARx9zzhwoylS0I94CtgYdKgDO1VRIImj
mU45+Jgx3+r9bnotD7ptV66qLTGE6E1C9nSm5GVDjBYfCk07WHMRshw7rsjS
7GEReLm4EOQmVWJB5lWOXPwT7MzRJWtXvBX7TrwVo6OP71UJdxZPRj5F6JHf
kOZcCmkT6+BGetXnJNL7CcIE5Vr6onMIFnDMpunld6dP9g7aJX9M9i3ELGop
RyraU6RD65Bpj5N0mekJ+pUsUmJjJ0EwQgbm1MkicmiBc8KweSd3Fc48Itmj
yFwjAUHmrqsKUjY5KYD3G7IoSiNWFfaEnhDrS1RzF1UOcdC/iL6cQ6isOuM5
1EM1Fi2vAMfT9+sZ+mY7SkJJW/42q+SoSAlmNUh7DJWkb5fD5RquwOg2A8t3
gJgL4TAKGmCnIfX1rIGuyRPxOzb3fn3+TlM/yRvrovUBksivnowY5rY3fLyT
bHgBH/f4lTrndBcgYGHeWbEwH35PYzjyWveMNXX1ELf7SMoi4b/fcGALsExA
2TF71VBusPtgQ1YtjKbpaf0ttf6MoQMb+uuLGtjQWRy6472HhOFAlkNjTYNe
EqOZWU74QB5BlAfpo2moEXMMCJMMyGI/IPv4wJtERsnL0jw66lw8iuJi1qWk
Apfi4CCwkzLAKXhNN8Hp4UI0HPkJtC3bUcWVmssaR3x9sPbXoVq3HzoIuaQ1
SutxvshAeqwlUQ5q6VQBG7riDMpUrOxC7Fz7e9iG9NrP9jDTsNOXBG2heE60
66iQkwOjKtlwwNK4DhFoeN9AhsbGVKc72nidw1ObAjsduim0DsKrULGbOC2/
xDph14BnyKkHZS2iPSHt1EJCm7D49mKK1RiE6Dg3fMlyQYoZSRWIzIFllMJx
CAcx1syIlRBrKIdDUlJyShAyYBLpTtyCtr3di9TWJuqiRIb0QZ7DfMJ2Hdp2
iSUibFdNKgvN4tV3YhxV9b1nbePAfpucl4cZKYsS5AOrf0k1wEH0sLk3BdpU
LFzTytHhoFqJpwIOk8p8IMBoji3K+WskOZdKSLBm0pRdz/JPhSRu0oCzgoqU
E8kt5qJviG7lVYXpGnvvpqRw82Kti5iFK1RxwYf6Phxg5ck7KXLJpQVTs5ec
gDMsk66ljBQ4wYHXyA86vr7QkdTFnpjZf/PMSJuG2dLR7TNwDeo18R3XmEfO
BJOlWqIwRBurmqu4iN4uJO8Vb1H1NX2AFcclAhaj0Wfv7PlF00p8VZjerfjw
jq3NWFS5fIDOio6w0KPjEvTDLgGSQJz4O6Eo6akYYPwgwW7UEkYofX27OpBa
L88tQ5fkSkSyN6CrzkHclByIWs/YqgygiyFkogkJ42M3LKYM4koFqukdRPmG
UNurzgzXYu/DSk++O/Ivr3JC1u7TbAZXc2IafOlmYFa3eljQHhJzKVpVj/nU
c7K29GZ0+Xi7Xwiw6VafE6C1Q7MjuCS/MBLefsT/CZSb9oGFRr2OLL7rIgVy
BWzVzPmOiZPwASJzIkD47ZZPQ5rq3ETUgQSACRHT8yXn7Y0dmBYuKuuORr0l
l4e2NOgdhZ2mQeCtxYeaSDDczFDRRi9QUIRIGoS2TNHKkWeAEWl3O98JxGsU
UCQcGopZShVsRTa07bTTL7MlzeeY3DjP5MsHbLyS6aGQafIDrXdBtsU4usU9
r//ug0LEJ5n13Hm12IW/5thc8STn7EG0Qq6aMkbEL5I+xyLYImwvxJvtUkrY
BroWS3RGjMt9W+S2huTaVdFkZGl2R3fBAv3fcWasEug9L3n1n3RWJlaLUuKv
PLS/eYt1VQ/Z3jdWVPjCs20P2GbJdiKMrfYSM3/qT19LKDGxkPfs671b6uof
Lya7oiTZNDKQGPSfFH62fTiay4TmpbEKdBTR5oC4LTTiC3sRXL8c10LXCbqw
hbMOhy8Xq+ZERGHmvvnyOPQtSPFeZSGdhwSYwJOnTx89O0jNiBw+cxmheH6k
W0peXzdULAS1RTifRTfDQtNyNiW3uKriJEHi/OzdZ0i7ZOo/reEjmwvz2SVS
+ibsAyafJr0EGUtApD5RWkstOaOX+EN4bpO9+Qbpy+MTEVpE/oNf0iOQHdS+
4n3QpVCfr969eOGPgrtVtZTPr2z4D31owhcDLnqEt5AmIH9pJaSFTsWnKj2e
zTy3FW4+pmJ36gHiOggbI1YOZSmwHe/lxotEgS9sjRx4aZjKoMIs1UahZTws
u6XhvnupNE2EUQ9O+JcLGGpfKHT4XB2Gv9CN9WCU55cz2bTQI9lpENpcWRit
zsRQsERESZXVV5HbNevEJTGZ2wpn3aTUswS4GYtPD8RQjExYTuzdUX9ofncY
DxDBUZuxA1s6qPDloMtYxkVMjLJP2OzSvWQhAoTdoxjbCcgv0q1j5+/xxlQt
J5HgvsVCVdDQsHfHpKjHKzY4I9Llsmys8tmoS2KdCddwZ4FvFCNZNJ14od/Q
i6VAdf5F3oHEIk4W+bTUgsQm56LkfY3IcpD60UzCkt0l/j9TjZibt2XwihGT
mRIpxDrcUY/Ol1RIK8JvnyWjmWZ6k9EDogkVSufc1EIZKOFXaLfQ1OhzJnn1
DXIKJqiROyEKWjZ/P2PelI2GNUdoesiTD+PUuOfIgTUOGsL6OuapqYEsDKx9
8bFSTvvhrEivqSzdlniiHdXbP4S7y+7l7frtytf3c3Rk++HV/mO+TuNKbfcu
MmtiRsoblBqDIS2EOskNjcC+ILpHvwf4EyNk4tK6XOuUWFRs06oT4ghCDxLy
F9T2SmsGEjDC+mHBd3fQdTGJNISZyxGoc0DA0FXh3faLkqm/dxS1zTmJF7tG
vMdax3aJr82LZZsO60zYmKoq0GLxsZx9dOXFfOzIhvToqny5qaiyoNoDEGvg
FLhyX2iuCVBb7bHi3+jx3rPI2egGcAbm5lwTOcFzoRvA5j/lXO6hHShboBI1
+Cg35YBSBpBSYDJEiI1Ct+mEuju3kVdoDYgpg7BvdtGmehRuIyQ3UOm8MwcS
UzArrvPxeiwHQqFMcKxW9IbQW1ssyqJNtuwVD5spu4TaVOvoDGzfxU+P5DrL
giKuicR3eYonmMC4wJ4VZDT7zkEHBKzI42wxKauacX8biVxYFDG5HKhV0jst
tO9V6zhjMcTnT9XtwZPLwxz8yRn7P7GUkpRTgA/FfdS+fc5MM2CX2Kz3lrJV
hIMV0++B9twsYLuRqxFXsPjeAydO3uDA7GAE8/Bav8Do0mAHCz4Rjiu0thJ4
JndUPXVB9hznXt1MD7DfKJSIS4Bp96ra7M3ZYRUklS+zGQjrdXx5MTp26Xhb
RpdIMrqHvjHXGDoP0/Nzrb0LAzMJvUtXFHwPk8o02vAmfV7H4sb5teugXUNV
PggcNKHY+8gQHyOVbWn1IqAjPn1vXS7gfqW3V2gbT8/RdRsTaVxGmVhMCBcH
M5skkXThKETJSaptVZ+7BBMrZCnIPuXPVbJEa7Whls0Mww8FwiwhrWdrKC0/
ief/4YNHnJQ1CYF6ZqoT77KH9EnhzOuwnngMZ8JkL3Ta87h3STXL9gJhWS1Z
KcorrVO+LyWepUjZLCm3DJfh4pBqCDE8TkM0dsIUb6nFUg1ZQs/VJZxc2WcY
qDvJtSq0W/bWcraaTpFZ3eJZW1UqOvxgrm9VJS4qTQYx2lCUfDuq9LYDHZbo
ZKVByFGRAzicVkGf7XYpnx0/61wd36WCn8tb3ASbvlbDuzw7exMKqwcbta7p
y4hP1t4vnA/CojIQTeeiLFB1bRyVf/L6+I3unCh7SUt1hVEtvrZxZ0qbsJZT
Hj9Mk/A987sDkT44zAutqRrfz7WAtOCfuVKqbuFenSNul/VVx+JTO9uy8N+u
edFT9NBvBc3lARvhurx/L9DOd0kjBqPgKfsLXKhtX+x/aoOntOjFMnORMbnm
ub+SAgTq5GMIQcIXubgRtvB+MGblv/SB3FNYF4k95hsU4x4Uz6N9gW8pDN/G
6Pp4RC4FuO6OObuorVOMk7lpmmV9tLt7e3s7qq7Hw3xSYG65spruwk/8/8vv
Tregs5/+96YcXuVDSZP2c/fJESmZz6iDo3SJXruUNYGcmbkjvUgwMrYVgY91
P9gJv0LuEEb8Cxtk078EW3jYn7/Aa1TH75L98y9i0RMPUFJNWBMzE0Gz05aH
DVmcMk2hVcc9PKQDNav0fxiZT2gh/YaJ7tctPfhfvFK10zro8qDhpb81nFiL
783ZxcHjJwP4z6Onh7Tms4vH+wf/4BUU1Jz0EpYRFt06cIw+Zcw70hi13onn
K/cleUdIQxHOXgEQ+/2DFz26OhDo3WWnYQGumChtJK+eaDvuU4NwaAmwlaRl
ddnkGeVhvw1561EIM3tu4BTPvGDzFwneV38PLfq7KHtlGZg4dvGKqPxfKMn6
LRYzn8K34nHCHEC0CtLKkdqBDUgaPUSgwVQS+4y8zgrxxpHCdrw0yeBwJX8a
Q+MKxHIfrG8OHMkoPaYMBZE3FPklD2K8bG7pXAqJ6h0tWiwjuqg4jhGWcXeU
fuWw19DwXNHM8udbPdi6iwO2MJoj4OJ2jF1UWUTSDmBwcnaFiMYFGLhvDDPa
6UVV5Bjp8tKE8GlIPSFXyalcUtlLSVnoAZ7zO2gP90sMNCp5xbCcjB/WM7KR
IKp3SViIL6FFRUsuahN880nvKqnj/o3wGxDrsShEC27KtpfEMZoOWtF1FCdF
g+M+dUJh9UqLhe5XZoVV/JZtMBsFoI1h/dqL2cTT1GXfOExyTAizdE3iQ3aa
U3RYIeWyI6RF7CnmKK0A+cX6o3ZPkcovODFl9UNZEo484vsWbnrwS8vje51+
gn+c0ZV+ruEf8UCBgpE9zVKioCt6eveV+iDQhWIHUZAD4MZm5N0xc3NnGwt+
N2rJtOr2U5MyiLzxMS6C8TaOozm7JapGPe7pGd6m/NOSDAd0glI2kEBUM4AD
FpG0gmi23mEiIMyffIyMkALxbK3NKboAPjBmmIagSSlj1a7P65IBmGqAss3R
BuKX5LQanIaThJ5qpTYlRqIxaEV8deu5iSzBLtCtneU+6jBs12G59YGK6ai3
mebRgjjoWGv/kBZzbfUX49A04MvjzH4k7cAAlH0AU+TEtZ3VOS5M61xrALHb
bBBMOcEtcR7WhR1FiKlTS2hZhar3i3pTvWPZ6+CjJwFWCHh0NpIASuNt6GHM
c7v1KqxIOKiM0V3jA69BFu1l+ypQgVY+J0roKNOJ3d1YUzzXAB3UMGsGBbmd
tpmWdh/lrHpHC79WUbJHtR8VIRQvFAXz8xtIRo0snRefsPuRQLulXvR0zeWA
ZV/wR8/QNoyz9670Pi+lhIwlXzlMdYoAhqn160SVrcibrUJ+EZauoxA/HO7J
/h50f7xcAj9WfEpPBx6t5jNWk5DCj/zo3UCACqMcIQmlchoWzF0xERtnM8MR
rSQ87IofEhK1suXE6XxcFhO7mkTOxZ7+bI/3iBCJQi6tOpuq4CRgFOcrZcMW
4UyBm9dqSslaacZFfUG7gKQRN3ZrsRjx/41GKPe9W8woSQB5iJO3uyWuH2Da
lNq0n8SQvz2nCXYOheIBJBcZfkD2DTcbQfWWkol6anNS6krR6f7Rs6dPKKA1
xFfZyVE01P42/LmTJK4ihkQSt8KABhTs8y20jJ9r+Z1RlU9hL9Ktn46H/yMb
/nlv+OyX4c+/2ZIIak75Il1T7BH8HKT/ig+/lWgkbhD3tv3T3vDg553t7f/5
P0d7O3/B//y0P3z2Mzx+9vOvd3Z+7QbADDM8AE/4X/HBt1g4MlsORfM0lI16
nq5wD0aAvJ48fvzosQYtIfgTiJy34gTgCuAkJXzgM5d1cQ5sCmrsvGDXbRDu
2xmIWAtLEk3SQhK8qZnocoWRKvd4hwZqBYVS4NVwaMJRJ0AT2lBOM9fGgnXr
9BWmTyjGpxR8UccJRTVm5aAV4jOCLhkkh2VFe93fN7ugvq4QTv+avls9MqBH
QPzrFCGkf9RMLy/zYXglbnM0ztboxclFTSYlJk4fYlYL9OSHq8nCgvJON+z5
n27tjw5GB4/3RvtbOzyDgwP04hHMRCelaQG2ENy+3fLlBcgLlZQ7dUhYIyST
9XOs2OZ8PhZmy/Tu0uLBs2q6UvnVWEWtDGU5+ySQuHBMkAQMISS/IP4u4Xg5
rPrADN9Aid0/5mv9MXzFwZ3kWqUljjkTg4QPcN47ysDWU3/Mk2JBXJ0yVoqG
33PwcEirw/UwUZn+40lK+0mrsQBXnwQRtYPM6JGrtaSEC+OGQsbmmdq+y1w4
SU1nISuxaUhZBaXHySzYQt2C5t3wJTzVvFm3Qpc0mVuIyPGhNjUBFFFbL3Xw
tN9k6xlGRPET6igwZXlgG1EkOWmZYrIJ7zUbG7KoMpgUoqADF37r7g57/gUW
9guwbzipLm+7lOkIa0/ulhLg0rAr4ExT+7oKMGEHAm8eQ7sAQkcT33s5+IbC
ffs2voIRzWuvxe3dinzCiRMR1YvwxSFFeSuQv478ed0uhsAuxth0/nX/tO2q
0sx10iy1OeWclmpXy3a3fij5CKPqm/TGjFkyqdZAmy6aF1lBQSoOScO6Id2q
8pRDk/J8ETkxPqKBP2T/CpUZpSrjfzEXD2AuNibJoYDsbdIshgw5/JNw7276
U3rwa//kZ9hQ91PmROuqAWel2/t7o9E3hzsDic7mh09HoyeHO9/eM5PtVV5M
whzoF44Aw9nfPFr7kHTcg9Ho8HAnjQf+ZjR69AgHvqf2HHTvSs/Jbxnb/YLR
OTg+BMbbzJLP94xAH5X53K+Pfy6pjiP/XeR5bj8quCrlPIEJhIbPkdroA2pN
2xF+DxHSBq67IYbGf5u0HljgPO3Qo6TVQTcEX1oe6tg8OT86P4nGl0d+Bu5R
PIf9J0mnn43TODi8B4pks29AqLwF/IGZrtDXK+x75w2dHuxz7wtLpSAPpY49
Zz34bVqPb/J5Dg9/pR/xE0xwcD802GgUE90zPX7emVx4fO9dOKSrsCE5A/7D
tBe13Ry4Iwf33pG0vh1i9o0wUboBO/ddq9vu5rtner1uH7LfX9ju9N79Bsga
YkLmMA34Nbtv6kCFrlZTrCzXrBxiiJ5q4rDuw+cp4AvOfD7ZkNkLVREPeD2s
URFLk/9SS2Au59mClatfaIrekushXDT/ESwkTLrvn6T3kiZbg3QPqI+to/+f
fKOt4KN995Ff3eaPXCvJYda75s3fu1aS3ez+nUif9+dpg39xx71fwxCYGW0z
bKnTUAAreyJXIvptNAdT5qInEdFn0jLx7Ubfnt4XvzXno543mK8M8yts/Ga4
uclNnpFSrPMCmDgAhc7jkIwaXv2rcmg24JTmhwwL0lBbZvs89YVPLofQFNbf
/kBfuC8QfGxX2h/oCz8CgovtROcDedFOi9ezh/EIQ/clJsjTHe2MIC/8AOkT
+IB3Ou1+QC+i5mn6DXwQzqD1gb1wHz3FNUzzNP6na5jmrf7T9Nm9EL9a0pkH
zo6Z8s0UnJB1DQtxGDtw8PchbvqSqhQ+eLj/yhL5/5EskV9gmCazMnO0+Cdg
wvGRyCTII4WfykTgk190fdWRTwUe3oM426Dc9Av1LbWbBTlRA5d21Le5l+f4
a7KQf2Hh5soZOguPlD+Mn+AG/MZaiVT4c2gV5ETeJxUf8dsj+t2RKQdRQ352
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

-->

</rfc>
