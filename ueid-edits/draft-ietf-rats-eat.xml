<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="10"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-17.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="1" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-17"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AqGsiLS6SMqS5bUns0YpKbOUbVseS253
v5qKDIgEKZRJgA2Aklme7N/+zn7PBUDZ3T0T8SLeOCoqRQB3P/fsy3g8Tpo2
K2e/ZcuqzF+lbb3Jk2Jd019Ne/T48cvHR8k0a1+lTTtLklk1LbMVfDirs3k7
LvJ2Pq6zthnnWTteZm3etElyv3iVvj+5vko/VvWnolykv9TVZp18l06rssnL
ZtO8Sr/f5s338KjZ3KyKpimqst2uod+L8+ufk3XxKknTtprqd/Rjlq/bW3hy
jL+bqm7rfN6EL5rtKn4wrVbrbNq6LzY34VlZ4aN6Ps1nTbtd5vpZW7T44/o2
T89L+LFNT1pcVtbCHNPr6lNepo/OT673k+zmps7vXqXwI8nqPIPJl21el3mb
fLqH/SoWJS4+c82nN1UNi57BRr1Kjx4fPhkfPk6yTXtb1a+ScVqUMP3Xk/T1
ppzdLLNZDjPk7X6dbeq8nObRq6qGjb7Kp5sapwkzrupt+vr1KbzKV1mxfJUu
F8v/3sgHLb2fwA7oSL9M0jdw9ttsZeP8UtTF7Dar3Qsa5X9ssiW0XKXX+fS2
rJbVosgbWO90gvsKJ5HDnj59/vxp+qaq89tq0+TpWV3c4TSnMDjMMyvTsyJf
VLjr+QJ241V6mi2LeVWXRUbHtSnbGr78cHUCP9e3BJB7fzxMXzx9kT57epg+
B3DcC4tb8RT/+7+1xeTfZH5+eb9O0svvz6qyWtxuwk7+mtf5ahu/+fYlHj1/
mf6c1SWcY7VZ3Kbvq2xmS3QvaD0z3NAPh8fp89dX0QLLos1n6T8BdMyqVVjr
H4+P08Ojp0fpk2dPDl+8DCv9WzWjyfaXmpRVvQLYusvxxrz/+fTo8PCl/Pn8
8Kn9+fTwafjzmfz54uWxfQDDhg+ehz/tgxePH2uzwyPr4fD5sf755KX28OLZ
oX37/Fg7e/LyRWhmo70EBPMqgb8//nL1gvqCu57VC9zsvdu2XTevDg7yrG5v
x0U5ryblIpusiuXB+nZ9MKvuyyUcwAR+/GleLPMfplVVz8b3i+bF8R53xbf5
4+X712fpL+eXZ+fXF6fp1b9eXZ+/SQ9fvjgepW9/OZlcXb89mzx+/OTZb4eT
x5PHv9FkqAO9nPj3mAHlLd3lbJn+klfNGn5kyzHe/OWyWNAdPcH/bNNH0PM+
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
2A9qh5xm5pALZM/jVY32oHaW23M9ENhF0dFcakE2W/NF567RRSi0u+oJZxLf
xjcyDv9NFRc4kcdets+DmHq6tpsbuku5njAqnaLso7w6qdiybvJcPHGeSldG
f2S7y9eyWZcGXFT0ZUvSMGo/Jn3JKEOES+CMCbeOAQjS1SMTxZNgEDinAZWI
ZbcGp2UlODmtKlpy8O/p15GVM21+eAo6cgomuIV9DWbAjNI028jMFpVTWVov
XDWsyEM1KpypgVyZXpnaTwVuWudGbC2xy3tIImOThvYhxYkv9ksToNIOKy1F
zbc0CFsmF4ntkdtAf1e2YKJzESQ7bXmrVUVlA67fUubWNWUHtUK3RCYidzPh
pD6anglWWepWKyvb/EZG5sKjYZjLg1xmLoy5HzY5S3lYxvZTLOLkN1o94oB4
8+Ym0921G1NqspcpdaWVo4hQ1YwzBkkFWqkGBbwMd4N3o9iI9z9zRC/VKJmr
SAnDaG0cVrmtKwJeVH1sLqkqoo5tp4NhoXbnHvnPEVWaZw56s6/ym/0I/TjQ
QObvbceo+6ZHOItHZOZy4JbgzA9a9iuLwQCBPXLZJPykiGQf+afHZ48xDrcS
zVIXnz69WMaL0yNoBfd3fZhiHsu6/+5dDmTfvfO8/1iMs+Vfi/uCBaqqtwVh
4c0ioTDDuX/MAf/0cWmjyIKPvbiguWU7wm7vj9yPnRd+hivPqpd+Fl8m1l3f
1y9L6xZHhJ1X3t+68sto+Yev+BvVAbw4frbt0N1vthw2O1PcAvhmuYNdDpoj
pylZyr9uB56hd0f1DtCrYoVOE75UsR/qK7IDKgi7w38L2Df7IHlM74AF+cqk
E6aTqtgH9VrYZSd627EiZU/44+8/q7sO0nRdvfzTqpIzpBlE6sd6tUqkIJ49
+V0Ie+G29cIU5nG0+MNXfETKzDPSmN6xZFGrohmBGoF4iUIcWmUrVqyuScUV
t7etWJMjoWLjXwPxT4Vz2E7qzmOtqmaCqKrWaryqdgLyzn8rwpfqTreftS3p
qGlpNBlG1fJdH7GddqC7dQcwGRsAwAsmRX/sXbfJvySzyHY4UElEEhXmc4dV
MwHsBbfTdmznfX5fgEAZ8zVZr0Yq9ajua++4KEFB2+cvXvt5gWvt5PBu+qbI
B7LrjgFOzAhU/+JG5I79W1GusW9UH4H1SfglVw3eaLk5ObypL0Ep0eR4tmBj
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
/tI3wxyPAgA=

-->

</rfc>
