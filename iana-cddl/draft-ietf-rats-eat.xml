<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="January" day="06"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 172?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 182?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is “JWT”, “CBOR”, “BUNDLE” or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always “JWT”, “BUNDLE” or a new name standardized outside this document for a further type (e.g., “UCCS”).
This string name may also be “CBOR” to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): byte string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): byte string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="23" month="October" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="20" month="October" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-07"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="27" month="November" year="2023"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-07"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="7" month="November" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-05"/>
        </reference>
      </references>
    </references>
    <?line 2596?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-24">
        <name>From draft-ietf-rats-eat-24</name>
        <ul spacing="normal">
          <li>
            <t>Use only CDDL definition names for "Claim Value Type" column in CWT claim registry</t>
          </li>
          <li>
            <t>Correct the "Claim Value Type" for some claims</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3597?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963bbVpYw+J9PgVFqrUhVJC1ZsmO7O6lSJCVR2re25E73
ly+TAkmIRJkE2ABomaVyr36NWWtmrXmWeZR+ktn3sw8Ayq6qr+fXeHVXRODg
XPfZ98toNBq8f5YcDwZN3iyzZ8n1IksuCvixTU6bJqubtMnLIrku32VFsn9x
en0wSCeTKoOP4MdgVk6LdAXfzar0phnlWXMzqtKmHmVpM1qm2MFgmjbPkrqZ
DQbTsqizot7Uz5Km2mSDuqmydPUsuby4/m6Qryt6XDcPDw+fHj4cpPDyWXKV
TTcVTGdwO3+WvDm9vhq8u4Xu8nmRF/MkdXOcTspqMFjnzwZJ0pTTZ8mX26z+
kn/MsnWzgCcn+LsuKxj4pg4t6u0qfjAtV+t02rgWm0l4VpT4qLqZZrO62eK2
cTP4l26aRVk9G4ySvID+no+T55tiNlmmsww+4b16nm6qrJhm0auymofF4jGU
1TZ5/vwMXmWrNF8+S5bz5R9qadDQ+zFMSUf6fpy8SIvZNl3ZON/nVT5bpJV7
QaP88yZdwper5DqbLopyWc7zrE4ui+kYFwpbk8EiH3311aPkRVlli3JTZ8l5
lb/HaU5hcJhnWiTneTYvcRuyOez+s+QsXeY3ZVXkKe3fpmgqaPn26hR+rhdl
ARPa+91R8uTRk+Txo6PkKzjlvbC4FU/xD//e5ON/l/n55f04Tl59eV4W5Xyx
CTv5Y1Zlq2385vOX+PCrp8l3aVUA3JSb+SJ5U6YzW6J7QeuZ4Ya+PTpJvnp+
FS2wyJtslvwTQOOsXIW1/u7kJDl6+Ohhcvz4+OjJ07DSP5UzmuzOpZ6Nk5/S
5TKdhnWepdXSPaQlvoFRf4BZzJKr8qa5hdsy1AXKSFP46g9VNltgq1oa0Uh4
E5sqn2wahlUe5YeseJd8m1fvFuXyzzrMd1W6KRblTVYlV5fX8FSvf+eFjLqA
XsYT6eUPdd6Mb6zlGEBdR7telKu0Tr4r6xrurw53Wq2S5/kK9zR02VDT8Q03
/UNa6X5xTy/y+SZbJt/C/gAyyKqydq+mixTevcH/VrAJhV01ALhsCWBn25f8
VFbvageS0+p3iND+UGvT8TS1nl+nsIHTd8lbmGp1m//pXRgzbRY5rOzbCudb
zcL+pkUBUHhdT3Ezinx+76IX1HrcWOvOul+nm2VyVpW3y2w7GBRltYLdeZ8h
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
NuTBRV1mfvxCMOHqxZIp0PAMRZOm2g5ZCSGSKCnOusoNvZiwccjbx3O1yQyd
9yvPhCS++7f+lgzfEY/9vgTw9cy3O0gnIiM0qABNSKqO9lVkarXf8wWSh7HH
thfLie5U7ERlZ1/o9htbz7KeShhJ0p6Jefc3OeJyQsci9eNNp2toCmocFPn5
YjQvy5nMcZjMyyV03zo3NBmVFMFt7VA9QUk5OIYGMVvtToIjNGSFObrV0Nwx
nUbOSkKYOcyAzqGjkljl80XDXk3wmg+eNd9OKUWuGSXvWhgHAb6YlVVNc9ez
IdxKoQDszkC4BJ1aqGX38IOdjzXSCjlf1kF1na7Z5INkXFGfUYblUlhE4h70
tkhWnM8mD8LNmtkUSAJH2F+V03dMuYIDEzmemOV8slVNTp9NNZO45H4HNxzs
F5r5z5Ik4hcS4sr16Hn2PluKH3Aw9ZJzy97F6fUe4fjC3J/3g/vCgbntkrjJ
eC8onHJeA+pZbzgu0JxtTRsKlIa99skkzlp1EoXS5W26rZVIRx+PO6KE08fL
d2lMun3PZCn0NmDxdVbwUK95BDxvwVfzsaj44hmg9UridcJ1REzKQobcVOX0
2oFMfMQrBlZS1pNY0zXeUTBCUwIwJpmqhMwa4W1FesGIoSlY8WlWd1hVrctC
t6N4mBb1swGnaVWZfYMmGWnLkRsQ9c1k64x/qmShQ/zh+vo1OhcgNzK6xreA
qJezA+pLIjtanTULzhS0YdAilg6THcSuTjf5B4rd07uSTjETTBw307mjpCEz
Y3qhpiAC6WFsjsX9nWyKGbAI4v15fvHtx48HahtZAI5FqHNoAuXZrjVXYuSK
YAu2SJPYEyGC0ACTis9W48F5d3JGh0S68Z5FeoMFuG7MxT4gExUCACssCSv8
8TfQ9wh7GV2n83k2GxGe+OPQv3kLV9S9o9nzaxyWn44ohqqp/wgQg3iu1m1U
uft4/NRJ17CvILJOSAi92ZB6gK39zAIof2dmVTSRoEOGBALwvi43c9rUkkI2
YReI9DDtrzObCCGF0JmwTZgfzcWWpoIQXt34ICMELXNt5QkSyMfnCuA5yyuU
O6IzJXapi3TogLFjDn1E7IliUu3iKoRLLR1KQmcJVPahhSKExkrmAthmzAPA
Dr4tv+RczGgi1kc6kZfkf8EHyM7uZHsXS2ojHhrqj+9AOmfHBo6KbdypaOy4
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
HHeHYD3PTA1jkY+xroo4z3Z1HOU9yFucTHrP4VEDlH5I1iz5M13qwxRzXKXT
bXg2Co8WWTrT9IQgP2azYASMcifi+D8dnyXfZ6Wt/vT1ZXJ3B0/H8BR24uPH
wT7NlpOXAh9HropW6RDafn/15OTjxwPNwuG02LKwtJJa2zoxePUyfZns3yxL
4hJH6zIvyKdvlI6kPGLYAlqH7ULbEVhLCo+VO2DhwKyCWlYFzQQFOTMOA1WU
SmPC5tkmGAtKGHbK2e85BQTxrZSyhYL7JtlNqUnjB5onpit7c1WS0OUqLzYN
GyGAT6tqDf0aBCq5TDUjrsbFpcn3L6+ukhqrvwM2BabgIhejeEazge1eIQM3
QJt5qF8lWhb1xALZNUQJytp4VeOEGGvrahD6YI2eFIVJSWynCtej4LKVYzqY
GATQARNI7BTdGjXmi3+QnzIZEDeNRCtZbWwpIGPLYrn+PXorazUPvDjo2R/f
MDs/9XDnjOeWvoc+m1sqfaWGwU5yLQ04IUOdwfZTUVUMVdHOR6p/2xE4Q/pl
bbw7XubT1M0GNMJmT0TvH/22SJelXhtM/8eZ0/i53aDWi98bDul5I0hl9zej
3U30undeMFLqPA4wDK/+A3+N4OhtwDnNb4OeY4CIbZltiqIvAMXbP6RnYf3t
D/SF+wIJmO1K+wN94UdAgmU70flAXvgPTtwIbg/jEUbuy0fwge5oZwR54QdI
HsMHvNNJ9wN6ETVPkq/gg3AGrQ/shfvoCa5hniXxP13DPGv1nyRPE5ekK9ms
6Xrvv6X/xiZEftcxEpPB3nxn5IYmwdca7uYa8VxH2vCqfErYSviVZZDPy1xG
E3K5ywAOD9xisCvSvCb7KEIlZ/h3vCZr0mP75k8FkfEK+Sx2LgKxJhETWURy
1S5vwMoY0+YR8cJEGRT/2pTkWlWq3oQNTZ+xEWSHoenevxk1Qh7vBeDPWXcr
sEGfFwCXY6TAHYprEzsEMaASUR9MHN7pUUhBnLaTEw4T1xVCm6mvOqstIDxS
BmtiEs7cB2eTVZSXnjKkqHqap0muJhvyu2WluDqgUK4JBNBKQpN7E7Agv6Lx
uKIykk9o95wjgJYJqyVFUro7SunzgjtdcJaEYuqZ/B1ES6ADe3Gmuhw5wBEy
E7HFDri/Otk/x2wmQNyfZ00j7muna+TqUuf5Sm3NeIc/7gugv6dLGO/5q1MK
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
j2aznYyO2oIPeFaDhasd16R854wtD4fsyege0sA2BKDDtH2EO/5BcHZ9+PK6
dxZeXT4JZ/3PycWnxvVV/Xz+5NX15/3eUW9/8uri5/OPg97lk6fH9OTTp1+f
vH7vHPafjBbrJ68Pj/b3P+/v31y8672ODuD74dXkxdfnnw734e+fZ5cnF6cX
l/3n3tVVM6q++Xh23lp+OX0y7AdvPl28d16FjV8+jX+p/tx8PX8y//m03//Y
efbp8mr59vWr8PX69uXxu6A6efbzSfBLd/T8C0x1mk72w+qLm/nT068vb6tv
b6fvnWqrPbh5Nv60ipbx196rg4aXtj72lu2Twdmb4NfbZ+Mvx6tfn4xu44YX
p4/Vzn3QO/c8ma6+uHIAGzdePS9u/GogxZSe5Xb82eV5ZsPj9bN6/EsveZk8
+/mN9zp53n92PXgS4ffji6/H3knyrFuDl+ZR8IJeen5xVB8+efN1+N558mZ9
nNwm4eVR/fjT7MvJp4svJ1+j+suDtw3oZhw/hW4nTW/w5DY9nhx57/rHrePk
OD2ennhvE/wbun7vXH26bUyPXlw/nz+7WL365ebFq68/e09efLpeP/vVv7n8
5cpreK1ffk6/3r7esa9uJsKByg3pO5tNGgMCexJRUnr5vcQaCU+rYldko6AY
AbTN+bB/cNYzlcdKUr9QwbViR2IMpFLfMhhzBeMaOiFZcZhcrgMvDFaTRRKn
7IFEW4TgkAsTrtYjhbzT8nZdr7Mrh3z9oOfVPb/14I48Gu7DQiWpVOn2v32/
u2E8mWPV52mxA3Goggn49f1Gq+43eq39erfdOTis9xpd9Lao+/Wg3qg36616
u97hKVrxw9K+u9/d94+ah402OnwdtaC/fqfX8Jrt/Wa7FRz1G839w3ZTMazd
XjOgZAZNr91udfq+1zs62u80mr1mq7ffbLYPoXm3rfjTXh3Y1XbQ9fxG0Gt3
+412p9nyD6B5y/MPQV7vt3zfaympvbfvB0G7035wx66Y3dHVRXE3Prh7rh1R
jLhO05aS1FmSkAxTuRUTV1WMEYfBKmdDphAc285M4TjMgunusmmsss2JF2Tu
aozhlmNViiwyxZqt7EsmVxfznso4zGUEmSZaw2HPozgeCihLsUHpVgUP1bio
HtaqRIZUkVijtOSV5U3nOvbISgmmqpUsr1epusqUdooIUqFpzTkT5/DYOsMI
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

-->

</rfc>
