<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="December" day="19"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
        <dt>Socket Group:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID <bcp14>MUST</bcp14> treat a UEID as a
completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte <bcp14>MUST</bcp14> be treated as part of the opaque UEID and <bcp14>MUST NOT</bcp14> be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this <bcp14>MUST</bcp14> be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy <bcp14>MUST</bcp14> conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity <bcp14>MUST</bcp14> still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs attestation results with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standaridized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
The EAT format, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but <bcp14>MUST NOT</bcp14> be a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, even slight modifications, such as the use of a different means of key identification, are a divergence from this profile and require allocation of a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this section and adding requirements.
Such a profile <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferrably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and it's description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authortised Boot</li>
          <li>Claim Description: Indicate whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicate status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="media-types-registered-by-this-document">
        <name>Media Types Registered by this Document</name>
        <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
        <ul spacing="normal">
          <li>Media Type: application/spdx+json</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="SPDX"/></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Media Type: vendor/vnd.cyclonedx+xml</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="CycloneDX"/></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Media Type: vendor/vnd.cyclonedx+json</li>
          <li>Encoding: binary</li>
          <li>ID: TBD</li>
          <li>Reference: <xref target="CycloneDX"/></li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/cwt" type="TXT"/>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/jwt" type="TXT"/>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/cose" type="TXT"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/cbor-tags" type="TXT"/>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="https://www.iana.org/assignments/core-parameters">
          <front>
            <title>Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/core-parameters" type="TXT"/>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="9" month="November" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-21"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://dx.doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="http://dx.doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="19" month="October" year="2022"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-01"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-18">
        <name>From draft-ietf-rats-eat-18</name>
        <ul spacing="normal">
          <li>Update IANA section, particularly CWT and JWT claims to be registered</li>
          <li>Remove sentence discussing pass through of claims about the token in section 4.3</li>
          <li>Add paragraph to appendix D noting that the "iat" claim is ~time-int</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PkRpIg+B2/Ake1mcjuzOSjWM9ZqZsiKTU19doiqzWz
OpkGzAST6MoEcgBksbKra2x/yJ7Z/Zb7KftLzt/hASBZ1dMza3dmWzbTYgKB
eHh4ePjbx+Nx8v5Z+iBJ2qJd5M/Sq9s8PS/hxyY9adu8abO2qMr0qnqXl+nu
+cnVXpJdX9c5fAQ/klk1LbMlfDers5t2XOTtzbjO2macZ+14kWEHyTRrn6VN
O0uSaVU2edmsm2dpW6/zpGnrPFs+Sy/Or75PilVNj5v26ODg6cFRksHLZ+ll
Pl3XMJ3kbv4sfXNydZm8u4PuinlZlPM0c3OcXld1kqyKZ0mattX0Wfr1Jm++
5h+zfNXewpNj/N1UNQx804QWzWYZP5hWy1U2bV2L9XV4Vlb4qL6Z5rOm3SDY
uBn8y9btbVU/S8ZpUUJ/zyfp83U5u15ksxw+YVg9z9Z1Xk7z6FVVz8NicRuq
epM+f34Kr/JlViyepYv54g+NNGjp/QSmpCP9MElfZOVsky1tnB+KupjdZrV7
QaP813W2gC+X6VU+vS2rRTUv8ia9KKcTXCiAJodFPnz8+GH6oqrz22rd5OlZ
XbzHaU5hcJhnVqZnRT6vEAz5HKD/LD3NFsVNVZdFRvBbl20NLd9ensDP1W1V
woR2fneYPnn4JH308DB9DLu8Exa35Cn+4V/bYvKvMj+/vB8n6auvz6qymt+u
AyR/zOt8uYnffPkSjx4/Tb/P6hLwplrPb9M3VTazJboXtJ4ZAvTt4XH6+Pll
tMCyaPNZ+o+AjbNqGdb6u+Pj9PDo4VH64NGDwydPw0r/XM1osluXejpJf8oW
i2wa1nma1Qv3kJb4Bkb9I8xill5WN+0dnJaRLlBGmsJXf6jz2S22aqQRjYQn
sa2L63XLuMqj/DEv36XfFfW722rxFx3m+zpbl7fVTV6nlxdX8FSPf++FjHoL
vUyupZc/NEU7ubGWE0B1He3qtlpmTfp91TRwfnW4k3qZPi+WCNPQZUtNJzfc
9A9ZrfDinl4U83W+SL8D+AAxyOuqca+mtxm8e4P/rQEIpR01QLh8AWhn4Et/
qup3jUPJaf07JGh/aLTpZJpZz68zAOD0XfoWplrfFX9+F8bM2tsCVvZdjfOt
ZwG+WVkCFl41UwRGWczvXfQttZ601rq37tfZepGe1tXdIt8kSVnVS4DO+xzp
35vvTx8/PHwofz55evz0GdNHfgV4GVo91VaHR4/0z6OH9vTBU2375NHhAXQz
my3k92N79eDpE/326YF1/hTouP55+Oghf7tarJsEHv70w+WTY3wLBDqr53gg
d27bdtU829/Ps7q9HRflTTUp59lkWSz2V7er/Vl1Vy7gkE7gx+9vikX+zbSq
6tn4bt48Od7hrvga++nVm+dn6Q/nr87Ory5O08t/vrw6f5EePn1yPEpf/nAy
ubx6eTY5OHjw6NfDycHk4FeaDHWgBBz/HvP2vKT7JVukP+RVs4If2WJ8Ubb5
YlHMiY6f4H826S70vEcfzuDmA/pycHg8Png8PniC6704eXkyOf3panK6yIol
nHN6ML1r7eWP3Zd/di9PX12eT04W8wrI/234vGpybHJ1CyTth9evJxcvzi9i
oCpMV3DrZYvJg/lqNYFl7c/y5l1brZbVbA3HZv9ylU+Lm2JKa+38PMtbQMlm
kjWrD79v/JuL2TePj556yD+oZwCnMq/5Un4NOwk/mttilb6uqz/n0/YfmChD
D4s0Gib9AcjtKj2FSyd9mbd3cBxTOHrQvF4WAP/mH9KX6+V1XgOtHaXZbFbn
TUNcADQqZjmwLdrVtq18ADCKd+gpgu+0uvzp4gxgOj6bEA/TZNPlGIB7V8zw
/dnzVyfDUJ0vqusMcDpr4e5bEmDvVmMkrzCd/fUK0bXZh3Ee7h8e7f/w+vTX
s2JewEY8z4F1qV/dnKxWdfU+W/z6HjFxNbvxwJS2KTdOq5tUm7tFvKze5wgV
XM3DBKf7+vzlFhzIy0mRlRnNE37sv85L6HEhUJussnnux38Ntz6MgRxhXq/q
AhgB3oF0F8bYgzvoX9fI4hmWIo0Zt9m8eYaPLl+f/dMz35+R2tfZ9B2MlZ5l
bZaefwDiXMKvXfxgb3DmzWr2AW6P90PQhTsGEPj4EMB8dLB/8GQfuxlHeDo+
Gh8ZcHXvjw5o7zfTBdzYOlOdqj2Wp535TPk1TApBGY21D/tRvy/yu33+lIe7
AfzNHaAAycerrAZCDqAVcL29uJoAr1bcAEw9Mq6LdryU59AF0sWY1h8fHinN
PUZaL7T98MjI78GDpzQGctCTk3p6CzCbtsCHunGIcc/cO/wA+IH2dpZtQBqA
PYt2U18hFw7vBvcNEO6ueFes8lnBWIe/9vXLX/nLSdKDE4Dp/Px88uTgaHJ4
8gZOwquLyeHB5PDw4Ok+vrm8OpsAvj+ZPDk+evD46THdKA9OJ0CinyPvj3+/
OT8dz3Ng/gQHTl5fjOGbB4cHR9T+1duLyQ9rIBzRqujJosCbGsCcvgWch3N3
/gFQbgYsF/B7gPPphZAbPArnby/2Rumreg5b9Be5KxaboZavqCWSq1MUJspN
enGW7p5enPlr42Q9ByEIT/Pj4aPQQgfIzMCu5TkBVU/ELFvu48OxtQmt9+/y
a7hBp+sltGz2W+T94CZr9vN1QUdDIPK8qt6tVxFIEOBw1ucFcM5MqU+ItJKU
2KAsRn0OzhbEA6TDk4FZ2yPAvDHObrW+3seDM7ltl4uvah4QGPdt6DF+c/Kl
8/xSSAJ1na2ncA4aPMNToCuygP0Ctv8Dzew+bAUEOzjciq7Hk0dPjh8fPH1M
hAdv9H96ePB0cobCszuIeKuPP8AbavbdqzeT07xuh5sRxQX2AwSU2XgKzfCb
t6enl92DvZ5Oie/68erkhz7ULgUUhPMgWqxBth2/LkpC1vMS6DM++H5dThm/
SUgFcpSeTAFITfoauAtq+x0KG1m9GV9Ogbf2lGZwCxDwH4COg2Bie6BIuv8Q
6NqTR48cvL/Pr+s19I6ng6j3+cnVZInEZdxuVnnTXTSqIcLrJBmPxyDAIHpM
AVAn5Wd0HSletkAOGlia6BqABEyJR0ubvE3a26xN4f0UhClohV3kBAYUN2AM
4FWatpg2SEKgi5xGGyUZfIPYlS6Kd9A+bZbAJpHgCDJcdSVvR2kpXBBcs8UK
QQJcTNqsp7cTZPmKxk0lhV8gqM/Sa6DHSZ0vNsgZwQ0D46WIzMg/1KmgddpW
MEhLjFWe3lZ36RJ6TYs2vSuaW1gJvCddDMheuUx7wgA7ucKhcuBCoceM0DP9
Kb9WsAGHu4cD/Xj56qV//iM+v4OvvM5mDGcTOgexhxcy4R1aFiAnwG59BQJt
ywcSebov2C+YWZYuASGRuYBZtPRumc3yFDhL2AQBWHZdrduwIxPsmv+Expv0
GjdFN6GplgAiOBvEuSAM8YHJ0wmqzLRbaLBetAVczrABYT/SaD/Su1uE/pQQ
q7ghfMEtIOgvFmmB3BYgD4PLbwAOFXeFswUBESiBbRmgTdXK7sFssV1BF1J/
Q7+H9/mHbLlawDqloTRTMCwW1R3x2OkS0LPFswenpwQGmYBflbjOFQ6eATaD
DAt7iNNUTRV8BtcprXFeQe9IX7zWjkDGNyW2wZ80fewCmKM042u4InSzTo1y
8wkCIg8AuBH8RrwEio2L5Jt/hDvRfUjDUYewSYwysE6FMWBMTdjUNECLZrg+
gMZNBqJokdVhZ3BNTegqLLi3zsboBAgrZfrxY48V+/SJYAejKgWET26IEyGU
Q0UR6jkZ14j0ILhWFd79vMWA4dc1MMW44EmCZxXEpMJYEtrNBqkaMPO8mYq5
JZP+m3VNkNZBaNkK7eIv+WyS/DGHQXFgmpSgD3Kwv01fZO94GxkGMBtgW9c3
GS0PiCJIlrCuWo7W4AcZoDPIioi4dYVXS1ULak7Xi6yGRRBkDdxGQug76PIi
EgS58zxrYAJMQG8Yt1QSqdclaZKxaZjXaVXeFPN17TCFSDtN0Fqdl++LuiLm
BzB7iORHdL5om/SH15epMqTQw/fIyMOncG8H4RvQb5oDcw+ip1BbBBwcy2nL
mNisVyu6bwEPgbLVJDzBcKionWZNjnT0JTSDdS1yuhwC5cNbOZsSKs3osgKC
Y98BWNKBITOkqjcoq9BthBtAiIlwU9EnQnYiu3xw7b2b3EXpdnREI4aLFv9E
3Q7sGoqFRbMULMyuF0Tkpouc8IB73tB2yuLKPAc2aMSP6s2qreZ1trrF2Znm
hA9Oc1utFzPslog07jCTGMauMD25QrCBrkAonNwXDW4BX+8EOjwNhBEEiTmr
QvBGddcEdAb8CGpAcB3AP9PrpdyPZQTLdzkQ6gu63+u8WcG2FAiIGz4hSDpw
G7D33leXeED7k2r4mqHlgBgCZB2Ydx4baOcmvS3mtzhWgeeeeQWW0xiNr16/
aJiVQNqZ5twzbOsrAiBeHHhHAS4t8D8wmYbGTy9/QrQBxGAEhbnSwbtRdCG+
yRiahshvwFSmTzRhFPjlZMl23mbvAWHw6sWBmvV1swFWjRgK4VnkPhNOGSmw
sDDEqAA1Zq3np0+4NGJq+BmI0/AsU9yiSeQZ8EoBG+TEXK+LRYvLHWSJuLcH
T4+wN1joIH9EjVAlK42KEmaIZANPKcy2qHtUhnCJ3oQLSA8OLj/56itlml6J
XoLR1+6YdSPYiexgusNovYO7Xueo3Ue+At8S5x4wnexNG6Wnsm98XxF42+gi
Q1I7zHuNgB0qkPdsiM19ny2wPeKcngPEkjyQWr5KbZyf6R71aotfJmmPncM5
Atu1yI2tywKaRD+Ybrt3eTudJKdVzadvhkR1wyQGN55VMXqzRtdmxRqBHCkH
riHsCx8kGEO0r7SLJUsX0GmT7jZ5DtjALZpPn/YmnuRA9wyzjAdMM9Th5XRi
6HLTjhE+At0WGwHhbEbMF/OeVqvxIn8PN6/0DNwotJxVeVN+rV9gJ1nok4+U
tAfmBwiywaZhPnBHIGnUZWfU2TQcHFXoNbCUwer5w4IsJhs+B8d09HDhAN+5
vqIRlS0yZEX46aj2jNkmwEOij1ngadNVXjfIvNa6R8aj3eVw0ui+666Bri3d
dVK4fABW22ZQ5sh30okRKAwPMiETu4kTxFooL0KTNFpNTE5XbgsixR3QDiKE
uqpwoK7XzEBHi6POgdthFLGvAWWQ37av4VeteBQatU2+uPHHqiCRuHPZwcbq
wkZhVdDfNdytgDeXnmHEc0adFcI8njAiAIC5T3p0dX5O/1VJeIo6CkLIGqhI
XtNL/nOEEL/NVnKVEZHufoar4tYepbGT0gne/LuAsw48yRr4M2FF+TmcCuYW
g9ROswg/eQJLJI/ujOPNgbRcn8sVxd8a9SninlW+yYlDXtLZRXILvFidJR2x
lW5B4Noq5Mv0UOmVm2bzrACeLuBeUb7PGuAz5XZviM3AfuiMUWdA1KynET7C
s1RWzHsBYHqjEJ2qBa1AkC+L5XoZmtVI4oUTF64uyOB8V6HMgufve+U3jQve
yoN+MevJonEW3jBzxx3R6Ux+ukXeU6/0DI+bSADk/9ES80X7C9c63+Q/XY2Q
ahJnjZC7zp2olwlylx0LlTKBuRIa4m74+ihUyBsjHwRfn9kE6diIIDikSJEP
UYQJKglHeE/Pzp6LuIraX3c7Edciihv43Igy3Lz5olrlDhqoueSlwx/Q1rFy
nn+jFfJ2EDOxglsCNx4Bucg/GFDJiUHYOToNfQkgbOemY/DbREII7yffyduQ
gPHJuB60pe8D17EGSTor6iZSPbg9xjXomJ42qObq40f4kH8A96Y31Oe3Kgjy
IKqzfIcz8COjxSgN6vBJctIMoGBZeTUUOtRkLToRObYasR+Ey2rObEkQgkAE
qWoU7pO3JVIcvkPuxXgEoq2SuxdEqsopWgrJthcwN30OYuoa9XK7iITKET86
PMBLHu7WZdW0IobaFhC6huNpSs4buVQYVIC5+zg3xWl3wOA1IvT+j93XsNTn
SFp7ayLEiDAct0Tk06BDIoKImro5nRISIFemaJmi/mDGahmibSTjovsO0cUy
v0MBCz1I5FCXW+XVEbRsMyF0LAZ02t7AYSquC9LJwxE8xZXgAkaEPLqKCeO9
bhmqSTMhlKWc3y1yGHIzTmPwN4pgrIHR56JErwGJv1/janhIQq+mT3JUalsC
KRWxjS6MKbCDNmPmjYV9DuI6KzqjlsDZ0hmgucKykCYYrpFoiE1388l8gjIB
4kaQG6EjmQHCdU/gCYeW8TWTHWDNOjIfXVoIxG/Gcn6To+mXdMQ3dbV06ixb
OwkCDFlkNvHqRnVSMUejiwhdPE5kkehpEJlsIFOK9zGaQlISo8lgSBcQ4wD2
17mhZBS6pNAEekL3XNM5ZiIAVXV/Dbwx7vgiFGpvn+NuZV48Gbzo2bVDFaUd
Gw+pSb8v6KCxHAZbKp2JEkYvkALvUrYgIGogMG+yKe5TUMnUuU2lzOq6ustn
bsqNTvFevgLneVOhCDiuSoO9it+vVuQNA5j1wnThKLTG1jGClZMouT+eZLUS
fxq4b1hTGumSv0dVZZ4ebtcrp1eoNVwCWwmEf+SsWbXTUOVI4VDhI4wyTkRU
ssHMJAPjat5Db9W6udfWBZTPekXavTaVl8ox7/IN7wySWNkUm5ydY+uE2uF+
8jVn9Diyw5A9DE7smjWKZYWfquWG9XxM/ZC0NagbhnOYN7dAQ0hlhHowNtkT
Ia+JiilTCLxCQXOnRhvVvuGaMgQ3E7wM37eiuPfXI4mItBZiOphjDgPictwS
HWcLEwQq2qi+xBj16zzwVqKsZQUNdTzQA1sN+EIzfqNjMTSdDL5Tk1ZQ4Atp
eJMvK3jsrXGvUVSardUwFlurjOkanFWkY0NCo+crSHbBHFU6ZUjGNuhMxb2R
N1vBSc7KKRu2nN1K7KjIePAesXzQ+r1gcuUXoOapGaJ6OW1Ngp3gSf8KALJg
FSvaMK5hNjnspp0A7M/D6o2s/ONXtfvuE4p1YpjZrlCratOjIHeIVxUy7/Af
IbCm+loLIbUz1LFMCfxZMeEn4vj5ohzcMoB97o73DZr+2RoCh3yOflByzHtg
9Q++btJVtSimZGFWjln3nvqV+ynqARGEPyP+LK+JXMF1CJLsCD5doPqeSTg2
FxEet5LVA7YpjJFFuVq3wunh2SP9ABLMjax2KwxIaQPywNTuFFw4smq3ebYg
hT6bj9aNnptB+6uzUjXRfsk+Ejde84ntEhE5wjwjGETUg3WfNKgyfgV0b/8m
KxZb1gV7wUYHojHA8LHZgY0njqgJEhqOk2nhmi6Pu6zG07wu4crCfRumNVvH
Jz5GusHW8Au4SvQg1X4cAnU0UbTjglN9MhTknow1VDfD+IjjvCurOwAnsmGE
WngD3QIgBeFYIFZYtDrfRmxEhrG4hwSGzUDjEVsVFBFQ0HRKwBU6YcJkaB/r
98J1eU+cSTq8VW582hbE8HjbtiL0HPVCM/b7FY19QFzBeQYEouUasQuWsKiA
S5qhPwCxySAuZNdkIokQve0Cxhn3Vmwa2KnyZTHbESJ4z2SBtshOMLXHGeD4
QXOTvj1HJztmWtOS3Ff3cPJqZfVnTdnnyKGT9OFE9nH460XR4JkmTSl7Yaa1
KfiitcF6mIsbCZVp2HAOslemDr1oDF4YrvI+sj8FKTBjxEWRpZwBM98qDXVk
jSeBWlX80E+CcBg9TBCz2JU3b+8n7cS6iuc1hs9sGJ+RWYMbFkSenRdvL692
Rvzf9OUr+vvN+X99e/Hm/Az/vvzjyfPn9kciLS7/+Ort87PwV/jy9NWLF+cv
z/hjeJpGj5KdFyf/vMO+kzuvXl9dvHp58nxn2M7EikVbKBG+JGKYvzt9/f/8
34fHwCz/H2++Pz06JIMb/3hy+PgYftwBG8ajkYcL/wSAbxJnFIEjNc1W6KHd
0A4DXbkrU9R/Avh++zNC5pdn6X+5nq4Oj7+VB7jg6KHCLHpIMOs/6X3MQBx4
NDCMQTN63oF0PN+Tf45+K9zdw4StIm4L+Hyz78CaiSvSgTScKqeJ/PhxjDEh
BP2xRoeIH4wzFZBco7+gMTIHpK8EoXBeVih24PmU0xpYpo8fL3Pm957gPMhZ
UkyrHz+ewEbCtf0h/YHf0TwG5GdmWsNJYJEdOa2uufZUn7Gd91mSkBL2WfIM
lZpFPiVomPs2WZyALhGGslFUb7gJfCC0r+le4ailFE8Bvv1pbHPIQ30m0mKS
q7zKEnUDNJ/0JYYP0aTE8wptWbhlZilTTYD3W9Bbhh0m3Ase8kad/lSPYsP9
Y77B0a5EVQfEb0Wzo478FDMdaPfKzNHWxQ7eNEhlEfoYR5NexWhHlhLWe3VM
2ovsOl/EFm0/ERYD31cFeSjdgJgGO0MAjvVs2HSyp6v6E4Je1yX646r2ihNZ
jO4kt0ErAZk9NoLBdDZaNu0Q/KidAq9JL/O2Bz1tWgk7FGmJnDkenr3PN4EF
D1LCF+N5pKjA8zyoYABUPxGZnRGrRlN74JFQ0jeJbTf4vqiD1B4a5xsn5y/R
BxHhtFrVWSESDFw8vHtwhFhUBhLRii2JWd5IeyBuTNAlsc3o1wiXV3uLHrHo
7or23luy/0wLYjHhF52igtkpdh7/C2OpShisQ1CFDMDxT3LTuoWzSl+mzjtC
WgPR0AbZQ10hIoXHfdK/XG5bPEthNm/kNwZebbpTmuVI8kjd3J1TRJW602IG
dbWugblkHgOGLYAV2pDrAdtkQhyRcwpj/faE4x0Ae/aj+e6zAwfb+n9BjapA
hicee66pokqxyWAmhkTDFIKL8j+TIJogqylaIdbrmIMfHsJYAINbjBybQI4e
sawtAhfph/oyvB5RAByysPFcbTIj5/bFMyHB5n7Q35FBNWIs31eAvp7jdBvp
JEHEBpUTiVw1EVxFdFS7MB8geRg7DHrpk26gmh2BbO9LBb/xsizSKFudpt2Z
mAdpWyBVJ8Iswi2edDqGpkjFQZGJLcfzqprJHEfpvFrM0L072je0Z1QUL2jt
UAqnCG/2E0Ya17idYB9fWWHRsE4bnZFIuJINgBnQPvQk72UxvyVStcS4Rd54
1vE63QuZ/CuGWhgHEb6cVXVDc9e9ISpL7qZsJidagp7v1LK/+cEIxYpXxZyv
m6ChzVZsnsALXUmf3RGLhTBJxEfoaZEUC+S2MX0HGEPRmTjJ4ORCfglmpL3e
mFvSgN0ulwiqUc8V+mexA/5CE/hZooV/IQGkWo2fk4MSu8kFc6IPRsjSHfH5
Rwkh3SFd/c5IlXxyt6jNgz7gy3UMl2vXH830xCwqejcVcoDBMYmRzxZ32abx
1pnQKRIJZykUZz7dJ/XbBMBQT9dOHYu7ii5gHfaGCG5OlNup+hgFoJmQ5klC
cWoNab1of3qyLPD0xD6rFhyOxIyOe5iUcN99axD55rYVYIx6fQZtc2Sv0FNA
/EfJSjiz28L8GzW5os9JPEznirIBp1ldm66dtNuR5havbFElXG+cPUmNeaSP
+OPV1Ws0TyMajK/wLVDTxWyP+mKAdDtrbzk3xJrDAIkDw/jW2M/lpvhAQQR6
ErIpxv7HvtU9jivyZMvIJhz88QSfR7GdD+F8vS5ncJ+Lh+DZ+XefPu2pvv4W
CCL25c40il99MyFvgOycWV84ICWyaXt7t8dbIT7LSXLWn5xdGiKUeNcS9cAV
JGOsIbcBIxnKuxsw/uU30PcYexlfZfN5PhsTNfiXkX/zFo6he0ez59c4LD8d
f8+eIf8CmIM0zRwtVUx8MHnqhEGAa16iwgemd7MmaTZ2MGnF2YcEzgmp7XEb
xYLHcF2s5wTUKkV3LoAC3RN8UTe5TUQJgUqvzONgZhwX7JLJ+Xx14z3UEcXM
tZEnSKgf7yug6ayoUVyI9pR4mwHChBuMHXOkC1pOULppvBMrs5TBN4JMsTmq
o1BrHmJ1JJISwIxxiSRjO48h8nctxLQjrviRCP+SDPu8gewPSmZdse61YvqX
3jxKF2wxv6ELu3W7UnZ8A8xY5m4s6MsPHO59HtJhazDONEo/f0Kpgg+0Rxfn
izWSu1NdMDrElshV5NEgV04TY1zyb/AP55KEE0LNv0mHz0y6n247Mkmy7ZNv
kGbrsxdMme5p/N3bl2fPz7vtk23jav/2tD9C/wMZo/cNwqMDlXD8FSp9giCz
67/AseCeiuc03Oz+KSEzg3jDJPjjV8FZTFXOcvBCNCkiUMevvhtVZr5jIgN1
Pcg+fuykHdHog/DuR/+u52mWnCwW3h1i5F040c6m7hPYK4kh/HOlZuBmFCiB
CuOZdOVHc6a6Bkml6XlsvsQBkG0NV0hnNoacXKgKvlvyXSVTHDKfGZCAqDvx
lUMZBs+bdtgNmDL+G/1UUCshDJ+A3CkY2DGAlQ6kUWNehu76kl4Ao9kopWym
1UrugS6TNkkuTYAOUnVj1JKMObIPvdie2EbgTJ9ds527QZCRnSR/BPr7HiVO
tbdcN2wvvmE2Ot550n53PBjRRiKDo5wGd1h3dnrNBYdDPKfYW6WW2SwV4OFG
rjh+U9WOrXJMbOSg8ROMzFdAE7cu+sc0PbdG2IMeIjKDEgGfo0hD3N/Hj/oZ
RgCV1skoUHtqDItd1yXf56aOy0s6LSGup+tTioJemMpWmz67PoUT/C+/+U0Q
Kcb8p7IuMnclKI5tkFDZKJ9PfH38rYMwFXD2IicFDbvQ5R+m+aoV1QVN6A5d
QjHUH9mOxYYF3FnEnhOp1wAtuvUiLFOVoG+2N2ywc74/XUkUY1IrdqG7EyYh
4jZMew+HsFgWFHI6GhKkbAwa4YYYu/v7ZUsBcRqN5zWYMaBW2Nev0NevQKmE
VOu5MmtjF5lUkr4lvB7Q6JvwSTrTWLuPVoE+3Juwt2T+MjWDBEjy0KQPT+gy
/OzXfj6hBzwnZGpENzm4SH5lTy2M5U9f4p97jN9wX9KbTyb1c0OfiOB603LI
vxsJb0sMMa8zDo3uNxH3K2myYu0lh9c27LUKiDpnxzxWvzn3fXaHWonMfOIW
NUt3aIY7QFod4TH3R7oviNrRHXjD8jx7XauVMOh582mGwJTILMIGDQE2x1oa
DlbzEvnx/D2pfXQOPC8/E5HDYfGV+DLN12jWpkuX5W7uY7Gxb/DSjHqUY2H0
VRZu+0jm2Qg9VLHBzAnvoXSfqDiNeFaqJkQVCaLfIJxiKAZbx85Lv0qyRaE+
M89mQSCwbFD0ftJBI4I4+QTD4VjkGRzjR8fpddFqkFJdrTBHBBD7DxTPEj5t
ir/QrJFnAIJKGRCEtV9WtQW8COfWjZiaEGEVR4Q63I7qDeHdrqlTGR9HnZDp
Fc/uSAmyHQo5DYzijOEWiiMTfkJNBP19v/gSV89vcQzcwqEx3DFSzwVLl4Bk
hg6/OYfGdkwxSKHIV6ePA6yRsNHc1Y8ITwAGk/WoiF4HIFWPkc0r4TAhEwH9
6YHBT57A42sX02iZLwnAtrc9EKk5M8JdXOLhAcPG3Ni6wHscgBcEkYFLNt0H
oYFy2+wSUMdkpky/+ZZhTM7OIK79nB791j/5ZQ9zPdpPEE9O/0vaAlDSCc1g
9/BgMnl8vAfExD18Mpk8Ot77NhFpBMitTOIs+POSZo10oIl3pu1It3bjeIcg
CRDEzzaDDdSyhi4UaTUFgaDrkmgPB71RLklNE7lJfuIgsKKZrpuGc5EQzz9k
NaMPc++vyL7ZX6XrHHj23bclHUCgNBIrfXEWrh50IPrEINnB5kpq2LraiIuR
+cyGyzWLggijVBgCFs7/kyyra3RXlwxAGZDqlpWzyI1n6XfASAJDjSESqzx7
xxGh5u0KtDNIWBQXSJZ6snapZV13os6dljsK6r1wl0v4DP3tR+xyTjH/sPCG
LYBJUIrL0X/HMlGWRq5WeEmQBtXfXhp/cZ3D1IFdoTgZDD4COAYquNZNWbAu
knMtYr4ZyRfDWlYH17pJ+F5eM0c+SV2Pyv3GX6uCWURPjlkZJejfINEwdR7u
JJb5fDgKRXMGJVPUXaJZCICZSWGvUs0uhvYg4o1HKVIuCvijoDgKCbHeULJZ
syTOOYyQat5Vbrho7XRS/evEAKEujwx4ZdfZM6644VOpjCaDmeZvO2BEACTF
Efuoe0NukWvSEqEjS6bfOFxCeYkwe4Ro2PvRAt6zsAK2Ml+ZycU8rRP1po6W
zPy/JqRRT8lYz8Bp/BAPJimTETzE0jZuap5HBJmCvDxhPIz+RiwnNOJAb8lY
ydlC0FnShbGe2Oc+iQqnFeCULES56Zpj/Xe4EPlqCWodZ4fJaySDrM/gUBny
JZTvO9xCQJGAQ6NBxKE9ZA1BzsenleBfimfFGH12chR1L1+jqn1YZWwAjsN6
bnJyYPGhNagMpUnLl0g2L02xfcJXC4tfh0ePaCMQipe0SLRjEk+0yMs56qP7
rBF3rrwqowQlVdBxfQaATiYC1u2LmLtNY6E8mXBrQlnYVfPBA9k4ZEAmif2U
+AliS5p2u+BP1K14Tzo/1Z8La6KJXq7JgEuebkzAOFaFERrnMoabvJiXBrkm
DZ6AOH/hjUj9rRMEsu8OP7eg422WrfkaTitQP/VpMWbVGDTHq6LIz0ahJPlr
Sga27xDJ5W90O4O/45y/f4WWBx8ODuHFm5OXZ9iW9PuIH4dHT0bp4dMjvHmO
Hj4aIx8Hs5mBjCLG2eBnUWmARdOiYkm3Vg4ld2qO9OFUXhO1QNf9MpNEI3xb
2aEjjdoS81TBXqOVOCQpCRZimRWxscIX0imYKV/lBiG1LVsVs46HGYjwt+ba
bbe4qW06rcVB4TMgYXHkGo6nJLpiersobvIO7Q3QC9ROkKdZYnJ1wR7YFlop
k1PqjI9lVmaLTVOIv2aMlLrRR7DDlHHy/O2Fbra569GLqaRG7ZhENKyFjfDw
sRP+6cH4GLAF//voABGG/jqWYCzL/wdNX729GOH/jB88Yi7oFJm3QBqdhN6d
So7pU1hFvTRGAu6IsbLBgVTj+Eyhq5s2L8Olm3HyJNYtIW69ODm1iEc1+9MF
YRomaEGLg8lX15hWqc2DzyWvfJLuvqxaOaV3lMPArlDORmGKAkmJQf7RNxSR
bLkjrFE0J0cRSKRDOybdcCLT8uIxoDvKgvrp0wgeWZJdhwMPEAdenF/Eh/14
PMN01w6IfJF7294TaUP0BKi1ZFJLT6uZ5A9MH0mTiAula3KaOcnTsxHKurOP
tcsSlTVekCZ3fcb0w2OXZISaiEMsjU2eN6j83dVUhieXpxcXQT2q8bvY+B/C
n+kDGZkcnhBQnLDi4MODB3usNyGwcec6SfMMN+e25+vbUsJV1uRXevmnl97L
TPmgKGs878/HZ+lXyB5xqO24ZeqOiWK/2aE9P5Xob4Q67kKz80nvGwuOyyW+
k+UzsjmjOA6Qv10v0eIpWl/gwUre3DIhIpk1UYq9PRL84RZCuR9FKNMgZOpV
FCyhV7dxfKIEfhAVwzozrT5BNWni2O1qleExDnscxHsjgUvOU7hRP5CiZUUV
8EaLxHzdJ2k3zsVijcgyIioJOBLBhY6OekKEkWbn/aG7eNoJH0svWM0lgQky
ko4ShdDojtMzigcmL8GsEf44IX4ENpCSlfB2MttEgazIj9wArmi8OlKAaGJi
SyhhnzD0IX1pbBdMmbvTyxe3Am+YCFTirANgeMxggNZJ6tqHgB4fw+unEDGg
DWA/6fl+m15FQHTcbky+vAsCJhkU/r6mmi4cuYur1mB43auspKlM0u56/Nyg
B1w9YOqMkQLdY1DZvETdTEvZ23RScEgaIC1TylrF6liBzCGVMrKfxBVRTigS
0eQEBMmisHDaNtbx8nagX5BdeY5DviaVHXIOsazoqDKRH9ZVSz6FCGPFEhQy
1oY5KS/dyqY6X1L8Uk4in1J//FQTbpxYY7yLnsI44qQVGY6ksTPOwekSsb99
85IDK+ym78mI+g6J4bpmtvqz2rxdIp2mxzNCupck9jdr7BCdHx2P1/ViTEpN
1d0dTSbHx3tprLx7PJnABfCteRJ89VXaYH9ASC/hQI9NSuUlqOZq95J/iuqK
P+kqr7xTUjPQmfVCfBf9TZYm22m+VUaDiQm9xZjNrqwpIzPHyT/rKSOtUcBG
vt6qMijJbvIxFlzISVuC6sCQ9wq7IUyldDBZQB6eNubQJiZxpCslRKMzmyTn
LhdZbxTOWXiryVWrO6ljMsIcEi0r91Htz0Fi4+tK41RLTl4Y8okhMcjm7DDJ
KiHVl1/nm0rUyLE/gImGbWWJTn1SUqWtl3L1Sif9RdChhqttzsKfpJCENU3U
BqLJMhCSwZWr75MgihZsdu1YRZ7BhG2SbIP0ano+DGRSEhuOhScXTZc0YUws
3S+4P2Kb4A5wVGJ5XU+jKOagqo04Y5tLPv69wFPuTn2nGZ81muKf/vm/pa9K
28jX5ntKF2t7u8YNS3eg2c6/awORgeARaRaUuYouqkY055QMWwPfQxAFkkKG
ehRBFyc7QVvNzQCnfslHrrVorRoLTJG/MvouCOaQyzlK9Kbu4DmyqYwnba6E
UfCxF2XIYxFEuOdAcuGDIBBgEQ9Vrn1eWXf5N2jrAnkvP0ffL/8DCDwT0UDi
5bcQefcLyPxHMu78jo0z/jpIPnlSTjxZuvtHTcv36vxFJ4l1MEUw/yYEPY6R
jiP2XsGJpxiIcysd8MJzS7swyp6eFc0IyB6smvYHhQOi7t5dH5Zd3Sk2ciRg
qwoOIDiFOgwFdMOsR0hsmeMU5ZGeEm7SVbEBfUIXZ852ZbPgFBtfpW9Y3SGF
iL4jvhBWc3HGYIm1IdfhdeS1D6MdPhJOf1cVGnuiv6N+cBvojiJeRUgnxvdC
T9cbYQk7KpnxvSqZqpZjfkf0RAPKCBByXEPyHa+fUTUEgEa1O0xxWJsskniT
FaaxiAZiiQDzNiABRc00Wt5y1jFyOH++IcZKnGtZsbHY9JAKQMKZL1EAw2se
EAwgXDTq4LbAJMGqQxOBhKkLcn15CWBeLJBa8zyLvOlAm3RdZOWPlWFsKQNR
d3z08BETrXpNKjW+0DnsCgBkyimOYdCsHozmza3L/WDJYX0CM3MAePqo6wDA
bMuKHIEp9E2HipwEhkdV8m35aDkkJWhyU1JPIpcgIWNT7JFEXsnmIqVCAK3Q
+VDcGMQ6b77Nkm0RN1EPFXOawGg6z3s6R0Spe8eHnnJ4I+noxRpk00BMi7RD
lsaRyxlp4g4+2aLZQ8OB5IKIBFwYV/xBJDhHzUFcD8SSr5maj2b34mT8fIT/
+4L+91LcfOjdKayDr53xmxMUdJFr5Q8oFBUTx1MkmUSukDKQ9E9Hx6RfJuYz
8THON0VNWVMXNyywu9VPaBZ6Ay420tMT7ClhNpYgEPUURH/X00hu+fFlmGhi
E2VtJYqVDx6FWcLiKAW3nSU4PVi5QpR5wCUBpwcLSYjzlYADjEc+ZesUnbV4
4cEBiGhFs8o4Q05WJgxEPAIo8Wl4APF7EUR4HyhFyppyZQAkQ02txNfUEkWs
VMQihsGpC9V3VesCLKgwVaKZkLktV6uiy/vUwODyEVacVrlMPQxSEoAjPE6v
F9X0XZOIzaTJMX6GPuJZcNw4JZCrapeO3eV/OqXERZKTTjJ95B9WIZPdH4ER
xVBjrPjwJtZkdULikp4qNUrxgmGLOTOdp1lZcSlFJgGTlGIPIsesxLzzkFJS
DLVpueS2IWlTDY6qpg7NuVWyfQFddQ6fOaZZOyen47Pz8fGTHb6PkjgNv9rK
uP4Ax1QefDg5HcH/np3j/x4/US9PIXMEB7rGH4RlsPsNe0Rto4yjz5BGViFz
18GLh6kl+ultr4cY0VFqi2RaAwMj6rm1k0aqKn78CP/BLT/BSo6aanuLAycr
sLQjTT13LSQMNVlq7WLzASUMcMqc3Vfo6sKONeyU0UZhWa9QnK6nqUbUuEsK
l/kshYfV7uFe6HM29nnHdx/swZ012320J6qavMXWKwbC7vGemz68wNSOHAFp
4eajvg+qpL1oQh5BArngrAAN1pS/z0qth0R2Xji3uCBNsSAOdIwV3KnihjMB
oKD0ZxUvD2wSwvKEOOJgVFWfuc/1y/zhFwkeJEsQxx+ED/65oqge/htrqNkP
ZkITkEtCw29w+vqAWpM6Kvwe/7lBh3v3AJOmfJt0HsBnTkP1IOl0gK8HNVzH
OrZwyG50fhKNL4/8DNyjeA6Hj5JeP1ungQUgnQh2e8dZNYMQRpk6Re4ScUsa
qcBl+qqCOCXLqs7OUiPv6zNjB4ayjZyVhNFzWh0gHyyo470TzhO2I6HwjA2r
qsRP1EgbnJqQiJIvPbuk8FcTtY04C7RIFtItZVWy9VHuL+P8HK3gEOAwX1mi
sPAgA5X42OUhYKh2Y9uaUEQFx2+1GJrln7/OuRCN9hjyP4akCWQGQM03++IH
21avE3YhDn0QNZGEfZwZWONMdcsmwzsuEydX7LLjOKY8ERm4Ysfwq1tVknKA
fWQEtGva2Ylg5tTNGJk5lYnRz7Fa1+iLHsK3ibPxcxGHDu+VrTGqNeU643TD
pXKK46IcY3ed8cKeW2b7ayqV5TwXYl8F1ezEef/FWkreuxxFhRuuuYtwd8ix
wDlSiKshjshSILr3ku0gpBW6ck63MgIM++BIyW/sU32/qkG9eVr2D4ncqz+n
sWCrYsFB8OlnLYrq6+eUdITE2QoTa6A7SbaUoIVgUTThGJEPVSGoZVu0eUj9
MGj8aNSTLGOfpDhfEwpbRbnOJVgsFvY3XKSC9uHLbyYlf2P6MFxRneek/YIL
aeDxvXaRYzKLjLig8tA/Xq1aUSaTB0exveT2TmlFoPF/4iddKi8N3anPOgmy
7Dx7VTaaAoBQE1nzxj/ewrBB7D5Ss91bmXFCLT+IHLmg72V9E44t8xuz6phz
R3GwJFUxxygi+kNuCPavAdanmwmQ8pFIZ4162Jf5HWVBoNGdal5JB91Oi9mX
MS1d3NCZ97FD3/Tww78ADPmZOpSHwHuiapWx4veiSoeHv4khlPwSGc7uyIyw
a6XI0SstRgFu4gxlysYzxeL8qXgYx6y/w20T6RmTz/ApJkFKx1ADgzPeJxek
8CgqyWNeVhbsIokca480ZJ1rRbdCrndkCC0w3hLrg2daEy7kJGdXIDSrgKRG
FRl4amwo0GdkpivmcLVgxJCSoE6RRDWXBFO5r7S3o7XJzbj48aM9Ajk+zkNM
LgtfRFhgr8a4EwFfSJO+F2+nnWvb0cFz3XTPNcKv8ZZkOT7anxwvys/G6RQq
5YwEBbSlQieUhD1hUUN6VFhQlAPf22Kosjdy4DRuqRCKQNd3JeN9mX3irn/K
3DO1U9x9ycH6zLlK44MFXOl1BdwLWha07jamTvsOHtpWnHBqV2xoYWkm99NG
1Ou8k01ZkA6/0aA5Q0yXom3Ar6vr39hYz9Y8NqJ0KrR6RjueE+aEt/pdleX3
l1I+dGTWHKkwYze2tq4WnulWQV34vTqn4iCOSMy4Zi0l0crNl1XlfI6vupMI
OLYyC2NEKSUozRQPGrLidCqMxNVwO0d+pDMxUF/nbNxO37x6MWJ+57qIpQkM
PlAcH+BEtf5PH+6idRPNi/q7SvsvwnvobowYErAefi0iUjG7nqPdIt09y6/X
c3Q+b9dNTCSkiU5Ly+pxoBgWm6V6q5RWSgJn+MmMepTSEkVuWmwf5fPxI1Ze
F7Wmy1tqgiPXj0TvgQRL2XJgjZsC5xCT3eiNyBFOnBwc4DBKelhJfuTF+2KR
o/4mLjpHnk/SkJfE8YsJUKQVx32NKIpDGFTO6B1Qp0SqwMNYx7RqROJkSd6Z
LpOB6vOCz4hV4EP/PTUZdNeoWYUwJw8r6xJgUfgHJ5ze4AU2xSgVKjtHLIy9
J247uLdQKAsmNuAq7mUVkv0gskoabS56x4pNcpqSIXxbrADHoe7M0Mcnq7CY
hxljEt3VtDiqOO0GSDAPl02Q5y5jXFtBA0OYG5FEuWQy21HUaSDxvhAhMVXB
8Vdt9i6XJAYYR7HG+JZIgSvBWgk2llzVWKi8tzDSYIiiADPKY25ogvzGuUUn
ZAiQ/KmJFa8Kof3MRrh0E+3AYWTCxpk5uY4VBkBT2iWStzk1+nuX+Jlnyfn5
JMcfk1HGCMpAYJhoQcyY5puTqOE2oYWkiQpAaYECGoYOGW+nZavglFuIupz0
nyhhpDfpJKtXr4bG00tNYp3NMBFhm5sgLvkvyO54V/ZreZsCRLt1ShMpmWWD
iOCa1Y1dugMLsHILg+NxJ7WFtswihyEqJgxzIAVLE3oOuG3xQEqIui0SjVjg
LtgDoWgZPGl+c0P5ki8LKlV8yzHFTcvNrffEete7isrZft3IaOhpuq5RDKcA
PCYanH6CWTYePdG4J3arqqqO4kMK9maCxxJBqzWerCwrh0muAXmKisgjPozd
OVPfLWGvpELxJRQxQl4DdHiFYWkScCaDpDIIalGWKw7iDG0poDOUqsTB16yv
qF0JSw65djk8LNBXkCMJWJOri3FQn/isIS9fXSV2JI3UF5xdhYLlbtK47KwP
6q4lAN3Sv6gqj6lDv48IBpPBspnmz0ZTScKtwwsROWG1WNcaDdk79MQuUWWp
xKfIzNQCwVd4Np/X+dx81hzGyInxpYwp9w6l7UGOIKWil5xMTdg6SswjoVnR
zDfBiK/yCdc/nlJlF+0ImAyeuFSe4guRb5QQgBJQQ4I/ScsR9kaUly4Rz2KT
MIE2qITqJzSPsc6Df4mjZHTlbzTXm5giKRF/xmypIRaSRNJq8IYEqqVkw1Vg
bZRGDJ1XNfSd8/VAQjLF9kZTEiVeJGXYhRy4ugadCpJAUeTOEegRBZY8j5LF
wAQTncaZ0CC5n7h1EEICnXT8ETms9qgY8pGJoEsoDmKMSHubW4UNCYTsBJ4Z
ZQHw53W4QOUjoCat1RzebJtEZ1lCr1E4/PtXSJwgOwFjhHBThZ2Opcd9QI16
AMjpa2W6Fpt7poNcbrTznZmtXC82t3BCicMMct0s5yp5jMNuNybpK0D1pCfN
BuFVIB8LUb1ecB0J7aEXXqNL9t8NWoQnQ7MHy+/XGrD/eahun05H5dQBr8er
L1AkUe9jpgtBQoyeEr+8lyT9h9+ks2asOL8/qII2aN3/ekywIzn1cy39Wj/T
lDQNY4C3/wgWEiY99I/zhuxIk51RepB+G5B2+J98o63go0P3kV/d9o9cK/j+
yH/v17z9e9cKOnjgOxiERCpJVgb+xR0Pfg1DHKeRJcFiDnefV133XH2nHrr6
W48ox3gzkxrrXQTNiVPsVjJQXoE8etnBQPKLOZseNv/pwWn6Q15Z3yevL9KP
H+HpBJ7CbCX5WIq+Hi1c7COyDcmf2YIfsg8MJmNB72zi1jBZPmm6K+zuh8sn
x9qTfcRBv5SxhOpFSeiQNU/zxQI4mKqYSUzQXRUG0UT0NV1QBUlxpbjEWK/8
3W2eaTGwAmUh4KVU+aHuK6hBLLHMg0a3O7W1ADOrpXKo6+5l9jLdvVlUxEmO
V1VRkqfbOBtLzSgx5KzyfKYsCeke0T6w4Kq4JLbHO4o0nhLtBvAgyW9yAKqG
LdqGGTdKxHbKeZU5xwSxsJRFAhPmQ4ObStMRJ5qEsy/Es/AbulwW5bpl4wKw
bHWjoT9JuDAXmea4nLZqqv3h9WXaYL1aIM7AHpwXYn3OaTIA1CWycgkap0M9
E9HWqB8SSLEhRkyWxouapMRiW1dJ6IO1hlIaICPxn8p5jsOOF0tjnLcOf3eb
+3QAlsUiFHfDbhIWH8TbtJN1DZuzhzCc5QqzmUiZEHyBphlcgyr86NRwPIV8
swNM4bu83uEbD+cmVQvQuEhjozoBDgKLG7iUQgsT8gsrJ5lNQQBsCk89FIEY
clZ33bKzYhL/PDQbq7JwSwwGKb+18fbQi89fvDag3bn2RCwR0W+LmVACRcmw
OI0QP1dy1X3x+0CJ+m+UzGz9Zry9iRKI3gumA73H4TzAq3/DX2PYQBtwTvNb
ow8W3BG2zO5lpy/g9rF/eNWG9Xc/0BfuC7xbDSrdD/SFHwHvUoNE7wN54T84
diM4GMYjjN2XD+EDhWhvBHnhB0gfwQcM6bT/Ab2ImqfpY/gg7EHnA3vhPnqC
a5jnafxP1zDPO/2n6VNjByh92IrI8e5b+m9sTeB3O95lRHMHa+UuogYW1S7Z
zNUZJuFLwvszw7ldIUHryTdmk6A0j0TDWeT5srBVmqkLXAUE3XOrxK5ITZzu
osSWnuLf8WKtyYDdnD8VWsXL400aXgH6jtNtJStILyXZpZW7YMWPyyS0Qstk
Q+U9MIMJbmilOhq2jX0BFMh+RHO9HxIN4iMDAqjqrA8HbDDkPsAFwDT2WWNB
qU++1YMtpon8C4XUx5ntOEcpMX8hdpb6avKm0YTRkeJZQG0F7qd5TeiIgXGW
SpenWYRq3ay+V64TVVlUr76W2NdelDbH1W8s4FPUU/JJI/yTehBoOZpGsuVk
24Onvix6MGCIhvrpnvwdV5lgB/biTIwFcpJjvHRjSyNwkU26e4Y5PeDifp63
rXiinazQjpAtgshAbVVeoB/3RWjf0yWM9/zVSbOHgdop/onVQeA/wHuTsjQE
pLLCVdOkMxYEa5566gmu4GHUSqmTKGA6+qyX3TPjOWhKEq68VDTNml//wDaj
13DTkWjBYajYxhI9cDxFeloXaCDMmP3mTjFEzcJjRa/q0LyzILKE1b0pdD7y
Tus9q5Ar2xW+d2W96FCE0ksTKwrXhONBX3rry7pcYOSJo4Ee2MwnRyvpeS8g
NOK5UsSiXDJx8Au3BYnINN2EL3KaaOdGtqK/Y9rOxhJjCEyUds9V9aL8dWTz
v8nbqTmZhWxyEu9AWakaVmv51Rpx1Tz/xv6HfPEu/iF9+4YzddNo6qVFkwqJ
jwNG2CQ6IB7w5Nck05wUSMQj9obgCFaplyRSLAeCaQ0ly4oBb96+uTDVlxuf
JE/iBnpfAYHXQ8SEydlDWJNg75E1kD3BwyzSMa0/8jPwtnpTWRMO1GH8QpPV
8yA2nehrDSJnzxSsNSWuKbwlugVhu2H9o+6CuJg3Ka43/c57hWWV7H258yqR
3UDWf05/R48k3y76I4af6iqFT361eT9T573xui7Ce13Ir9T3M3YVFFmAGrjV
+DaxZ5X50jkftxf6LNwkweVObpOeW54dF2e4atjEJN2qi04VZc+TjPVhHpwT
FVgRikOLGgdZ2zolXY015jiz6XAGGGnnaog0FE/jnlI41Ka9tVq1gIWNc2ep
3GRGAW80Z4cfgXVApI+Xx5QBkEpnvY89VkJhEl8pCB11o7QnIrRvojV2Pan6
3sEuNUZLoO7VWmBHfpTbN2yxQUqDdesiTxxZvNWJjE6OvOwWDL1E82LYWrUr
WmRVS3GOg5M3LZSuGMOeyauErguct7gkUFAicXoxEsUfWFb5eJivG5pORgZR
cRW7tvR4s4EkH+ZXacUZM3XGjBY2vCwqR8FUjRJxsGUMrjX5VnuySHJehWc8
owtDGHq7d7UclNJ5ne29C9H6XlSsQdzPeSIUbvlPL57rU5qcc8PrlfEjWt71
QA0xlcTanFYnoVTe9xJ2KYFvXMzi6CEVyfA5R8qKv3MhQ50UHNGaNHMQcicB
mOELH/bDh/oDKgzJcWaBK6RrdIxlocf8JzoBwUg157cZurR9OQjPWBtaSiKb
ABceensvcM37S53VllJAx7Xx3yogB4Hssv26W1+1oZ5XQHTlvOKCPhp4qJhg
6QDC+kak7qQUxhpMi3s/CoUo2Q+VdBRRgn86wqx8pefyuQFK8hNExUTkpKAW
l49IlvbLhXQw3QfnYgJPXy+we6So6ooeq0BZCuZ4WQfKqhJrFa66bPoum4vZ
ASfPJNL7nRLX0u9ekjlEGdTkTHerUiIJdA4IA57weiAZV4LHf0RPtiwUYPKT
3rYh6sNFSXPxhCJiFrMNMB4zox0iuVgmfn5OiXU+frx8e3E1UVaj48kvgbGG
e91ypXyKmwjJ0+8d6TvdTBewTWf/hHPXv8U/9vI1Pcb/wBOOTdlEKv3B4U1e
cx58GhThiZ1SYMvehJfvksMxBvIzc1WVIBh0+omsFEzEHfkwL0HxH4mzNmGK
VPmzwYSpgQ6y/ELSj3C3DZsqOqPvAgvoEoF/OddraBQ43/BIA3HiJ8j9/s5a
CZn5JbRSwqNMsmT1oG+f0e9sNdaHQv6jhvzsGWlff2O9XlezDccFbw0A6zSm
8OBvgY1Ohl4ACCRejH6utWLftGruiln3Ewok3u9FEn9R13iAfj0v2dHj7+24
Wc0+0EfbOgoNEvsT9uLeTqd88sZbuh5o9mG52DaBz3Q20Aw763ylM45bpbYQ
DHcac1pZ4NLHIiWM1fWMLBCHTyMByhUIT3dfuF9OenJPTYByz+6VoUYppmYn
j8lQ0CQatRtRRQc7/4BfdeQnUZ5qfWbsA/0T0D1THfkjAzMpczkaFyU5dtYX
1S/l9Qvu/3h3v69Q9lmog//e/eJMHPVaiCkC3T0tYU9H0rFSAp1l8YdUDrpC
67uaP5VRpfpwLh4gj+HVF0g7KYNskpKS1NwlgmpnKDQoADgNAGaQBv8s9qQN
cQ3XIPFv9uJLR+6mLAq/tNtZGKH7bubeHSx3c+fG5gQZdHu5GHDp3+Vlm2yp
4R2mAJs1cDczN+ZTwPT1CKRkcRF+f8Od486Eu3b8U7t5ug/l8vGPwwXUf/of
dQn5nr/oIup94C+j4ZefvZAGJzF4dwRTFX6EWlOnNArdpG+4MtIgAZSqSZ4M
wqMoIFrVXaq5CIwr8ltsnCJ6gt7mQEyk8qInieiC+gGDi1Bi0+rK4gsUaXld
DiiJvNSK2OwOXKXO1ZjnzkfWDY4GpvV0Spm2brJiscYQN/yDPl+DEDKZoADV
qtuFqBviSWt9oDR4xFJkrjNF4Lfd0KuRC1gsZ8FfuFP6RjLscKCdjDrzZjfv
vasgQEqpBSf1Gx6FoySix1LySLSSAIpXl183W2ZnGRuLVYFLJ0/l6ppL35Kq
znJuoMPXuuVpoI45mgdPzgdQqiKgF/2ll6RWsxrwjSMVPeNDh4bH6XV/4g3q
4xBh7xb8wVSGU8UTUjAwpgwMFAS9EHDN0EYE1uwS5F9UdPCe+qfE3DKCitsa
/42Tcqki4CICoHPwTB/Eghr+5pz1TUJwKYS6IKL7irSEHJg5qCHs+pRNVUIJ
x834G+tTjl6ofuKz+w1yVigJRUwYSEO0NV3K0Fucxov6yieR31+ERpq8WgQy
wkbSQNn1j1nG1TkLDS60o1jioZTSutqyA5ssvTo/9y53fhjXaczY8ORq1Da+
urS4YPu+u/5gHeIvUAcgSX9K03pHJcIlGsgFrY6CLkH3T1O8WFBdz5NQKyc1
RR2Sp3TIrmhkBhhfx4mOOLgEnUqL+boWTXywEIQQZKDLJef6cfRJlPBJKHfS
qUIqmXjCHUQkmeyDi+h6UGRVEouVVRabgY/DR+5GGcbNk7jkn6NM0knRdLWH
pBKIsyx1qRpX8obtxeIWHOZLGQmE7oc5TjQF7jyXvFOEMwNdRvn8qURcqOzg
6SmH+rtKB1J9+LOrDGkuqYh0avW3zDxNlXVCN1brkfrnj/r5xDmSAusGA1aO
nGGeL+3lELHWVeAZkIMbClxK7UqtNdN0NcNc9lu+6J5BwfruxhCuNpJFr3mW
JIfpeOyRR+6Ym/XiWfIMU1fL1Riefx7Vjjp94lWCvbFsZI/J6Cu5iWYSfM55
prgRNq5RmPYmot5gDzqDUQTuutwynryVYkYWRpbXdUXZEGZS91p9f/SgIxdB
HBeKpjDqMY4aHQSMEW51VK+Sc410Btl7gIglRglT/KLCrLtpV2AZy24HucWE
ALQYD7VkJP4ljcWZzmuVU3wLRtNnLr/NwPfPaNxwguR5+guKGv3HOo6OXsy4
/3TfOzKNXJtnafibxKcR5vxI3APoNMB17LC3G7PiWhHXfc97dLrHVGPdJh4C
jAdpkgyPngYfUX5oXpzoRdudi/2Tb/Chd/s8ir/R+UXfyEP7DH1pByYcfcPP
wkjoThvX+MD7GgU4syDsgaAmjz+J6VYDQvkk4zn/IHz8+5xprPErmJ33JPXF
ZkWYq6qZXvYW/Effh0/1DC3XpdnExY/wp2L8fcFpoPPFAo/jHkaW3I1XVN05
W8+Kim8juHQqFD8219n0XeBCrH7tuKoL9iBzA4thCXkrrvB1ia3z9JwdUTh7
cN5OJZG0hFxXUt9WeDrhb+jEkeFpzvWI4yBjNIdvs9aoW49X8Q2WKk6+k8gB
ywbj4nkpdRPVU5qjzkwLKlnRh7ayv7XsGpfVovxiUT2VGwqeZddKi8R1vsQy
306Z5W0Fll+LEaJrkFiSV1NDNTeLJcn6fhZURUTd3vhy5lzszWAdZs7e4yJy
2dzhfBOpCg1Gikw52qNpqiln2KRvHcl33eh9HDi654A0qFIMLm3/CyZHDfqz
6npcnLj9cioVrMbBnt7VYia5AUNiRBedzwxS6KOgvF0s2KFqVt3A4vlY2qvV
JLAylLoee0Otz6Ybch+cDuyKxHo6TaumW0SoM5BO0XVvbCdnfFbMyShHt78z
1cbzQSUG2us5roezSxgmkbZaGN/QAR/uxNKHRp1dO+zPZ1J4brFhpNdfIGhM
cqBZM5l1ZzuoaLa4rGZeYMo0HzIRlvq6QK+vjUtrgWAhO/kfgei9RycShwla
JoujzYP/kqk0hCfmdKQIWJIDO+kWbGKWOGXSJVfKWwsVtDrC6tdFYiLeCMCJ
rctZGM+LhwN+KCFHqvqP0Fd2T2hhpy72yMtgJ7fyTFl6s65VnK6w4A6K2PHX
JNi7/oUJD8mpofnYLB6SGIU9FSlVJhVJEnGOASAfCcio2J3f/oDnUjhuRpjM
YoyiTNzqJDoQI/MbYmsAwPr85IqnfRmQFTknNrmw+gzg8ZJ6GV8RXLsN6MIw
EqO+O5YRNQ0mnOAGHzliwCSavlRiTHASjf4Nf+ufJUnvUfoN8Wfkz0EPxhfk
Vj+mltyEWbjwoN9EOt7WgWZ4JrX4b2AV8pLV49LDvVP4hnnc5L6SPsRPBbb+
I9bsQZET/g6b9mnPMQcII+sNGOg+dPbjqOOtVFIYvhhBegjR3dzIi4Y2t6Bc
r5QcR8QuPXRcU8b38B4YQcp7XviC0xrwSGnzb0mGStts7rJHcaLjqCSqZka8
zRcrU/GyLO7vCRhI8vJvxTla0iU5X1Y1bFf0e0wFX2G3dn786WoHgLuD3dEf
3719efb8nP48u/jh/PJqp/vtn+img4/h2/ELXO08Hwyq76NiQK3BD2xXETO/
W1PVonvb9XY/iaaqMhpB9Vk6AAMSzxi0YwZtrxktF+W0e5cz5Hbwn3lC4u0N
SL8VNFIDOdR030K6tncgwETT+DhbzEG2aG+XqXhh76calyk0Xv8989KwOWK/
dNhs2lKrKRJumyzMt1flvdK6fc52Q814WWMg9CE2QmSrjx/fnp5efvq0N+lM
QYt1UFaccESvN3ID0SnWhHnARM6k3AadexbGOqVDs9nMgor1bub5Im2ZkmzJ
mYDRQ3Q9X8p9irMYJs3Aw07fse6ZGg0caZzJ4HHlT83FbZZL1vSsR/tG0aUY
scUzDLhfdrAHE8YRdLQYRpTZM/rec75k8Qn5wMjkMxKbTxaj9yhkhe7oei0O
RP0hdOi727zVmPrOFLoMd3YPyx38UC1Mw7uixkslkDnOsO0FmViMiMUE/s//
/j+Aiv7P//5/jfBP3HH9m+kw/OI5ciqhcYTqrTE36CoT4ffo8yvXCAGNgWKF
FLPzjrKP7iXjoyGaPfJTpn77C9fLZXCi98hAJ+bLI12FjEJKBwqGjvgsqht/
0S/A2T0JXRaP58Y3OxmyuIp8b8+7mbE6hwMFUT/NaJghZpmVAB0M63x3H4gi
jmJrDz0eC7/0pgH/ZUQkosNJFZLqPH6oLjksAQ/DVTFAVPxU9ayG07OqWJD6
zE3WDZP1BZtJvohG7XJP4pvvCJpYcbl+DbBp+OW6ZFf77EYrBHjI3tXZaiXZ
Tup8Wb0fXC/8d1E1kWTouiOeYVtPEdA7/fSWGzX+4uXKUsjQoyPaJkpFHvk4
JlUd8lTmd9xJRKCqddtY+Vu7t2+EOoQrUW9n6BfJF/S6J9oOPz+XQs0RS1Kk
fY5RHgevd+J41eIh5FnOGp7x4NkN7cS7iww9cGHXIuBLxMbDw6efPkGHxDpv
71FT0pECykpkRcfQLI8Zop63wgEywTS64qeJzuj5fE00F+YhnPsXrc0jy5nv
Tbjue/guhKEc3X/3UP0zff+AJ2SBwlOwaHJKDTwy/gqLssLEmbUys/qNYnnw
TkGui9P6vARsJbyLbgSJBtEKdnw7tvm8jrxpSv1W4qy8nCmpZvHtjdcAkZcF
ZXW7HNKN0El23L0wEualZTnII73L1mSoFI9e5Wy0I3VPrA6koLzyfVFXJSn8
E77zi1alVEwsLMUqpm1Qqpkykev6WFWGrvJrImshntqrELMOB9iFXBz0rmiA
7jtcr2GqVZ7UpTJxsrRGUMfUVggLs5WdWDXyyXR6a1j2npBVX1QoG7yjo8gh
795pn2pRdwceuvskWQTGvw302wxcIaIcFDrSoWecLFCPcICoCsRfJhT6otOD
84J5f5jmK8qLakq8NsbbYJu2lIquJkGnsfkwcV4GZIXyVYZG/8VGQ7X099ja
xKNJ4UanSxQ8ktoendKxMvEgu5JWR231evl31UFuyJ7SfRJlK0bmYNxlDiou
mpxq6FVhFZFDKQxLszEodZnMIy4VWlEExJ8Qn/+Mq1DZyoI7CmuHPePiteMG
FtZ6kt/7YDeBETCCcPrq8jw9scZalRGlEKwfOMH3E3uPjs0+1ZlG7XFhFuJ+
wmjOVvgFEys5AE/n9ePwvMg2MXB1jrp1Ks7Ov1NTnUu4xjg4hGqNVn3nEN0Y
ujFTa18z0CV/gSQLJnfxW7V3aJY0TZEtQVfZ0BK8XBQKqf2vWcBZX4/fMLGS
YhwcUi00oYarDB2N8CJHEa6YMfElQy56CihJE/XMFatnPn7lJRXxpO5riXEZ
MQ/LbEHINv/vuEtvewa1+2/Q/6zrk62JfIcRxyNywAXS3EZzGvkWmWX1jouV
EGt5XXAurFw62zIblNyLVtyehApjibwM/f/yhbfUdj5Vg/udOrii1R09lHBk
uiGRMrWAPe8wsJH9YNHFABOdtbk6UvgrWsrtMaJLjmslylFyT0qPnteYyt37
lyaxeYmSJhGaSiZ0vsm7V3hP9CLRhFO9sjMYZtkMriNsPOX6I5pXAHOUIwtq
+RRkCC1lZfkuiSRgtvi+3Ez6R7HfdbV2UgDVL66nlYRTJah1xgRPcVAMP87f
Q5kvsQbaAVrCYedbh33Ug+2yRe/9CnPTwcdE1jZqp7W89q25DRNR53TxcE/m
Wc+vYtgVhPx4Ciw6c6W550LEBTwf0/Q10KII1S6cbIECFdGJn65MTdGRITHv
Yz6ubsaa8DEy04qCtCD20WWXndqxTYD8LjgSQwmriaOMLvKGz6rnB0huoIBn
7k1o+G2+IP92l8NUy69wGtMkSmMaDcjBZGLFkg+kW8xzyCnYYcmbBu5nTUhF
SRyi8BKqcZJJSjQS4ee5EpSE88ziCS0+SFOcBCXOY0iFhKecfWJBJCWkwroy
5xznw2oZBpvgHDIzkhMSe7RV4vevqDXjJ9XWSymmqzWUsF6xyjhiA3tEYAOk
A52ktd0caHjYMMkxfZToR6jkj76jOjRGpoO6ylIWlhGCFmXSH5cKkOPNHsJG
iMRzl5JMNv4skWgt37emSpTyJa3QRkoBdwKMKdWrV3asjiupK5ePnHG+qqa3
Y04oRklWSQ/y5Onx00+fXE2+KIbPuuNEdHOC1O/2x+nDg4PkGi59HGQDBIDi
ZoIJhmHAUZcxXEI6SkriwtnUsfweZ+ljRzDddIpE4NzAqRY/QJLE2fJob2GP
lLLAh7+Ks1a6i3snXlyBxshbozOcEC84eNltxEEmpKuJilrE4epaGdcNbAgR
1SR331BVTGajOQMXaeqwDjccIlUcMY3C7FfEWAUPZJe4bhZfAjalE+oMIfVn
5OIyLYbseG5dpX0jTo4UgYtuGly+SYRA7K2t84605AuvWK0VdryyKVIyGMyW
iKow8jylGlKc5Kculmhnj5P9DMNyS2VWtwSLEFILlFRU7+yUAEYrq1031YJY
FbTkkxCiiZQnihtc3oi8exU/XonPDm6Pkwk/70Ot2GeGY5clK923X1Uxi/In
wqlBErVLJTIR7d82IbUqYNbXPd/MVnyo0BpAUdCSDs78jqLqY5xveoeH2Um6
UYaWaE9sMYLOXNQZsZg4CZMJaYZrND0l/taV8xtFB4fMFagk4jyZUUYzrvIq
/K1W9+VyB1qJ1fJAh8XR3hbEFDZCHijg4AeEbzFFraf8GbEpLgdkPAs+DE68
onUnrlITCklwcNarcVuhodwF7VFtoWaZh4yvXgZhXuqiTShJh0R/hiiewnXO
iLjYjBlqbn7QL6/yCBb5RnKw4Rtc6TmOUeTO+U1zkZj7HulE0fcQmU3BpDCZ
KjHpK/aV7eQqq93Alqss5V033AJhtY1tU0Y6fNdC5Q2dNIUqHoPrdRuNpdEY
r3GWeINA/9HCtdaLvlcOJCCMhgVhHnqaH2d9IjxPdL9hLcZdqevhO+KBKR/n
IhQRQjdzQH+mjJiQX06YYQ7OSNUCmXIZgikal2cIRCWUOrGfK6rfpGXYZNEa
IHJqaSbz9KJp1ljNBwFyGiXPlJKkBKHd05NmL41mNeAPvCtWfBRj0WF9TuJi
Cgzt9J2UtudgP+2EmUNCdJUMJKMQLnXGykr1R96jkEAs4jvDSrycZM5klELW
ESdazdnfGuHXScXjEdO1J9ZVq6yhLnH39PINKo0fCgaBzAD/97pqJGcwwu2k
Q+86u7flSOAbchIBvMWqbSvtfGWdp7uvq9d7/ihP0hcVu6diMWJkA7IU2rDa
ha0frKXlc5G4QnwWq6ScZk9jMGZQUwQQzSacvSanwqyo/QjTS4h7AxTXU/yu
KGfdvMsC9+A2B/Ogceh2Tu7FYkxjGrgXvq7xRAXLM67dg+eLApUUOkgow1Ub
PdXqNv2H3/AtDFfDcJmZiMrtD5dS8YdyW5tpU28ZYVWtkkQnQf8kPkaeaYAM
hu5Es5Fm/pmUlIkmJM38Mykcg3Oyf9IMnnVT3MMEe83gmW/20NWIGbJPokIQ
tbRbNLoala45FILyM+NCwpSTIpLBRaZaLdbNkIY0lczyC5IwK8F8UZCp6dac
uomgiGOk5nFjM+6PP13RB+rxRvoSypyMeeK429BUO2m4obHZagVnuarphNwM
g8THY6LpAOmMhmGyixNRHloJZWcMy/Far85Tli1ZJ4U1IlHel+hvr0KlXjuq
4y0dKv/AEs6QRYbAIFH4BNiRgguvdu8XskVXLp8bFFGRIv5VqicKrlViiyIH
BLM2Ij/heEglQmbMifRwLnABuTTgACpUoiJTKPAX+3nYgGW22hd3uq6xZkjb
Hqvo1drV0dSHonQL21JLqLPlEHkN5IhjRAYmYLbQSGFJySrQCqbE2JmgPj+y
3/AvGDlSh+LI5mgREh6e4Lq3gbCbhVr993DfRaWSNdsmTAntlsUHscyZclfz
4mnYTh6ydvYsvoPdUuTI51w/sIhkNk+vvjt7dHDULRNksm4hFtES57RIa8JH
vBs3IaUfp7QyQxP0Khsl9vM+uTGPTRaIQwucEQzvBa3CGUOqNrjDSrSP+eKq
OlTQtrqJwR6ZrSgEI1YMDm4vsON0k++jgkFJNkbRVyrr8m1R1b3xHF5SlUfL
OcFR88NahaHZTpJQVJe/zWrZKFJ5FVsPxIi167K1XEUWmO82ZHRFmovnK4oI
YIcgdeRs4K6VJ+JUbL77+vytJkqSN9ZF5wO8tr96NAGM293y5V6y5QV8OeAx
6tzOneu/RXID/TPvfG/v4+BqBRgr5ZoxwvqZVD7Cf7/jkBXg4YDVwERPYyFL
7oMtCagwTmag9bfU+hMGBWzpbygeYEtncVCOdwsSDgh5IA0nDSpIDFhmweUd
ufpQ7qD3poxGojEisjgiO/2IrOIjb/2YJC8q8+NocnEVimtpV5LUXCqbL+HU
U+qWoMu1fD1CrSzOjbwDukbsqHxKw1WVI0Ej2PibUCzcDx2kbtIRpc00LzMQ
ZxtJLoMKOdW1hq4wX4nUNrsUk9bhAbYhFfbTA0y+7BQ4QTEo/hLdoijk2sB0
SgAOBBrXIRIWww3oLDamMuER4HUOT2wK7E3optDZCK8txW5ATgOQgPDhJkVd
A5EhVx4U/oh7CqmaSglawtrf5RwrK8hF5RzsJZEFaYokqx5yVZaFCcchAsQk
MyNuSQyfHOhI6dUpB8iIbza34xaX7U1cpKE22RtFRLwc5DnMJ4Dr2MAlRocA
roZ0KJr5amjHOF7KoSjyWT523ybnBXSmyKKVeceaXtJVcJw8APe2QPOJBWJa
8UEcVMvq1MAYU8kORBjNS0XJjDVzVp1LWSNiUmAjbhb5h0KSHbnaeW1V0X1b
LEUBEp3K6xozGw6eTUl75uVsFwsLR6jmos/NfTTAqqP3EvFOiBhNb6uKc1WG
ZdKxlJECCz3yyvdRz4kXOpKy3DOz8G+fGan3AHAZ+nMGlkEdJL7jEvfIlmBe
UUuuhWRj3XBFFlEkhnzB4gaqTqRfYLApgyVI7EOfvBfnZ60o8VHh+27Nm3di
baaiW+YNdAZzxIUBpZuQH7b+S050Yu7kRknPxNbiBwkmIl+pkXVvEvLsZqqG
ygvLaiVpBfHaG9FR5/Bsyv9zw/wn6Y0BdTE4TFQzYXzshiWxUVxzQVXPoyil
EKqf1W/hRkx7WLXJd0fCXp0TsXafZgs4mjMdTdm1kRnYmnFBMCTOUtS8nvKp
v2RjKcE0WT6A+7kgm4L6ghCtG3Qd4SV5iJJI+yP+T7i5CQ4sDetx5FwVukjB
XEFbtWi+5ctJ+AARphEhPLjlU3aG3ljsVGAh9CPbX/LK3tqBqQWjqvJov1tx
deqegNRVJDqBidIalJaDLxzQUKRGz1FQJUieg65c0UkvZ/gRaZ173wnia5RP
5CFklGaVRroShj4B/EW2ovmckA/nuXz5BfDX23ostzU5gTb7S+D3R+4yH3j9
d+8X0j9JSue2rcM1/C3b5uohOfcOq2jSBMaU2EZSTlmIWkT05Q5ne5nebyNd
i6U0I/7lPhA50JBsuy7ajGzLbusu2S/179gzVncM7pe8+k/aKxOtxbf2b9y0
fzeIdVVfAt7XVor40nNvXwBmSWci/K32EvOAFncjscLESd4D13tB6qoml7N9
UZRsGxluGvSYFLa2uzmarITmpbEItBURcEDklqviM7AIzl6OeaHjBF3YwlmP
w4errtrcbEHM47efH4e+BWHeqy2k85A7Eljz9MmDp0epGbfDZ86/gOdH+qXk
1U1LlVBQY4TzKfspFLrupeQIV9ecBUjcnb3DDGmYWH2aqfuMARfms0836usA
B0zXTOoJMuKAZH2qVy615Nxd4gThmU62HYzSFyenIruIGAi/VHc/SUiTn23M
yZT6fPn2+XO/FdytqqZ8amKjf+g1E74Y0eh0CmkC8hc9bHGzZSo+yyeqQB3T
FU4+Ji93WgJiPogaI1UO1TCwHcNy60HKpLATiZVOKKbSpjBLtYtEV39E++69
pWkiTHpwwr9ewlCHckOHz9VF+DPdWA928/x6LkALPZL1CLHNFb3R8lmMBSsk
lFSPfR05Wm+kdDhtvAOFs7pS1lZC3IylqC+kUExMWFwchKjfNA8dpgN04agt
26EtbVT4ctTnLwNV0Ih8utlnbEPqH7IQ/sEOUUztBOXLdOfE+aG8No3LaSS/
77BsFRQ17HUyK5rpmg3hSHS5zhxrfraqlFh1wtXaWe6bxEQWDUNe9jfyYslO
nVORd2yxcJMyn1daZNjEXRTAb5BYjlI/mglaAl0SAzJVjLl5W4qumDDp1nMI
dTijnpyvqMRYRN8+ScoyTeUmowdCE4qOLrmpBS9QRq/QrtSs4ku+8ppb5BRM
XiMHQpS3bP5+xgwU03cHm6Gq/u2iGbiefJimxjVHLqtxxBCW9THfTA1dYWQd
in+VEtlfzooMGnDSXQkm2lPd/Zdwd9m9vN2wwezmfo6OrD+82n/MN2lcw+7e
RWZtzEh5k1JrOKS1TWe5kRGAC5J79MeAPzEmJq6Wy+VLiUXFNp3KGu5CGCBC
/oAarBqpak7ICOuHBX/8CF0Xs0hRmLkkgDoHRAxdFZ5tvyiZ+k/uRu1yTuK3
rhHtsfKxW8Js+2LZrsOqEwq9L1UTWpTvq8V7VzzNR4tsySyuOphb4Jrmt2YW
QKqBU+CahqG5pjrttMdSiJOHB08jJ6hboBmYhXND1wnuC50ANgEq53LP3YGy
BepSg1dyi1m72TIN2DpGjI1Cs2mH+pDbyit0BsScQNg3O2VTKQcHCEn+Q5ek
BEuMJIpgUdzkWDdJUqVj8BJsq5WJIfLWFYuyCMiWneLLZmoGelekwPbA4C7+
gyTXWZYTcZkkvsvfeEIJjAscWEFGs+9tdCDASjzOy1lVN0z7u0Tk0kKIyR9D
LZOmMwFOvHuuOtsZiyE+U6qCB3cuD3PwO2fs/8xyRlLOAN4U91H39DlrzYhd
dbPBU8rGEQ5PTL+Hu+e2BHAjVyMuavG5B06c/L+B2cHw5fGNfoGhpcEcFnxK
HFdobcVHRs6oehCD7DnNvdaZHmC/UfAQF83S7lXDOZiTw2pjKl9mMxDW6+Tq
cnLiEu92bC+RZHTP/cZcY+g8TM/PtfFODMwkDC5dSfA9TCrf0UY36fMmFjcu
blwH3dqy8kHgoInE3ncN8TZSxZNOL4I64mv4xmX9HdZ9e7228fQcT7c1UUa3
aqQI4eIkbJOkK91pi1R77hJHrJGVIPOU30/JA60FejomMww0FMyyTLOenaHE
+ySWi2aV1Or/IYNHHJQ1CSF5ZqmTHLVf0icFLm/CeuIxnAWTveIJ1nHvkkOW
zQXCqloWUpRTOrt7X647S32yXULu2C3DgSGVEFJ2nIZo6oQZ3lGDpdqx5B5X
F3VyrV9gSO4s1/LWbtk7q8V6PkcmdYdnbYWcaPN7FV2VCS9qzQAx2VJdfTeq
ibYHHVaYV0HDjbv1PDo1cHa71W/29vy0c/XEl2J3LiNxG2z6Wjju6vz8dSgR
H2zUoUzt5yieLH5YKh+FVWUgky5FS6B62ti77/TVyWsFnWh5ST11jTEsodjz
wJS2kStHB75MhfA9M7ojETs4ogutqRrKz/Vz1G/OPEBVqXCvshHBZX01sdzU
zaMsjLdrXgzUB/SgEDfezwLCdXk/LNDOd0UjBqPgGfsLXKptX+x/aoOnhOfF
KnOhOrmmsr+WGgPq5GMUQSIVuSAQtvB+MGblv/Ix2y4VF1vkIyBAQwqvtw77
Dh2R/wAusme7LhrrFKN0btt21Tzb37+7u5vUN9NxPiswQ1xVz/fhJ/7/1Xdn
Owi1v7IxNP1rsEMHwvhXeI068H2yPf5V7Jao8tM3ZpKBt6+8GUKJG5l4Ms1J
FR+8L+5EbRmDH0cmC+1hm0XASeTUQUf9LF87hWZc2ZI+Cpo0aP9G0ZZTVjHi
nl8ePXw0gv88eHJMiz+/fHh49A+qFqCmpA2wRKvoU4F9D6lA3pKepvNOPE7p
qpH0HqQWEALm8AG7/ZPn9/uKB+jc5YNhqamY6cVEHjXqlttzZ+3qHjjOBHg5
Um26HO1MbrDfljzlKFKYvSZwiudemvirxMirr4XWpi2rQQECJo5dvKQr9q+U
uvwO66PP4Vvx9uDrN1oFqcJI1merjYYSEWLwDYV9Rh5fhXjCSCE2XpokSriW
P42bcHVMuQ9W8gZ2YJKeUCKAyBOJHIJHMU00X3quNETlhMoOv4buIY5dg2Uk
aDalnEpA1bN3haYYSJsF6d45H8zUxCQpWuTuXZ/h3hK2DMmLdDKhMUx2TlAQ
B2O3iazxNdN+FWIe/ShGxWxrIz5OKaZLk8Vx7nw7WUpltg1GORCvMcLvHSUx
NB9Nr/hIozwbRLJmMw0xC2VBLglKQU0dwi4+t4rkq0DoyMxhuSnQSzj9+JWa
hj8lGgyH7mewpxkZ3ReL4B7Dqm/8btIRNUJRdZTRyVEaHdb5ZOM4mitZgjnU
GZqeIRjzDyvS5xJfTRZSuXo18zLgmWRzQ2viHpMJuZrlYwp2EGAsNtqcHL/h
A2NVaAialO1rp+Jox0HF506hsAOCI3ZAnoXBszNJ6KlWzFKqJfJcJwaoX1dL
GD72U+0AmPtowrB9r9LOBypMoVQ9z+N1Uaiqll4hHZNYpc04a/6kJ52ka8SS
wgAUEI4pS+JaterBFKZ1oSVYMgnAUD6c04uSgiiEaumOhGx/aqeq6lDFm/Sq
g4VcBdbBkUpigxD/aG8kIY/GQ9DDWCpz61WUkSBCGaO/xi88DVkEy+6JoMqT
vE+Ua0+mEzsjsR5vqSEUqP/ToHY5pAZMy3qOzDAcAKloWUd5+FS7X5Q+9mUg
/GokGQ4yjHTB7ieC7ZYVj4i8bK7LwMkOuw+eouUOZ+/9nX3KQAmISr5yBOsM
EQwzmzeJqsLwEl+HfA8sAjnBmYd7dHgA3Z+ssIh98SEFIc6x4/mChVlSx5Cz
sxsIKGKUsyGh1Drjgq9hJq3TbGGkopMUhf2lQ4KYTvaSOL2KyyoRSA5eYWLt
fHrAMCJCophLq87mascQNIqzRbLZgUin4M0rVXRnnSTPImMSFJDcIWB3ynLC
/zeZIL/+tlxQaDm58ZJLsuUNH2Eai8Z0U8S5vbmgCfY2hZy2JTcUfkDaZzcb
ofiWIgd7iiJabCco/uRwF/7cSxJXYEDiSTuxFyOKsPgWWsbPtZrJBORmWFu6
8/PJ+L9l478cjJ/++s34l9/tSCAt59SQviniA36O0n/Dh99KDAg3iLvb/flg
fPTL3u7u/zk52Psr/O/Ph+Onv8DDp7/8dm/vt657TODB3fN8/w0ffIv1+HrF
1aHdGkEwAVr06OHDBw99kXLa8YuObzZgNE5RXLY/cZEM5y2kmMOWYjs9o3B8
zoG1Li3jLnGJSfBg5auU6zXUUQgdDRQVmvgtB7uMx8YU9yL1oA2ljHJtLLKv
SV9iDH0xPSOH9yZO3ahxAkedsIoJdMkYNq5qgvVw3+zv96pGBP5b+u70SHjL
bR48ffKI2yB+DI+a6Vlk7gpP0F2OlrAGXea4RMSswizUY0xtgN7TcNKYjVWO
6Ja9rdOdw8nR5OjhweRwR3PZ0u5oPPgOoti3Oz4/O7n5UfhxEzKVyK3HehDW
IHKWFKt3wVfWlUUPZ/V8rbKKMX1aW8fSoEmka+H4GAnMQOx9TpxawnFJmDaf
WbeR3lcgQuqP8UuOoCPfFa0WyyH44qbNqcQoqdVABSd/mwrt6RUCUkoqsaoh
nwqXFkSt5Y+nKcGTVmNRhD6v3BwZfuLVyJdVsmyFcUNNWHP9655fLj2jtomQ
89U0Uaxq0O1kLqpUv4tlP0yEKhRzQfiu8gh33SIffEgDpm9lNjiSH3jar7PN
AiNP+Al1FPiqPHB+KFycdnTe2YxhzVrdLKqtJJn8acOFZfr4EXv+FRb2K3Bg
OKk+e7qS6Qh3Tv5sEkjQsq/VQrOluhoaAQKBvY6xXYOWuxrPwcPBpxLO27fx
EYxuxe5aHOzW5HRLzISI2cLahhzPnUjzJnKYdFAMATRMpaVC9eC07ajSzHXS
LH85RYzMRbnogQqM5ISJWseQ2UDt45TyngAvArSsoiADqmS33JLFUlnDscls
vhSXWHrQimox3K6+ndS2+988xed5iq0JUij2dZcUSSE7Cv8k8ruf/pwe/dY/
+QXg6X7KnGhVDZCtdPfwYDJ5fLw3kkBYfvhkMnl0vPftPTPZXefFLMyBfuEI
MJz9zaN190jHPZpMjo/30njgx5PJgwc48D0FvKB7V79LfsvY7heMznHIIQbZ
ZpZ8umcE+qjKl359/HNFxfD47yLPc/tRw0mplglMIDT8Bi8cfUCtCRzh9xjx
bOS6G2MU8rdJ54HFKBOEHiSdDvrRztLyWMfmyfnR+Uk0vjzyM3CP4jkcPkp6
/WydxtHxPVgkwL4F0fAOyAdmOUJ/mgD33hvaPYDz4AuLWpeHz1JXdfz3aTO9
zZc5PPyNfsRPMJb8fmyw0Sj8dGB6/Lw3ufD43rNwTEdhSxw8/sP0Ao2dHDgj
R/eekbS5G2OWgzBROgF79x2ruz7w3TM9XndfAu/PgDu9F96AWWNMcxumAb8W
900dLqHr9RzLc7VrRxiip5o0qv/wmxToBeeTnm3J6oQKhS94PW5Qq0qT/1xL
4C+XWcma0s805ZxJcND8R7CQMOmhf5LaSZrsjNIDuH1sHcP/5BttBR8duo/8
6rZ/5FpJ/qrBNW//3rWSzFb3QyL9ZjhHF/yLOx78GoagSvVbcUttFgGt7Ikc
iei33TmYiBS9Nuh+Jl0Rn270oxh88Xtz9Bh4gwmoMJR96zfj7U1u84xUW70X
wMMBKvQehxS/8OrflEGzAec0P2RY8A61ZXb3U1/4xGKITWH93Q/0hfsC0ceg
0v1AX/gREF0MEr0P5EU3JdoADOMRxu5LTI6mEO2NIC/8AOkj+IAhnfY/oBdR
8zR9DB+EPeh8YC/cR09wDfM8jf/pGuZ5p/80fXovxq9XtOeBs2OefPsNTsS6
gYU4ih0Y+PsIN31Jld6+eLj/nSHw/yMZAj/DMM0WVebu4p+BCcdHIpMgjxR+
KhOBT37V9dXPfILl8B4k2hblpl+pbymAK8SJGriUk77NvTzH35Lb+TMLN7e5
0Fl4pPxh/AQB8DtrJVLhL6FVkBMZTio+4rfP6HdPphxFDfnZM9rL31iv19Vs
wyLAVr6z05gkgW8JkgMvAATCptLPtSafmlbNXTHrfkIyw/5Q5ebPd3359uLq
1/Pyfb6oAJ5/Z8fNavaBPtrWUWiQ2J+oGbivU4xbqMp8vKXrgWYflottE/hM
ZwPNsLPOVzrjuFVqC8Eg8TEX5Cre52Nxox7PcrRC5CXdiodPP4v9zu3THQD/
1M5A96EcA/84HIX+0/+o4+B7/qIj0fvAH4vhl589GoOTGMTie27G7g6MJQ9N
2AhbFdLjoZaYFnqV/pLG+9N5banhXAsOz3zmxO2B75/RuCEHhTyH++CXJOk/
1nF09GLG/QNFdgzGyLV5loa/x1xTGbt2D6BTyutcF6jja9ZU1wBEg95t7Vph
Zaz73pfAxdTrstfEQ4A8xeCiSoZHTwNLyA/tukU+oDsX+yff4EN/Px/F3+j8
om/koX2GHMLAhKNv+FkYiUSn//yq9f87maL8+/9tMkVVQTMhcv9UTZG1v1IL
xK1DVFU47fJAe3xraHj0kGQsrxbufcBv5ZOjhyhjeQVv/wN6q0McPUQZa1AH
GGS/O3rMnxw9fOo/6CjW9AN5jJ8cPTrgKXnVV39KolbBER6RbqWv+HIfzK7n
+Eo/eEDid6TO6Ixg0Sgj+uCYZQvHGQ/tm2ZiGx09ekj7gDSgtxG2D/RWp4Qb
l0QCZ3+r6a3sBJxT+KIrcMYf4NtGxWr+YEBkdB9IeQs/gpde+lOit4ob/EGs
b+2t+g5fRiP01K2dDxxu8AdduSL+IATwhA/6rJj/wAfsjPqfdHmH8BW82ElH
fiu8BN/bCnoZZuX9Zcgn4FItiWwQNNMgUk9qwMUlv0l/E54wHeYX++6FkWip
qbftk2/QMN25Cu5pPHh1+N7jcbX/3h103wdb760kqrH5Tb/uJjsoxKU4vyGy
Tv4U9GB8QcZdD1BmVsKDfhPpeFsHEbEfBh47O93TA11n99r6PDGBe+8j3oFk
6P3WmeI/Absafn3jPSz3BwqVdnQ2W9mXrm/XvbgaVqq46tbOuR8bwZn+C8SA
HwFlIkwZbvbFiBKVYoWRo9/jK7IWf5PuwLA7AJEdBBP9IZXs8U+pNN/99k/o
NNOZ8qC2q48/DkpDHwzxTve2629ZXIFWGC/i/J+lAzAgdok9IIwxG1ouckj3
LmdI4fCfidad7RVMTV9L0ts4iQ9lrqYXcZw8JtuSwNSQDrCbxb6ts+k79ii5
Kzl3hzgzt5RkKSGnHKx9OeqkC7SMkVb/kN1DOHUYzWdMHrk1FhpKNLmX6hxa
DbmJK5Op8zHmwnJlnajSbaKRs5iQpJZKPdDeQk9kieIs/3UTHFbaKlmX2Rqz
d7XsXWtVg9hBLKQZvqS/toIaec1t4D7hXshHbU2uUORD3wPGJH2TLzjHGiZ7
zZskFGTSzJhcHxndRMUZTUoou/SwsksS3pioD/27kvMNmydeDaKQ1QeQLJu6
vy4RThKFgEkTTOXEvpNYCdCVEVhHcUUWfEDxa++LasEV/hiIqwpzFGO1rQvJ
vKIpxot2rfnSGHa4mETi33xlBw2x5hLPQC2p+st1Xd016IVI4CKHQBkzUd95
jMqDSdaURZdAVVFaPMn6IA6HmQuc59zYFAOUyKyCm5flm8aInkvdbsqB+7k9
T+N0NZwhhots3uR3echpHdImlwoWPjUUq0FV79h7C0Mg8IzehUoSrM1utfSt
xPFqHgmyLeRzKzrXIQZN28msuFq3CY7fhJPBkcAEK3I6vgq4Ul1zUJ/lpEZb
bMHH1PAP9yKuNpVIHjcNTdyncaQqoSXo4OQ5FKe1XIWcyFpqRhokmPB3CnOD
NczrnKgVQD4O69cXTaj2W5ULdLq7zkoMKEvoYNSwyJqwlAvwNZbhjjMbTyn1
vQXWuakrXMIj81vVehTRQbaCkHUnpXuCqEJrjb6/3pD/X+2IyGbS2QxP7Jr/
t70vb27jSPb8vz9FB+ftEzkPgNDdODXPjgBBUqZui5Jle+xRNIAG2RIIYNAA
KVrWfvbNs6r6AAn6mJ19sYwZiwS668zKqzJ/KcmHzuO0oUosXENoheWCPWfM
lEQw1WwwZ2T5jgvL63TlcVdcfxx5sdYQZk6DX5WKp5s8MfyeWpt7Dj9yh1wx
yPwcYZ3QO0X5eVzmLZkUHiGWo8AHcWpEX243LQonE4sm+Br+xqdcMErtGRNX
Zzr3DGBJ6TRhakAi1SaPEcetgmiQXjybjCjkUrOYGhZCT4Sqtih4PTVz/ryr
NLm2hSGdpdC8f61OixRmhKKUqUH+4J3PFiPaqs08pdDRmR+PVwuEZYnnm2lM
GVIqVp+pbN4qUFV6bxOqj00tbCvokTFgJLsgaug7nGmRLThrS3M1iZmlc74Y
YCRQVWRQdBS1mFl8rWiG55uZDPMcz7opFUVF/5SzuQoIFxrHpVax45auRxrB
HilEXXjKHYPhxAXTvlO+EtYZQ9hTQtqYJisLT0jx7VTLs4om9ATpXBxo+wIM
BGEXuHUcMmG+lo9PGY5Kl0KKpGciqnLLwuRwiAFGZxgwsZUe1MWzjR4I08T4
gWxUdAKrQNdbWNHYpwwPq8XYvHKDoYHawpxrrlOmGZcCNbquSYFUgGVTzCnN
V5bksDcn7L5C9tPcXyfLGUgsB50ACUHX4fNfVvT9tmlTcXQJ+sf1d/GacGT8
tot7yxCpaL7kUK+SItQTZ9jhC5wxYRQZEQnQ9CU0imm/CnGVk98HEt4v+h/J
SEepAE4FNgZn9kqtwPIhveGMOXNGNU0ynccTODNrjgbD5IEbNhgsvYLGscZE
mhrVQ9bDtGBATS6bgdCENGdM/IY5Jgy3GBMRzxlCLV/qisP8KTpeEoEwz2MD
780W5+n8oKHQWbzAlGyZSV1eqmoRrSZ1ljBrm+PizG+sKWKV+AvZYrMa20RM
6mOx0sqlGyoFVh6wVhOEmV1hgDunH+KKa4FWJU0D1OqMSGL6HeJwEbkoF5/J
gXkSHLF4JokHi1V6jhihiNrLVsp6tVGAgBkzYIlTltRKYUKLFU9Lc0bsvPnx
OeOQQhfXDGZDCuplkmiu5uocfhU256b13+dIgGFtkOZK3EjLpI4t88mqYely
2RHlMkROmq6pkxR4hSJFpv4IYQWgTp+52dCUdIQYd0RqxOqAa2Fh2gUJ+SEY
jAglG4TScAW4nFor+bzromkvhav9XHKi55yusqjKJYQ4ef3+mxWoE9eLFfJd
wvVjLJ0cCqVyNps6b3BtiRQpJ93k3dsav7lyKVwngqqqyw4JTReL2zj2KlUJ
oPRqKwyR71CZJQGHyA8Vs5hiBJC9WWjq3RhEruJd2VR1C+RMxZLjApy0Seo1
ozXjdxmZm81s4EP4Ga59fMnKhbX688tdmC0RFbIoiyyimkBhlQgWRVQKsy5X
hNaicBzlNqjkdKYFnAQ1E/m9lIUdufgyBKJRsB1yuf6o20lmk+rDJrxXsqkQ
00BS7S0iAyd3OTAqWSyIu5MEjT8plUyer4WiOKQ2Yx+okVxSWi/RvGS2irwE
V4ikTwzPKOJiypLZVoCnzeG/oGwiUw5r6pjtswV9Kgt0OIAuPG3EuTCPKP7/
m+Nj6po56pa+XaAus7kjU5Hb1GZybNRcjXLYXFDK4Vi+zOORmk7SzECpcYUf
hOUBfXU9swQvkAQIX+SWiPe8V07JaVPEveirEHB5pEPF4xfHISJTeIXHWXjR
Ewg7bAGDHKx2pyk8c8j8PNpAVTEExcc1cwqFs0nnIKRb7cozE8gSWM6YFCk5
HzxlfdJONXUVdk94EVeqL/aNLFD6VoCPcbwktk7yHr1l7NHgqmjMtBGwCaH3
84U3Y4YdX1at/ijxRBE2AhWtrapq99vm46kybucjQD9KjbRywqGLDcRzeB+Y
GGziPuO/gthscbE6KhqcS23dk2f3DmoCeOIVjbbSKI2LSvvJuSJY7fG4SNhq
scQMVQtiL9W08F4XjtLc6m5Vi+mlwhgUFIJHSFXXCcF9IbJjn1HPcNEPmF04
ZIEl4WMKJ5IM5zeFCeK5eq5deq+TcwROwu0pPHePRah5pVVDil/GpKaxi84t
AkbACMD3U0qLbXjGwMrP39HQ9vewdQo/weDmg1IZezZhcnNggtInrbCh+5MV
0CR5llgoUL0s0H88ZPNc29W/2MCpQo18hSKJdB6c5gwZI3NQ9Y1YZfgSiO0S
1hWWZ071/hZ0iKroSlaQeyFrwtYy8RBYnU7rJRhZK7ClXH3OvqbnFqetWOx5
7sLRnbMbx9PPVKUbyQgEIjUEjZusIG+SYClhETFbXhJ2as45CUcXrpl15QIg
s0d1UZDxoFQk8WoqO1SCFRMrQXVsrdq7W1eCZbZYsYLPfZU45SqyHRGWLcr3
NmWeNXEGznlzUYJIrhXgoVPGgVyUypC4dgau13N1BFLCvl5BeSiwGSuSK0Ll
sQZY0eNnlcwVFRc7o+wnj5Sq3OWN69txLtP0Gs2pF2YuwzynyDp0mxHKk/mW
8fyd17TOKCIDzsVkwFx+zwHU13ddLF+tdmo1CqPSiu8FjQ08G2yq03HD/Mic
j0BPHQoxMhWkLxbdOVAVwuHZzLU3TdCvGKY54x6fBdFRrZshZ/FoxVO9N9Ua
ReTjoxpGtHu4Qs6a0LLBKAf5bRXtyQA67E8SBFqfCIift2evCfU9FHBSG4Ks
RQFoqPlCDfiZKapDLNAjhwSxbJPoz3UWMxc4eaEKZG7vEypXS7D0+3uTxTXC
ciTxpX1qDzkYA9AhORP0pFPcQaFY0aWEtw0jt/qOO6+qTdPRmeEi95rfeBXj
MGVf6OLrPOGSmE5b5tyrBPeYM78xHPZZfAPtqGcAMV+MM52whO02GVGfXFHZ
U6UJYApaWIBwrfCqzpq0WtxSSu5UzCG1fNoALpDA9GLniLJiCFS+beiG2PMr
jaOp2kHj91SsSYO/7fsvcP7QDGJW1arfprswOzrdCMv2mYsKiud64ekqrhW7
itsyToQqBFWJQN7itsGL+MpaLhmX9yB3pzNMKgshmBiEy8QBA3CeN3M5w7bY
PJ5FhnOi+jM+nuIZwoedX6g1VaxPT5Amm9mcNDmaswvUSXuLW5diQZb5TQ7F
0+Jgro1zMWdnqdZFXRufoMdB10716VhdxSgqFAdMnIekXQsp5ZUPid0WBWsc
z+X+seAMLGrFQy7t5lYJ4ugRp5bHXKQ51zBFggO5skGgUVDPdMLIZ2ineE0I
Pzm/vC4ui1ObQ9GqcSCSdMbExUdXoKax7WwznWJwAt6r5WpbIWUjWDE5CE8H
LwYlKiOfvlMV3iK9vEtGPkcO7TvuuwNboYBGhIEfgrFTQqPmg3C5hL6QZsTH
u5DOHFzMjLVL10tY6qUG1IozaMBTDf7WIAbS50+cz2siqOtUIwLxchF8lxZA
V9KznKlhVbwCPmEJaZ/uRhCyhr4jFKCVGSJX0MOeKpoiTgnsgi4BrA5+S2Pe
5880n/fDixhvH4BaM3Qr5qtrkHMmr/dRKAXbkggsa+pEiPq2dZn1Ao5sWlv5
ucLVCWpJlneWKq6WGAp7eRISCtmzdOzClykKpDqQxSVJEX8OGeZJ4mbPq2qD
XdQNj66hEYcUT7oW+LZ+YDo7pQWnazl2+B7RCi8l2HxvyP41OD1gjM1moLNw
WYGz3LLomsFEhfYvxWHvXNpoUI+iTuF2uKNwBgHWr/TDf3NcI+FQ7mcH3Ik2
5zTDbrlcS4iHRrhucf6YFt+sGY/uE+dTacoQjG0ufxm1LnU4r2jLo3OYZopt
zZxMixMUyMpQLtYOPSbE+Ef+q1nCVTg+JoXH4wne+0v1n/lEdDQ+xOi5IsbY
8OgaE/j03vv3ufP9/v2eA1aOXfJdDzkjcz3VXIc0vWL37BGGku8Zt+iIODbL
YL2elIXJk89rNSxeswNY8OLJXwWkvqL77pjqnPphp4u7gsyU6VsjetiO8c1g
9LbqGo1gvi9O4hX672hMXBnmhfUgu9siFHIpiLOMmGYaDjuhwKtRsoflaSBz
YpRPZMXvgZZKWSG4FCZFpIoyJEjjgUIrsrbN47Icsigocgf4rw59PmLodfOZ
c6LtV3mSfuQm+pgXaUeDpvnbnkI4hI8ob1LQ+vCRIqN45J8enz2Gb6pZBTVR
okLP+8/5KFv+rTgjvEGonhAe0LcmluWYbWd6uDRFyk3CVswXNMOw3fl3mCKH
FFVP8iy5TC04iq9PlmYoyVRVc+xum+NlvPzT5/aN5Fv5L4+fb9tI95ktG8ip
X3n6DNu9HXaPqvoxyOS/brLPMe2serL0VbFwiGalVU1dk9iKk+//O5CumfF3
nBt1xwbLU6bsBe1JxYw10yo/Z8xWCjtbuRJVNvnTZ4w0OtiATg+yCS1SDI2q
nvWpIELnCpNni+malgJlAhpyoJ1gkzE1iZilW8ifZEiBBjrhtrWAUYHCMP/T
V+MIkx0RSXy92cLAzCpwRiTaQZQh6UTCVc1Y8ySLM462zViBZKncxL+E9jVG
crt0Oi/HQFbN1aR4Fifb+r/JudGg00JNt+5sZjxqtoYcpwBs0zY0PbU43/a2
+SJ8NGzsS5Ygf64w1uSeTAN+tu+vFikRvwxdTJjXq6U0p9oWJ75VDflXbPRb
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

-->

</rfc>
