<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.18.2 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="December" day="10"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 174?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 184?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is “JWT”, “CBOR”, “BUNDLE” or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always “JWT”, “BUNDLE” or a new name standardized outside this document for a further type (e.g., “UCCS”).
This string name may also be “CBOR” to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified by "oid" in <xref target="RFC9090"/>.
They are encoded without the tag number.
For CBOR-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): byte string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): byte string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): byte string or integer</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): byte string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorised Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): Boolean</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): integer or string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): URI or OID</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): unsigned integer</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): bytes</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): integer or string</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="23" month="October" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="20" month="October" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-07"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="27" month="November" year="2023"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-07"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="7" month="November" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-05"/>
        </reference>
      </references>
    </references>
    <?line 2605?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>
            <t>Add titles to tables</t>
          </li>
          <li>
            <t>Add ABNF to define format of device ID URN</t>
          </li>
          <li>
            <t>Fix some nits</t>
          </li>
          <li>
            <t>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</t>
          </li>
          <li>
            <t>Abstract wording improvement</t>
          </li>
          <li>
            <t>Clarification of source of verification keys for constrained profile</t>
          </li>
          <li>
            <t>IETF is change controller rather than IESG for IANA registrations</t>
          </li>
          <li>
            <t>Change "Indicate" to "Indcates"</t>
          </li>
          <li>
            <t>Define "partial" and "full" profiles</t>
          </li>
          <li>
            <t>Better into wording for type 2 and 3 UEIDs</t>
          </li>
          <li>
            <t>Correct the JSON detached eat bundle example</t>
          </li>
          <li>
            <t>Wording improvements for manifests claim</t>
          </li>
          <li>
            <t>Wording improvements for detached EAT bundle</t>
          </li>
          <li>
            <t>Clarify purpose of including manufacturer manifest signatures</t>
          </li>
          <li>
            <t>Refer to RFC 9334 instead of RATS.Arch and make ref normative</t>
          </li>
          <li>
            <t>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</t>
          </li>
          <li>
            <t>Improve min and max size of JSON UTF-8 nonce</t>
          </li>
          <li>
            <t>Clarify what happens to OEM ID when companies merge</t>
          </li>
          <li>
            <t>"OEMID" -&gt; "OEM ID"</t>
          </li>
          <li>
            <t>Use "urn:ietf..." for constrained device profile ID</t>
          </li>
          <li>
            <t>Clarify that varying MAC addresses can be used as UEIDs</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3624?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XIb2ZUw+B9PkcNyRJE2AHGTSlJ3lc0iWWVWa2uRsro/
fzXVCSABpAUg0ZkJUTCtjn6NiZiJmGeZR+knmbPfczMTFG1/Pb9G0e0iMm/e
9dyzL4PBoPfxeXLS69V5vcieJzfzLLlcwY9tclbXWVWndV6skpviQ7ZK9i/P
bg566WhUZvAR/OhNivEqXcJ3kzKd1oM8q6eDMq2rQZbWg0WKHfTGaf08qepJ
rzcuVlW2qjbV86QuN1mvqsssXT5Pri5vfujl65IeV/Xx4eGzw+NeCi+fJ9fZ
eFPCdHq3s+fJ27Ob696HW+gun63y1SxJ3RzHo6Ls9db5816S1MX4efL1Nqu+
5h+TbF3P4ckp/q6KEgaeVqFFtV3GD8bFcp2Oa9diMwrPVgU+KqfjbFLVW9w2
bgb/0k09L8rnvUGSr6C/F8PkxWY1GS3SSQaf8F69SDdlthpn0auinIXF4jEU
5TZ58eIcXmXLNF88Txazxe8qaVDT+yFMSUf6cZi8TFeTbbq0cX7My3wyT0v3
gkb55026gC+XyU02nq+KRTHLsyq5Wo2HuFDYmgwW+fibbx4nL4symxebKksu
yvwjTnMMg8M801VykWezArchm8HuP0/O00U+LcpVntL+bVZ1CS3fXZ/Bz/W8
WMGE9n5zlDx9/DR58vgo+QZOeS8sbslT/N2/1/nw32V+fnk/DZPXX18Uq2I2
34Sd/Ckrs+U2fvPwJR5/8yz5IS1XADfFZjZP3hbpxJboXtB6Jrih745Ok29e
XEcLXOV1Nkn+CaBxUizDWn9zepocHT8+Tk6enBw9fRZW+qdiQpPdudTzYfI+
XSzScVjneVou3ENa4lsY9fcwi0lyXUzrW7gtfV2gjDSGr35XZpM5tqqkEY2E
N7Eu89GmZljlUX6frT4k3+flh3mx+LMO80OZblbzYpqVyfXVDTzV6996IaPO
oZfhSHr5XZXXw6m1HAKo62g382KZVskPRVXB/dXhzspl8iJf4p6GLmtqOpxy
09+lpe4X9/Qyn22yRfI97A8gg6wsKvdqPE/h3Vv8bwmbsLKrBgCXLQDsbPuS
90X5oXIgOS5/gwjtd5U2HY5T6/lNChs4/pC8g6mWt/mfPoQx03qew8q+L3G+
5STsb7paARTeVGPcjFU+u3fRc2o9rK11a91v0s0iOS+L20W27fVWRbmE3fmY
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
GCTGFxfZR/gg8PRY2k6jmb+sRL7+b9Eix73+bWpkxqFBkSy/RZXsfiXfJpxF
/Tds2PRKZ8tjTpic03Xv/17Tpr6+fNkoLBLseNRWDXlx0og4Pvc1XHiKfQpy
z0tPDvdhlAO9Kpqxld3MNYUast2E3L39CZZd3CowctxvrcQL8E2u3mUB2jCD
nHLFpvzUS8JNmlwqoCeMQ+BEgjaLKHkz0cX5LZn1XN6Muzt5huKj0s5RUdRR
G3km3jh7k9EMja1RE3lGSTLREY2DRXTGkqCYQ9ZanCBxL+mY9ZtIWrNylmlp
C6E8F9SrFIMh5JHXm+CGYjgAOIgFMi4rM7tqAjaqhlWgaWcT5QUsAFMRCJFw
XcGwY9aIk3oUJqtu7sDwZ1NLLoNG6DLzwcoRn2WJno0XtDpQUs4rpZT4mlew
+JgNlhyXE6JDlEh583Y2LgYuQy0TKFljEKUcfkhLZ9kjDUYMJjFsDVXsY8Wb
ZLf/ntKl8C7xZYoVcyP3PorWAiA9eiICx74q1w5EcqKO8CM6GrLzyHowMwb0
NNpa5v1IPTi4Vz1YlEIcbmnfNf6Y1ihIPiSx87pC1X7BCaumUUCNDD6iAKrS
3BRl0UAMUJj/CHcaxWD0dshYuuO0OBnz1FrSoFH4wHARbEkh6vaamEPAS5hl
sFIn2gUmxjdn+blQWyQUKAQAnw3i4wKhhefJbsxXDU8kTd+LU1GM0kowofBA
VKoNBvRYE5ebtB9yjOGGxboxy9xMFU41jxNjkk1QnklqoEhYgoHFdcoK8/DJ
cWFAixAxJSnN7uXZ4EUf//cl/e+1eMTRu3NYB9PcwdszVJUgy84fUAA+1iui
+FkJqiNVKmm3jk9JZU+cd8/nc5jmJeX0XkxZQHerH9IslPwvttITFa3oMQ9P
OxD1ZDHDvqe+sDiD6zDRnk2Udb2ojTl5EmYJi3uJm24gAXcUy6KIKhRYRGBz
YSE9YvslJgpzL5yzRodU9fHCg68cgTyl9OCd6vEmIg5EGVgjmIjZjXaEz4Ey
Zm0oWRLsZCiz2/NldkWNLUVyiVty6k5189YaTQuqVdvTzPzclgvYEutybtvg
Et0WnO9/lfg9QDBNYjhORoti/KHqicWzyhZU/G+VySw4R8ZcKtCEYjnmQEPj
LxEb9WUQRNPZp3XIiPp74MIxwQLW9GgUBGp4uPRaquAo4xcGa2dMSM6BnnL1
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
chtXMnNoU6Cj+NKu838Bqoxrx7R8AgA=

-->

</rfc>
