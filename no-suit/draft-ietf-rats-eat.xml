<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization/>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="January" day="30"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 164?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 174?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is “JWT”, “CBOR”, “BUNDLE” or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always “JWT”, “BUNDLE” or a new name standardized outside this document for a further type (e.g., “UCCS”).
This string name may also be “CBOR” to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="20" month="October" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-07"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="16" month="January" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-08"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="7" month="November" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-05"/>
        </reference>
      </references>
    </references>
    <?line 2580?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-25">
        <name>From draft-ietf-rats-eat-25</name>
        <ul spacing="normal">
          <li>
            <t>Remove reference to SUIT Manifest entirely to break dependency (SUIT manifest can reference EAT).</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3581?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963LbWHoo+h9PgaOeqpZmSFqyZLetpHtGLcludXyLJaeT
3bt3ByQhEmOKYADQMkfjVF7jVJ1TdZ7lPEqe5Hz39S0AlD0zO7vOj+1KpkVg
YV2/9d0vw+Ew+XCcHiZJUzSL/Di9mufp+RJ+bNKTpsnrJmuKcplele/zZbp7
fnK1l2TjcZXDR/AjmZaTZXYD302r7LoZFnlzPayyph7mWTNcZNhBMsma47Ru
pkkyKZd1vqzX9XHaVOs8qZsqz26O04vzq2dJsarocd083N9/uv8wyeDlcXqZ
T9YVTCe5nR2nb0+uLpP3t9BdMVsWy1mauTlOxmWVJKviOEnTppwcp19v8vpr
/jHNV80cnhzh77qsYODrOrSoNzfxg0l5s8omjWuxHodnyxIfVdeTfFo3G9w2
bgb/snUzL6vjZJgWS+jvxSh9sV5Ox4tsmsMnvFcvsnWVLyd59KqsZmGxeAxl
tUlfvDiFV/lNViyO08Vs8YdaGjT0fgRT0pGej9KX2XK6yW5snOdFVUznWeVe
SFczeTO64Td/mOFz392Po/T112flspzN12HmP+ZVfrOJ39DE/3GdLeDrm/Qq
n8yX5aKcFXmdXiwnI9w72O0c9u3hN0/TZ1m1hHMq17N5+rbMprjXsJ5j/4L2
f4oLeHdwlH7z4pIerJdNBe3eLYsmn6b/AKc/LXFJq3m5hLa/OzpKDx4+epge
Pj48ePI0rPWP5ZQm+4d/a4rRv8k8/VJPR+lP2WKRTcI6T7Nq4R7SEt/CqD/A
LKbpZXnd3AJ0DnSBMtIEvvpDlU/n2KqWRjQSQn5TFeN1w7DBo/yQL9+n3xfV
+3m5+JMO86zK1st5eZ1X6eXFFTzV69Z5IaPOoZfRWHr5Q100o2trOQLQ0tGu
5uVNVqfPyrqG+6LDnVQ36YviBvc0dNlQ09E1N/1DVul+cU8vi9k6X6Tfw/7A
5cursnavJvMM3r3F/1awCUsDbYC0fAHwZtuX/lRW7+sw6s2k+h0ikD/U2nQ0
yaznNxls4OR9+g6mWt0Wf3wfxsyaeQEr+77C+VbTsL/ZcglQeFVPcDOWxeze
Rc+p9aix1p11v8nWi/S0Km8X+SZJlmV1A7vzIUd88/bZ6TePDh7Jn0+eHj09
ZnzErwAuQ6un2urhI/vz8Kk2ePL4YB++nU4X8vsbe3X49Mlj+fPpvvX4FJCl
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
RQB4AgA=

-->

</rfc>
