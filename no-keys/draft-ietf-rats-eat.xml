<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="26"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a common set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
          <li>Entirely remove section 4.4 that discussed including keys in claims</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWHYo+h2/AiV3VUszJGXJstt2TvdELal71PHrWHI6
OXO7XBAJURiTAAOAljkez28/673XBkDJk0mqzq2KK5kWAez32uv9GI/HSdNm
5ex9tqjK/Hna1us8KVY1/dW0hw8fPnt4mEyz9nnatLMkmVXTMlvCh7M6u27H
Rd5ej+usbcZ51o4XWZs3bZLczp+nb48vL9Jfq/pDUc7Tn+tqvUoepNOqbPKy
WTfP0283efMtPGrWV8uiaYqqbDcr6Pf87PKnZFU8T9K0rab6Hf2Y5av2Bp4c
4e+mqts6v27CF81mGT+YVstVNm3dF+ur8Kys8FF9Pc1nTbtZ5PpZW7T44/Im
T89K+LFJj1tcVtbCHNPL6kNeprtnx5d7SXZ1Vecfn6fwI8nqPIPJl21el3mb
fLiF/SrmJS4+c82nV1UNi57BRj1PDx8ePBofPEyydXtT1c+TcVqUMP0Xk/TF
upxdLbJZDjPk7X6Rreu8nObRq6qGjb7Ip+sapwkzrupN+uLFCbzKl1mxeJ4u
5ot/buSDlt5PYAd0pJ8n6Us4+022tHF+LupidpPV7gWN8r/X2QJaLtPLfHpT
VotqXuQNrHc6wX2Fk8hhTx9/993j9GVV5zfVusnT07r4iNOcwuAwz6xMT4t8
XuGu53PYjefpSbYorqu6LDI6rnXZ1vDlu4tj+Lm6IYDc+f1B+vTx0/TJ44P0
OwDHnbC4JU/xn/+jLSb/IfPzy/tlkr7+9rQqq/nNOuzkL3mdLzfxm69f4uF3
z9KfsrqEc6zW85v0bZXNbInuBa1nhhv67uAo/e7FRbTAsmjzWfovAB2zahnW
+vujo/Tg8PFh+ujJo4Onz8JK/1zNaLL9pSZwpdq6uFq3DEG8xj/m5Yf0x6L+
cFMt/qLr+6nO1uVNdZ3X6cX5JTxV+O29kFFvoJfJlfTyz03RTq7tywkAoI52
eVMtsyb9qWoagHId7rhepi+KJa40dNnSp5Nr/vSfs1oPjHt6WczX+SL9MVss
4MrkddW4V9ObDN69xf/Ws6Yq7QIAGOQLAIb0orpub+EmEt5pHKBM698jpvrn
Rj+dTDPr+U0GGzj9kL6Dqda3xZ8/hDGz9qaAlf1Y43zrWdjfrCwBNi6bKW5G
WczvXPQNfT1p7eveut9k60V6Ule3i3yTJGVVL2F3PuaIBN/+dHJ4cPBM/vzu
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
RtjAjgZmfKcGpqrlet8SCtEIGNoAuaYhp4NXx6jWAbZElTmMaVh5LIJ3kxWm
oIgGYikAw4ERaaIiGg1tOasUOUqUsuF+0KzWrMdYbHrABFvC+dFQ3kLSDoAF
O1s06hHGOdFFZSZCCGMV5PTyEnZ4sUAMzfMs8qaz26TaIqN+rPuSZLB/PB4f
Pn7CyKpekwaNiTjHicAGmS6KurVgcQbv5saFFFsKQZ/mxuz9z5507f3MqqzI
h5ZidXSoyCdgeFRF25a1kJ33g+I2JW0kcgYS4zLFHknClSQBkn8fwAq99cRr
QYzx5hgsObnwEPUyMXcJzKXqB/T+EIbuXRt6yvFYpJIX449NAyEtUgaFDGpU
maPxmdFVkYd2AgkxjoRaGFfcPySMQa0/nGnfwgxMq0eze3k8fjHC/31J/3sh
Xj307gTWIeTm7TEKt8ipcgOKncNUuRT6Iuk3SPdH6qbDI1InE8OZ+LDH66Km
3HqLaxbS3eonNAulfIuN9PQUe0qYdaUdiHoK4r7raSTUfXwRJprYRFk5iaLk
oydhlrA4StRqdwluDyCrmejugDMC7g4WkhC3S/va5Bg/ecLGKLpr8cKDvw/h
imaVceKFrEx4E/EKoBSmeXSJx4t2hM+BIu/XFIINOxnKwyS+PIzoXaW4CzEK
Tjuozp5S1YIixterRPNl8rdceIXDb20bXNaqipNvlqnfg5SE3giO06tFNf3Q
JGIiaXIM4qFGPAvOl0t5iapas3UBQXBpRU4oH4akOpIA8vzTim4J8Wl/BOYT
YyMxt/HbWHHVjXvuaU6jzAEYZ5Uzs3mSlRWXkWMUMEnJbT/yw0rMGQ8xJQV9
mlJLqA1JmGpfVK10+Jy/SrYvoKvC4TvHOGvn+GR8ejY+errD9CiJA4fUNEbq
UwkCe/jp+GQE/3t6hv979FSdOgXNhUCfR2EZ7G3DDlDbMOPoHtTIGmPuOjjt
MLZEt7ztteAiPErfIprWECpxlRwzF6LI0nCqO8/7qs19/gz/IXCH/3pzgupE
hF1B1IYyj6bpUr0zSRQck+UlDQmgz8RFhWYb/Ml41xhB6N45jTgKEH9Wkeuh
+YUKSxACA4ONUV3I7uuX+aevYsiJxyZOODDl/HNF8SL8N1b0sR/MpCXAr4cP
v8fp6wP6mlQ04ff4zw16cLsHWLznh6TzAJo5rc2jpNMBvh7U+hzp2MJButH5
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
5DSXQkBgWESZpQXQlfQsR2pYDa+A0FcClCffCQK90HcEi7MyQ+S6cdhTRVPE
IYFbkAPAquB3NOb98gvN5/3wMkbPAxBrhlbFfBEJss3k1T7yc/FVEsFVTTkE
0d5yS6ueObrG2qLGFdZN0ESyAvSMgEvJ3WAvTzZCFXuWdl0ML8U+VJuxWCEp
IM4hvTwZ3O55VW2wVbrhkX8a0TfxcGvtamv6pfNSWmRy1bGN95hWdSmh0HtD
NqnBiYH712wGagoj5p/nlkXXDCYq9H4lXjPHOaPRPgq9hJTujsIZBFx4pR/+
+1tyaBH64n52wJ1oc04zbInLtYSgYARuFuePZvHNmjHiPnU+labMWbTN5Z1O
61KH84q23BIexB7iFRyDQYaSiSgOC2CeEO75Y6MgwHVu5i83I1P4bp3DaTdn
iCs1up4jQ6KePh1nprYoXHUxB55thbnK7hM8YPOLDZbOcW8FCY02NqPFg54t
aoXTgIYxYrzO0ERFFDqz5uvcTGwhgn3BtZadOmQH8EFpAOQ2E0PIQg5SEDYN
gKRtkd+B9hQIjiMHzMlnQ0Z5qYuOgIaU2eIAGevhED0LbjEs2h1T9LzcrPqs
LSitKXyBW8M0lye5zBwYcz4soma52wbdQiereLr2680O3Wd48WbG1X/jYhg2
tK6h2vlp5lj3qOo1hnml0hKkVmphqYngpZVe4vXPHCBqdhRm9igSyjPNjRH+
tjVFxIsO+80VWTBNUSszHIyxsiv3mEHWzWcOe7Nf5Rf7sZuTY16EJX9McfwO
ebKfPWgemKcsowI+9ZhSMAXVDx8p8tLH/tnJ+RP4ppqbUhPv3+dI8P17z/vP
+Shb/r04T/SrVE8T9/atiQM6YYsCPVyaOCUXYSsuqW2Zd9ju/CkmzkFa1VM/
T65Si9Pi65OleUuO1M4z726d+VW8/JfP+CtJrvJfnjzftunuM1s2m/O87qBw
M93eLhtNhQwZzfLftwLPMfGsegXoq2LdEc1Lq1oPTWPb4cyH7f6fgvbNOnzL
OVP30II8ZWpp0E5VrINmYO2yEp3t7I8KqPzrzz+bgzBirXr6ZwJFnat6TvFk
KM3EqVTFFCTpML8KYSfcNl8YwiyJ5//yGR9j6iPila83W/iemTLnR6I8p3xJ
JySxasaaNVmccbRtxopeS2Ut/i0Ur8Gq20XdRTkYtWquJuFzJyJv/T9l+HiV
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
1ft0sX6/yCh6txjZAw1kWFjC90sNALG02sCDWu2KlwjevPySv/NMzA9plOdf
DbaYVe/8AZ3eSEMWcw97H2ZZEIsPfV/FqMrHh75flKe7hm/5u5l+do2Qfyhh
we2T6lJmjVU2fiBR9ZrN/r+Ypn4nUVl1gvWEh25qUa94MFGKHqIKxkPfLyok
/02IihHQG7N09ECKCiOgqOjPzKZ+o0pmfoq62UPfz+tyrV31SvPz25Q6+tmR
on63/mcSSsg26sZXCiYP2sCo0ADbMF27KH5cF9NmLnfcmEcpHnWzXm4kpEVL
eAriN9cFSibm6u32byrhXFEtOC6BiBb5hozBqTNp2sWKmBjbSOVNbMwSGQFV
KaQyHiZmiWoaif1wln5McqFYNgLTlExZSNQmlyWhEs1swTVjIGsjD4QfzYMR
GW1ZlNmJzZCmQjNzzh2YT9zIKiqRim9diX0Zlz0rD8UFeE9WBqrcAIAo6pEW
yN2jOrsw0W+dslrZnobS5VDapEQ9dyGzzfLYXWYCOU1djdHM2BzEc/SNf/g4
6X39rN774pvZzxeqxRo8XIxVtlY/AxqLH+9VmPf0dYab9slhsZe+fWe+INBx
/hxU3R8+BMOP78Ob08vL27PvX5x0vrcDYIQ5erRSIXeA2PwiWxSN3HwmEQp2
9d0XCq/qhrjeiQJjL/PgH0Fpnc32/BqiilIk217h5Ju/+Jef8nHWdJLVxcWV
QMgjcL5R/NItO4jgtmd1WrvXHzovc8usq/y0vMqdiy++KG519U7nNtoJvtW3
U34Gf4qJDAZg1b1M7Glc22C59E8Xi4poeN17mBs80IiXS7uTbjz+nqBBn3Do
pH/ChFnYTwyuLuzfXngcnV+evLwcnMcX757Ei+HH9O2H1uVF883yyavLj0eD
08HR1au3X795Pxq8e/LVGX3z4cM/n3xzMnwyXd3Cv6dHRx+Pjq7f/jD4ZnwM
f59cXD3/+dmHkyP4/evFuxdvX799N3wWXFy0x/Vv35+/6aw/vX4yGUbffnj7
Km5992H2Xf3r9jfLJ8uvXw+H73tPP7y7WH//zav4m9ubl2c/RPWrp1+/iL7r
T599gmHOs6ujuP78evnV659f3tS/v5nXO93R9dPZh814nfw8eHXcCrLO+8G6
+2J0/m30z5uns09nm38+md4krSDJvsidBLt+z9L55pMGGu4VPQXONugjW7Zh
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

-->

</rfc>
