<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="August" day="13"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put a HW OEM ID Claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as Claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the design intent of the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>This claim is only to give the recipient a rough idea of the security design the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>While this claim may be forwarded in attestation results as described in <xref target="relationship"/>, this claim MUST NOT be used to represent the output of a RATS verifier.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level may have only minimal SW defenses.
The most secure level may have specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
(Note only Section 4 is referenced. The other sections, in particularly Section 3 do not apply.)
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains broadly interoperable. In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger claims sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp Claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce must be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims. The general EAT rules apply. The nonce MUST be present and the receiver MUST not error out on any claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-security-considerations">
        <name>Detached EAT Bundle Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  The attached claims set is vulnerable to
modification in transit.  Although the nested token does contain digests corresponding
to the unsigned claims set (as a submodule), these digests themselves should be protected
from manipulation during transit so that a verifier can detect tampering of the detached claims
set.  A suitable singing and/or encryption method should be sufficinet to protect the nested token if transport
layer cryptographic protection is not feasible.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-20.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="July" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-20"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like security level directly through to the relying party.
The verifier also knows the reference values for the measured SW components and is able to check them.
It informs the relying party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3Pb2JUo+h2/AqVOVVsJST0sP2faOWpJ3VGPX8eSp2du
bpcLIiEKMQkwAGiZcZzfftd7rw2AsmZypup+OK6ZtAhs7Ofa6/0Yj8dJ02bl
7EO2qMr8edrW6zwpVjX91bSH+/vP9g+TadY+T5t2liSzalpmS2g4q7Prdlzk
7fW4ztpmnGfteJG1edMmye38efru+PIi/bWqPxblPP25rtar5Lt0WpVNXjbr
5nn6/SZvvodHzfpqWTRNUZXtZgX9np9d/pSsiudJmrbVVNvRj1m+am/gyRH+
bqq6rfPrJrRoNsv4wbRarrJp61qsr8KzssJH9fU0nzXtZpFrs7Zo8cflTZ6e
lfBjkx63uKyshTmml9XHvEwfnB1f7ibZ1VWdf3qewo8kq/MMJl+2eV3mbfLx
FvarmJe4+Mx9Pr2qalj0DDbqeXq4f/BwfLCfZOv2pqqfJ+O0KGH6Lyfpy3U5
u1pksxxmyNv9MlvXeTnNo1dVDRt9kU/XNU4TZlzVm/TlyxN4lS+zYvE8XcwX
/6uRBi29n8AO6Eg/T9JXcPabbGnj/FzUxewmq90LGuV/r7MFfLlML/PpTVkt
qnmRN7De6QT3FU4ihz199OTJo/RVVec31brJ09O6+ITTnMLgMM+sTE+LfF7h
rudz2I3n6Um2KK6ruiwyOq512dbQ8v3FMfxc3RBA7vzhIH366Gn6+NFB+gTA
cScsbslT/F9/bYvJX2V+fnm/TNI3359WZTW/WYed/CWv8+UmfnP/JR4+eZb+
lNUlnGO1nt+k76psZkt0L2g9M9zQ9wdH6ZOXF9ECy6LNZ+m/AXTMqmVY6x+O
jtKDw0eH6cPHDw+ePgsr/Us1o8n2l5qUVb0E2PqU441599PJ4cHBM/nzycEj
+/PRwaPw52P58+mzI2sAw4YGT8Kf1uDp/r5+dnBoPRw8OdI/Hz7THp4+PrC2
T460s4fPnupnz/ZttGeAYJ4n8PevP188pb7grmf1HDd756ZtV83zvb08q9ub
cVFeV5Nynk2WxWJvdbPam1W35QIOYAI//nhdLPIfplVVz8a38+bp0Q53xbf5
1zfvXp6mP5+9OT27PD9JL/7z4vLsVXrw7OnRKH398/Hk4vL16WR//+HjDweT
/cn+B5oMdaCXE/8eM6C8prucLdKf86pZwY9sMcabv1gUc7qjx/ifTfoAet6l
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
ztg9olw3J/P+f3PDvIxTjwIA

-->

</rfc>
