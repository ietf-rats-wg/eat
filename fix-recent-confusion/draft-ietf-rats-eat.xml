<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.17 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.11.1 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="29"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949" format="default"/> and JSON <xref target="RFC7159" format="default"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392" format="default"/> and JSON Web Token (JWT) <xref target="RFC7519" format="default"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152" format="default"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515" format="default"/> <xref target="RFC7516" format="default"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446" format="default"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422" format="default"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949" format="default"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods" format="default"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS) <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS) <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default"/> and Javascript Object Notation (JSON) <xref target="RFC7159" format="default"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is followed.
Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship-between-attestation-evidence-and-attestation-results" numbered="true" toc="default">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the entity by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) long as fewer bytes are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)
]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It MUST never change for a given entity.</t>
        <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/>.</td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI" format="default"/>.</td>
            </tr>
          </tbody>
        </table>
        <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid" format="default"/>. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Entity manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa. The essential requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it MAY change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There MAY be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label MAY name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile MAY describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based-oemid" numbered="true" toc="default">
          <name>Random Number Based OEMID</name>
          <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
          <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>In JSON format tokens this MUST be base64url encoded.</t>
        </section>
        <section anchor="ieee-based-oemid" numbered="true" toc="default">
          <name>IEEE Based OEMID</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
service <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001" format="default"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
          <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
        </section>
        <section anchor="iana-private-enterprise-number-based-oemid" numbered="true" toc="default">
          <name>IANA Private Enterprise Number Based OEMID</name>
          <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
          <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-model-claim-hardware-model" numbered="true" toc="default">
        <name>Hardware Model Claim (hardware-model)</name>
        <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid" format="default"/>.</t>
        <t>This claim must be unique so as to differentiate the models and products for the OEM ID. 
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
        <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
        <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
        <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
        <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
        <sourcecode type="CDDL"><![CDATA[
hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)
]]></sourcecode>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )
]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]
]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the entity's
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels.</t>
        <t>This claim describes the security environment and countermeasures
available on the entity where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features, such as app download
systems, web browsers and complex applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in Section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. 
Security at this level is aimed at defending against large-scale
network/remote attacks against the entity.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the entity itself.
It is assumed the potential attacker has captured the entity and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular use case considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a formal
security certification scheme, such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>.
See <xref target="dloas" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid" format="default"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision SHOULD NOT be used.
They usually do not provide enough precision for a geographic location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"
]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim MUST contain a random value created at system boot time that will allow differentiation of reports from different boot sessions.</t>
        <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic:  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration:  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning:  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance  </dt>
          <dd>
            <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession:  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 
]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is always absolute and never relative.
In CBOR tokens, the OID MUST be encoded according to <xref target="RFC9090" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not CBOR tags.
In JSON tokens, the OID is a string of the form "X.X.X", and a URI is a normal URI string.</t>
        <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)
]]></sourcecode>
      </section>
      <section anchor="dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
        <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
        <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
        <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it MUST be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL, so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 
]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported. TODO: defined objective</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all:  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware:  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel:  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged:  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs:  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial:  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verification-not-run:  </dt>
            <dd>
              <t>Indicates that no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite:  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed:  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified:  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified:  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all, measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with the exception that the nested token can NOT be CBOR format.</t>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token

]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token MUST be an array of two items.
The first item in the array is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag, typically a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
            <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT", "UJCS" or "DEB", the the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <t>The submodule type is distinguished in the encoded bytes by its data type, map/object for a Claims-Set, string for nested token and array for a detached submodule. Nested tokens are byte-string wrapped when encoded in CBOR and base64 encoded for JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set
]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)


$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)


$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16

$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    hw-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

hardware-model-type = bytes .size (1..32)

$$claims-set-claims //= (
    hardware-model-label => hardware-model-type
)

$$claims-set-claims //= ( sw-name-label => tstr )

$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme 
]

$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$claims-set-claims //= (profile-label => ~uri / ~oid)

$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 

$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 

verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"

swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]


$$claims-set-claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token
    

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message

UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set

DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



Nested-Token =
    tstr / 
    bstr .cbor Tagged-CBOR-Token



iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


sueids-label = <TBD25>
hw-version-label = <TBD26>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
hardware-model-label = <TBD39>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+

UJCS-Message = Claims-Set



Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"


iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
hardware-model-label /= "hwmodel"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-02.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="January" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.


   // The present version (-01) has a few editorial improvements over
   // -00 and attempts to address points from Thomas Fossati's
   // 2021-03-16 review, for further discussion at IETF 111.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-02"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-20.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="26" month="January" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-20"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-14.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="9" month="December" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-14"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="submodules-for-board-and-device" numbered="true" toc="default">
        <name>Submodules for Board and Device</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /       13: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /     39: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /      26: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /         29: "Acme OS",
    / SW Version /      30: ["3.5.5", 1],
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level /  14: 3, / secure restricted OS /
    / submods / 20: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   13: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 39: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  26: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   13: 61234, / PEN Format OEM ID / 
            / HW Version /  26: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="UEID-Design" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIANKm9WEAA+y9aXPjVpYo+B2/AkFXjFNVJLXm2s/uJ0uyS+7cXkpZ7p6a
CgdIghQqSYANgKlU53P99jn7PReAlFldPREvJrq6wykCF3c99+zLZDJJmjYr
F79m66rMX6RtvcuTYlvTX017dHDw/OAomWfti7RpF0myqOZltoGGizpbtpMi
b5eTOmubSZ61k3XW5k2bJLerF+m70+ur9Jeq/lCUq/Snutptk2/SeVU2edns
mhfpt3d58y08anazTdE0RVW2d1vo9/Li+sdkW7xI0rSt5tqOfizybXsDT07w
d1PVbZ0vm9CiudvED+bVZpvNW9diNwvPygof1ct5vmjau3WuzdqixR/XN3l6
UcKPu/S0xWVlLcwxva4+5GX66OL0ei/JZrM6//gihR9JVucZTL5s87rM2+TD
LexXsSpx8Zn7fD6ralj0AjbqRXp0cHg8OTxIsl17U9UvkklalDD9l9P05a5c
zNbZIocZ8na/zHZ1Xs7z6FVVw0Zf5fNdjdOEGVf1Xfry5Rm8yjdZsX6Rrlfr
/9lIg5beT2EHdKSfpukrOPu7bGPj/FTUxeImq90LGuV/7bI1fLlJr/P5TVmt
q1WRN7De+RT3FU4ihz19/PTp4/RVVec31a7J0/O6+IjTnMPgMM+sTM+LfFXh
rucr2I0X6Vm2LpZVXRYZHdeubGto+f7qFH5ubwggR384TJ89fpY+eXyYPgVw
HIXFbXiK//Pf22L67zI/v7yfp+mbb8+rslrd7MJO/pzX+eYufvP1Szx6+jz9
MatLOMdqt7pJ31XZwpboXtB6Frih7w9P0qcvr6IFlkWbL9J/AehYVJuw1j+c
nKSHR4+P0uMnx4fPnoeV/rVa0GT7S03Kqt4AbH3M8ca8+/Hs6PDwufz59PCx
/fn48HH484n8+ez5iWvwNPxpT58dHGjbwyP77PDpif55/PxI/3xyaG2fnmhn
x8+fhc8ea9vngFXwT/wf/PPLT1fPTvh3m9Ur3OfRTdtumxf7+3lWtzeTolxW
03KVTTfFen97s91fVLflGvZ+Cj/+eVms8+/mVVUvJrer5tnJiLvii/zLm3cv
z9OfLt6cX1xfnqVX/3Z1ffEqPXz+7GScvv7pdHp1/fp8enBw/OTXw+nB9OBX
mgx1oPcS/54wjLyma5yt05/yqtnCj2w9wUu/Xhcrup6n+M9d+gh63qMP7aqf
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

-->

</rfc>
