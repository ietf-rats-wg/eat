<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="December" day="18"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
        <dt>Socket Group:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID <bcp14>MUST</bcp14> treat a UEID as a
completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte <bcp14>MUST</bcp14> be treated as part of the opaque UEID and <bcp14>MUST NOT</bcp14> be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this <bcp14>MUST</bcp14> be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy <bcp14>MUST</bcp14> conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity <bcp14>MUST</bcp14> still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs attestation results with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standaridized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
The EAT format, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they <bcp14>SHOULD NOT</bcp14> be passed through the verifier into attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but <bcp14>MUST NOT</bcp14> be a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, even slight modifications, such as the use of a different means of key identification, are a divergence from this profile and require allocation of a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this section and adding requirements.
Such a profile <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/cwt" type="TXT"/>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/jwt" type="TXT"/>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/cose" type="TXT"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/cbor-tags" type="TXT"/>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="https://www.iana.org/assignments/core-parameters">
          <front>
            <title>Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
          <format target="http://www.iana.org/assignments/core-parameters" type="TXT"/>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="9" month="November" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-21"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://dx.doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="http://dx.doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="19" month="October" year="2022"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-01"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-18">
        <name>From draft-ietf-rats-eat-18</name>
        <ul spacing="normal">
          <li>Add paragraph to appendix D noting that the "iat" claim is ~time-int</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PkRpIg+B2/Ake1mcjuzOSjWC/OSt0USampqdcWWa2Z
1ck0YCaYRFcmkAMgi8WurrH9IXtm91vup+wvOX+HB4Bksadn1u7MtmymxQQC
8fDw8PC3j8fj5MNR+ihJ2qJd5Efp5U2enpXw4y49btu8abO2qMr0snqfl+n2
2fHlTpJdXdU5fAQ/klk1LbMlfDers+t2XOTt9bjO2macZ+14kWEHyTRrj9Km
nSXJtCqbvGzWzVHa1us8ado6z5ZH6fnZ5fdJsarpcdMe7O093ztIMnh5lF7k
03UN00lu50fp2+PLi+T9LXRXzMuinKeZm+P0qqqTZFUcJWnaVtOj9Ou7vPma
f8zyVXsDTw7xd1PVMPB1E1o0d8v4wbRarrJp61qsr8KzssJH9fU0nzXtHYKN
m8G/bN3eVPVRMk6LEvp7MUlfrMvZ1SKb5fAJw+pFtq7zcppHr6p6HhaL21DV
d+mLFyfwKl9mxeIoXcwXf2ikQUvvJzAlHemHSfoyK2d32dLG+aGoi9lNVrsX
NMp/XWcL+HKZXubTm7JaVPMib9LzcjrBhQJocljk46dPH6cvqzq/qdZNnp7W
xQec5hQGh3lmZXpa5PMKwZDPAfpH6Um2KK6ruiwygt+6bGto+e7iGH6ubqoS
JrT1u/302eNn6ZPH++lT2OWtsLglT/EP/9oWk3+V+fnl/ThJX399WpXV/GYd
IPljXufLu/jNw5d48PR5+n1Wl4A31Xp+k76tspkt0b2g9cwQoO/2D9OnLy6i
BZZFm8/SfwRsnFXLsNbfHR6m+wePD9JHTx7tP3seVvrnakaT3bjUk0n6U7ZY
ZNOwzpOsXriHtMS3MOofYRaz9KK6bm/htIx0gTLSFL76Q53PbrBVI41oJDyJ
bV1crVvGVR7lj3n5Pv2uqN/fVIu/6DDf19m6vKmu8zq9OL+Ep3r8ey9k1Bvo
ZXIlvfyhKdrJtbWcAKrraJc31TJr0u+rpoHzq8Md18v0RbFEmIYuW2o6ueam
f8hqhRf39LKYr/NF+h3AB4hBXleNezW9yeDdW/xvDUAo7agBwuULQDsDX/pT
Vb9vHEpO698hQftDo00n08x6fpMBAKfv03cw1fq2+PP7MGbW3hSwsu9qnG89
C/DNyhKw8LKZIjDKYn7vom+o9aS11r11v8nWi/Skrm4X+V2SlFW9BOh8yJH+
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
unO2nhUV30Zw6VQoftxdZdP3gQux+rXjqi7Yg8wNLIYl5K24wtcFts7TM3ZE
4ezBeTuVRNIScl1JfVvh6YS/oRNHhqc51yOOg4zRHL7JWqNuPV7FN1iqOPlO
IgcsG4yL56XUTVRPaY46My2oZEUf2sr+1rJrXFaL8otF9VSuKXiWXSstEtf5
Est8O2WWNxVYfiNGiK5BYkleTQ3V3CyWJOv7WVAVEXV748uZc7E3g3WYOXuP
i8hlc4fzTaQqNBgpMuVoj6apppxhk751JN91o/dx4OheANKgSjG4tP0vmBw1
6M+q63Fx7PbLqVSwGgd7eleLmeQGDIkRXXQ+M0ihj4LydrFgh6pZdQOL52Np
r1aTwMpQ6nrsDbU+d92Q++B0YFck1tNpWjXdIkKdgnSKrntjOznj02JORjm6
/Z2pNp4PKjHQXs9xPZxdwjCJtNXC+IYO+HAnlj406uzKYX8+k8JziztGev0F
gsYkB5o1k1l3toOKZovLauYFpkzzIRNhqa8K9Pq6c2ktECxkJ/8jEL0P6ETi
MEHLZHG0efBfMpWG8MScjhQBS3JgJ92CTcwSp0y65Ep5a6GCVkdY/bpITMQb
ATixdTkL43nxcMAPJeRIVf8R+sruCS3s1MUeeRns5FaeKUuv17WK0xUW3EER
O/6aBHvXvzDhITk1NB+bxUMSo7CnIqXKpCJJIs4xAOQjARkVu/PbH/BcCsfN
CJNZjFGUiVsdRwdiZH5DbA0AWJ8dX/K0LwKyIufEJhdWnwE8XlEv40uCa7cB
XRhGYtR3xzKipsGEE9zgI0cMmETTl0qMCU6i0b/hb/2zJOk9Sr8h/oz8OejB
+Jzc6sfUkpswCxce9JtIx5s60AzPpBb/DaxCXrJ6XHq4dwrfMI+b3FfSh/ip
wNZ/wpo9KHLC32HTPu845gBhZL0BA92Hzm4cdbyRSgrDFyNIDyG6mxt50dDm
FpTrlZLjiNilh45ryvgePgAjSHnPC19wWgMeKW3+DclQaZvNXfYoTnQclUTV
zIg3+WJlKl6Wxf09AQNJXv6NOEdLuiDny6qG7Yp+j6ngK+zW1o8/XW4BcLew
O/rju3evTl+c0Z+n5z+cXVxudb/9E9108DF8O36Jq53ng0H1fVQMqDX4ge0q
YuZ3a6padG+73u4n0VRVRiOoHqUDMCDxjEE7ZtD2mtFyUU67dzlDbgf/mSck
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
K+bpNB55/wdRR/h5xWECAA==

-->

</rfc>
