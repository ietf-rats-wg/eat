<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="29"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT MUST always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection MUST be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification MAY use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets, enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets MUST be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications MUST also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4.0", 1] / Multipartnumeric version /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
          <li>Removed section discussing cti/jti and other mention of cti/jti</li>
          <li>Some rework on section 3 including adding back in a <strong>non-normative</strong> reference to UCCS</li>
          <li>Improved wording in section 1.3</li>
          <li>Improvements to abstract</li>
          <li>Appendix C clarifications -- say "message" not "protocol"</li>
          <li>Removed "transport security" section from security considerations</li>
          <li>Entirely remove section 4.4 that discussed including keys in claims</li>
          <li>Largely rewrite the first paragraphs in section 1, the introduction</li>
          <li>Mention $$Claims-Set-Claims in prose and require future claims be in CDDL</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWHYo+h2/AqWeqpZmSMqSZbftnO5ELal71LEtH0tO
J3dulw9EQhTGJMAAoGWOx/ntZ7332gAoazJJ1b1VcSXTIrCxn2uv92M8HidN
m5Wz99miKvMXaVuv86RY1fRX0x4+evT80WEyzdoXadPOkmRWTctsCQ1ndXbT
jou8vRnXWduM86wdL7I2b9okuZu/SN8eX12mv1b1h6Kcpz/X1XqVfJNOq7LJ
y2bdvEi/3eTNt/CoWV8vi6YpqrLdrKDf87Orn5JV8SJJ07aaajv6MctX7S08
OcLfTVW3dX7ThBbNZhk/mFbLVTZtXYv1dXhWVviovpnms6bdLHJt1hYt/ri6
zdOzEn5s0uMWl5W1MMf0qvqQl+nu2fHVXpJdX9f5xxcp/EiyOs9g8mWb12Xe
Jh/uYL+KeYmLz9zn0+uqhkXPYKNepIePDh6PDx4l2bq9reoXyTgtSpj+y0n6
cl3OrhfZLIcZ8na/zNZ1Xk7z6FVVw0Zf5tN1jdOEGVf1Jn358gRe5cusWLxI
F/PFPzXSoKX3E9gBHennSfoKzn6TLW2cn4u6mN1mtXtBo/zvdbaAL5fpVT69
LatFNS/yBtY7neC+wknksKdPvvvuSfqqqvPbat3k6WldfMRpTmFwmGdWpqdF
Pq9w1/M57MaL9CRbFDdVXRYZHde6bGto+e7yGH6ubgkgd/5wkD578ix9+uQg
/Q7AcScsbslT/Kd/b4vJv8v8/PJ+maQX355WZTW/XYed/CWv8+UmfvPwJR5+
9zz9KatLOMdqPb9N31bZzJboXtB6Zrih7w6O0u9eXkYLLIs2n6X/DNAxq5Zh
rX84OkoPDp8cpo+fPj549jys9M/VjCbbX2oCV6qti+t1yxDEa/xjXn5Ifyzq
D7fV4i+6vp/qbF3eVjd5nV6eX8FThd/eCxn1FnqZXEsv/9QU7eTGWk4AAHW0
q9tqmTXpT1XTAJTrcMf1Mn1ZLHGlocuWmk5uuOk/ZbUeGPf0qpiv80X6Y7ZY
wJXJ66pxr6a3Gbx7i/+tZ01V2gUAMMgXAAzpZXXT3sFNJLzTOECZ1n9ATPVP
jTadTDPr+U0GGzj9kL6DqdZ3xZ8/hDGz9raAlf1Y43zrWdjfrCwBNq6aKW5G
WczvXfQttZ601rq37jfZepGe1NXdIt8kSVnVS9idjzkiwbc/nRweHDyXP797
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
PvnmZPhkurqFf0+Pjj4eHV2//WHwzfgY/j65uHr+87MPJ0fw+9eLdy/evn77
bvgsuLhoj+vfvj9/01l/ev1kMoy+/fD2Vdz67sPsu/rX7W+WT5Zfvx4O3/ee
fnh3sf7+m1fxN7c3L89+iOpXT79+EX3Xnz77BMOcZ1dHcf359fKr1z+/vKl/
fzOvd7qj66ezD5vxOvl58Oq4FWSd94N198Xo/NvonzdPZ5/ONv98Mr1JWkGS
fZE7CXb9nqXzzScNNNwregqcbdBHtmzDZiSF25/ulaIKsKBKcfmT26fN5LtB
+jJ9+vW3wTfps+HTy9GTMf599vbns+BF+rTfgIeW4+g5PfTs7Wlz8uTbn+H/
t2fpTRq/O22efVh8evHh7acXP4+bL4+/b0Ejs+QraPSqHYye3GRnV6fBD8Oz
zll6lp3NXwTfp/g7NHzx4aY1P31++Wz59O3m1XfXz1/9/HXw5PmHy9un/wyv
3313EbSCzndfZz/ffOOsG88qlx7hnyK0DZ/WPN4MXN/TMZUXkM8rvJknw+Pz
gVYbhEdVkHOmYznUnIF0ig+q45AqNUvLrArMGhix5KRwZnC6OeMNi4GiXFPf
IQkUkTIU73QOowrICO91gn0/6O3Lqbp8NAiaQdh5dAcEh3/o1Bq+TGKsNq72
/F8+3/1icrXEor3zcgMSfQUDCJtHrU4zbA06R81+t3d80hy0+hia0QybUbPV
bDc7zW6zx0N0Uo/l/f5R/yg8bZ+0uhgddtqB9oa9QStod4/a3U50Omy1j066
bdVV+4N2RDgI7aDb7fSGYTA4PT3qtdqDdmdw1G53T+D1fldV00ETNNVu1A/C
VjTo9oetbq/dCY/h9U4QnsBVfdgJw6CjF/bBURhF3V730R2rYlfHlITE1fjJ
P/DdZOTtsHAIJlfGlKpZXw1TUsHFTNk5rhuaMnUaUltdmnMC5Euvk87HWtQM
kzNBieMCDWNbXtcBZrIwWqxjqu+Yq9llBILgdIctT5NkItQrNe+kWc0r4uI4
MdZSRMVTNVprojR10XOedZOW5KB1aa229eUm01NLQFkkg0qvNrxzCUBPnG0b
Y24Yq2wyYJNxYYCm8kvKQQbchylsX1Ek0db6G1G9vOQKBTaOajNfo0bjqLlV
zKWq0XV80WCj7YvFWkIE4OAx4SA6l9TbIO23uonUAnY5aHjEswiNEBlMM9z/
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
50s1CeN495TXPPa8/wtSlKk2EGcCAA==

-->

</rfc>
