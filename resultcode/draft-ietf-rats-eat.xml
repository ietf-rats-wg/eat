<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.10.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="November" day="06"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
Relying Party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a Relying Party, a server or a
service.  This allows the Relying Party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>The notion of attestation here is large and may include, but is not limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture" format="default"/>.
In particular it is a format that can be used for Attestation Evidence or Attestation Results as defined in the RATS architecture.</t>
      <section anchor="cwt-jwt-uccs-ujcs-and-deb" numbered="true" toc="default">
        <name>CWT, JWT, UCCS, UJCS and DEB</name>
        <t>An EAT is a set of claims about an entity/device based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT), <xref target="RFC8392" format="default"/></li>
          <li>Unprotected CWT Claims Sets (UCCS), <xref target="UCCS.Draft" format="default"/></li>
          <li>JSON Web Token (JWT), <xref target="RFC7519" format="default"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds two more top-level messages:</t>
        <ul spacing="normal">
          <li>Unprotected JWT Claims Set (UJCS), <xref target="UJCS" format="default"/></li>
          <li>Detached EAT Bundle (DEB), <xref target="DEB" format="default"/></li>
        </ul>
        <t>A DEB is simple structure to hold a collection of detached claims-sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
      </section>
      <section anchor="cddl-cbor-and-json" numbered="true" toc="default">
        <name>CDDL, CBOR and JSON</name>
        <t>An EAT can be encoded in either CBOR or JSON.
The definition of each claim is such that it can be encoded either.
Each token is either entirely CBOR or JSON, with only an exception for nested tokens.</t>
        <t>To implement composite attestation as described in the RATS architecture document, one token has to be nested inside another.
It is also possible to construct composite Attestation Results (see below) which may be expressed as one token nested inside another.
So as to not force each end-end attestation system to be all JSON or all CBOR, nesting of JSON-encoded tokens in CBOR-encoded tokens and vice versa is accommodated by this specification.
This is the only place that CBOR and JSON can be mixed.</t>
        <t>This specification formally uses CDDL, <xref target="RFC8610" format="default"/>, to
define each claim.  The implementor interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> where Appendix E is insufficient.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392" format="default"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519" format="default"/>.</t>
        <t>The UCCS specification does not include CDDL.
This specification provides CDDL for it.</t>
        <t>(TODO: The authors are open to modifications to this specification and the UCCS specification to include CDDL for UCCS and UJCS there instead of here.)</t>
      </section>
      <section anchor="operating-model-and-rats-architecture" numbered="true" toc="default">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture" format="default"/>, or even that it be used for attestation, this document is authored with an orientation around that model.</t>
        <t>To summarize, an Attester on an entity/device generates Attestation Evidence.
Attestation Evidence is a Claims Set describing various characteristics of the entity/device.
Attestation Evidence also is usually signed by a key that proves the entity/device and the evidence it produces are authentic.
The Claims Set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is validated.
Some of the Claims may also be validated against Reference Values.
The Verifier then produces Attestation Results which is also usually a Claims Set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the "Remote Attestaton Procedures", RATS.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing a device on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="use-as-attestation-evidence" numbered="true" toc="default">
          <name>Use as Attestation Evidence</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence.</t>
          <t>Attestation Evidence nearly always has to be signed or otherwise have authenticity and integrity protection because the Attester is remote relative to the Verifier.
Usually, this is by using COSE/JOSE signing where the signing key is an attestation key provisioned into the entity/device by its manufacturer.
The details of how this is achieved are beyond this specification, but see <xref target="keyid" format="default"/>.
If there is already a suitable secure channel between the Attester and Verifier, UCCS may be used.</t>
        </section>
        <section anchor="use-as-attestation-results" numbered="true" toc="default">
          <name>Use as Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Results.</t>
          <t>It is useful to characterize the relationship of claims in Evidence to those in Attestation Results.</t>
          <t>Many claims in Attestation Evidence simply will pass through the Verifier to the Relying Party without modification.
They will be verified as authentic from the device by the Verifier just through normal verification of the Attester's signature.
The UEID, <xref target="UEID" format="default"/>, and Location, <xref target="location" format="default"/>, are examples of claims that may be passed through.</t>
          <t>Some claims in Attestation Evidence will be verified by the Verifier by comparison to Reference Values.
These claims will not likely be conveyed to the Relying Party.
Instead, some claim indicating they were checked may be added to the Attestation Results or it may be tacitly known that the Verifier always does this check.
For example, the Verifier receives the Software Evidence claim, <xref target="swevidence" format="default"/>, compares it to Reference Values and conveys the results to the Relying Party in a Software Measurement Results Claim, <xref target="swresults" format="default"/>.</t>
          <t>In some cases the Verifier may provide privacy-preserving functionality by stripping or modifying claims that do not posses sufficient privacy-preserving characteristics.
For example, the data in the Location claim, <xref target="location" format="default"/>, may be modified to have a precision of a few kilometers rather than a few meters.</t>
          <t>When the Verifier is remote from the Relying Party, the Attestation Results must be protected for integrity, authenticity and possibly confidentiality.
Often this will simply be HTTPS as per a normal web service, but COSE or JOSE may also be used.
The details of this protection are beyond the scope of this document.</t>
        </section>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that is used to produce attestations.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/> and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim:  </dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>
Claim Name:  </dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>
Claim Key:  </dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>
Claim Value:  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT/JWT Claims Set:  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture" format="default"/></t>
      <dl>
        <dt>
Attester:  </dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>
Verifier:  </dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>
Relying Party:  </dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949" format="default"/>.</t>
        </dd>
        <dt>
Attestation Evidence:  </dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>
Attestation Results:  </dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>
Reference Values:  </dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT <xref target="IANA.JWT.Claims" format="default"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding" format="default"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the Relying Party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)

]]></sourcecode>
      </section>
      <section anchor="UEID" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID is permanent. It never change for a given
device / entity.</t>
        <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the Relying Party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <t>A Device Indentifier URN is registered for UEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)
]]></sourcecode>
      </section>
      <section anchor="semi-permanent-ueids-sueids" numbered="true" toc="default">
        <name>Semi-permanent UEIDs (SUEIDs)</name>
        <t>An SEUID is of the same format as a UEID, but it may change to a different value on device life-cycle events.
Examples of these events are change of ownership, factory reset and on-boarding into an IoT device management system.
A device may have both a UEID and SUEIDs, neither, one or the other.</t>
        <t>There may be multiple SUEIDs.
Each one has a text string label the purpose of which is to distinguish it from others in the token.
The label may name the purpose, application or type of the SUEID.
Typically, there will be few SUEDs so there is no need for a formal labeling mechanism like a registry.
The EAT profile may describe how SUEIDs should be labeled.
If there is only one SUEID, the claim remains a map and there still must be a label.
For example, the label for the SUEID used by FIDO Onboarding Protocol could simply be "FDO".</t>
        <t>There are privacy considerations for SUEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

]]></sourcecode>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>Hardware OEM Identification (oemid)</name>
        <t>This claim identifies the OEM of the hardware.
Any of the three forms may be used at the convenience of the attester implementation.
The receiver of this claim MUST be able to handle all three forms.</t>
        <section anchor="random-number-based" numbered="true" toc="default">
          <name>Random Number Based</name>
          <t>This format is always 16 bytes in size (128 bits).</t>
          <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every device they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
          <t>The OEM may also use a hash like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash may be something whose uniqueness is managed by a central registry like a domain name.</t>
          <t>This is to be base64url encoded in JSON.</t>
        </section>
        <section anchor="ieee-based" numbered="true" toc="default">
          <name>IEEE Based</name>
          <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/>.</t>
          <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
          <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
          <t>This format is always 3 bytes in size in CBOR.</t>
        </section>
        <section anchor="iana-private-enterprise-number" numbered="true" toc="default">
          <name>IANA Private Enterprise Number</name>
          <t>IANA maintains a simple integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN" format="default"/>.</t>
          <t>PENs are often used to create an OID.
That is not the case here.
They are used only as a simple integer.</t>
          <t>In CBOR this is encoded as a major type 0 integer in CBOR and is typically 3 bytes.
It is encoded as a number in JSON.</t>
          <sourcecode type="CDDL"><![CDATA[
oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)
]]></sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit <xref target="EAN-13" format="default"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]
]]></sourcecode>
      </section>
      <section anchor="software-name-claim" numbered="true" toc="default">
        <name>Software Name Claim</name>
        <t>This is a simple free-form text claim for the name of the software.
A CoSWID manifest or other type of manifest can be used instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= ( sw-name-label => tstr )

]]></sourcecode>
      </section>
      <section anchor="software-version-claim" numbered="true" toc="default">
        <name>Software Version Claim</name>
        <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr,
    scheme:  $version-scheme / As defined by CoSWID /
]


]]></sourcecode>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is by
defining four security levels as described below.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity/client device where the attestation key
resides and the claims originate.</t>
        <dl>
          <dt>
1 - Unrestricted:  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise,
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2 - Restricted:  </dt>
          <dd>
            <t>Entities at this level are not general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the secure-restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.
Often these can be considered more secure than unrestricted just because they are much simpler and a smaller attack surface, but this won't always be the case.
Some unrestricted devices may be implemented in a way that provides poor protection of signing keys.</t>
          </dd>
          <dt>
3 - Secure-Restricted:  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined in section 4 of FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network/remote attacks against the device.</t>
          </dd>
          <dt>
4 - Hardware:  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Examples include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification scheme such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Attester.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"
]]></sourcecode>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
OEMID claim described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (secure-boot-label => bool)
]]></sourcecode>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the Relying Party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The Verifier or Relying Party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the Relying Party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

]]></sourcecode>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (uptime-label => uint)
]]></sourcecode>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //=  (boot-seed-label => bytes)
]]></sourcecode>
      </section>
      <section anchor="the-intended-use-claim-intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
        </dl>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 

]]></sourcecode>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR.OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (profile-label => ~uri / ~oid)

oid = #6.4000(bstr) ; TODO: Replace with CDDL from OID RFC

]]></sourcecode>
      </section>
      <section anchor="the-dloa-digital-letter-or-approval-claim-dloas" numbered="true" toc="default">
        <name>The DLOA (Digital Letter or Approval) Claim (dloas)</name>
        <t>A DLOA (Digital Letter of Approval) <xref target="DLOA" format="default"/> is an XML document that describes a certification that a device or entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
        <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity, device or submodule has received the certification in the DLOA.</t>
        <t>This claim can contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity, device or submodule received all of the certifications.</t>
        <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
        <t>The first data item is a URI for the registrar.
The second data item is a platform label to indicate the particular platform that was certified.
For platform certifications only these two are needed.</t>
        <t>A DLOA may equally apply to an application.
In that case it has the URI for the registrar, a platform label and additionally an application label.</t>
        <t>The method of combining the registrar URI, platform label and possibly application label is specified in <xref target="DLOA" format="default"/>.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]


]]></sourcecode>
      </section>
      <section anchor="the-software-manifests-claim-manifests" numbered="true" toc="default">
        <name>The Software Manifests Claim (manifests)</name>
        <t>This claim contains descriptions of software that is present on the device.
These manifests are installed on the device when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the device, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is that they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and/or the Relying Party.</t>
        <t>In some cases these will be signed by the software manufacturer independent of any signing for the purpose of EAT attestation.
Manifest claims should include the manufacturer's signature (which will be signed over  by the attestation signature).
In other cases the attestation signature will be the only one.</t>
        <t>This claim allows multiple formats for the manifest.
For example the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CBOR tag.
In many cases, for examples CoSWID, a tag will already be registered with IANA.
If not, a tag MUST be registered.
It can be in the first-come-first-served space which has minimal requirements for registration.</t>
        <t>The claim is an array of one or more manifests.
To facilitate hand off of the manifest to a decoding library, each manifest is contained in a byte string.
This occurs for CBOR-format manifests as well as non-CBOR format manifests.</t>
        <t>If a particular manifest type uses CBOR encoding, then the item in the array for it MUST be a byte string that contains a CBOR tag.
The EAT decoder must decode the byte string and then the CBOR within it to find the tag number to identify the type of manifest.
The contents of the byte string is then handed to the particular manifest processor for that type of manifest.
CoSWID and SUIT manifest are examples of this.</t>
        <t>If a particular manifest type does not use CBOR encoding, then the item in the array for it must be a CBOR tag that contains a byte string.
The EAT decoder uses the tag to identify the processor for that type of manifest.
The contents of the tag, the byte string, are handed to the manifest processor.
Note that a byte string is used to contain the manifest whether it is a text based format or not.
An example of this is an XML format ISO/IEC 19770 SWID.</t>
        <t>It is not possible to describe the above requirements in CDDL so the type for an individual manifest is any in the CDDL below.
The above text sets the encoding requirement.</t>
        <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests may be of multiple formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged

]]></sourcecode>
      </section>
      <section anchor="swevidence" numbered="true" toc="default">
        <name>The Software Evidence Claim (swevidence)</name>
        <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the device.
The defining characteristic of this claim is that its contents are created by processes on the device that inventory, measure or otherwise characterize the software on the device.
The contents of this claim do not originate from the software manufacturer.</t>
        <t>In most cases the contents of this claim are signed as part of attestation signing, but independent signing in addition to the attestation signing is not ruled out when a particular evidence format supports it.</t>
        <t>This claim uses the same mechanism for identification of the type of the swevidence as is used for the type of the manifest in the manifests claim.
It also uses the same byte string based mechanism for containing the claim and easing the hand off to a processing library.
See the discussion above in the manifests claim.</t>
        <t>When the <xref target="CoSWID" format="default"/> format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 


]]></sourcecode>
      </section>
      <section anchor="swresults" numbered="true" toc="default">
        <name>The SW Measurement Results Claim (swresults)</name>
        <t>This claims reports the outcome of the comparison of a measurement on some software to the expected Reference Values.
It may report a successful comparison, failed comparison or other.</t>
        <t>This claim may be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim to Reference Values.</t>
        <t>This claim can also be generated on the device if the device has the ability for one subsystem to measure another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
        <t>Within an attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for the kernel and each individual application separately.</t>
        <t>For each software objective, the following can be reported.</t>
        <section anchor="scheme" numbered="true" toc="default">
          <name>Scheme</name>
          <t>This is the free-form text name of the verification system or scheme that performed the verification.
There is no official registry of schemes or systems.
It may be the name of a commercial product or such.</t>
        </section>
        <section anchor="objective" numbered="true" toc="default">
          <name>Objective</name>
          <t>This roughly characterizes the coverage of the software measurement software.
This corresponds to the attestation target or the submodule.
If all of the indicated target is not covered, the measurement must indicate partial.</t>
          <dl>
            <dt>
1 -- all  </dt>
            <dd>
              <t>Indicates all the software has been verified, for example, all the software in the attestation target or the submodule</t>
            </dd>
            <dt>
2 -- firmware  </dt>
            <dd>
              <t>Indicates all of and only the firmware</t>
            </dd>
            <dt>
3 -- kernel  </dt>
            <dd>
              <t>Refers to all of the most-privileged software, for example the Linux kernel</t>
            </dd>
            <dt>
4 -- privileged  </dt>
            <dd>
              <t>Refers to all of the software used by the root, system or administrative account</t>
            </dd>
            <dt>
5 -- system-libs  </dt>
            <dd>
              <t>Refers to all of the system libraries that are broadly shared and used by applications and such</t>
            </dd>
            <dt>
6 -- partial  </dt>
            <dd>
              <t>Some other partial set of the software</t>
            </dd>
          </dl>
        </section>
        <section anchor="results" numbered="true" toc="default">
          <name>Results</name>
          <t>This describes the result of the measurement and also the comparison to Reference Values.</t>
          <dl>
            <dt>
1 -- verificaton-not-run  </dt>
            <dd>
              <t>Indicates no attempt was made to run the verification</t>
            </dd>
            <dt>
2 -- verification-indeterminite  </dt>
            <dd>
              <t>The verification was attempted, but it did not produce a result; perhaps it ran out of memory, the battery died or such</t>
            </dd>
            <dt>
3 -- verification-failed  </dt>
            <dd>
              <t>The verification ran to completion, the comparison was completed and did not compare correctly to the Reference Values</t>
            </dd>
            <dt>
4 -- fully-verified  </dt>
            <dd>
              <t>The verification ran to completion and all measurements compared correctly to Reference Values</t>
            </dd>
            <dt>
5 -- partially-verified  </dt>
            <dd>
              <t>The verification ran to completion and some, but not all measurements compared correctly to Reference Values</t>
            </dd>
          </dl>
        </section>
        <section anchor="objective-name" numbered="true" toc="default">
          <name>Objective Name</name>
          <t>This is a free-form text string that describes the objective.
For example, "Linux kernel" or "Facebook App"</t>
          <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]
]]></sourcecode>
        </section>
      </section>
      <section anchor="result-code" numbered="true" toc="default">
        <name>Result Code</name>
        <t>This is a simple enumerated claim with four values to indicate an overall result for the token.
It is intended to indicate the overall result in an Attestation Results EAT that was produced by a Verifier, but it can be used for another other purpose.
It may be accompanied by many other claims to form the full Attestation Results.
Some schemes for Attestation Results might not use it at all.</t>
        <t>It has only four values and is not extensible to be as simple as possible to interpret.
Specific use cases should invent other claims to give more detailed error numbers, error strings and such.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Result</th>
              <th align="left">Value</th>
              <th align="left">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Success</td>
              <td align="left">0</td>
              <td align="left">The input was fully and successfully processed against the required rules and policies.</td>
            </tr>
            <tr>
              <td align="left">Failure</td>
              <td align="left">1</td>
              <td align="left">The input was processed at least partially and found not to mean the required rules and policies.</td>
            </tr>
            <tr>
              <td align="left">Malfunction</td>
              <td align="left">2</td>
              <td align="left">The input was not processed because the Verifier itself failed. Trying again later when the Verifier is fixed or not overloaded may be useful.</td>
            </tr>
            <tr>
              <td align="left">Input Type</td>
              <td align="left">3</td>
              <td align="left">The input is of the wrong type for the Verifier. It is not useful to try again with the same input.</td>
            </tr>
          </tbody>
        </table>
        <sourcecode type="CDDL"><![CDATA[
$$claims-set-claims //= (resultcode-label => resultcode-type)

resultcode-type = resultcode-cbor-type / resultcode-json-type

resultcode-cbor-type = &(
    result-success: 0,
    result-fail: 1,
    result-malfunction: 2,
    result-input-type: 3
)

resultcode-json-type = 
    "success" /
    "fail" /
    "malfunction" /
    "input-type"

]]></sourcecode>
      </section>
      <section anchor="submodules-submods" numbered="true" toc="default">
        <name>Submodules (submods)</name>
        <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
        <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
        <section anchor="submodule-types" numbered="true" toc="default">
          <name>Submodule Types</name>
          <t>The following sections define the three major types of submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
            <li>The digest of a detached Claims-Set</li>
          </ul>
          <t>These are distinguished primarily by their data type which may be a map/object, string or array.</t>
          <section anchor="submodule-claims-set" numbered="true" toc="default">
            <name>Submodule Claims-Set</name>
            <t>This is simply a subordinate Claims-Set containing claims about the submodule.</t>
            <t>The submodule claims-set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment as described in the RATS architecture.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>The encoding of a submodule Claims-Set is always the same as the encoding as the token it is part of.</t>
            <t>This data type for this type of submodule is a map/object as that is the type of a Claims-Set.</t>
          </section>
          <section anchor="nested-token" numbered="true" toc="default">
            <name>Nested Token</name>
            <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture" format="default"/></t>
            <t>In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token does NOT need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.</t>
            <t>Thus a CBOR-encoded token like a CWT or UCCS can have a JWT as a nested token submodule and a JSON-encoded token can have a CWT or UCCS as a nested token submodule.</t>
            <t>The data type for this type of submodule is either a text or byte string.</t>
            <t>Mechanisms are defined for identifying the encoding and type of the nested token. These mechanisms are different for CBOR and JSON encoding.
The type of a CBOR-encoded nested token is identified using the CBOR tagging mechanism and thus is in common with identification used when any CBOR-encoded token is part of a CBOR-based protocol.
A new simple type mechanism is defined for indication of the type of a JSON-encoded token since there is no JSON equivalent of tagging.</t>
            <section anchor="surrounding-eat-is-cbor-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR-Encoded</name>
              <t>If the submodule is a byte string, then the nested token is CBOR-encoded.
The byte string always wraps a token that is a tag.
The tag identifies whether the nested token is a CWT, a UCCS or a CBOR-encoded DEB.</t>
              <t>If the submodule is a text string, then the nested token is JSON-encoded.
The text string contains JSON.
That JSON is the exactly the JSON described in the next section with one exception.
The token can't be CBOR-encoded.</t>
              <sourcecode type="CDDL"><![CDATA[
; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token


]]></sourcecode>
            </section>
            <section anchor="surrounding-eat-is-json-encoded" numbered="true" toc="default">
              <name>Surrounding EAT is JSON-Encoded</name>
              <t>A nested token in a JSON-encoded token is an array of two items.
The first is a string that indicates the type of the second item as follows:</t>
              <dl>
                <dt>
"JWT"  </dt>
                <dd>
                  <t>A JWT formatted according to <xref target="RFC7519" format="default"/></t>
                </dd>
                <dt>
"CBOR"  </dt>
                <dd>
                  <t>Some base64url-encoded CBOR that is a tag that is either a CWT, UCCS or CBOR-encoded DEB</t>
                </dd>
                <dt>
"UJCS"  </dt>
                <dd>
                  <t>A UJCS-Message. (A UJCS-Message is identical to a JSON-encoded Claims-Set)</t>
                </dd>
                <dt>
"DEB"  </dt>
                <dd>
                  <t>A JSON-encoded Detached EAT Bundle.</t>
                </dd>
              </dl>
              <sourcecode type="CDDL"><![CDATA[
; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"
]]></sourcecode>
            </section>
          </section>
          <section anchor="detached-submodule-digest" numbered="true" toc="default">
            <name>Detached Submodule Digest</name>
            <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
            <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
            <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
            <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
            <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
            <t>The data type for this type of submodule is an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
            <t>A DEB, described in <xref target="DEB" format="default"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are usually signed, protocols conveying them must make sure they are not modified in transit.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="cddl-for-submods" numbered="true" toc="default">
          <name>CDDL for submods</name>
          <sourcecode type="CDDL"><![CDATA[
; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]


]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="UJCS" numbered="true" toc="default">
      <name>Unprotected JWT Claims-Sets</name>
      <t>This is simply the JSON equivalent of an Unprotected CWT Claims-Set <xref target="UCCS.Draft" format="default"/>.</t>
      <t>It has no protection of its own so protections must be provided by the protocol carrying it.
These are extensively discussed in <xref target="UCCS.Draft" format="default"/>.
All the security discussion and security considerations in <xref target="UCCS.Draft" format="default"/> apply to UJCS.</t>
      <t>(Note: The EAT author is open to this definition being moved into the UCCS draft, perhaps along with the related CDDL.
It is place here for now so that the current UCCS draft plus this document are complete.
UJCS is needed for the same use cases that a UCCS is needed.
Further, JSON will commonly be used to convey Attestation Results since JSON is common for server to server communications.
Server to server communications will often have established security (e.g., TLS) therefore the signing and encryption from JWS and JWE are unnecssary and burdensome).</t>
    </section>
    <section anchor="DEB" numbered="true" toc="default">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT, JWT, UCCS and UJCS.
It can be used any place that CWT, JWT, UCCS or UJCS messages are used.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, JWT, UCCS or UJCS, but not a DEB.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached claims-sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set


]]></sourcecode>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture" format="default"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods" numbered="true" toc="default">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id" numbered="true" toc="default">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152" format="default"/> and <xref target="RFC7515" format="default"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters" numbered="true" toc="default">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft" format="default"/> and JSON Web Siganture <xref target="RFC7515" format="default"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters" numbered="true" toc="default">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft" format="default"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification" numbered="true" toc="default">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the device and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations" numbered="true" toc="default">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515" format="default"/>.</t>
      </section>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, UJCS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT, UCCS and UJCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support" numbered="true" toc="default">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB" format="default"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims" numbered="true" toc="default">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt" numbered="true" toc="default">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT as well as UCCS.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT, JWT and UCCS.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, JWT or UCCS in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT, JWT and UCCS.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392" format="default"/> and <xref target="RFC7519" format="default"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types" numbered="true" toc="default">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610" format="default"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-data-types" numbered="true" toc="default">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949" format="default"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
string-or-uri = tstr 

time-int = #6.1(int)
]]></sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610" format="default"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
        <section anchor="labels" numbered="true" toc="default">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability" numbered="true" toc="default">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-common-cddl" numbered="true" toc="default">
        <name>Collected Common CDDL</name>
        <sourcecode type="JSON"><![CDATA[
; This is the fundamental definition of a Claims-Set for both CBOR
; and JSON. It is a set of label-value pairs each of which is a
; claim.
;
; In CBOR the labels can be integers or strings with a strong
; preference for integers.  For JSON, the labels are always strings.
;
; The values can be anything, with some consideration for types that
; can work in both CBOR and JSON.

Claims-Set = {
    * $$claims-set-claims,
    * Claim-Label .feature "extended-label" => any
}

Claim-Label = int / text

string-or-uri = tstr 

time-int = #6.1(int)

; This is CDDL for the 7 individual claims that are defined in CWT
; and JWT.  This CDDL works for either CBOR format CWT or JSON format
; JWT The integer format CWT Claim Keys (the labels) are defined in
; cwt-labels.cddl.  The string format JWT Claim Names (the labels)
; are defined in jwt-labels.cddl.

; $$claims-set-claims is defined in claims-set.cddl

$$claims-set-claims //= (iss-label => text)
$$claims-set-claims //= (sub-label => text)
$$claims-set-claims //= (aud-label => text)
$$claims-set-claims //= (exp-label => ~time)
$$claims-set-claims //= (nbf-label => ~time)
$$claims-set-claims //= (iat-label => ~time)

; TODO: how does the bstr get handled in JSON validation with the
; cddl tool?  TODO: should this be a text for JSON?
; $$claims-set-claims //= (cti-label : bytes)

$$claims-set-claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = bstr .size (8..64)


$$claims-set-claims //= (ueid-label => ueid-type)

ueid-type = bstr .size (7..33)

$$claims-set-claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}


oemid-pen = int

oemid-ieee = bstr .size 3

oemid-random = bstr .size 16


$$claims-set-claims //= (
    oemid-label => 
        oemid-random / oemid-ieee / oemid-pen
)

$$claims-set-claims //=  (
    chip-version-label => hw-version-type
)

$$claims-set-claims //=  (
    board-version-label => hw-version-type
)

$$claims-set-claims //=  (
    device-version-label => hw-version-type
)

hw-version-type = [
    version:  tstr,
    scheme:  $version-scheme
]

$$claims-set-claims //= ( sw-name-label => tstr )


$$claims-set-claims //= (
    security-level-label => 
        security-level-cbor-type / 
        security-level-json-type
)

security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-json-type = 
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

$$claims-set-claims //= (secure-boot-label => bool)

$$claims-set-claims //=  (
    debug-status-label => 
        debug-status-cbor-type / debug-status-json-type
)

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-json-type = 
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

$$claims-set-claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"


$$claims-set-claims //= (uptime-label => uint)

$$claims-set-claims //=  (boot-seed-label => bytes)

$$claims-set-claims //= (
    intended-use-label =>
        intended-use-cbor-type / intended-use-json-type
)

intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop: 5
)

intended-use-json-type = 
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop" 


$$claims-set-claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: ~uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]



$$claims-set-claims //= (profile-label => ~uri / ~oid)

oid = #6.4000(bstr) ; TODO: Replace with CDDL from OID RFC


$$claims-set-claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ $$manifest-formats]

; Must be a CoSWID payload type
; TODO: signed CoSWIDs
coswid-that-is-a-cbor-tag-xx = tagged-coswid<concise-swid-tag>

$$manifest-formats /= bytes .cbor coswid-that-is-a-cbor-tag-xx

; TODO: make this work too
;$$manifest-formats /= bytes .cbor SUIT_Envelope_Tagged


$$claims-set-claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ $$swevidence-formats]

; Must be a CoSWID evidence type that is a CBOR tag
; TODO: fix the CDDL so a signed CoSWID is allowed too 
coswid-that-is-a-cbor-tag = tagged-coswid<concise-swid-tag>
$$swevidence-formats /= bytes .cbor coswid-that-is-a-cbor-tag 



$$claims-set-claims //= (swresults-label => [ + swresult-type ])

verification-result-cbor-type = &(
    verification-not-run: 1,
    verification-indeterminate: 2,
    verification-failed: 3,
    fully-verified: 4,
    partially-verified: 5,
)

verification-result-json-type = 
    "verification-not-run" /
    "verification-indeterminate" /
    "verification-failed" /
    "fully-verified" /
    "partially-verified" 


verification-objective-cbor-type = &(
    all: 1,
    firmware: 2,
    kernel: 3,
    privileged: 4,
    system-libs: 5,
    partial: 6,
)

verification-objective-json-type = 
    "all" /
    "firmware" /
    "kernel" /
    "privileged" /
    "system-libs" /
    "partial"


swresult-type = [
    verification-system: tstr,
    objective: verification-objective-cbor-type /
        verification-objective-json-type, 
    result: verification-result-cbor-type / 
        verification-result-json-type, 
    ? objective-name: tstr
]

$$claims-set-claims //= (resultcode-label => resultcode-type)

resultcode-type = resultcode-cbor-type / resultcode-json-type

resultcode-cbor-type = &(
    result-success: 0,
    result-fail: 1,
    result-malfunction: 2,
    result-input-type: 3
)

resultcode-json-type = 
    "success" /
    "fail" /
    "malfunction" /
    "input-type"


; This is the part of a token that contains all the submodules.  It
; is a peer with the claims in the token, but not a claim, only a
; map/object to hold all the submodules.

$$claims-set-claims //= (submods-label => { + text => Submodule })


; A submodule can be:
; - A simple Claims-Set (encoded in the same format as the token)
; - A digest of a detached Claims-Set (encoded in the same format as
;    the token)
; - A nested token which may be either CBOR or JSON format. Further,
;   the mechanism for identifying and containing the nested token
;   depends on the format of the surrounding token, particularly
;   because JSON doesn't have any equivalent of a CBOR tag so a
;   JSON-specific mechanism is invented. Also, there is the issue
;   that binary data must be B64 encoded when carried in
;   JSON. Nested-Token is defined in the format specific CDDL, not
;   here.

; Note that at nested token can either be a signed token like a CWT
; or JWT, an unsigned token like a UCCS or UJCS, or a DEB (detached
; EAT bundle).  The specific encoding of these is format-specific
; so it doesn't appear here.

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest


; This is for both JSON and CBOR.  JSON uses text label for
; algorithm from JOSE registry. CBOR uses integer label for
; algorithm from COSE registry. In JSON the digest is base64
; encoded.

Detached-Submodule-Digest = [
   algorithm : int / text,
   digest : bstr 
]



; Top-level definition of a DEB for CBOR and JSON

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => cbor-wrapped-claims-set / json-wrapped-claims-set
    }
]


; text content is a base64url encoded JSON-format Claims-Set

json-wrapped-claims-set = tstr .regexp "[A-Za-z0-9_=-]+" 


cbor-wrapped-claims-set = bstr .cbor Claims-Set



]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-cbor" numbered="true" toc="default">
        <name>Collected CDDL for CBOR</name>
        <sourcecode type="CDDL"><![CDATA[
; The top-level definition of a CBOR-encoded token.

CBOR-Token = Tagged-CBOR-Token / Untagged-CBOR-Token

    
; All forms of a CBOR-encoded token that are a CBOR tag.

Tagged-CBOR-Token  = CWT-Tagged-Message
Tagged-CBOR-Token /= UCCS-Tagged-Message
Tagged-CBOR-Token /= DEB-Tagged-Message


; All forms of a CBOR-encoded token that are not a CBOR tag.

Untagged-CBOR-Token  = CWT-Untagged-Message
Untagged-CBOR-Token /= UCCS-Untagged-Message
Untagged-CBOR-Token /= DEB-Untagged-Message


; The payload of the COSE message is always a Claims-Set

CWT-Tagged-Message = COSE_Tagged_Message
CWT-Untagged-Message = COSE_Untagged_Message


UCCS-Message = UCCS-Tagged-Message / UCCS-Untagged-Message

UCCS-Tagged-Message = #6.601(UCCS-Untagged-Message)

UCCS-Untagged-Message = Claims-Set


DEB-Tagged-Message = #6.602(DEB-Untagged-Message)

DEB-Untagged-Message = Detached-EAT-Bundle



; This specifies how one fully-formed token is nested inside a
; CBOR-format token.  The fully-formed nested token is any valid
; token, CBOR or JSON (JWT, CWT, UCCS, DEB...)  The mechanism for
; identifying the type of the nested token is specific to the format
; of the surrounding token, CBOR in this case.
;
; A primary reason this is encoding-specific is that JSON does not
; have an equivalent to CBOR tags.
;
; If the data type here is text, then the nested token is JSON
; format, one of a JWT, UJCS or JSON-encoded DEB. The means for
; distinguishing which is in the definition of JSON-encoded
; Nested-Token.  If the data type is bstr, then the nested token
; is CBOR format. It is byte-string wrapped and identified by a
;CBOR tag.

Nested-Token =
    tstr / ; A JSON-encoded Nested-Token (see json-nested-token.cddl)
    bstr .cbor Tagged-CBOR-Token



; This is the CDDL definition of the labels for a CBOR format web
; token, a CWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = 1
sub-label = 2
aud-label = 3
exp-label = 4
nbf-label = 5
iat-label = 6
cti-label = 7
; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce-label = 10
ueid-label = 11
oemid-label = 13
security-level-label = 14
secure-boot-label = 15
debug-status-label = 16
location-label = 17
profile-label = 18
submods-label = 20


; These are not yet assigned in any way and may change.
; These are intentionally above 24 so as to not use up
; single-byte labels.

sueids-label = <TBD25>
chip-version-label = <TBD26>
board-version-label = <TBD27>
device-version-label = <TBD28>
sw-name-label = <TBD29>
sw-version-label = <TBD30>
uptime-label = <TBD31>
boot-seed-label = <TBD32>
intended-use-label = <TBD33>
dloas-label = <TBD34>
manifests-label = <TBD35>
swevidence-label = <TBD36>
swresults-label = <TBD37>
resultcode-label = <TBD38>

]]></sourcecode>
      </section>
      <section anchor="collected-cddl-for-json" numbered="true" toc="default">
        <name>Collected CDDL for JSON</name>
        <sourcecode type="JSON"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp [A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+


; This defines the JSON equivalent of a UCCS message, a token with
; no integrity or authenticity protection.

UJCS-Message = Claims-Set


; This describes a nested token that occurs inside a JSON-encoded
; token. It uses an array that is made up of a type indicator and the
; actual token.  This is a substitute for the CBOR tag mechanism that
; JSON does not have.

Nested-Token = [
   type : "JWT" / "CBOR" / "UJCS" / "DEB",
   nested-token : JWT-Message /
                  B64URL-Tagged-CBOR-Token /
                  DEB-JSON-Message /
                  UJCS-Message
]


; This text is a Tagged-CBOR-Token (see cbor-token.cddl) that is
; base64url encoded.  For example, it is a CWT that is a COSE_Sign1
; that is a CBOR tag that has been base64url encoded.

B64URL-Tagged-CBOR-Token = tstr .regexp "[A-Za-z0-9_=-]+"

; This is the CDDL definition of the labels for a JSON format web
; token, a JWT.  The CDDL for the claims is in web-token-claims.cddl

iss-label = "iss"
sub-label = "sub"
aud-label = "aud"
exp-label = "exp"
nbf-label = "nbf"
iat-label = "iat"
cti-label = "cti"
; The following are claim names for JSON encoded tokens.

ueid-label /= "ueid"
sueids-label /= "sueids"
nonce-label /= "nonce"
oemid-label /= "oemid"
security-level-label /= "seclevel"
secure-boot-label /= "secboot"
debug-status-label /= "dbgstat"
location-label /= "location"
uptime-label /= "uptime"
profile-label /= "eat-profile"
intended-use-label /= "intuse"
boot-seed-label /= "bootseed"
submods-label /= "submods"
timestamp /= "timestamp"
manifests-label /= "manifests"
swevidence-label /= "swevidence"
dloas-label /= "dloas"
swresults-label /= "swresults"
sw-name-label /= "swname"
sw-version-label /= "swversion"
resultcode-label /= "result"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

]]></sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries" numbered="true" toc="default">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims" format="default"/> and <xref target="IANA.JWT.Claims" format="default"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
        <section anchor="registerversionscheme" numbered="true" toc="default">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID" format="default"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn" numbered="true" toc="default">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039" format="default"/>.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle" numbered="true" toc="default">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags" format="default"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB" format="default"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The device authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the device, then
the device generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main device UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per device. Each UEID/SUEID is used in a
different context, use case or system on the device. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC7515">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC7517">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC7800">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8152">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC8747">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-01.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-01"/>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-19.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="October" year="2021"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-19"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR.OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-08.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="21" month="May" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.

 This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-08"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="23" month="April" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-02.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="12" month="July" year="2021"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-02"/>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>These examples are either UCCS, shown as CBOR diagnostic, or UJCS messages.
Full CWT and JWT examples with signing and encryption are not given.</t>
      <t>All UCCS examples can be the payload of a CWT.
To do so, they must be converted from the UCCS message to a Claims-Set, which is achieve by "removing" the tag.</t>
      <t>UJCS messages can be directly used as the payload of a JWT.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="simple-tee-attestation" numbered="true" toc="default">
        <name>Simple TEE Attestation</name>
        <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a UCCS EAT that describes a simple TEE. /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / manfests /        35: [
                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               h' da53574944a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                        ]
})
    

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
      </section>
      <section anchor="eat-produced-by-attestation-hardware-block" numbered="true" toc="default">
        <name>EAT Produced by Attestation Hardware Block</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ] / Type is multipartnumeric /
})

]]></artwork>
      </section>
      <section anchor="detached-eat-bundle" numbered="true" toc="default">
        <name>Detached EAT Bundle</name>
        <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
        <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
        <t>The DEB itself can be assembled by untrusted SW.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section.                                      /
    /                                                           /
    / This token here is in UCCS format (unsigned). In a more   /
    / realistic example, it would be a signed CWT.              /
    h'd90259a80a48948f8860d13a463e0b500198f50a4ff6c058
      61c8860d13a638ea0d19faf20e040ff51003181a8263332e
      310114a163544545822f5820e5cf95fd24fab71446742dd5
      8d43dae178e55fe2b94291a9291082ffc2635a0b',
      
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e0e030ff51002182381
                 585dda53574944a60064336132340c01016b4163
                 6d6520544545204f530d65332e312e340282a218
                 1f6b41636d6520544545204f53182101a2181f6b
                 41636d6520544545204f5318210206a111a11818
                 6e61636d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

601({
    / nonce /           10: h'948f8860d13a463e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /           13: 64242, / Private Enterprise Number /
    / security-level /  14: 4, / hardware level security /
    / secure-boot /     15: true,
    / debug-status /    16: 3, / disabled-permanently /
    / chip-version /    26: [ "3.1", 1 ], / multipartnumeric /
    / submods/          20: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
})

]]></artwork>
      </section>
      <section anchor="key-key-store-attestation" numbered="true" toc="default">
        <name>Key / Key Store Attestation</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / debug-status /    16: 2, / disabled-since-boot /
    / secure-boot /     15: true,
    / manifests /       35: [
                                h'da53574944a600683762623334383766
                                  0c000169436172626f6e6974650d6331
                                  2e320e0102a2181f75496e6475737472
                                  69616c204175746f6d6174696f6e1821
                                  02'
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        20 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level /  14: 1, / unrestricted /
           / secure-boot /     15: true,
           / manifests /       35: [
                                    h'da53574944a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102'
                                     / Above is an encoded CoSWID /
                                     / with the following data:   /
                                     /   SW Name: "Droid OS"      /
                                     /   SW Vers: "R2.D2"         /
                                     /   SW Creator:              /
                                     /     "Industrial Automation"/
                               ]
                           }
                       }
})
           
   
]]></artwork>
      </section>
      <section anchor="sw-measurements-of-an-iot-device" numbered="true" toc="default">
        <name>SW Measurements of an IoT Device</name>
        <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ This EAT UCCS is for an IoT device with a TEE. The attestation   /
/ is produced by the TEE. There is a submodule for the IoT OS (the /
/ main OS of the IoT device that is not as secure as the TEE). The /
/ submodule contains claims for the IoT OS. The TEE also measures  /
/ the IoT OS and puts the measurements in the submodule.           /

601({
    / nonce /           10: h'948f8860d13a463e',
    / security-level /  14: 3, / secure-restricted /
    / secure-boot /     15: true,
    / debug-status /    16: 2, / disabled-since-boot /
    / OEMID /           13: h'8945ad', / IEEE CID based /
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /          20: {
                            "OS" : {
        / security-level /      14: 2, / restricted /
        / secure-boot /         15: true,
        / debug-status /        16: 2, / disabled-since-boot /
        / swevidence /          36: [
                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'da53574944a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                ]
                            }
                        }
})

]]></artwork>
        <artwork name="" type="" align="left" alt=""><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
      </section>
      <section anchor="attestation-results-in-json-format" numbered="true" toc="default">
        <name>Attestation Results in JSON format</name>
        <t>This is a UJCS format token that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
        <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
        <t>This UJCS is identical to JSON-encoded Claims-Set that could be a JWT payload.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    "nonce" : "lI+IYNE6Rj4=",
    "seclevel" : "secure-restricted",
    "secboot" : true,
    "dbgstat" : "disabled-since-boot",
    "OEMID" : "iUWt",
    "UEID" : "AZj1Ck/2wFhhyIYNE6Y4",
    "submods" : {
        "seclevel" : "restricted",
        "secboot" : true,
        "dbgstat" : "disabled-since-boot",
        "swname" : "Acme R-IoT-OS",
        "sw-version" : [
            "3.1.4"
        ],
        "swresults" : [
            [
                "Trustus Verifications",
                "all",
                "fully-verified"
            ]
       ]
}
    
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid" numbered="true" toc="default">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR" format="default"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR" format="default"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR" format="default"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat" numbered="true" toc="default">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR" format="default"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity" numbered="true" toc="default">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat" numbered="true" toc="default">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence" numbered="true" toc="default">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR" format="default"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR" format="default"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIADz0hmEAA9y923Ib2ZUo+J5fkcFyTJE2AIoSdWNNnT4sklWmWhJ1RMrV
ZxyOigSQANMCMuFMQBQsq8O/0REzr+fD/CVn3ffamQmJ1e6Zh3F0lwggc1/W
XnvdL8PhMGnWWTn9JVtUZX6SrutNnhSrmv5q1g8fPHj+4GEyydYnabOeJsm0
mpTZEh6c1tlsPSzy9WxYZ+tmmGfr4SJb5806Se7mJ+nb05vr9Oeqfl+U8/Sn
utqskm/SSVU2edlsmpP0223efAtfNZvxsmiaoirX2xWMe3lx82OyKk6SNF1X
E32OPkzz1foWvjnGz01Vr+t81oQnmu0y/mJSLVfZZO2e2IzDd2WFX9WzST5t
1ttFro+tizV+uLnN04sSPmzT0zVuK1vDGtOb6n1epvsXpzcHSTYe1/mHkxQ+
JFmdZ7D4cp3XZb5O3t8BvIp5iZvP3OuTcVXDpqcAqJP04YOjR8OjB0m2Wd9W
9UkyTIsSlv9ylL7clNPxIpvmsEIG98tsU+flJI9+qmoA9HU+2dS4TFhxVW/T
ly/P4Kd8mRWLk3QxX/z3Rh5Y0+8jgIDO9NMofQVnv82WNs9PRV1Mb7Pa/UCz
/I9NtoA3l+lNPrktq0U1L/IG9jsZIVzhJHKA6eOnTx+nr6o6v602TZ6e18UH
XOYEJod1ZmV6XuTzCqGezwEaJ+lZtihmVV0WGR3XplzX8OS761P4uLolhNz7
3VH67PGz9Mnjo/QpoONe2NySl/jf/7IuRn+R9fntvRilV9+eV2U1v90ESL7I
63y5jX+5/xYfPn2e/pjVJZxjtZnfpm+rbGpbdD/QfqYI0HdHx+nTl9fRBsti
nU/TfwXsmFbLsNffHR+nRw8fP0wfPXl09Ox52OmfqykttrvVpKzqJeDWhxxv
zNsfzx4eHT2XP58+Pnosfz57fuy+fRr+tG+fPXigzx49fGJ/Pj22Px8/1D8f
Pbc/nxzZa0+PddxHz5/RCPg/+Ofnn66fHfPndVbPEYx7t+v1qjk5PMyzen07
LMpZNSrn2WhZLA5Xt6vDaXVXLgC0I/jwL7NikX8/qap6OrybN8+O93govqc/
X719eZ7+dHF1fnFzeZZe/8/rm4tX6dHzZ8eD9PVPp6Prm9fnowcPHj355Wj0
YPTgF1oMDaDXDv8eMgq8pluaLdKf8qpZwYdsMcQ7vVgUc7p9p/jPNt2HkQ/o
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
40oEo3bKgzhI4u3F6EMmWwsCnam2YSYydlDm4XCk66c/xHdNqE7VBiWFzi+X
3C+UoaMCa8gwVytLJyQKcYs4em2xcOsobkS5Bvce4+sK6IEVGDbr1mLYVNpI
bwea58zBX3rdtDyiv3XO0vZwzrqr6zgeHRn/YtlESVjY442YFNVl7x2fGR8C
VzsTa3aPUxVfF/8YwWjTcMIHkSIKZgPuhjv9bfql2YKDOY3iCiQKF2uDNP37
fITssLXT3Uv7+jzF7J9atvUu/cJyH/0TyzU+117mdVWvJXKF9jHeaoTuPc6c
HyGfJKgyNBANeq6N45u1L34U7ezaEK59DN3JYcgfsgaGosYTVJWmD0iPR4+6
2KsyF185vxWDmm4FuWI63UjYGIU3ACyaQxaOOOCUW9y9u/lx+CwERDDDDvYa
1kRIPCeZW/o5+Npwzm7TSTNvVWxmAwKwCqyjJIkqoSWikEha45BksHSVFSB0
UbkGSymhQoLfSSNDbk5Rak1/qaxnNmOT26rQVFeimuFjVc7h7VUgaNzKhl+R
auqsZrqRnVRoUPuOQGKCY+gjSBaNAU/JYYk++pxpPKkRUvze8gA02STKz0ft
NgD0e0mu/23aU/tuID+xrEvycTqa5exR3qNMUOACXBRvD5PyYbHJZxlfnv/e
1Z1KfpV25jAkUsefdg3swaLm9EmuZCZWJm0lwAYTAA6Ly94coKn+YjQKle6w
nwAavZ2c655lbwHpBfvhhA9aq8FjuVszqBqqwq810VhGlgGt2BbXeYxGxM3E
O/xza0QEWV8Jw7iUXPid3vpC1UMQnELFQzzAgy9WSLz3s9lmeu9n84+r8Oy/
I6J84eFyPLv/w0W27jyMOHd1fnVC5i2yPOIBkO6NzRxBGpkunI5O1I9voQbQ
4kEDVEGoqhb/kspoInWSQEX6LumgM0Gzf9lxbLRKIOWyyhNOrjnYfWB0Xfep
uG3YGX+Unst/TB/+1n/zJxjNfdQyFA3oTOn+s9HoyTFWtNy5uE1euJOkT9IF
2v5ujfl0NHr06AtbADyCNx3ayWcZ1n0y0hVqgtikSISSKl/CxxW1lCgwqpy/
KPK8tahH+hMIxNNqGf949ORLAKAF8Mu2YitWEg16mLrp9QMsLvkCMGT8yW2x
Gn5gX1+Y5vbOvqMtf32ccZXV0/+KgVgVutdIra+sDox8ecK9i5jRcCkN+Oo3
+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

-->

</rfc>
