<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="August" day="31"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put a HW OEM ID Claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as Claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>EAT Nonce Claim (nonce)</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous nonce claim was defined for CWT.
To distinguish from the previously defined nonce claim, this claim is named "eat_nonce" in JSON-encoded EATs.</t>
        <t>The EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Measurements and Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp Claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests claim (<xref target="manifests"/>) along with the measurement and software evidence (<xref target="swevidence"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured SW components and is able to check them.
It informs the relying party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9+XPbWHYw+jv+CpS6q8aaIanF8pp0T9SSukcdb58lp5M3
r8sFkRCFNglwAFCyxuP87d/Z77kAKGkySdV7VXEl0yKAu5979mU8HidNm5Wz
j9miKvOXaVuv86RY1fRX0+7v7r7Y3U+mWfsybdpZksyqaZkt4cNZnV224yJv
L8d11jbjPGvHi6zNmzZJbuYv0/eH52fpL1X9qSjn6U91tV4l36TTqmzyslk3
L9Pf3ebN7+BRs75YFk1TVGV7u4J+T0/Of0xWxcskTdtqqt/Rj1m+aq/gyQH+
bqq6rfPLJnzR3C7jB9NqucqmrftifRGelRU+qi+n+axpbxe5ftYWLf44v8rT
kxJ+3KaHLS4ra2GO6Xn1KS/TRyeH59tJdnFR59cvU/iRZHWeweTLNq/LvE0+
3cB+FfMSF5+55tOLqoZFz2CjXqb7u3uPx3u7SbZur6r6ZTJOixKm/2qSvlqX
s4tFNsthhrzdr7J1nZfTPHpV1bDRZ/l0XeM0YcZVfZu+enUEr/JlVixepov5
4l8a+aCl9xPYAR3pp0n6Gs7+NlvaOD8VdTG7ymr3gkb5P+tsAS2X6Xk+vSqr
RTUv8gbWO53gvsJJ5LCnT549e5K+rur8qlo3eXpcF9c4zSkMDvPMyvS4yOcV
7no+h914mR5li+Kyqssio+Nal20NX344O4SfqysCyK0/7KXPnzxPnz7ZS58B
OG6FxS15iv/yl7aY/EXm55f38yR9+7vjqqzmV+uwkz/ndb68jd88fIn7z16k
P2Z1CedYredX6fsqm9kS3Qtazww39MPeQfrs1Vm0wLJo81n6rwAds2oZ1vqH
g4N0b//Jfvr46eO95y/CSn+rZjTZ/lITuFJtXVysW4YgXuOf8vJT+kNRf7qq
Fn/V9f1YZ+vyqrrM6/Ts9ByeKvz2XsioV9DL5EJ6+ZemaCeX9uUEAFBHO7+q
llmT/lg1DUC5DndYL9NXxRJXGrps6dPJJX/6L1mtB8Y9vS7m63yR/pAtFnBl
8rpq3KvpVQbv3uN/61lTlXYBAAzyBQBDelZdtjdwEwnvNA5QpvUfEFP9S6Of
TqaZ9fwugw2cfko/wFTrm+K3T2HMrL0qYGU/1Djfehb2NytLgI3zZoqbURbz
Oxd9RV9PWvu6t+532XqRHtXVzSK/TZKyqpewO9c5IsH3Px7t7+29kD+f7T2x
P5/sPQl/PpU/n784sA8AksIHz8Kf9sHz3V1ttrdvPew9O9A/H7/QHp4/3bNv
nx1oZ49fPNdmL3ZttBdAM14m8PcvP509p74AfWf1HO/P1lXbrpqXOzt5VrdX
46K8rCblPJssi8XO6mq1M6tuygXcqQn8+ONlsci/m1ZVPRvfzJvnB1vcFSPo
X96+f3Wc/nTy9vjk/PQoPfuPs/OT1+nei+cHo/TNT4eTs/M3x5Pd3cdPP+5N
die7H2ky1IHiW/x7zOf2htBztkh/yqtmBT+yxRiR+WJRzAntHuJ/btNH0PM2
NTQUfjDefTbefY7rPT18czg5+uV8crTIimUTrxwXDuu+ubmZFFmZTWDcnaxB
IrHMy7bZmd60fnlHP7x9n/6SXyjFgW63U+530yJweDe3y2zR5DatnzvTiubV
3DWx32RiOrOfz96+8TP7uTOzaGq9uQ1O7ujt2cnkcDGvgE5dDW3cnROcVk2+
4/duC/tLQ39b/R27c8POrwDZ//Tu3eT09cnp8GRWwH5ki8nj+WpF85nlzae2
Wi2r2RpQ187ZKp8Wl8WUwKrz8zhvAS00k6xZff5j49+czr57tv/Cr+RxPQOQ
LPOa2Yd3cGngR3NVrNJ3dfVbPm3/ickV9LBIo2GY6UqPgBynb/L2BlBiCugP
Pq+XBYB680/pm/XyIq+BCo3SbDarc9hT5Ffgo2IGO2tdbQK4x7BH8WV4gdv3
4+nx28nh+7cnL/1S8Gl6CJ1gz9BvVcMJLaobIITvAdkDCkaa+HZFa4VpnJTX
RV3xEQNObdrBc7gsZhVQC4CLaU4HgRva0OOxMj7jOv/LugCqT9BCrzI/j3HG
84DvdB7jSucxzt08xguYx/h6b7I/vpyN93dhxXu7+5OrdrnYtEfIR/LSZZZu
w95U1zmeQIo94c6dHL4Z7z3eDP7zZo8XiSw7UsGdi6xGPqMBfFqO16up33Hm
RhWzHdaw3EUuhw7Tg8F2Prw7SrWLTSv46Wxv4JCPqrNfTo9hkPHxhKSAJpsu
x3AVb4oZvj9+9fZweCHzRXWRLVYgLADrt6T13KzGyMfAFu+sV4j+mx0Y58nO
3v7OT++OPh4X8wJu26scOOn67eXhalVX19ni4zVi9tXs0i9avk3547S6TPXz
4Y3fe5LgdN+dvNlw0fMyYB34sfMuL6HHhVyNySqb5378d8D0whgoO+T1qi4a
2/FHMMY2wPpf1iQkKe5DkWDcZvMmui34imnAObyCVnOAvPr270SM2nX4a/KZ
gBVHP3t3/O/RmMY+vcumn2BZ6XHWZunJZ2C4Svj1CBtsD86gWc0+A0d4PXSQ
wDcCeB7s7SCQ7+w+38FuxhHeG++P9+0cFcz4RhzdTlEw1ZkaddTHw7Rsyq9h
UooSbKwdOPr6ushvdgbIkZ0JIM3xKquBOYNTHDoZwOptnRUlYq+Ts/NL4N8i
hPXoqHp/so0IW/qI9u2fH0DTohl8zyf24fR8AoJZcQkQxFfPieHNumjHS3kL
3yNvFTOSB3v7yqMdHIQ/Hcu4t29c3sFBYO0evyB+DmX6yWE9vYIjnbYgkLrr
T0qAzL3DBiCCtFez7BYkaACpaBv1FYrH8G4QrODq3RSfilU+K3iH8NeOtvzI
LSeDLM/JycnkOaDmvcP38enBi/RM0Oco3aLf8iGL0gD2+XUBLN+p0MC83nJD
HOdTRR27L4YYPMPNsC8506TLopw1Ld4FebcjI46xEyYfyC4/PpoA//mqmkZT
hkeLSmj64bvTDpXfB2p9MiuMTPMsf87KdVbfIn57vhFn3Dym2Z2/35mHIcYw
xM43xHQDlwBX92OBmOwyE8o1QCBA2lrMAO3nxBXi1QDmqFgvcU1vP5xOflrD
u3hJ+GRRoAwFMJp+ACQJiPrkMyCOGdwokI8BSboDSB+dfDjdHqVv6znA91+F
pC1uh758S18iE3OEup7yNj09hut4euz59sP1fN20uD3PhhFa/xAVr82y5Q4+
HAciHP66yS9AhJmu+RK3KJWDKAHUeV0QgpMdeVVVn9arPmAKmpezpp0mBVRA
DIOzrfM5HstkYNb2CC7oGGe3Wl/sIPojqPum5gELof5Dt+j94UPn+dCdBHI8
W08BXTSIiadAHWQBO3BP8s+BndpwqfHW7G2+1emPAFJwiZDnASh4nbd1taoW
wBXAXOs8U264Sd8KKaDvPF4bvjL5RQPnmU+ysik6bBiujf4Hpoezq+F/nkXk
DH4Sa/zubLx3sBvTXdXgvXd8Kl2Mo/p21VbzOltdFdP0NQsXg5ObNvV0UsKh
TObVNR7ywoSPGckbgIRWzQ4MvbOP+CjbyLCaKHwKJK5o13Q1dW89mLzOEL/s
7jE3uFwCM3RUow6lyKLl8btU39HCTpU2oUpV1W23YSdOgF9bB9ljCHtNqdup
9CryGF3U6Y6/6cCDLfii4zxR0Pz3J4B0j5FwOvqFQuT4M7yhz4DxmhzldTv8
GXFTeYlc82w8hc+A2o7H4zS7wEsxhZ+H5T3K4xR5UkCCDWAq0RAD4puSFJ02
eZu0V1mbwntY4AV8hV3khNVQ/QVjwKLheKYNng50kdNooySDNkS9FsUn+D5t
liAyknpxlJ5W5/J2lJYiESLErRDg4PDTZj29mqD4WzRuKin8Wjcwuwsg1kmd
L25RPAPeBMZL8Qojm12ncpnTtoJBWhIy8/SqukmX0GtatOlN0VzBSuA9mRZS
kMBk2hPesMNzHCoHkR16zIY1IDDQoP7hBlp5TTsI+AV0ns8SXsiET2hZzGYL
QCbfoHDEaAhhLDmrlgTnOKc5CJQNbfXlGoAeNwcfFCW9VaEyBVE/XxAwewU/
ss9lxYtroG2awQnRgqyhYQ3ab/wA7iBQQJgmbDKc+gpFCFQ25ZP5ZJSevzrb
puk4oRWHotckW25PkvP7pwZ7izNTmJqlMKt8kuA1z7MZtM7TL196LN7Xr7B1
eDQGsLi0WQ44hJgOgj+QIZucYAV+CeQQAE8BNC/ydJkBc5BdVOvWwWqaGTQ2
uP2Nih+w1h0EKHyIul58iCvsQWUNvBhwtwyZaQSZ6c1VhVDbIOQRSE6RQSku
aScRLAkiF4uU2Bu4UAxCuDjAwFUbYPO0hfnfwr2r8JSgLzrfDghTt/gi7q5o
B9pzW/cKZ1wQP6OvRnR6+edsuQKRnfQTuDRAeIDMa/wOiFBGwAvwVULL9Qq7
zuDeL7FnOjI6JTkxQlfYh0C538mS7xqcPiuQv36l5dBFo4eodkZAkCuKZ4i8
GlrtcNTBm8q9PX6x73vrXlvu/cke9U5AHJ8wgTQcMF4+XHLhjomu1zJH6bRo
lgFHweg84C/nI2xIuztdL7KaJ/r2AvVm6Zma55CBBjoClJZuFZIImRjqtP3s
45ZIZLqNfw6NUT8PjfXvp7hCU38pxCC0zOnOwvXCG4e9LBEGssVNdtvg5ZGL
N5sk7wwx2JDbBEDZjCUAgqGoCW7ppxxQQkZkcsG7BGeGHCVNQfqi3VbJAruZ
AquENAm/of7wtOE3AiZu/2pdrypm3B2WIZguGOTWjeBU+B3NgVDDMgMC1YHE
LaWEWykwl4g14dMy/Q03hNBBkIjh+5JuNt9Yf/UBBhhHIXKRq1AgQzWlxSOW
dpgUtZ+i7rxVeAg09q/4qMBbSHSAL9wNYs7eU0RdPGYzgh6A3RoZ+hpF2I0J
LWM0+L8ZUvISAOuyrpYECNW0AopDJBywv1wlEMgBnmjv3Pxzr6+9FXrM5EvZ
az2THC2HcLJ3jnd2ePaKB0QVwf0DrmA0WL3cXsCAShNiyrNADm4Ep1rOCQld
E4m/qCugPNcZ0Go4N2iFIDPNmlwXIARtkV/nCxjjT7jvtInpJbDtgh+bQHVe
JsnvgTH9xJNkOggvlyAOgwTbEi5BJwQQ0Go5rMEGGR0gchuwPbCFINGOHCKB
TSTqajM0doPaQZenkQKdO8+zZs3cvSJhA4p6XRIywk/DvECUvizm6zr0wWwg
TdC+cnonuFtD7GHEExYgW/z07ixVgR96+BF5cWgKnGwwWhh15QsELBAgjfUK
GW1gJPKmFWIC99YdAGNE+L5FLM9SDB4qYW10vljkn+m/FeoF9b4Q9OBNENGZ
KTfuEDOSLB3QJmaA0UU5T1IKHxlTOqITfyYWxmuifkUmx53eCGm/cCaEEYjW
IsJESx9xWg5467xZL1qc4jffKFOvgiMD/fCs0y3mDLYQSdU5WtcFW7E0ozDg
x6JNm3g66BbWRjuEUKNbHjNWzE0LW8LUOkZV2NkAYoJNuABWtdvcc7Jhvnj4
zjLi50meP56FjHpEcnXBiB9YtIWCAI5etPo2Q1ed5hYowXLkfzA0h590JaoU
yQ7DKPBJxiTCbl9gv6Qyoqkh2VtfiI1uRECcE7Q2ricQQpER5g8bpNrngcuD
Hm5AFL9CBIGjpBmaAvLGNkq7x43gL2FV8FGe1TBiFWCgWo0Jq9lOX+KXsypv
yt9pC+wkC31G+0j3cVrVAJ6rqpw1zP1tycbQDSvh0y08tgiIcvNSCuL2Twty
cLgVxE8sIK4bMP9cX9GAylEabOO+6aD2rCFiDfAKQCK0Xo6VqQXuQ+VUedji
JgdeHP4L6+0sQdC+DVnmSDzoRsmqh3sVkqSQLkcswE7TsmtBmLwryIoEfQMs
K+EqXUQQYC7WLALYJ4Bb88VlKhxStEQaENB8E7dQedHfXhJGPW2jNwBlRN0O
VU19wnOnR+cnJ/TfKeq/CGpUwK8BN+Q1vYwfjXDbrrJVw7g5zwBWtTnxVPSV
hz/spHRaBP5dlLMCcCewFkor+TmAMJOzoIKgWYSfPPASVbThWhIyRhqlzxkc
Gm5rN7+Ie+bDwmkjPVjqCUwBb9VZF/1cZdc5OnRVAJ6BxcAOALyBaCH3MQc6
A0ynAU9RXmcNUEMxVzQmu9G1oB4B91h3yPldI/iXFXPVsDs2lI5CmAX7RsE8
BTJXLNfL8JmzWgsu80ACxOgIBZyfRdpBr4LpFaOz9Id1SWqOoFVZ1QVsVrG4
VczFDHeHdJAcTxwy7qkQqMtKxE8Cv/tkPfjkPkkP5rVYOBUCIEZvoR+x6KEs
z3W2KGb8k+BrBrDfjMI2ITsHpJsZAnhB9rnaKagdcmeOFxZFbGYNWI0YUdhd
2CZlQiJzIQu6M9XRRO8alDR4GSg3mAymG9xRwEyGuhesqmq+Nuah0y1YMnpB
bQV1SgnzBkgb0MLQYY9SdLAliEUHOuSULoqFypuXrPFIWSfMU9QJAfuCRt9m
msMQRdVsni8slVF8Z/OpO7/1OK3LdUvY6vB8DGJaFtScgp9jVxNetsokaa74
ubHlgfBFkiEBoqoDRRk7EmDljZyT48wCJ3mNY+AMnZKA7s4keYXcGKpeiL3K
V3TaFeNAmwcBC5OznGEFOEregUyUTEIeLggiW7q0t6tclXivT1+f0INtasoq
wW7b9oqdSkVwphWS0T5CFJfF53wWFB9pNkX3RGR+gvg0DMt0bnizl+gUFFgQ
YjtpdnTFB1DJCO7v8ckPdHcJeOz9Bb0n7UFbr4nfw/sErN0MUQ0ch2g1YEHW
MGAgvpyyqwzkTY5SfotnYjrHoCeJFKEdxYmoJpaEnIXBF3XyELTAJr3KmnY0
cJf4fMK+EIMnbkKT5O2lVyrhphuDE5rwYmwFcHDRtJHKDSl/UNheLGK5iVRf
LHiZToDtA5UOQL+FLBwfvxrxglVz1RWvlI0DAXOKHio/FCWyeKLfep+vAMWa
tPAIu9ruawczoIiAtlattntTaQscc9urDoP6kZBiyXcIyYCAAtJzJlavP5yd
09JN8LC2+edpDsOx+oWO6AZnn39Gd5yiXdyyfDwzhUd4IWcnYrtw/nJYLCeQ
nFxcAleJO6RjTpgbk1m6DvGSkyxKa29Ewm8QhTaB6cV1DHXLei3RywKHTQ5v
m0gQiZV6VOSTcxyA9VVWzteItx/huesxPd3bhU2nxcaklqUZY3wFCms48JaR
JvaCWzLFZcN/5f7Qq94dog06LYXXYqyFb0fodAWItPicnuAzPynSxOlNOgxE
sybuD3mtOfBZJKR++fIb8PVCyKApH7zrGvVnQO0uYasKkhRwMsuqaQW1cgNb
FplUcRGkdNMzoaOgNWX8GTlcAj1E32yQbn4++ufvt9QIpqAVrCg0T2z3Ebr/
CHTFVNlOEd1lHG5IkUXGV6RH+SUiZBr8BkndNRDn7GLBMsusYMsCwhJ+MkiX
CwCjNZkTuZsYndGWwH9vSOqJBELHugGsF8uC1FsjJocbxrDNvK9f1eyfE8fl
wDBlnrq3c4zeRSYyP3jGa8E19DXpfPDTnq4hSX65KpAetWrvEtZyxpeSSJao
fcySQL0MKZXcGf+Iirg83ZO19c1kJN3nCLksW7aResnxgaOOJgf+Nu1hBgxA
KVOlSSAoodZiidz7X/ORMxfXwuDAD9NeTZIT1WMhwfKsvqwG9w8VrtW6udOU
7Hoino/gn/XHaDpQoxvq9Y3QmanJLGL002ZEX83WU7nnRg8nPctPgOayKlk7
RNwW0+VlnpUk+ivxuwR6dQVIvTETFTTmWSIqI04/bNG5n9S8ykWLAJIAuxAF
rIF9ZMTSQJfyfjaJrMUyaxMF4dCBxZl+wsMUIZJUFTQYejWI3BeGw01wG9NX
PaoiqeER9Bj86QYrhwoUndUPajTPO+pHHW9eDRtWbB5k3Vm0BVp0gj5dduQ9
m0+948M7Fdx4zLhX05oOTSVDXXM+c3Yn5XGD/sLMo0GOFf5dNB4j90mKzi8l
CeTOiGreD0nyBifPjCgqsYqlzM7OC+E6XoEiLOVcBfTX1ND4dlyH8B8mV9x9
Poj2voH9XDDVQIvEBawoB3g58epqv9XvZeO+fFO7dsi3l7eis9yoUyZugFWE
5OQKdAvJPfxHhDpT3xJeg2/tGnV8DcIS5LzDCoKpoCgHjxyZDofEnBMGAP0c
BXbBPr1T8Q9+16To9DUldXjKzkIGO8yE1P0eUPHEzQi95DW6KfGFRr1EtkCW
PygVROGFkMBKNDsVhpmiXK1bQVR4vUmbhqj8Vla7cQ+IhACXMyX0TtrEaxRm
F+lVni3Q10WsQetG753i7R+D58DIG52a6MDkICketmZM0cVTggF4RkTlSfON
5iqVEBDLkc6WOEq4Dk2zcwnMy4Z1IYPWGpZagdhaIJdjt81BBomEOlly1LhA
VVR9k9WIDdYlkEdCx8OoatP4xDpJN2TaRS8cFl+kHwdAHbMJnbjAVB+NNVfV
ejEjKZDNKZfD8IjjfCqrG2aaGLSQNF7BRgrAsQpO96LV+ep1Mog1okN7QTIl
4TQG2oHmtHpVNlRO/83GdXEvoLOtr3nRcP2mzBWx3nH4/Nyk6KwQ7OOz3Ajl
yO2bPor1kY6JUF4KdwdhdY0gB+tcVBWS2PWKNcEzkIpQd9mB/ra7W3g6NOOK
ppilf/olfXvyGl2EKYLtrtle3Or5MCHBKeAETGeapR9O0Ne4YS+HksI+tnH2
5qjkbuCwrIcGIKIlOPzFomjwpt8GVljEpB7yggWxVEWgeStG8mWmQTBTMSXn
AYT5JNlviLT/MTzDU8C8eU3uaqoNU2zHs0DTBDb0syDQRv8qhC8VLe/G+ETo
JC6NLL2Jua0A9Z416RbqBLZG/N/0zVv6+/3J//lw+v7kGP8++9Phq1f2B3+R
wI+3H17Je/wrtDx6+/r1yZtjbgxP086j14f/sUU+5MnW23fnp2/fHL7aGjbB
svLAFsr40AsOyQ9H79K9A5aHMJJXfYIwzpZl2pLd1cmNi3+2dITBBrhYJNNs
hXFNQIXQvAYbXIr/Xke1U+fMTzm7OSm9kYo7mYwd5PWZyn8JXYKXycv0MF0V
+ZSwWOF8dQG/5zWtkg0HijwnaHviC9R0qcMqK2rxz2TCwm5H6uaJUjbeaJIk
quBYQl5sfCnfYJA0TWrN/v5t/rlFfaMZGFWJLESLpjJJT4PvauZe8JCXfU2G
DPev+S2Odq4qj2W2otmp65RNUThwa/hvuDptyktFrZ0I4W5iuln8jWgq8Z7T
eIjMYPlsxqIp0nc6TJOe5W1vgvppJcSMiAvrqNzSG1aG3wYGKjB5DwalSOhG
4WhQHga2S+RUProajf2BwKH0aOz6o/Z2JW5n6qyyje4BjRPUyCsOt2m1qrNC
+E9AD4x2AEhFS0UGmzZY6gM6hw+KxkwWeJbobQkopr1CT2ZxxsUbyO6ixNaJ
tYH1CayxIW8Cxx6yZKrqA9jGfxN86BbOXlQydREo0LBVsN9TYBzVIGdTFj5z
s3TIKMg8tGM0DrN5L78xePi2O6WOwcPPKbr33Wmxg6r4ABIlgGELoFiEt3jA
LIRJBiOTOK1OODoHgGcnmu8Ou/CwE8KvKNbKzvDExcVY7oHqPxSabM/EXGqQ
QvuiVGoS+EpkCUTXYBRS6DDcwZh7BqxM1iiQgkYsKQm3jPRrQALTGwobh6xG
PFebzCgNoM8zIa707q0PCgqjvNcVgK9nDNxBOjYeoUGZfMJWTbSvwver4oIv
kDwM2y74ykQHwvE1dRDOvtTtR78AZny9m9UkTbszIXoaZG6SRkQyKdRiZrFV
OCiyGuV4XlUzmeMIxMMFdN85Nxi2rCjm3b5DEYpMbWzWRRTXuJMAMrde6gqL
RkxL5D9Jxn06AJgBnUNPbFoW8ytCVWRmUysk3mMnOZN3Q8W7FsZBgC9nVd3Q
3PVsCMmSaWMpCmsCCPmyf/jBsMQaPYUckEFM9Zet2C6MJFNRn55vMNoRpdbb
IgmNJsStVavxKzIespE/WCS810GWbolNBNmpdIsMLlsj1bYIild7KTXgOYzP
BpwTVAnIjLV3jJnomMQgiuu0UT/faQg1EXFAbIHmBK901LlNMZ/FemVizaEJ
4Ik52pu7YIm9cjsaxOw9BsF8sRtR2HVGYdGKZn+/xZNU2rHB2NHyt86CKWPC
Z+SzKTpUAP0ZXWvves6bonOC/W/YuOj4gh6fEHmGsS0VYLVrIX4kFmQMztRn
6D6KJ2qG4XBQjXKojSypiQyqA2bfoV5EYjYXFmccUVdNtYKr+tucV0WzUU0/
5aaLIQvmWozcfmvjjZuQtq3Mb+S9TH2xnjfshsjWFe6aYNZtOgm0mAbNRQph
WNkndwLso9ixneg+dAxA4gPsrFGo5QwOvOT/GMzbbHPyhpw3ZC0d00Vna04R
PIBNVe9cgs0MLmYhbwENG9K1fzrn19h65ccP2LbprNUpNBsGDLyz0AKPIT4s
9tSnNqwjYIMCeZ7F3ijiSuesxYJhWNNvx538J/zDueCtHiMikel+l377bXiU
zee2kB3/5gOgKvcuSTa2+g4PUp+9ZuR619c/fHhz/Oqk2yDZPLaMYE8Hxui3
kFF6jXBbOpuD2LWzOeHR+Ec+Ip1g/w2OBiDcmdbwd3fPCqkYQhBnLhJljKCU
4JGF0NPxxe4G1jE9NmVANpsFrSSL2J3EUOpBEd797N95D7bC+fIoTY5dxq7I
7ZCUwyj7ZHDHvOFZfcSRMUNwVi+DwXA9QX8kaqmDAy/KSU3EWookRYI4yxBE
CUp6EcgGupOBZGRhQJGyC9CYSQVBVGgMJ5EmUcy3vWibWD3llPFdRbLz1EHC
Okn+BFjuGtlo1fVdNGzCuGSmJPZFzIKPip0zWeN5cGQ+gaHvzk5xOnBMaOFH
0Z28cjDL5lyVIbJ57ERDhmHVVrRKT8UtF8dPMDheN5p4H1FbpOmJfeSN8Jk5
A8wxExQ5anz5os0AztC7UX6NAjKlj2Gx67pkWmUqhrwkeAzxcKhH2RE9R1bU
xNSEqbhAU5rKgO7GQuA40ivS46D+h7CNcmgSUWL+QaQvM3aXWavUNDgwGUIK
97b28wk9oMqJFJMU9QF34g3ZofnlIzJKb6dfvqE/vhpPycZqH8R8cduSdsuP
wh5QWV1nxKAPfKK2Wf6EYwst9maJllcA+zmzmCwCujgjtseuRBdx6HRes3SL
ZrhFXiYGJ2TPRGxD15uAk1DQJTNe7Oeuqtega8inGW6kRC2wAZTnyFNcEbvM
AvIbNIGBIIGiB28Sz8rPgzYfmZPzSkLU5mvUf6vPrvWwuLU2ri9xq7BrIAvO
s/ajLLpgNx8DCUQyggvD4dE6yZ8bwHEBQl6bPj1IL4pWPfHranUL/B3ciM/k
rx2aNsVf2REyJ/UTReIKe7GsanPonqkPXIw02B1OLAV1QCFqr8imZMTErAbc
qYyPo7LjE96WkflSGiwKEDJkMWCZr7nM+Dl9IlDnO8aXuHx+i4PQxR8Yw0Gv
mhZYihZvFrpv5nASK4lFFYnsZ50+C5uNuITmrvY/BDyMWOpdXFUOVmU+RmJY
AgwjqoX+FE6xyXN4fOHCbCx5Kru66eH2tkh1xRHo4BL3dnlvzPzc3bxnYfMC
G/Ttt0FCGYvQvQP8CqWtYOQyXmQXIFx/9z3v8Zg8SnfSP6f7v/dPft3GdKH2
E1ijo39OW9iUdEIzeLS3O5k8OwCZ68I9fD6ZPD3Y/j4RRgh9RnkSx8FHiI6Y
5O4oLrvDYhuS9zY7joIRQ9TQB6pUJTNHNZ2u664vgT0cNBex9BP5N7D0A2hj
uqZk0kjckDMaUpiyG7r3M1BXiw8l3b1soYF+Zhd8tM6LGWJ8NPGRFzTZ+hy9
yqJQmCjiVJbNAUXJsrpATYIk5cgAB7YsjyNPkqU/ADkFtgIgFZil7BPHJFk8
Tz5LQuQDRbeQmYMUmWqW0J2uc6c5ieLITh3ODs3Qz3nEbmckdMORN6zcTUzR
IjaV7BNzhhQ3FYydiH1IIeGJAiFT4iJh6sABlJjrAHYcNzCgubVu/YI1Hpwl
EBMbMNsgXu5uX+smYXK3Zr5kkroeVUKLW4dYZ3Kf4MiiUYLGIWYPMgmcKIWF
RwURLGwmGiKKSQqybNRdIt1NgFVI4axSTXOEqj5SGI7YPRD64UBYcnG33pC/
WzPHz/kyECveVG64aO10E/3rxDZCXRF449WLmm3TxaUYF4WN5W2m+dsJ2CUH
fnnE7mnehlDkGhsseGLJ+BmHSyi9BeoqJMKh72HojftV+inPV6bGs8j0RN2c
oiVvM7GWEHD1VhgIQSE40EBOvLjybfyp+enyTSbvCxgP9SsI5QRGHGsoCRDZ
d4u9k0OorTWfUk7ANSnmOE4V9gdpN2JmImPq96wEj0lHEB9dNExeI5pjqY4D
EMiiL+077EAAkQBDo0HAITsLy0k5X59WoteQI11IvtBrNQ4JmVQZbJWxbj+O
8bnMyTSpMVuwdNK40KSlJTIIlkIqPWTSIVbwfcqMQdjgjBaJKmpiehZ5OUcP
3T7vw51HmlPKv2Lj+qjTTvQrq+8mHIS2SW5TpkvYMcEs7Cvx+LEcHDIYk8R+
il8ksR1N21NKBXUpYrfimnQLeBDoDSasBxvVariSqJvHKyMIjH1bGaBxLuNj
8vC0nWvS4OKA8xfeh7RsOkFA++7y8xejyENxvobbCthPzZXGjRoD5phRjMRo
KdgmSf6WniOQ/4BALn+jAAV/x8kK/wZf7n7e3YMX7w/fHOO3kgMjS/f2n4/S
vRf7SHn2nzwdI58Gs5kB8y8K/2BCq9TzkRKy2dHKpUy9m5O/lRybhS51ZSYR
7Eyt7NKRXoEyk8BZo+UBwBcEXDy2YHWQWRGbKnwf3YKZ8k1uEFIPsZI+S6dR
OjeQiq/MvcqouBKu7tdie7pnS1jeuIDrKfkkGN8uisu8g3vD7gVsJ8DTLDH/
vkAPHAutlNEpdcbXMiuzxW1DERg9oNSD3ocTptx8Jx9O9bDN3ZdeTCVHY0fv
qv6mE4wkxsZOpqYH4wOAFvzv010EGPrrQDJEzOj0WJv/9sPpCP9n/Pgpc0FH
p8ceNTrBtzuVHCP2OXR0aYwE0IixsrkBVeP4jKGryzYvA9HNiJFqOKwCYev1
4ZHm2kaOhXaECITp0eELWlyGsUVNhWxCcFjhlU/SR8FL+YbsUkZCOaba5G8J
+bYcnk2IgLaPojk5jEAiG4YLEoUToZUXj3FGUTpGjH/48sWyfToYeIww8Prk
NL7sB+MZJmp2m8iEPNgQyvS5fEP4BHOFC3AcVTNJ05E+lU8iLpTI5DRzkqVn
I0Zi1mZXMWcBzBovKOMcBNL3DlyIPH0i3kQ0NhlVUQX2SPO+HZ4dnZ72Em7R
x/8U/kwfy8hky8aNGhFHtvv58ePtCammadu4c52kObiZ38Kr9VUpbqRr8hg6
+7c33oFA+aAoqT2fz5eX6TfIHpHw2Ixbxu6YtfG7LTrzI0nUgruOp9BsfVV6
owykhRqw/FWj8xGK27DzV+slmlUkAhZ4sJIPt0xaFy9mDj8k2AMVQrkeRag6
DkMMmk3NFObiDsT1krBYi5yIPkHNY+LY7WqV4TUOZxzEd1zNkjMB3apFtWjZ
EltjwkwLcJ2kXS9Tc//VQC1cIdyG4BhBtzwhnEgT835kXRDteHSnkqKPR0pk
JBvl5DV0J45lfNRVvixmeMTspZw1whgnxIjAyVGYL58j80uIFK6REbkEIFmI
nxdFCvtpiU2jhAOaYA9vjN+CCXN3SnU5eVhno3gTENaf8SbA10nqvg++tD7a
x08h4jwbAPtlTlM5j7bQsbkx3vJ2Toy9EMa+pio8Yh4vhWWXNRG7U9JUJml3
PX5u0AOuHpM9M0ignwwqb5eodIEnhWWTwtvRAE6ZUooUVnDKzmCufdxn+Uns
EKUjIdlMQD+IFIXFx7Sx1pSPA4OuQ6BjYI0vSBeHLEMsJDp0THiHdb+zqqMp
uLLIXJaC4jkpE91qBrngH4Qt5Qry9cQEvSRoVSFezliwxpgWvYMuyFzeYDck
hvWydqcf3r9hd1Qj8T3hUN8hFlzXzE/fq6YjXVBQ0BkG3U4S+5tVcQjOTw/G
63oxJm2lKuX2J5ODg+001so9m0wA839v1slvvoFJLouxiaVypo/O6L/bZHWg
v8nAYofCmH/Uk71Zz+8yDJNVBtuLhv/wP/RCkGYnAA6ToKoMiqzLfIw59nPS
aLTsfyMvsRsCKkwmZWgYxuZpY9olYuRGnGNEUuXQ9UqSE5f1pjcK57ziGWKM
/o2UQhmleAVZw05JTciZenxRaYxHSVfYZa7Be5vNJfSB1Daqs77IbytR5caW
SxPfWsnocnnrTYuGBs+EPEon/UXQ/QPyM2cBDbECr8mcmCTnB+1kCO/vW09F
GYKfXTh2jmcwYVMcm968qpzhluwpIYNjiOyLsUghSQLpfMQ+wB3gqMSWup5G
kctnVRsexW/O+Kb24jO4O/VdYXhWZ1YqnPK2tJN8Z/k4NNZm68fjt1v/pcND
Ks+j0Qywe6YnjQuhWGO258wlfmGMxTsuz9Sfz58d2kouBzjpM75urbmi11gj
jHzU0MIqUEPefihxmzqC5zhxV94SS0QBOl7UQIhHEesVYEZoEBh2rDygyq/7
lWlnf4c2LWDh8j40fPbfgIcb/LwJmFh+Cy52vwAbfyHjyh/YOOKxdvLVY9w/
acInigqKhdJHxFehEYAZrMTlJO5GILyFC04epyeWYPu152MeQf/bejVCkmN0
G5OHLfLrhMx9QAmstLpRAOTIhlZ1DoBfCvVkCBDWoDK71og10efoxeBPulov
QEczTjvsZ0FR+BiPyhoIqWrzA3FsxIRKsGekoLgIryPnzL2nwnk/UgWDaHdp
44kUEfcgGBLDXaCHi1th0jrakfGd2pGqlht9Q1hD3fZpA+RmTnPVIXlViWoE
YEtU0cLIhRW7IhQ3WWHKg2gg5tAxtBHxJCqJ0ciVs7qPg9soK+4nzW7NOobF
bQ+YYEs4lRrKQkjNAbBgZ4tGPW4ovaqqs0RAYESCfFhewg4vFgjDPE/1Kgq7
LZHliGoivZQkhf3T4Xj/yVPGT/WatFtMt9m5HTbI9EScYEQDXxm8mysXHmm5
AYUWxsb2F0+7xnbmTlbk+EcBBjpUZJAfHlUxtaUjZI/joFRNSVOIzIA45k+x
R5I+JeJZ0gACWKE3FJI8ZwhXb0a2HhFE6WVi3g9YP5duiO4PIeXetaGnHERC
6nIxzNg0ENIiRY34emiJE43u5BstSjbU4UtkZCRwwrgNS4fie62WGc6Wb77R
pnGj2b0+HL8a4f++pv89E0cWencE6xAK8/4QRU9U3HEDCvjBlLnkry+pvEgv
R6qg/QNS9RKPmfhYrcuipgx8mFARBWi3+gnNQond4lZ6eo49Jcyt0g5EPQVR
3PU0EoI+PgsTTWyirDhEQe/x0zBLWNxr3HS7S3B7AFnNRK8GzBAwdLCQJCTR
a3IM+jpiQxHnUIsWHpxcCFc0q4yDyLMy4U3EK4AykuaFIrYu2hE+B4oiXlPg
KOxkqLOT+Do7ohOVKjnEGzjNnTrTSXkKinNdrxJNi8nfcgUbjhm0bQjXmROM
of7Y70FKImkEx+nFopp+ahIxXzQ5Rh5QI54F583FfjWZEROE4PmfcH0RzlmD
gyD1zj+v6JYQa/Yn4DcxoAtzHHdyW3WDNXtaTTN4U7pV1Iszf3mUlRUXXWQU
MEnJ1zhyQUrM9wwxJUWqmcJJqA3Jf2r781l2+XP+Ktm8gK6Che8c46ytw6Px
8cn44PkW06MkjnZQsxWpNiVyZffz4dEI/vf4BP/34Lm6ngqaC9EJj8My2NOF
vY82YcbRPaiRtbncdXCYYWyJnmibi+pFeJS+RTStcR/iGThmLkSRpeFUd573
le378gX+Q+AO//WqftVYCLuCqA3FnHNxfVedMAkRHEjihQuJ+s3EfYRmG5y5
eNcYQejeOW01ygy/qZS1a26QwhKEaKZg/yslO9d9/TL/9CAenNhq4ocDH84/
V+Tkzn9jaST7wUxaAix6+PA7nL4+oK9JgRJ+jzEV2Mh1R1V4vk86D6CZ06k8
Tjod4OtBncyBji0cpBudn0TjyyM/A/consPe06TXz8Zp7B8kg9IIZ7wSVyQV
F8bkqrMdiSGmtCmIj7D8tezVM/JOKZx4P+OoJeetRGyQU23A5WKJFbGycab0
naROIAugKp2j6ahfnljPkO6JjsFNk/Xf7HYUol3bEM/Gw0QMzoB3UddliImm
pXpHn8275B/Kwsxxfxzs2+mO/FLtmYsBd1slM+ftssGE9Q1W4dytSmR+nYuw
5SDXlNiji+DknGTd+BTeJLJMYX9W6cbyE1+Q5vjWegxpk0K4KSnbUb/MIS/B
dNTrhGMZQx+EvVxsVMgpqocoC3K6pthN17OlAgNIkYoyeFeNjPMhi9IYeS0S
VZ3vvMgdQnWkromzv9mQzk4Dq+p0yNovie5j/XNrVUj8lMSXorMQcjapKdEH
8XPkU0Oc4bgox9hdZ7ygbvc1CUDAck4DsZuAKm2KKGe0GCrJMZbDOBAYNOcC
nhzZ9J0Pg2w1jshSH3rOkvY+pEM4d/6sMgIM+3hfyUnsr3y3SkEdaVp2zYhc
l+/TTLBBr+AswOm9xjx1s3P6NwLwbIXhyujJkS3FDT9Y9EwYxhuFKg9UoC3a
PATUDpofGnXiytgdKM4zgcJVUa5ziVaJhftbznJO5/BwShvj/kByO89JsQWU
YeDxnZaJAzJMjLg07tA/Xq3aMSaTx/uxxcIo1r8JOpEVBKIleGbMDsXbnST9
hoW6aus23G6vr0Z9PxAiQoDeGCcV0ey42I+jZgO0suIEaH4QuYBBscvaJhxb
p806Yk7PQZecC2FjNCb9gRTQ8o5gWeBOThyK+ZbOGnVlL/MbSgdNozv9uyIS
or4LUuMNb9c0K81ziB0UiYrvPRb/iC9fuLQ4FaEiPzmZtnagy2qGQ0EuND+2
Ja0sndZWl0N90BCllDI30cnL/nfWJdesolOR6vjSX2ToHzLLH+RG370qenT9
y6JvetfFv4AL82fqUB6+TEmJzJfkj7Jz8PDbGESSXyNLnhaeIL84mmySBH8Y
xtGcRA3Rz5g1lAiajEqQ+gneIlFRu1NLiXMXSE5JpVNwObAROfZJDgJJ21T7
i1HnnECSJkN+fmR8LTDEDUtKEwZXtQOn1WW/I7QPgSxKWYl5amz10Gdkbyzm
QEwp6keQrhiDfjHmLhjm2ZA9UncIqmOthODLF3vy9WsnCyE5RzwIhabNzRg1
eAEUyBywPXhSEQZLNHfap7zxhunha0QZfDgJeMUJzixFnn6py9eTxHsJ6GKh
PepyKRqCmRAxptkbwReyAUzwGKDaqpLxHmZHuenfEfdM7Sk3D7kW99yKtHMt
OLfFDxWwYyLdcLqL8QU8EuIg5udLVD3nLiuiJMbAL8k/sERQnU20U3meuNBV
+YRz/IhmcGnFYSpNMJxY6SG8YWg+4UihamHM+EZvHS8hifrGeeh080ab0HQk
/Q84rFkdDj9XdqTQhMhSFCWUIKDsw5J34v1bkN/4V2Q04VALV9htNmL26qIo
zZWbLFE3lfNifBhEhUMMIAW/FtsWc/RNepxfrOfoF45JLOX0Z/hszIktVbLV
GkscooXV1qjYOCURkZAWfkKN0RlAE5uIUtvH3/x8fviTpNXO5mVFPtZGTi/W
BeXkbKuECviR9s8Nz0lbBD/0RtPyFsjuwsJHSe+AyLu7uC4WOdob4mJE5JYk
H/JyOGwwgfu94mirEcVWCO/K+S9D1YwS7xgPYx3TigFb1cmSfCZdlLXJ6aHU
oaV4Wy/NetBdo1ZVkIuEcSPAr/APzsR4i5h+irEjVFGM+Bl7z3kmzaEFP8KY
a652XFbcr+Tl1PSS5AOspVDRoUlG8N9icSHOisSsflwpt7BAhBkDkUiPsLY5
RVCHARLMh2Lz46nLGBeWQtjg5ZICYEspF8gWFfUUSLzzQ6jWoTrB7FMu8dUY
3LDGoJNIlSsRVAl7JVIaRyxe21sY8XliLML0q5gxkTb+1vkqJ1wQHLPYUbYq
0fqG2HYmui4SHn/y4bM4L+ocypPhc6tjuC/lOyHXAc4aeu0SIvI8OSOSaFcY
VzJIUFKjWGUkXUuBWTwo0xqpM0ym+XxdjZtYHcDVRnD6jEpIXo9UNZ3crkok
Gi99anLHbIapn9rchHQJzicb5A2pBVZYwhIdKEWLo0V/pVunbCG3KDeICLVZ
3RhtG1iAZSceHI87qS3iZBb5CKVXsP0wh5DmhnsO0G1hOoqJul8kGkjAXbAX
Aqe4R6P25SXlgDwrEHrou+oGORSGHe09sd6VsFAhxN81Mhr6ga5rFNG5SCmB
CGdgYA6IR080HIk9qaqqoxQpSvgBfKtAshZjIoWMK9DH0YtrAJ6iIvyID2Nn
y9R3S9AreRp8aS5oYnEzvMKwNIkDk0FSGQQ1LMsVx1aGbynOMtRBw8HXrMuo
XX001qi6OiQWXyvAkQSoydUBOKhWfI0VuGWJXUnD9QWnfqAYtss0LkDoY6lr
X2EgcSpAxg79PqI96JWEjCMSaCpJIDu8EGG7V4t1rUGKvUtPLDWuHcFEKwTi
8liJKDQ8m89BdjU3NQcxcmN8+VDLUkUsAX4vVUuV36KsIRIxFc38Nhj0ld3n
mpdaXFZKFKfsK0ZHcym50RIpQWtxIb5yJRIB1nmEsxHFpssSsrhNGEHbroRk
4TSPsc6Df4lvZETzb0OZYjYBYI7a7DZWcCNKJB1HoBo8mqINV96vURwxdF/V
6HfC5IHESQq5jaYkCr6IRzaSHNi6ZkTcv2EUoTmye4SBGT+pkUIlC/PUOBYc
JPSJvw7yR8CTjkEiH9UeFkNGMhFwCWmzjRVpr3JLPS3xiZ14MMMst1w7Rgmo
NFpRHSupR3m7aRKdZQm+RuHrH18hsYLs94uBu1gs2KiB3HOUBvLZDoBGPbDJ
6Ttluxa3d0wH2dzo5DszW7lebG7hhhKPSa5ZtVxAIGUrgWF3GpP0LYB60pPF
DEZ0571w1+sDV5Fw+RSXyz8isf/ljcXd5L3s7eSPa42iv39PN0+no6DpbK6H
qgcoXrxcFyTC6CnxyyDz9R9+l86asUL8zqBy2nbr7tdj2juSS+/70q/1nk9R
b3M7hv32jWAhYdJD/zhZx5Z8sjVKd9PvA8gO/5M2+hU02nON/Oo2N3JfQft9
396veXN79xV08Nh3MLgTvQ4Gv9q6w+oQ/TtII4sDkutXFhrIWgQNFURfXf37
K1N2iyLkK8uB2K1/EatziG/sZpJWzoF8fNm1QupfOesffv7L46P0p7yyvg/f
naZfvsDTCTyFWWt5acxk0gKZH5EVSf7MFvyQvWMwIwq6aGtyNtYQV9jdT2fP
D7Qna8SRuZRWhOoqSJiPfZ7miwXwM1Uxk/idmyoMoomAayJXBcl0bDx0vXK7
qzzTShpUWBQ4K9WFFGyaJ7VdiWm2NQTdKX1lM7Oa/bd8d2+yN+mjy0VFfOV4
VRUl+cCNs7GUVhAjzwoL6wiDQum5MXPdIhSQ7pwoYnzKoxq2BwlAk8Omamyh
HZjxpoR8p5xfVIr4IENLqR4wYbEWcSOHp0Qr2PaFehaFQ5fLoly3rJQHBq5u
WLVT50kgn4tM0/FNWzXq/vTuLG2wSCYga2AWTkKVPsqe3MKA0FOCZuyQTt7X
vIdzAZk2xHPJ0nhRk5SulXWVhD5QMWOpmTNSBlCRrnE48WJpbPTG4U0DK4ei
qSZCZRTsJmFhQvxQOxnH8HP2HYa7XGHKEUnTji/QpIFrUN0fSTwcVCFttoBF
/JTXrrKuZI1GwyONjcoFuAgsfOBSCq3qwy+sGFM2BXGwKTz2UADineNEG6jx
McBIKJuDfmalcTcEYpCyWD/eHH9xPyG2AY0G2xNR80e/LXBCERRlpOJcP/xc
0VX3xR8DJuq/UTSzsc148yeKIHovGA/0Hof7AK/+E3+N4QBtwDnNb43eZ0Ah
bJld4qcvgODZPyS9Yf3dBvrCtUBaa7vSbaAv/AhIW20neg3khW9w4EZwexiP
MHYtn0AD3dHeCPLCD5A+hQa802m/Ab2IPk/TZ9AgnEGngb1wjZ7jGuZ5Gv/T
NczzTv9p+sIYAuUHPqwIJWvqLvolxqQt/rXlHUw01anWJyGMYOHnUpVbXWcS
JhTe2xnu7gqRWk/iMRMFJTokPM5C0MPCTGmmLtAUgHS7s1K2nKH+WFdLNhfS
KMeegS4dOr1VTMULS0Khu97c0aecaJXMPT2TNI8sIegIiUv2s0KjX0NZ3THJ
CB5npfoaUnk8ZP1hJQ/Yg7NcE39LwwYewA4k8Re9vZASLBqqrPGgbD0kKArW
mSbyWxRsH2eY4xSdxP+F+Fnqq8mbJmTjdppo2W9Jk4ARKDVBIwbIbatunKdZ
hCKcrNFXxpOcF5GFqSX+tZeuk8Pgb80RT/RV0qQRFkpN8FoRoJGsNtnmyKqH
RRHaCWjEH+4J9v4PEDN30M7ISKWsx0h2t7tiwvGrt4fpo2P0iAHq/SrX4liH
K7QsZItts0IC09mg8EB/ULq/+9t++YLfcIXjzIWcsm5V0zXz+QbLnTrsCRTg
XdNqYZMoHDpq1sufmfEENSkIl7UommbNr39iA9E7IGMkN7AJGb+xjAscRpEe
1QUaAzPmrblTjEyzAFhRoToA7iyIzF51bwqdRlU9z0qxOfYMQK4mSmjvaqYQ
uIe6FhOruNMEwKeW3tCyLhcYcOJQnN9sZoKjlQRdj1jlcTfiuVKgolCPOOaF
vwVxx5Ta+EREKj65ka3oH5i2M6fEEAITpdNzJVMogxwFWVzmXJ9BrCKaVUNC
bSgvVMM6rEESovnGjbcPeast3xaG/r/nMtE0mrou0aRCTt8AETaJzhYPBCho
9mROyyOyD3spcMBqzrY99Qqm+C95FtJTIKPw/tT0XG58EiuJzPdaAerWS8Q4
x5k+WE1g75Hmy5lQ4fDLsP7Ip8Db5U07TTBQh/ERqVAaSh7EphO11jDxczI5
Y4EPqf3HR6JHEI4b1j/qLojLXJKO+rbfeRryEKgTC6O9h/uwElINGPvP6R/o
kWS0RT+88FOdjPDJR5v3S/VoG6/rIrzXhXykvl+y/5ww+vSBW43/JvZJws0z
J7DX5ocmpMHc0JA8BJ+0YVbLO6izGUm6FQygTJHLo9J43zdOR9q0HKcUfRwk
aOuUNDD2MceVTYdzsMh3fK6SlAYdB91TCi6+ba+sxh6AX+N8Vio3mVEAGE3F
4UdgzQ7p3OUxJd+jIkPXsVuKOOqmVVQJBF2XomwmIorfRmsULG1T7PsDR1EI
uNUhq3FmRYvIW33BNq4loRgsQxS523RKxcZXZqgeLYr7aEIMR6u2Q6ul3lJc
4+DkTbekK8Yw51BHBuctbgcUhEjMWwxEcQPLlx4P87vGFTyXgMwLy0w3G8jd
Ya6IVvIqU//FaGHDy6IKDIzOKDyOrV9Az6St9mSR47wKt4aYUgiPbgRXy70o
gtfZ3rkQKRJL8XdjcTjniVB45b+/fqVPaXLqnQmXJ47MUReHrtNmiKEknuao
OnyXHnEQtpQusUA+Lte5/4RKc/p0ImXF7Vy2pk52jWhNmhAI2ZKwmaGFDwni
S/0Z1YBccxtXSPQTJDEQRvlPdPSBkWpOWzNErX2BA8nzQ/yRgaXkpwn7wkNv
7gXou6fmrIyUCh7uG99WN3Jwk12iXUfuVcfpmQQEV07pLeCjgZQKCRb+H9Y3
IiUmZQ/W4Fk8+5F1DLRqqj5zUe58usKsUqXn0tw2SvIRRKUx5KagbpavSJb2
i190IN0H42LuzJCloH+lEKTsWgXMUjCry5pNVn7YV4HUZdNPIP8zHsLJM4q8
MCIo7Eq/e0neEOUws/Jpp+JMyB7piAKdk8GAf7heSIaV4P8e4ZMNC4U9+UWp
bYjzcFHRXJegiLjE7BY4jpnhDhFZLMk9P6ecOV++nH04PZ8oq9Hxb5dAX4O9
bo1WvsVNBOTpjw71Hd1OF3BMx/+Oc9e/Jcz/7B09xv/AE45GuY0U9YPDm6Dm
vPQ0RMAjO8XAlpgJie+SgxMGUiNznZAgEXT6iWwPjMQd+jBPQPERiRMyYXZS
+bPBXKUBD7LgQmKPsLUNGyA6oz8Cjs/l4H44u2tgFFje8EgjT+InyPb+wb4S
NPNr+EoRj3LHksWD2r6k39lqrA8F/Ucf8rOXpFP91nq9qGa3HOe80RTb+ZjC
nb8H/jkZegFbIPFi9HOtdbimVXNTzLpNKDB6pxcZ/aCu8QJ9PCnZmeMf7bhZ
zT5To00dhQ8S+xPO4s5Op3zzxhu6Hvjs83KxaQL3dDbwGXbWaaUzjr9KbSEY
/DPmjK7ApY9FShirexnZFfZedHSxr13lVcYwSges6K7GedwoLkRJKvx6gCg1
SjE5OjlHhpIhvuareQJGHvb5Z2zVEaNELapFMbEPdFJAT0x12o+sx6Sm5aBc
FOjYMV+UupS1L7j6Iwm/rlAEWqgz//bdUk0/OprSSLRNyNPTEXgsmX9nWdwQ
U4KhNGaVjI1fvcEILef7n8f71ZdLO5mCXCA+kTbzhQiqnaEYlrDBadhg3tLg
isVOsyGG4QIk/tvtmPZozfQo7tKItPBDdxDoDh2WGPOYaJ/BkEpIXRy4dO6I
pGSf6gkAYXw4qQH6zByZT/vSDXsj/YqLfHs41QkXysd02TOlO51HTHjcQyM9
vWf/TcTnW9fxQ+hP73smQSnRoOGX95GhwSkMEoyNuE6LfpuWKLwaS9kh0heF
x/L0a5ejyky1pcqKwKsii8UmJsIdoTo18lwe/aFn6ecV1wjulqeONLouzZPE
J2rNWfbyrVLnQcxT5uvpBs+ogPSUkmldZsVijZVu8A9qvga5YzJBmalV/wnR
MMST1mo8aXB0pdBUZ3bAtt2QqlFAFEhtzA24U2hGsvFwFJyMOvPGM++Uq1uA
WPFGWmobHoWDH6LHUmBINJCwFW/PftdsmJ0lYyxWBS6dXLqqCy63Sdq5bvl3
mgbqk6N58OSsOLHz2exFdSlB1NpRA05upI5neOjg6zhR7i98QH0YIujdAD+Y
rXCqcEI6BYaUgYGCbBcijnm3EYA1oQQ5ChUduKf+KRu2jKAStgZA46Rcdggq
GV1wTEx/iwU0PJWc9c0/F7mrwiHqrkgxSIreYaVg1znM0tqG62a8jPUpVy/U
Gmkjlsdwmar5vnxxzBWIPnQoXZzQXZUlE3AFRiLPvQh+NP+0CF8EhqRtMhqP
Ob3VvYpqyuNRUr4spqz2ZWdTsvT85MQ7zflhXKcx98KTq1Gz+PZMqoLchvbd
5QcTELdAeZ9z0JhhdhRX/JXoHheBOgp6Az04TediQXI9X0AtUNQUdUiU0sG3
on0Z4G4duzniYBF0Cy3m61q07sEaoFszQoRccs4fh5hE4Z6EqiKdWpqSfycQ
H8LFZARcRHRBoVRxKxYwWdwONA6NHCkZBs3DuLKeQ0nSSdF0NYUk/jv16AA6
47LBcLxYQ4LjdilgXxB+mONE09rOc8maRTAz0GWUPZ8qsYU6Ch6RciS8qysg
dXPvXWVIYUlVelMrc2U2aCpgE7qxkonUPzfqpwTnyAiseAtQOXLWd6bWyyEs
ravAOyAXN9SJlBKQWtKl6WqBucbwxIX3uzsoUN89GILVRmqoNS+TZC8djz3w
CHG5XC+Sl5iAWrME2OP7IW2/0yWSEOiMxR97SnZdyUI0k1hyzijFH+HHNYrN
3hjUG+txZyyKp12Xw8PJSykYZDFheV1XlJtgVrAYqn47esuRdyA+C4VPGPQA
B41uAYb8tjKoV725b3QC2TVsh6UDCTN8UFKWR2yIHWCMg3xiXD+ahIe+ZAD+
FaNENr9WucR/wSD60iVuwbf1Omr/ksYNt0eep7+ibNF/rOPo6MWM+093vBPS
yH3zMg1/k7g0IrHFPYBOw76OHeh2I1DcV8Rq3/EeXeYxpVj3E78/DAZpkgyP
ngYPT35oPpjoA9udi/2TNvjQO23ux210flEbeWjN0BN2YMJRG34WRkJn2CjZ
SDAQPGK6TUKZ/PlVTLQa3Mn3GG/55xGyDiQ5UAIIZVUw6e5hVM5VBDgsCi90
3uL4iPlQvxm4sSWp1TA2P/Sn92q5Ls0eLm6BvxTjHwtO+ZwvFnhFt6Ouu70A
jhyvqJ5ytp4VFRMuoE8Viii3F9n0UzwzZV6suuy4qgv2LnM9i+0JWTKuvyWp
Vk4Wwrn7UsGXWnVWWEBhh+iSkk1qzlWAOzHGxlRJb3I84gsRymous9VOdfFb
PhXLJsrUtxzJEQrdnvcqMGh3obnY4NCIJdl+kzjLJerfTA5lDxvNCgzjcV0k
KXcqyRQ48WSiAgTzYBIr7cMYOIKaabcUsM90+zCzGZC/K/TNRbVTXF9Y6j0R
OdAluVpTZJET4x0KNokZ6GUyNR5co4UH5cswMnmSUJKVS/80GXxK4j2HINoV
43JhiSRlXEjqDFOXSgIFdnOidHtaPyVY8ahI1aGDjEBY6EWJvn9m21Q/AlYL
lhTCVFChbv2CMupWXMhbKkbNCirVWXEVspZDYNwwgazdVYSCdj9QsS9YZQK5
K/g77MdXoFnh13duFKAXb2gp43M6tp30WKYytgbjY5qp00BFm+2nHJKKwcwq
rJuCcpYbTuCNVEi8DtYxZF6YiVurHthdyHhYNs1hxk/n80F6TXHRVAUnIHC4
/yWXyqQrp4ICYZK4cciakqkD5HRRNdZWkSPfpI7HSRidZbZPOeqQYTBKrInF
6JFJa1bsy18Ff1IuDHpd1FW5JC/NTpJw6v794flZlCWANVyeF5fNjcr7qq6X
UEp3Kxj1SZ4Elwmi764S0qyqmwm1N2yuZZ30SP2bYEu3ykxZermuVQy3Q3c5
JzQO3XUuwOCzrGbDoOFdKbyu25rKb15D4QUdGSSkU7OIA/WrCSMWUkRHsLrC
lUPl5DE3y2VUQexctixnJ3ffXG8Z382U7+aXb/xVVeXthslQmCtXFZiZwBBD
fRC1/O1Bt3zYAdKPmItzt4Fm/mNdLAZpKu/SA1gC1kOf0uLLF3w28c++fkW9
m+6Eo8eXwxdXr10/p9gFfqeSz9CFx7qKIkWV1/ktTxIXDKRpwU69G4ZkF6gb
VZOVFUs8FwV/RcDcAvL8hB4RrE1DBgTjnnAzmTXzWEHy9DL5lu1TSTSK9aXc
KSBvZSj6BmVVEtOhkJcaIyko7WvjIL8L8h185nJtVJIPrHu2mmeYM5WpcyIm
M6lnTXDKlGEaDtTxDoYKUGQHwAQzHVciXoY6Gf1yTiRV7v3P8JPzw/slB1Bh
JtPVKuQrhJQqnKR4WdKgJzyoOrVYkESMHlDAzgOa8XQ8nnajExM2ZWhpVpkr
XoTOSL4VN+zIo4cz8mfzEF8Dj28A7leqZXblYyWmGr52tXwAAbUaptsdnTa7
dxrGlOCuXayxLNOIyEQoj+kdFQUGhwueG6QOnLdqvTiOyFaKQdhvz53Ly4at
80fhPNhD6G/YxSjdbuBEsAfeM6oeUTR+FciBIQTTMBGvJEssqdNcU2T/4hH9
iPKmRaV90XGppMAydn9kRMYpalupvr1xr3iWvjuCAekXxNPqWi3CPgOc7dUM
Q86XhWNVdLs3zNzv2ENm3r8XFuA/psNgRSlNJVTfwFDyJnJZbeUwevcnMMXR
WXzHm+WfJUnvUfodqSGoY3owPqXLOqYvhQOmT8KD/ifS8aYOtAAD2Xu//RYu
j7xlw690ceccvmNdjme4B/EYdfI/jscGz+G8exM3uM2OuuperjdOCtKqtnSi
4ubqe1eok4zlqrvvz8aGDuV+gtgHgtwWkI6tl6JmFFdbAcMYPSCJYWRGutXp
tKqF/os79JO9F8CpJFu4e3f0qDmdCFFavZngMMvVVaSmDV4+r/ZmwlfV9+Ji
mMcPH94cvzp52Nr8tg30xnybw92Ra2RyOGMtL56RFW2+yK0JM45ifm3wOAex
Ydt1mA6IYMC/OqQJEsTQL60QA6HFOdHXAW0hZeFD8yFOQwSEc/G6TnpxeEpi
Nwy1eRh/noLH41JEQ1g8BgIiaQ33HW2bos0ubRzG92PC96dqu2JFvhhVCTiN
GDNh2IhzezRR8FrnM1JV0xRfpnQZ0x3ZJ/xDgJh01Tz/Mc//JV7I8eu8aTCE
eygNUh8PB7Q62MCUG4iVf2DARy34nR31fXGCXpcyCctlCioRVZgYR92T0TBa
/TpbiHU+8yKrU4Tkn6f5iu2xsbrDZBeV1VDBuG5VP2ZwN9koJHrrWKa6qGU2
y4eLXJrToZ+qgGg0M6rVLUE7yiFFUqdNvRvHNDz/WOnjmLY2qNCwV1VzGmrj
dxpfYbtkw3c2tNc+6BiFHkUFHsPI+eeMjW3CmI09Y5bPLHSUghw1cXsY21Kx
e71x1kY6M9K+cmy1OSyoMSHkdvV3vxGCH+2FlcOpiyVmb0Xp0HQaLPdJBjat
EtTJU8tqFirmwr4lpH9XoS5E8qzWNdUaKSOnI9SSYdtRt2EYBpDk27MTUqYp
08JlGNLL/MYU3DrMb0hmTY9k3lexKySBHVqd6fjYMCDbEWt8Q7+P97kYjfVo
cQ6TxDyKzcjpM0uEaFepilpbHdzWDUBZVen9SMCD453FnMuTayUAOrcnOOxN
XbStJm8muKHj6Oxo46eMXUgwQqwiHWrJ+22Oz/gda/M2bG80ZS3+BqK9evRJ
VVhJZqznzKghAMe7urrA6qqacdZlfFKlHHq0Fp+hIRcD+nuUc13OFCEirBCY
kBBJPkql5lG2mFew1VdL71fB6kovfQ3iI6uTsqmfEIZnvm8E94f2sVYJRAcq
rIEywfcTe0/OuC7tlsaacXENxzXjaC6eZ3L/xEoOG9N5/Tw8ry5np3K7VwWM
zMnN4SBhqpqNhWZarTbRRKUE9OwmVp6wK7QI899BkNIV+W9g+2Zg5r2SkQgF
gAXbhdQSvanqT1Eed7WiSTrtjiQ0gHr9NGwl53G5+14/timdzkbigOXzCkTB
iEyViO1ThSdypsR5AYgYxxWY1I7yOOap37bqs4+aU8xiZjmLys0XhTrqUePk
cFit1ClNcXzyA3oL+lA0Tu8AtHuIRDcmSPLWqRq3qAeIIIw7QjdahPSRZXPT
xN4SRpYNzVNqpBOIWTm2/6FZBnc4Dm4cMBEyQLHpaeQmxDMQpCTiKNXVUW9F
dm+m7P4UWS6sWp0BT9hGDP9Ga6Cy9YhMxgEIJO/BTqppzgT+9d9L754SpT74
Jn1TpachHbPZ+8wmpCyPRH1I6uaQKMDuS8DKiVjW0019dTOaK58VMpsUNdel
btT/SYqsYdA4efOS3wSfMWmu6R5Xms4b0YbcK7QzYOAtp9lGYoiD3rIR/Loq
ZurZ9dmnpU64bhJ725Eh/RqZN3PuU3pnVQOCX983VuUGHVZfcQJ7DTjmh5Eh
j8J+Va3e2yqJWmTKhfV8JTVMRrZDLFKw0HznlhQmkMfAr4btk8IhnLXSZ58/
baXYEdpYALvn4p0QrEI4NufN5HUQg5Eo4yjHQdc4tJFKBNqmW9pD2eAsQReT
TlckGQnjhHPGT9BOKD4y9Bz7F8vo27NtTT9uOcdw36uVGFQEZ1B2UhUBIgae
Ej/eWsYtcrNhVIHqViJLwrp9yjGLPeVNWmxcEzxdAnZFPaE0y81tpmPPxyJh
AibsVsDVv/JQ7NNRC08+yK9FdFooJQsr4iuHmZCDl70TM20e0mStklr3ODst
43fMNEI7E4XD+ZXPpEELFmW8lexYAhJjJo+dDQIGJlxYYUZCaCzVkQW9WG0D
1qMGHwSuGYDCXUb+Qz4OMM7HJu6vGhkWUn70G494KpL4QgqEUpkGJBhcjjOS
lrl6y9BwEiNE6wPZSIKCYEeI+vzWFttJgipGVt0xNtuC11vq1/Nz9+Vv7uW5
ljlPnAqj4HBn8hADFgQFNim6K5ooxxpgJQ7eZWhFRj2sA//LuU3c0jXKzItM
a3FtwZ+aO9FbaKQT7KwIyaBUc4drwEyo+bi6HGsK1EjLIH4NBTltuHzLelqw
WKCrCw5pikl40YiVVN4wMfbSyaVazAyT0M2/yhcUKOKy+mp9Ik7sm0SJfaMB
OQJT6JE0kG4x8yeXKIAlA7ebWhY3SoASxWlRFaBMMgQSfp3nqu9JOPMyGqmL
z/JpeyXpgHmnQgpgztyyIKt6yB93bqn5nOuY5dzEqqVNNS1ItaqMULghbZX4
80PbMefApUqUTHVaAwnrdcKgLS5l+AEpOeI0znHmyAmBLqYHp0aJNkKBM2pH
uNVcukLSNMcMF5mWTCzKpD8qYGns5NZFXzmPOUmuHDdLNIzTetakoVLapzUN
7iRF7vrpwfiiCGlcLFNfBPUsQK2q6ZVUp6ecw2TjeP7i4MXXr660YxT1at1x
UsY5bdMfdsbpk93d5AJEAxzkFnAbRZ+xRIcKBd4CjlOOtyVkZyUNFBcbwCqO
nLEynROwy4mTDyWnyjZmTP0d5BLBAU1cLq13nHZBcYlkYUDPW/mTS8F+5YzI
Pk2DkWUO0yKrSVTtJdP0DiTVyN8drx+sDstiOiekI4tX+pbqiavFh7EPJoMj
2Sp467s8jrOY9NnAh9QZDkrKMEO7DuHqMqyNeIpRQDoyz1y6TCtKQG9tnXvv
1bKKSg5ZlSGk0LMwRUqRhGlBUV9HftpUPy3SOMYpsGzPQsT5UKVi/6WGz6n7
KiXwbN3iuJQyb4noWLKLplqQBw7gZ1ZvaLrwiR47l/QiL3g9+reiV8SDCWWp
u1FKRSP7sAVg+lGmsUUdKG0zZce0DSKKlOb2qZO2rLWFX5MG5pdzRYpO+3J/
yIPCt7mGuqx1IJ/pLxA7eqlKqYYrXqgPjd2cQp5hJXEgx3DNftdNdWMsP0qA
lJ9AEjWa019UA5CFMt9v0o0LtjSYkvdM0qog9sP4HGHnTAVGc16jtSiJjAhp
P3Y/pJfBqEzOTxvlG2QrCKP7VEtwc+UR09hoCvawQAI4rF4reYEmEin0E+52
MUVDrfwZ8W4uQ2s8C76brWhwdd2JK5mWc8Xi9QrEKBSqnWxHRb6aZR7SLXsf
01ZEz4S0RRKvHQG2da7lkMe8a25+0C+vch8W+V4yJOIbXOkJjlFYmRenSCdp
nTgOrAaNCb1QeS7QFCZTJVZ0r4z2q5NQsHYDW0LBVMOVHHw1ectlwuIKNGFr
LPsgKxgEpDR9Man81m00ngZTvcOZIsUinwO3eC28pO+V3QlAozF9KJrS/Dg9
G8F6omcO6zFWTpUUXvILFb0wUASuACNrrIchN82gB2ek2q5MWRqBFg2qNSCi
emadiO0VOQlrTURZtAZ4HVkiWEAkDYivqMN46R5TKZJ1i8UyaIMeHR3+rtlO
o1mFw2hsNOLMCukxTkoc1z+FbVllRd2kV1UjebWdDJcCB4boq5vnygOU69kU
ATg31GQ9Ojp7j/lAnsipg1AB//euaiTHNh7+YQdPdXZ8AyjjmynFJpWovEPg
585X1nn66F31bttfwUn6uuKcnlj3GrmJLIVvWJnHbhipuwaJq2Rp4YHKjPa8
accsblLYHc0m3Jcmp9LEaFkL00uILYL919v3qWB3Cr9i2fcyx3D5BtkCmAgN
RLQ+uRP0MDtw4IKY+H/Kb40E8eL9/jwoPNBjiUAxo6daIar/8DsmpoDTh0s1
RehpJx38xt+kTd9Mm3rDCKtqlSQ6CfonUWnyTMPSMGAumo185p9JWaZoQvKZ
fybFl3BO9k8+g2fdshAwwd5n8Mx/9sRXVlKVD5nCTwXd/Wt+23RT0KmeAphU
H/JgYRCRDwNXoCV1TBDtTZMgWYt4rH7DWEODpABtch9hUuwc9mIXc2WSPqLn
ttmoq136S36RWpNnT/aecZMBNzwAXP7o+e4ufKQLzdIILcBh7FDgvabsYC5H
eNJpeelKzFxVi1nPrwMvj3CrMCSLgM8OcFrkTW76OErmB98w8eJRsO1zTRzs
c7L3N5dIaFw/mKypTAc0E/s5p6HNl1gbaIrHjJYZQmUL0gTEKi9Rxdih+JID
llWXpMHgpIN4mR1/GhAC0c60wSalGUU0/02w7EhwxViCK4LaRwT51WLdDJl/
UintoUuRErLONyZzwTVEosT3yXnE81FRA2FlWX1JGe7JukDdhk+1k4Y/NPlP
k2ywNN/4sItNZjpOtXFTQXuOmTCXEjZGEiGz6BO3Fh9g0HnKFhj28ceavahf
CqGSZME1T8kB356hDoWNZLl7yNHV9uAiV9d32Svk7tjzbdD61906VNixh/vY
sAjrlYEuiOtRHEvG7icmQigpMxeG4eCGxvSaKA9MzIaD3p5h011UadcvYch2
GELQxMd1wNRs9ho5UDpGy3S24dbEsQxkMYidrTbHLdzXdezrP9B1x6WSqoPj
zDdtQjfBvxo0BOWh6k3CZQYB4g3cheKzeKOaE6dmHiUdBEUvmBbGj80l64e6
paC7+/x/kSJl8/T8h+Onu/vd8mqmPSnEBa7EOS1SNiYif3QbkqZytkAzfJPT
5y9XFg83gCHU+V9ULOELnFEb+zUU7bB7R8ddVVGJc86Ktj0yo1M6jlh9PHi8
F7dsw9phcxJjWcxdUqmyghF8VffGc4BHtXIt0w/nKhnWU2lrH6CchMrk3DSr
5ZxINVpsBHjhOORkuRQ3UMs2OJIhosT7E5ns2btD/WYbYLfkiQQgmEOtPv+g
OenkjXXRaYCc2zdPJwBwjza03E42vICWA663zr3A+eNaCg1AYOYJ7D2KOauF
bhgrcJsx7vVLKRiH//7AMRTAxgO3iUn1xoJ2XIMNqf4wcmPg6+/p66/oL7yh
vwFX4WRDZ3GYSDfsOyHLp2qvm6CuxkwRLLyyeZzYvmuzWCDOGBGWHBF7OiIH
rpE3kU2S11Wjkm6TM+ntOnpK1Yi2YokULj3Fgwadv2VHE2RlEcLkyNb1qYlK
TjVcmj5mQ82DBLM2EcqNhw7aEtLvpc00L7O6qBrJ6IUaXtXLh64wSZSUhDwT
m/DeLn7jOfY4Yob3WXz7uoWkyAuP0ZRsOOBnXIdI2bxvgGbxY3IOizZe5/Dc
psARJW4KnYPwinfsBmR12BKQP92kqGtAMssCdhcVAMTyhMR4JSd8bXNxnQx0
ii2dmihClHySrhQ5IUt5h8MQ/mGEmRGnIzGhHCFOAUmUd2nEdM0duMJKZAYl
W4epX1BLgKRBnsN8wm4d2G6JbSrsVkOqL00zOHRgsBUxhJJHiEuaYpPzOprg
t8F+U5TEDejwYsTVNurqqkArmzkfW8lWHFQrka2qRTGVBLaaA5ByxWuWwjqX
QnDEocA5XC7yz4Xkl3OZOtqKAmVg35i4x3fyosassYM3U1JMkjFNFC3O1wku
UF3dCBrYjAHm6wwDj/O8l+ecXOnS6VVVcQ7gsEy6lDJS4H5H3pYz6trosSMK
MiZfG2GYNs+MJEr0RMfsKIFf0LCHH3KMYCa+GPM1WyJDRBrrhvSIqv4N6diz
2azOG4ttj61KHWtVGayFYkP86jOa3muIi+8I07k1H1uwJk7FHsBH5xxNhp0/
UkE75NQjeX6Zp1M76LEoTvwgQZniC9uKy3bZrZ2mduwgQomrN5K7Ed1xdscj
H6VLZjs5t0y1ROc/0cqF8bEbFp9GcTEbNReMovxtpYUCoCWQTb+TNO6OJLQ6
JyTtmqrVTYU1jShQG20zLmgPiaEUtbxHeRSqgwH4ln9Rq5DAdr8SMNOtPiUQ
62ahiSCSPFFJ/vwZ/ydQbHaKIdFVLyKXTNRFqjMeA6xavD8wURL6L5IvAoTf
bmnKSYVuLS48sA7ayM6X3MQ2dmAqYXH9qBlqpxS6hDe0Jxd1lchOTmrJ4c8y
nYarGcp+6T0Kcj9pkpBsxOJEJ5enwQc5URpr0m0ngK+ZJ6LMCYZjVmmk2ODd
pw1/na1oPofkiX0iLR+w/0qlx0Kl2V19B4T6ZuSI+MDrf/i8EPNJBlB3bB1u
4e85Nldhzvn+WKmoJjCkxC6yI6VsbozuhXizjVMp20jXYvkjiXG5a4vc1pBI
uy5aXDL6zISzO2OHxX/g0FiPMXhg8up/6LBCCitew995av/lPdZVbdpfv73v
rHT7mefbHrDNpKFolbHVXmLuz4Kuyd5dMw95x77euaWuynw52xEFyaaRgdRo
YMTA4ah3Os1LQ6/oKKLNAVm7ifmMDXsRXAEd30L3CbqwhbP+hm9XXbW5GQKZ
u2/vH4faghTv9RXSefCBAaY8ff74xX5qHgmhmdfE0/w4mPjtZUs1piTFx7oM
7KmyvLRFLtsBuUnWNSevligHn9qENEus+OQCnc4JDOezQyT1ne1DkhwpjaU3
UXpEz19qaMXrwyORUkTeg1+qVp8kpGTPbi3bDvX55sOrV37ruVtVQfmM74bw
0IgVWoxodLp1NAH5ix6iHUWn4nMoH1JsjnFZ4aZjCQinDiBuQ/xufV0h/I73
buPFyaREHoXzO+mX8tLALNVkEdH6CNfdSZY58RChGjKvncFQe0KSQ3PNmXRP
N9aDkZqPJ7JpoUcy7JDTcigfpoUIGQpWiBj/sgYZaL30aotbNkBxmiW3Fc7E
TqY5AtSMBaYHYiRGHiwZDu6oPzS/O3zvicD4KFp/UKHlqM9QBiwgqgEm5TO2
8PQvVQhJZFc6xm4C8mW6deichd6ZauUoktS3WJgKGhl2DZoVzXTNXg+IZLli
J6t4aDEDqiNWkbAjCEt4HdnNRB1ZLjHipJcnhBB6Enbb3O2JuthNZZneYmYJ
9fMEXQ6SpdP8midlmc8rqd/OWNhGkBkFbEDCbZgRTjUYKII352VQHQebmQ8Z
Dhi/u8iOcaIIkdEW69OoFBgNylAwYFNNzzjp18Np+qAFJH0kIYDbqv1+CJuU
3ckkDZuULu9mjch8wqtFq31cZvPORWZtzJF4m0w4d627PMvtfsK+IB5F2zr8
yS4LvpI3l1YmXg+/6YRjO0w7cLu9fsv2SvK0Ecji+snxALouZpGuLUvL9fKC
09nrHBBwfH4evyjvbRFrSQ0gJTxA8z/G+rtulcXNi2XLCCshyOG2VGViUV5X
C8oeZ9tH0RplTuW5N5REUH2GhN2oah0vD06CC6+GzzVmr/M91mudPNl9ETmT
XcFNx8SdHECNJ0N3gK1oyhRsRstkpyaNZPASbynFEtlnAWDHCLSaLzioJPub
t5EOdyAZNpP6Zi94qj7jdoIxDBMgCUsZCSpZFJc5VneTIg+YKZEzCrMrP/mr
d0WMLNplC1p/2EzNTO3qqtgh2Ma7hBlSPzL4jBJPM4AfjcMaWEFGs++ftGJe
JBUEFoMHDWfCIQC9VRFXb3k7H3KiwejgUJpGK7nbTsFNWb9qJV5N0/XOFO2d
lLOqbpgiddGf2BwIBJFPEquk6U2ypocROnOOJRG8UDcUCl/ZqSLA5WEOHuBC
nMUk+ROHc+Mua8E9N/HORjlLzUhcrLNBBMOmEQ6RTH8EfvCqBDBBTkdcFDsm
hy9fgPfB8mPjS/0YcKjJRplzBHFMon0rDi0aGype3xRL7LXO9ADD46PIMi5D
qN2rhlOT6nTyeZ3HbJrNQDixfnrWyOgSCUp3UGVmIkPnYXp+rk0aVbPTvFq9
pSvhuINnZc7CcD01b2Lp49QF7vSKdkuDwFATWbiLePIxUl2pTi8CNeLI+D4Y
8pph3bfXaxuLz4GoG7OydcvxKpyx+7FNkhgRpyxS7XkbMsauEVuQYcqfp2TR
1/TzHVsZJloVyBINLNzVLNqbOiepXDSrwXXwHx084vvsE+d3qCY6gqiH9Ump
EG7DeuIxnOmSIxk4FUjPkGHmAjEikrpMxZbO6W46WYqnXzT5DXt7bRKYOwZL
vixMN4AQ4RRESScKczNSanltjlYRj1cKglhgsuIZxUV1Fry1Wqznc2Sqt3i+
ViiPjr1XJNsJFVIlTEptd4pMPopKTG5DdxVapjUNc7doklWOMmPYo7jE2Pa2
n3WuIRMSCz/i6apfnLJ2Uib7/OTkXfraJmhW6VD4+z5UJ2sfls5HYVkZCKdL
0Raofjb2xzt6e/hOd060u6SmusCAoxA1NjClTXjKIYCHqRJ+ZL58JFISy7Bo
QJXYJKlSZqlz1E9TlQt3Khlxu6yvJhbzuinnRU5wnxcDpVb9Voin7b0b4bq8
ey8SCY07ctbAY/YQOFNzvhj+Esus2BbTYpW5uCrKHy56Yirnol49kZ804m4q
u4ZfeMcXM+yf+ywHrmIkG+GjTUCmDvOOW4d9F47IZQAX2TNaF42Pb926attV
83Jn5+bmZlJfTsf5rGirelLV8x34if9//sPxFu7a39gKmv4tGKADRvwbvEbd
9w4ZHf8mBktU/ekbM8XA27fe/KCYjWw7meY8jS/egztRG8Zg48hUoT1ssgQ4
BQJ1EKudtbVTbMZFgqlR0KjB9+8VbMlPVQD35Gz/ydMR/Ofx8wNa/MnZk739
f1KWnz4l5UXQRcEBY99DGpsPpFzsvBMPU6IxkoyCtBiCwBw8YLf/5pn8vp4E
One5yljCK2ZKlciHRt1we+6rqioJEsQkBRaOxBym8zmjVvwQe23JMY4CyJk+
4ARPvADxN8mboC4WmgmurAZlBpg2dvGGqOvfqPTLjZYBEicPprzRGihXCikm
2Faj0WMEFkyfsM/IwasQ15dKtW24NMkrciF/GhPhakJzH5IlzdjmSXpIySEi
16OaMx1GGJHmjYfMeWCpalvZYdPQK8RxabCMBI2llPgScHr2iUTnZkHKd84p
pTWkSOAMSbUMnQFlLzdpsegmwrcwvTmtWxyI3bFZHnzs2vdriMrOL+LRFCk2
Jrtyv0KAFA+L2c/hVjKOLGmlzu/S62EcKzxjuxWdkTviZpImZ1Qlz3OGtIxe
gZTBdSTfBGxGNg1LS0Jp6r98o3bfr1S5UtKEX8LRZWRSXyyC8wtHOGO7SUeQ
UF+LhqRv8n5GL3S+vjiOBDlpXIUquukZbmT+GYG3Ya6ZzJ9CXwnTwxcATlI+
B02F24wLhP5KY4pBkM2AWcvn5M0NDYwfoSFoUnaynarNHfeTiYsvo6gB2kfs
QEKc1F8zSeipFiBU1CTSWicWp1+mULg69j7dELVmw/Z9RTsNVFRCmXmex+uq
fMgUKb3E5GyWV/MSPeyESxDfCQNQmD5mq4nrfat/UpgWJlOtFjP1WQwigqb+
zH3IlJ5IKK+kRilENCysIxrYVAxb9jq4SUmYjpZl0BIkGuRAD2OZy61XQUai
Q2WM/hofeBuipM29G0FFfPmcKImzTKefpNdV00CFpKYZkEtqm2nF+JDjhQsg
xYHrKJmwWhyK0ge0DERCjSQRRobhK1JByoCR1YfXIUrSJXlnP9zHL9BMh7P3
XsyFCZMWp5R84xDWMQKYlWYjaoe0eh0SgrCc48RiHu7pHkZAHq5WQJ+LzylI
ao7nzhcssJKyhXyY3UCAEaPUHgllVRoXpSvPNNW8dXkvJQ67QYfcQJ3cNXFy
HZd8JKAcpFti2nyxy3tEiEQhl1adzdW2Mhw9SqYQQp0CN29V894p0KEpOGgX
NOH0VllO+P8mE2TKP5SUuI/dc1nxqznuR5jtpDHNE7Fn709pgr1DIV9sSZmG
DUgd7mbTicTF/DenUZyKnQRFlexhhpHtJHHpISVQuBNRMaK4ie/hy/i5Fs2Y
gHAMa0u3/nw4/n+y8V93xy8+fjf+9Q9bEiHNOU+kb4rjgJ+j9D/x4fcS2cEf
xN09+vPueP/X7UeP/t/J7vbf4H//vDd+8Ss8fPHr77e3f++6xwQr3D3P9z/x
wfdY3jRbjUWk16I536Vr3IIJ4KKnT548fuKK7PGJn3a19F++wSmK8v4rJ9x3
RgOFHOT8Bm/PCTDQJXEopoBPgnsqU1JLVuuwCI0T1UD+PUewYFFfwTu96Dv4
hpKFuW+s0EKTvsHkCMX0mOwlvmyYirb7nUCJCfTH0DWuatrn4Y7Zke9tjcD7
4I473RHA8jePXzx/yt8gYMA3bqhMLx+zU3hlbnK0xTXoAMfZjWcVFhQZz4CO
oDM0XC1mc5UFumLn6XRrb7I/2X+yO9nb2hZsQuehkf1bCFPfbxkSwZrb6JtC
cb9NSBYjZI61G6wU5EQ1RAKIzlnFI47czer5WmUQ4/IuNWhdjUgScVo4xkUC
LBBcXxFrlnB4EWaCZF5tpATqXymInn6M33AgHHmmaKVtTqYgXtecNo5ymIVI
jm5QPZFPQTY62R7qlJDSTuZW/AO2M6X9pNVYLKDPIThHHt9sappULYwbKmqb
I1/3wnJxCTU1hFTjpl9iBYIeJ7NNnOqMMHgv3oOqu7e3nVgPq7xpIQw+QoES
hhPfGwkMPO132e0CQ0j4CXUUGKk8sHooTRx1VNjZjPealbWI6GP2S5gk5ZG+
fMGeP8LCPgLLhZPq86MrmY6w4yNLpLWqWvakWmgO5hBs7XYg8NMxtGtscVeP
OXg5+FbCffs+voIRGeyuxe3dmlxoiXsQ8Vl42ag0Sojxafy+0Qk3wxOzy0hz
02mxSOUUKDIaMsZxzTLxlkQ1YcgWoMZ3KkxE34k4PFQKKg1Zzn29ve4w3UJw
vTq8/8sM3M8MbExZQ6Goj0jRE/LV8E9Cozvpn9P93/snv8J+up8yJ1pVA+gn
fbS3O5k8O9geSVwqP3w+mTw92P7+jpk8WufFLMyBfuEIMJz9zaN1z0jH3Z9M
Dg6203jgZ5PJ48c48B21j6F7V/pYfsvY7heMzmHBISTYZpZ8vWMEalTlS78+
/rmiUsn8d5Hnuf2o4VpUywQmED78DgmHPqCvaTvC7zHC2ch1N8ag4O+TzgML
GaYdepx0OugHH8uXBzo2T86Pzk+i8eWRn4F7FM9h72nS62fjNPYP7oAi2Wwt
CYKJp9AzJ+x77w2dHuzz4AsLIpeHL1M6eo73/mPaTK/yZQ4Pv9VG/ARDu++G
BhuNwkEHpsfPe5MLj++8Cwd0FTaEpeM/jPZv7ObAHdm/846kzc0Ykw6EidIN
2L7rWt30N9890+t185D9vme70zv3m7VGY8xOHGYCvxZ3zR7IzsV6Psa4yLXD
DdFTzeTVf/hdCigjL1E1NNuQaguVAQ94PaaiDTT5+74EVnGZlazlvOdTzjsE
d803goWESQ/9k3xb8snWKN0FAmTrGP4nbfQraLTnGvnVbW7kvpKkYoNr3tze
fSXpxu7eiV4Hg19t3XG9on+YuGwzpKk3RQAyeyJ3JPptRAgzz6KPBRFs0vrw
fNDvYfDFH80tY+ANpnTCWPONbcabP7nKM1JS9V40K6wf3XscUjXDq/9Ujs0G
nNP8kINBomrL7J6uvvC53xC2wvq7DfSFa4HAZLvSbaAv/AgIPLYTvQbyopu1
bmAP4xHGriXmr9Md7Y0gL/wA6VNowDud9hvQi+jzNH0GDcIZdBrYC9foOa5h
nqfxP13DPO/0n6Yv7oT49YrOPLB6zKRvJumEuhtYiMPfgaO/C41TSyo1/ODh
/jeJ4/9Hkjjew0HNQLh3lPnPwJXjIxFSkGkKP5WrwCcfdX31S5/KOrwHebZF
Qeoj9S2FiAQ50QcuK6j/5k4m5O/Jon3Pws3NLXQWHinDGD/BDfiDfSVi4q/h
qyA48j6pPIltX9LvnpA5ij7kZy/pLL+1Xi+q2S3LBBspZedjEg2+p50ceAFb
IHwr/Vxrcqhp1dwUs24TEiJ2BjIpPaDrsw+n5x9Pyut8UcF+/oMdN6vZZ2q0
qaPwQWJ/oqrgrk4xJKIq8/GGrgc++7xcbJrAPZ0NfIaddVrpjOOvUlsIxnKP
Z0WNapvrfCzuzuNZjgaFvCSquPfiPugPPpperLBnCv+dR3wB3EO7Ar1n/02X
4FvX8UPuQe97vgoi2gy+vO86DE5hEHDvIIaMcoL37FhSxITdtzUhCh76cl5X
61X6K9LLza8tW5v7orlt2nz50onc+LZeR+1f0rghPYQ8BxLwa5L0H+s4Onox
4/4BCTueYuS+eZmGvwkYRnQo7gF0Sum26wL1fM2aqlaAzNAj0O6rS4yCuuN9
CYxLve5Xn/b7Q95cQJuS4dHTwAXyQ6OwSPq7c7F/0gYfepK8H7fR+UVt5KE1
Q6ZgYMJRG34WRiJp6U51HdUIC/D3BfVxpKv93lUf+wrQFn59570bdmLl+U66
sTghTuR/unLh/yZalH//v020qPpwhkj3TxUmWfuRvkAg30OliVN1D3yPb+0+
7D8h+c7rqHsN+K002X+C8p3XNvcb0FsdYv8JyneDCskgd97QY26y/+SFb9DR
8mkDeYxN9p/iovt6uGgN+VQUPDjCU9Ly9FVwrsHsYo6vtMFjEv0jVUpn0fqW
Wuw/PWC5xnHlQ+emtXRG+0+f0Dl45NM/B3qrU8KDSyJht3/U9FZOAu4ptOgK
u3EDfNuoSM8NBsRV1wDewvNoBC859adEbxU2uEGs/O2t+gZfRiP0dL+dBg42
uEFXpokb2NvQoMcGxg1cfTpoI2NsZmJCK3ixlY78UXjtQe8o6GWYlfe6IUeD
M/UhZeuk2SkRe9IHTIK+A/4vPGJErMTJvTEkze+QSG5o9R1avDvk4K6vB+lH
1H9nbBmhR4nubLGRfMVG3+947/wzdn4Yx58RdidfDXowPiXrst9XZp7Cg/4n
0vGmDiKcv2H/2HXqji6IrHUdsu4EjdChgYYbg/MxNno8/Te41z/D6cSHMvzd
g8+Emsdn0nukrAAxxS+lUvhOuoXbQX9oxXD8iH0CjGFwEx5UbPXPye3SUIMh
VgVZgTs7GuAH5NzSd5KO9agTq/3N/23vy5vbOJI9/+9P0cF5+0TOACC6cWue
HQFeMmVdFiXLx3oUDaBBtgSgMWiAFC1rP/vmWVV9gATHnnnzNpYxY5FAdx1Z
WZlZWZm/FJzWfA73F+hIsictXl0RXX29isYfOZDiZsGQGBKPuyZQII/CTLBy
Z62AZ2egVUwFR84CZ2grGk+dgkpX14hAp2BUethea3JIvtyZxs8idpNTJ+oG
e/I0wRNxPlZSRggrKOeyQTON936UaV46FeDaLJyqHfHElDTikCcLgHtBv20l
NRo628g95FYo6oqLHVMYeIkYXDpT0KNfxzMCXniFwKQxVu2khD9KackMkiN+
eIUG4UKirSgeNwe8KosmWXmeRoV/XDAyrgk1E6hIg2QvwJC64g7ijMfckXCC
9obAADn1TqCrk/VGCEMTv05SRCzKvEuEq15wnoYBEV7Fl5uZVHo6F2CTckMR
N4Wz8CRfywX30XxgWNnJBsFyqaDIaJXeZBhfR3SiUDfp1dMwcMwiA6ZfEdwr
0Sgl+DaBJ5BQusjJ8Gb0Zq5XLaOyUL4r0NQc+TNcCMtQylyW3rv2fh4NhuFX
uFroNL6JLeqyRfZdKFl491DaAZXU4+AljObHvXpjKx2wO3etBXwl71QBD8i5
Hl+ainYFoZCtCwiAy83aw/4zu0M4c5VoRQG0b64ME6UjTkMzsMl4ZZnwdjVc
h2uRr4jlCf6YptIdUj9S8tAgSTAyDeWOz5cWvFfxneQBD5Fpx1RvPbpcxQx1
5fv5/HP9IrM1i9PFDIPNRtECs6M82g4rmOSKuJSr+2UGmY0heMeEzW7ywpyh
K13sRyYiUwsm5HawqTi5KoCOe8gqNNfc+6NbCn9biQTBd24bhcVwhV4m6XLO
47SgyixcmWaFRY89Z8wUDz/VxCZnZPmOC+TFrkS2ea+oqzGpC5TJWgmZ0xbw
q2K9NpvyhN9TawvPfpAbcsUg83Mc3ZKLhFLNuBZdPCk8QiJHM/WjxKjA3Gpa
tEhmFk1INTDpvMsFS9PuMXH8JQvPIGuUdhNGucdS1+8Uq8FUMA3yi2fz6oRd
ahb8AdmYPJaqXLVFAZWpmf3nXSfxja066ZBC89S1Ei9ymFGOUkYF5YN3OUtH
tFSbRUKRkzM/Gq9SxA+JFptpRMk+ql6fqY7eqlhVi29Trk9MRW+r8FEwYIy2
AEDoO5w0kKWcgKRphyTMkgX7yBnBUg0aVB1Fa2YW3SgMn+otTEBHxWZqHWE5
L5VsriHC5dKR1Kp2tMYAw7GtkF4cfC0y5Z7BcEi+ad+piwl0xuDshJAhprEk
p5FBtyTqYZxqBU/oDtK5OBjsBdgCUvhupYFMhK+V41PGTFJSkB6Seu+Z6Ksc
bZgnjjDo5gLDBrYyhTobtjEFCjrbjIHXiYESdMeDFZx9yl8w83ayoQ3uA1oM
C64eT4lTXGfU2L0mo0/BgE3BoSRfApODwZyg8gr9T1N/HS9noLWcjHpkBiXD
5z+t6Ptts0ZznhY780NTkdpBISIxKMna1I+D3rpPmpKw7THOwkPzcMFlSvCF
PYNxtHfwmOsRw3uHH9aJYq1I0LYDaKRVWd3nPM3YPKQsR6qklsQzwY8Qba7Q
VbNbm24nQdY4RcnEhE/kctoT5aScTJarID8kC4HicFicXsbE5zVVV5JxFqCY
KEfOwxXgFAiT66l2nHa6iudARUzgVSiqnPlywM1nccVJy6NyFWhNc5KulN+z
QqruYg86MkozHpNFNAGZsebgMEwLuOWDE5vTpHl5quO45mG1aZUmKdds5dIW
CKgDK6QzxHRumLOAOka0lxcMd5avSMUAQERnyfTBRI7NYu3N0stkgVM/d4pW
COGl+DEVoGitJnXWtGubxeLMc6xZX5W4CVm6WY3zpbClAL2Mo3LE/JwMWPAx
9XmappMew4tsOfuA7fR0BV/g6kXXGDzPOYm4dlq5Vze4wWp15mQTVt1txBDc
yoEMYZDFvDsyz6a/Kdux6AcpFs0kvSFdJZeIi4ygvnwKXK82sULGsp6TAGlJ
xhRZn66YapJ04jFZcRr8OEGbURc3jHFD54B5HGt25+oSfhVt4oIBkMQpyRoU
db4BmCvJdq2OO7aiPNuCRmfO8UDScukhJ4nX1EYKvEJhIlN7hJAEFpSo4uRK
U4ZSDS21pWoO4AAsSJyS3XQMh28EyA1CabgCWE4PgPms7KLXRAqN+7ncRc/Z
r2Xtn8s6YQWC2CRuoW7Pe+XUEDaltIsHO0GQRkAIBd0WaYsZ6V7hcWdTIASq
xQNxAJmdplgUnS88so5VHAlIh2sTFiohk3wiyE3tyjMTyGKQGhGJXalXxFPW
J+1UE9e68biCk0j8Yt+4A6RvFYXjaEkLRlsaXQt8/OMqR7wciMeC+Nr5KnrR
msvKVFF/FHtiMZhtgaZpVc3xbfPxVJXZ+QjEh2JCEeXEAC02EC3gfZAzsIj7
YEbxhmhz7Smq35nLcNuTZ/cOagJ04BUt3NIozXle+8md21h4eVz6Z5UuMVEt
NsD3UiMHb2JAoohAZbyYMjHRoOAqpZIMziOkMtp4OId+Wf/vM6QREv2Aj8kO
W2DZ14giESTR8U1hgrivnmuX3uv4EiFTcHkKzz2ACDWvRDXk+GVEwpb9GW5p
H0qInseThHLnGp6xRPPzd226PWydLowxFPLAKUzO9Qg4QTY3B2YofRIWQWoA
E/b3CnhyzHCumPhHVXBAsnmolrhSo3+1gV2FanuFeC4kzXCaMzSHV3Qa1YOk
VWlzYLY50BXIs6D6XSltoiq+EgpyL6TCbcECD0GeabfOwSRbkeVlJbV9Tfct
TltxofPShWPBsICocYYyV+lCciJywqgoAgtMthKYolgXVMz+LS+JODX7nLxx
ynQ0ItWOnjfMuEr8nTqu5u/l1KRQDvUYan4w5zdLxkHlbaQckjsbImzVHpBM
MW/zutbLKUo6ydmaqNARvGicCaxK1yQvxbk0RtNmufbIFcZ2ztrUgvCjS3QM
rsVUoDHgEyJnFYVayDy69exVhDk28DHM4HzzGYBue5AYhrCGRFHmybjI2+/c
L9QKO037V0BMcrSvkslljFFH883CAEFpOqsj6MSqpz5gXsOM4EPR7SPnR+/1
6fHL589PX5ycnvBsTDK2GZsoQSFczZy1RHjNyHt76WJkOhiThEZWOATmq1qA
qvZUc2OpCKtyuVJGNUNYy0mO+2LBMEc8JY4YztYMDY0ay+VOesDXgTOLmOrx
p3Z0+0/fnR7YzGD41rvQ0hX45cVBHjg6q7muKFtMkleNcMV5pJ4eJhlJjKvJ
GRhfMkILKMce1R7BV7AFwlBQeOOoEgGY+BtBZpSvc8UbQB5G448sxhWn+zp2
SkJkO8IWW7TvbVYyLxTj1by5KuEO1wqYywljLKalUh8OijPR67k6LSltXq/N
PIRyYRxGrrKUz/inK0dl7IqdRQlNHoFq3+Y2kuOHci4A9erPKcJlLvA8p9w4
dJsRuJL5lqH9nde0aifi7i3EFseMes9B1td3XYBcrR1qwd34spRFCe1xsOJR
NfF5mrQdZjfmzvOq9NCGRDevIzTAcs6Bmfg5sWOkTsUwjYqVECepg2U8Avmj
hNYP1bterQNE/kiqE8SyHyjk0ITIhns9v6xyU2mcNvtwbk/XjCiC0mCPH9Ay
tPge2pdSJoKOYQKTUPOFG/AzU7iGLBCPnAZkMRlMNC5emLloxKlcKubXPqbi
r4Tzvr83SW8QHCOO5vapvQNHE7F+dCWnwpyi/wdvRkZuhRt3XlWLpqMzw0Xj
YXHrVYzDVHJRMR+pYWEqRZEhhLsLFYiHyAxW5dVB8mAjIhyAJRtxw3/z7OKg
5nlGZRNcr10tY3DH11RMVFkDZIPWGSBUKbxdZHZ1JqPVbSqmklhryaAmkNnq
Rc5O5ePZokptuyrWUhqHUbWCxj+rSI4G1Nr3X+DEoRmEiqpVv83GihmWLoQV
+yxFBSMT78WFfGuFjOK2zOm8Cp1UQna3+EMweKCyrEvGdT7ozs8ZJpWHEPgK
wkPiIAfYz5uF7GFbuR33IqMoUSkav6CxWUflK9MTsMhmtqCDFM3ZxcKkRcVF
S7A2y+I2B5RpASjXxgFol5Fk0Mp2bfx2Hkcp15yCTcJtpCoUfkscfHS4FR7K
2/4S7Cznm3G0kLvSgketeCg95vJp2ZUtm8ERL05Nj4Vocy4MigwHemWDoJ5w
OtIJo5yhlWKaxHZZhbpubTinRIcCQeM4JEGMeYu3rKA4Y9PZZgq0TugKMFd6
HBkbcYDJ8XY+fDEsMRldPTgV1nMml88BSPuOW+zAov7TiPCIIUA3JaBn3gfz
JfSFLCNu2FQ6c9Aos9ScWtT7VuqlBsyKM2jgkYO/NTh99PlT5/Oa6Gmuu4Bg
tIhsSwRQSnpWIjWshVdABSyh19MVDoLL0HdksK/MELlIHfZU0RRJSJAW5K+3
J+A7GvM+f6b5vD++ivCiAJg1QxzMfMUKihvJm310RmNPDgK6mtoLYr3lSKtn
QPIi2QrKjMKdq8wClkiWdzwqoJWcBPbybCNcsWd518UNU7xFdcbKwYbC8hzW
y7PB7Z5X1QYfhRse3ZIj4idubi2RbX2qtF9KRH5DvZJYOSGqLiUge++Y8Uhh
x8CBdjYDM4WGuXeRI4vSDCYq/D6XyzvnMkVjjhTuic/ndhTOIL6Nb6Uf/vt7
uoIixMf97IA70eacZm5JqOVaQiAyAlSL8luz+GbNACI+dT6VpsxetM3lL4nW
pQ4XFW259UJIPEQr2AbDDDUTcRxW2zwlrPXHxkBIFhgsthmZKnvrHDa82UNc
FtK96DEs6unTUWYKmS5SAiTgUmq5AvIT3GCLyw3W6XFPBTGNNjKjxY2epbXC
bkC/NAleZ2hiIgqfKfB0YSa2+MG+YGnLSh3yPfRBaQB0ayV+yFQ2UhA2DWil
bZHfgfYUfI7jF8zOZz9imdRSVMKpyMI1vdYUpmMxecXOglMMq3Z0I/C+wepa
xWb1kG6BcE2tDVwa5rk8y2Vmw5j9YVE8y9026BQ6WUXTtV9vduk8w8SbmYCD
Gxc3saFFFKVKFs8ciyxVvcbQslTOgsxKrWI1EYy20ktM/8wBv+YbuMxuRUKW
prkxquC2poh5MW5gM6cLBFNBywwHI70s5R4zsLv5zBFv9qs8sR+7mUHmRSD5
Y8omcNiTb8aD5oF5ygoqkFOPKQ1UkATxkaIsfeyfn148gW+qpSk18f59jgXf
v/e8/1yMsuVfi/PEaKTqaeLavjXRSKfsUaCHSxOnFCdsxWW1LfMOO91/i4lz
qFj11C/ieWKxYXx9sjRvydTaeea9rTOfR8t/+oy/kRQv/+Xp822L7j6zZbE5
2+wODjfT7e+y0FQ1kRE0/3UUeI7pb9UUoK+KtU40O66KHppMt8OeDzuDfwve
N3T4njO37uEFecrU76CVqqCD5oHtQonudvFHRVv++fuf3UEY8FY9/XOBv86V
WKewNtRmcqdbJRQk9TFPhbAbbpsvDGEWR4t/+oxPMAETMdLXmy1yz0yZszRR
n1PWphMYWTVjzd0szri1bcaKmEulNP4lHK8hs9tV3WU5JLZqribtdCcmb/+3
CnytPHXnWmfGf2mr4XGOyDYTR5Nod6JAZysFEEcbGOAlq6J/7l7XXP9Mb4O3
84GeLMRFRndE5vVqI4DThHcix3bb549lCArHoCSOoZ5i+AjpefunxRMRvPvi
5Rs/f4BaO+GXDb8qoBpzWkg/0CGEAyNx9AdbbU1Kj64mvfmubFxyUnWJvNsI
aXy2/yqrwsRMb9loqjXRCUv6g+ofV03VpIPvPFlCjPmnz/Bc0wrfZvdKEycF
0U1ArJquJLPvPNl/vdo4efZyuEVXHpuqzuQ4FIc8XdWdJJcJJus9i9druRIZ
oncchECl+qQU/Z2p8C8yj97RL9vlJAX9yvrCw6vNYuEUG5EoiypxyfgCO0/3
X6EoYfx3WsI4XzFuccoPm+5Wq/i/ecamoumWc5ApeCr+Hg2shFfpLnw2s8kD
2+dvwR7+/Rj8VDAnthDAQZ2wjF6TODm0D6bJ5UbAFk0x+3sJYqEu/g0pwnMm
o+A1Y2ps3xACukG38gwkBQwCbbhoHVzsWWvhsR+1mijS2n8fTdhm0qPuhSQf
5W961u5ND2UW8beyxTlj6Yvn0W1ZkjkWFdGBH6Z75xuxCEV+7F1oAeM30WVh
EDzxbK98B8R1bqXEROy2SmVepBUB1Y78oFWfoGbyTzdYiSRa+EPMPgWL/wVn
Nnz+fDp8UQ9a2CKVCcQ/TCS+SW6CF6maCQdsgp4rNEOxt9la7nPI1ETLh4Lh
JrG4aAujkwIUw4vj83NG3MpX0eI4ORoPzUEC4SlgkbLoOAF9uUIbQW4z7uuT
wtHIE3xrrz+gk5wPGss2WkuZCmWWKhHLSlOR9VJ4PgbSjKTWlfMFjYtDZZ9c
BA2qiQtm0yf/t+Ly4xaBT/PcjAVDO4SL8ZsPK4l0yf1INVNz+fqb8Dcln759
/WJHxkb/5ma1uJel87c5VAp1M+J6UcrhJ6ffU8cX8oVzuUklROEJTorKV4nd
a6BprcXSWlSUCeYurVCBWiOXyqAhRaK8NrKI/oaGcIb8XdnXbX2ApYaK1P2N
60zQd0Xv8R3tblsmlAJ4CKuIfaFLGg4BEfLJJT4BnWHdTLzDr1wu4Ws6sDnF
vbCOm4nZ9s+Ozy78bBlhpJvZFbIVnct8DkjLX3MbSU9LhHMgelDdvXMqbuQr
geQKrGKN8M2jk24zhAdJxrtkr4oF0kAcpd1zjEGWOn93cLnW43YopCXXj9Ph
K1Io8JiA69BqXLw6+YGv1BgTFf4alUqvG4avaAWYHvaFWTiJvZGnbf3t16cX
bxDx8XRxnazSBWvS/eP09ekBIpuAPMBjhbOBfmYGSFcx5gXK978QlISlxmPf
QTo+RGTavxA67J9NKUbFMoSPzk9U+Zot8xgojRT48sU1INz2r6lQ8uH1YtIQ
1FjoA6FlH9KFoe0D+3nwXHId1et10Bbjj1RKV+NkP/9JhDwGMlP9Mv2bAUCu
RCFSan+u7qeT90c149ziVZEpX1WrjFKDR6YbLpTq1rFibuU+iZFvKA7Yhj9p
H0mxCqvkjOH4KUifki0YoIDt1iuWAzYMTmtwJmu6+WAtll0J9o2JiLnAABpD
EtDQbgsMjZNxsTRMX3w3fP3i/MWTx5LYa96j8UdcuJhx2fSaF6+pbyniTjw6
sIeJ0zkYRwuU6Xrx9r+g7D//zempP7Thz56thIY1npezXJI+RwPiK5zCxvHR
GWtsOr6Y3Da7lmx9cWofX4gTdaCVRxhbxPacVLPyDn3TP+dnaCvUro1JMqOD
Zhr+oecxoOahRE0eOpIyaD72rx4N2v1pv99tToJW1O624kc1ecHBZ+TXwm74
mJJb9QkXkJEeCbutx35Yw6+21is5RJLwuVAHE/bgtZ/vqp5x55c0lzDAbl2R
6SNczZC+rQbGL/4ccpn0zZJC5jegYGb0286vU7iPcBpVmeMFhkW491VdXHTH
1eVeUzBH/d2mcFjgqwYC1FwybBVz1S5tKNuRd4b3vRq9uL12GgdZAa53h+uN
c2lczCPYoY3PwJt7rShsl2pJ6CP3twFM8dgPtry/axt+AAMZjudMwZcXxfHs
NI4WTqYRNLbMZqdxwFx+/twqj6YFjQdgsO3UCP5sayT88suOrXRB+931yK4j
CXpbG9q5DfwJ24+x2Mo8fr+O4/etRvwp3ntIG1/ueGSnNu5oYMc27m5hhzau
HvlRt9nstlutbtAKW+3muBk0g+5oB9nVDrqt7qTbCZuddrvThn/b006rCZ+0
WmHcCnZoAh5rN8N+GIVBP5h2R8Umd2mCeg36IQy7qpldJmIGT82EzW4UBAH8
vx/0u3F3l4lwf51pr93t4L9IgW6n1+92Ht359i9bv/3F+0LfKXKkqPNh0Q6w
mZbqJWUzFZQYWWN01GAMlBSE+qFHCofkrAp49C5ivo4rsmcJqlp8gkq/Jhr4
hz/YhhRLX2ojZDQErUE/DAetoLuv9sNbzreQwaJaw8+tmJbHwBBTrF+7R1kQ
q10hKoYwhK0sKMqk4tNuo65AleckYc0VCz4LzV2Ut0Ud15byozM/ZdnpvLlK
Z7H9q/gmymkhEC11uq1gT+Hny051xf5FMwjdJXnYNO576BddSt0XpQF0H+em
2Wg0iJ1Lz5FeyXXHD2dVJKlSHn/IfL54Xw4ckF8nhABtw6MUzkW0QdlrlTfz
NfMLj0yZXoTaKAJTQtpNZqTdHI3SDfsgxlfJsuaPTDcpgU3OBDmoURouvv2P
/xzSyAWtzz0YsU1cQgPC0dm/8O3jV285QFouxtba2suLhmAt3jDuaqbQARye
TG8v3bR3OkCWZ7h95L9/3kxngsacxAyyZKOOWY5zNq5OvqFvv4pXV9Ey0wxq
PBFrsa7z9A03XD2XP2bkitglfZuMTvL1ELCSnlzt1Pjt6gm6IEu4yKnGvTnz
+P0j/0ZK0jsMLhNxdgnIKCxfTSxxu6TUSX5bsJNi1z3mxqWrDsbMbz9yMr95
3uIAZDgOk3VIiGXJpLxbG87IH3wc79sDObnec3Zvp4uvNINBf9ppRu3ptDtu
dvrdYKwtdFv9ODINfPNOonK1lbDTxwb60GnYeoQH6PNTVApvz30pfqTP2xY4
vFXbCDsDbKHTHkzG8XjcHw36vXGv1Ru123G7Oe2Nu63OOO7fbTtRy5jshzeB
yDMUD8umzaEz+O9zdkXYBYL9vBc0WnSuCvD0Itnx0Wq9wGRSYGNjNkgzEpZg
6Rj2jEJ0zI6LUm89tCXA6Og0Otzb73STtHC4xslfF4eJbwZqKzLug+w8wBdh
tYNO2O20Q1gx0z9Hj8FvYbegIIeWCVFjXKWIIkY5a5wL4yiLZDXeJGvZTVaf
79EHe/5jv6RQ88wknDQYxdN+r9+LR1HQisNxf9qNe+NRexRM291goKyYa8Vh
KOGmOO43p52o2x0H09Gg1w4Hg0HUn06i0aDV7A9a93FTmat4XkIKl69yI3FW
XJgrbDQjrHn4CzqHCqz1F8r8/ORQCyy1e6hfInxeK7uU5092JX03gCMfctSr
0xf+WX7v+rvMtN3EFjr0ny6WHcUpy4WpyIL9EYhCWKwDd8pSUueLWDpk6qB7
8hUrZBKljhvVxoQfzVL0lpedmy4ggniwl05jEY5/hC/nZoU2wGaFqdn10SaZ
STp8Dr7ipcJPuZiTHHGYaRt0jYUHJdeGkUy7Bd4qRwrbjCWcRNeNcU/ZcZRx
jDT6n1zz0kOd6sDAzC5X0XzuAChRGwyyFPlT0CYHDb/dk9JuMd5O8B0R5S7t
9znuXzBqgi7/SW2gvjj4fT7g361yKFPEbYG5tR22yU2sMHmneK2wXCWZiQE4
/CPE6x21sGkbXFcoFDpYUl1q3AF4X0S2T1GvHGIxYmvdI1LZIf33Yo1Jfbmb
gzKPl64OOE+PULc0HRd/z6gxZaw8eCHbZQLmxKYwIxGjLdkg285toqIBhnON
DM5DPV1hHjvijn2Cjwo34tiAYzEZMECHzZPLqzoCZsxAldYY7kM2s9qM5GDI
D00jN4gkBL2y7ef3mY06AsXTJk1YWIiKWdDdnLUiDrkqA7Ljf0puA7OeHlJy
13hWA8hFG60CH2IwRN4ihPjcozkjGPpYcpkp0OePsuJyWjg9QrqEo6GjaL55
hpPJUl9GgCNVTExF81nvdGb6Q1ZhaFgd4XE59tdZA8KxdsDy8SuGhYbx8ipg
8IEzXaUZVlug+0IiGyd1OuHokd0LCsvGEogCFny6rWJfW2KuZa9ul4hks5YD
hE7BxO9QaQm8C6WdjCA/E7Q2FCemkqh/ECvzODOBCgMyDBeTFWLjoiQa5rRf
uYF/07vBJHc5eP/dIP38fM8N4I53eP4dt4APaWLLTeBOTVw9Ikd+v9XrAlVb
rVa7hb93d+q9OW42m0F30G51gx683gUDvDtAZ3Zz0m3t5MonZ37YjJtBU9z5
PTjeQTPtXgdOdu1euFMj3UE36I7DZjuA19owjgmMqA2fwojQO7/bdMIdbP3t
rnfzAwJnhIUuxMIUI0pXxd9pYQ4rIA64toA+sEsbvp5A4dB5HK1G6SJZ023V
Q9tAEx7aCBrhXvGBnds4Zgfu44oHdmsDfvbOF5MN3lhjHOdmnbI38v77N3OA
jj8tEwmCVgnUhoNuF/gerMQenWrCZhjUg2Y96LwJ+o87vced9k9GZhjMXbSo
uY2uNBD0mv1msYHuY7BBm82fqgdY78MOamK1smmCQBUUEbpX6YOnRwMfLzEP
jZau10HkIG7Qe5TBxdMXj/ijc1MRiFQ8PYZ/4hkGIo59kK7XAtrzCeyM24qh
QiuJ9ZGHKK5b3W6vA1uuOx2A4OiOW9NOMO2A4O6NBm04Pj0qz+JQuqJ26joW
/gw2y6s61hut6vxTfZymKxpAnTrvduJJ1ImCsNPrjcNRFPdDkEK9adxq9XvN
INplvwfNKIpavU4cjEadUWcSB83+JG63BuNmv9MJqidw64ykhSMJ4k4YT0Dq
NANggmlvOojbzclkOpi22sGoNdllJOPBKALFF017cXMc9eB/8SCOx5Nms9+e
BINxQSzpyd91x8gP1v1EDrmr1z20zvaEkbgFzhp3TVF3GapU9j1K27x5n+42
D27RxXfOhH7+H1LGVh33Wq3ejn12O61eq90d9fqtvijk/o6vtkG9goYcwAnZ
XMLv+GonbIVh3G6T7m6x7t7x1eCMVPypVfHdwa5zrVDyu75qbAFQ8/dz1U6K
/m5Nv8uKb1XzqCV3a8DV8SdkjuPu5i93b0AU/OuwcRI+yEC4W7vv2sBWzX5v
A3cu09Zr0y9e7iv83fUpmtwim0+FaSTpG3N/WorPlOhXwqqmGnEjRu/CUye+
KDehFBirAZvCKOLxnJtsJieBi0GL5EF2oVRF7cn5UlAh8aBLpX4o/Ba+myTR
5SJFTDnqrBDm6QZ4JpmM2hm05qcYd4rrx5DIENdpamI7jPcjcnwTioaE7YOe
2acAPo4NoftXnbvTv94J4tnXgFmocxR6OuBhsbvCdCQp8ZlbG9R2zK9gVAKR
StLAMl/u7OwAqVDBRqJactliQnTTY+7c+28ZDFvtIKU7uU40sXdyx/AUFUcy
b/7jvlnf2Cp5U6V4g1T1syeGinPRUaJNBX220MjfkU7Skcl8dMfca+8Y5LPT
Q/jzRwQT21H/rqBi28w/HFws71vxWCWtdg1xNgvgBBmj31G+37EVRHaNjUgl
KYORPPTJ7q24kuNhxhwcDbsSJtnqNMe7WklwoOhOnJDEMJyA1QQnLPh3uquV
5sRVctCk+FhCbHhXy4n6b4dgbLXoNzC60MeDttvO9mIv5FjLZguDJPutqIVh
kr2gSxPc2dTtwNA7aLFOe234d9ozAZPBroZgEDWb7fao1R40e/2wGXTgP01o
a9QKe+PdHEUwndaoHQzC0SQct+Jx2O5H4SAMg04cjdqd3ZxnaM0Go2kvAsM9
DjvjAEbT7g0GzQ7TZufVAfsZ1gJo0YHfWvh7GPfg9NRtPYgmzXGrPwosTcZB
OxwNolG0ayMhHD/ao1F/3INVCrpRuzUeDDog5QftcbTTiRx+RnCcHnR6wbTT
6Q5Go95kDAw/HfQfRhPQPXQ8mKDNDxwyBo4JgzZOM9yV7VuT1shSI+pGg8l4
Mh21+nAmj3Zle9Dv7bgdB3E/7ndDIEd/HE5G414TFMnOq9NuRYOgBdt3Eg9a
rdYo7u4Wk3D/CebuJ7YHHX6x95EaYLwoSmsTYqx2F4e9vK6DFK2jXndCkNXk
4keOsJ6t3tDt+fsE5TtNEOhowzHIGdXoM9U5MjEgKyEQ/P1UYsTksiuSluG7
AwVA8OUyXcIVHxqUDAwetjv3hyWHdFGsU6ujLhJgcypN6N5E3x23bKj4h0Uu
3xvSa0N58+tzb0Tvw2ORv5jRli0wbHCXyFwMy93NBts5eNeJ3l29T9L1+zSj
AN5icA80kGHxD98vNQDM0u40Meyl4iWCoC+/5O88E/NDFuXFN8MtDtU7f8Cm
N9qQ1dzD3odZFtTiQ99XNar68aHvF/XprhFc/m5On12D5B/KWHD6pKKcWWOV
jR/IVP1mc/BP5qnfyVTWnGA74aGLWrQrHsyUYoeogfHQ94sGyf8QpmJUk8Ys
GT2Qo8IWcFTr31lM/YMmmfkp2mYPfT9vy7V3tSvNzz9m1NHPjhz1u+0/k1NC
XlE3slLwltAHRsUg2Ifp+kXx47q4NnPp48Y9SiGpm/VyI8EsXGCLTbW11m6K
J+bo7fZvqhXNqYgfV4lFX3xDxoAxMsl4g5Eqpl3EBMKoRipBY6OVyAmoRiGV
WjHRSlR3SvyHs+RjnAvCsrGXpqxNKvGaXDqGql6zB9eMwYATaWhnHm7KWMti
zE7QgqUyQAtOHODC6Dq+8VU8/ojPz8WzjATPyoNw4ffjlQGSNy5MBbSSqu7e
3pvVJsMpfu8UPcv2NHzOzbem4vacDBOtdZ6ZGt9m6DnrXB3QLMwcJHq8Cf/w
cdL/9lm9/9V3s18v1XI1OMUYomw9fQbMFz/eq3Dp6esMA+7T9cRe8vad+YLA
4PlzMG9/+hAcf3wf3pxdXd2e//jitPujHQAjAdKjlUa4A57nF0WhWOHmM4lH
2EOirBBdyH2h8KouhXsjURDmZbn7Mxiqs9meX0PEV4pb2yvsdvMX//JLPqqa
dq9eaHGFFroFuNgotuyWFUTQ4fM60e71h+7LHJmVyk/LVO5efvVVcamrVzq3
0E6orb6d8DP4U8xfMOC37gFiT6PYhsulf5amFUHwuvYwN3igES2XdiXdMPw9
Qek+5UBJ/5QZs7CeGEpdWL+98KR1cXX68mp4EV2+exKlxx+Ttx/aV5fNN8sn
r64+Hg3PhkfzV2+/ffN+NHz35Jtz+ubDh78/+e70+Ml0dQv/nh0dfTw6un77
0/C78Qn8fXo5f/7rsw+nR/D7t+m7F29fv313/Cy4vOyM69+/v3jTXX96/WRy
3Pr+w9tXUfuHD7Mf6t92vls+WX77+vj4ff/ph3eX6x+/exV9d3vz8vynVn3+
9NsXrR8G02efYJiLbH4U1Z9fL795/evLm/qPN4t6tze6fjr7sBmv41+Hr07a
QdZ9P1z3Xowuvm/9/ebp7NP55u9PpjdxO4izr3I7wdLvWbLYfNKwwr3i7YCz
DPrIlmXYjKRS/dO9UgwBFropkj++fdqMfxgmL5On334ffJc8O356NXoyxr/P
3/56HrxIng4a8NBy3HpODz17e9acPPn+V/j/7Xlyk0TvzprnH9JPLz68/fTi
13Hz5cmPbWhkFn8Djc47wejJTXY+Pwt+Oj7vnifn2fniRfBjgr9Dw5cfbtqL
s+dXz5ZP325e/XD9/NWv3wZPnn+4un369/D63Q+XQTvo/vBt9uvNdw7deFa5
ZAj/DBFteLfmYWbgyJ6MqeyDfF5xg3l6fHIx1CqQ8Kgqb05wLAeWM35O8UG9
LARReKsts/qfNTA+ycnczGB3c6Ib1khGjab3haRKtMIxRjdhRdiAHO9eN9j3
g/6+7KqrR8OgGYTdR3cgb/iHTgn2qziaIFqP2Jufv9z9YjxfYi3zRbkBibWC
AYTNo3a3GbaH3aPmoNc/OW0O2wMMxGiGzVaz3ew0u81es89DdDKO5f3B0eAo
POuctnsYC3bWhfaO+8N20OkddXrd1tlxu3N02uuofToYdloEf9AJer1u/zgM
hmdnR/12Z9jpDo86nd4pvD7oqTk6bIJ12msNgrDdGvYGx+1ev9MNT+D1bhCe
wvH8uBuGQVcP6cOjsNXq9XuP7qCKpY4p1YnU+MU/8N0c5O1ocIghV4aSqtn7
GeakwrUy5eK4V8+Ul8PmlWnOCYcvvU52HttPM8zJBMONC2eMbdVxB4/Jomex
Xan3xVxlMCPsA6c7bHkaxxPhXqlFKM1qFhEXLYqwxiUam2rFWrckz6x4m26S
kByQLq2ht77aZLprCR+LdFDp1YZ3IeHmsbNsY0wJY2NNBmzyKwy+VJ6kHFjA
fQiSZ2XxSluDcUR1DOM5Kmwc1WaxRouGTNsqsVLV3Dq6bLCL9kW6loAA2HLM
MgjHJRVQyOKtbiKxCF0O/B1JK4IfRNHSDPd/1ti6s2SVSai9lXZU+dOKOfdk
IFW5F/k784ZPSGymOvDslitjWcwuJ2/PgHZpC2YesjimPibneXG6ITnOYbX2
3Bqe2oIY+JRNJrUCOPKBik1aoDeMPcpywTvawmfzG/2Y0IUzvOc/CVrDdrd1
+qiWe8oJDjjrgDQ8O+seU3DAsb7UbfVPh6W3nGwt93Nzu1/4WDKvcp81OXE2
0CTd3JeEJZSbju8z7dBMKH6BP/WgW6v8AqMmTk7Pup3wjAR3L2ieDM7a3e6w
fdztdk/D5sCvftH3T0567bNB2BsGx6fDVic8araCdus06Pf7rf7w6PRR6cVf
cp98cf764htFctJvnYBgb4OgJ504RJJ3h31YgH5xwYJBU11gTVBQ960UPt4M
g8HZ8Ew1BX3Uabbp3+5Zh/7twUzw33YfVqfVCk9bMBL6ZKgKJui2GKWnH4LW
64fNu8mogxzcR7ROvw3Kc9A8hi/6elPY7fXOhl1Qza1er3N20js+Om6fwoOD
0+NBP+genbbCs2G71+61WkfNs4G+dhz2zo6GpydHR8eDQbd1NDg+6pweHzdb
x63TVueoNTw7bh71juDX9qBzcqpzO24OBr0gDE+H/W7vrNk76p90To8krMfY
spiPhGcAc7yqCpGwdUXrsJ0p8uHQNlAMbco2yZpcAozYiKK74sc0wNICd2jU
bkbEHLlAJF7SqS5phQMfvyGgozDo9wadfqdfhQdVfq+M1VSEf8IwhfJ7d6E9
WQymivcqwZ2KyE0V7xWwnKqBmsrvWeimL57/y4Hn529Jc3ArZhGrNEBB8td8
1n6VCiCXBAitXse36FfDQrFsbAlECTbw0r0L5c6kNb4lrciHJosgWsgIXDOl
Kjf6zp//nx1cnR18dXNfdjA2UZEWLANjt8aDQuvwx2q+kqUheQG7OeVZST7Q
k3/1KO6Mp4POdBK2p9GoF7Tb3Z2jucPJpNOftFuTKA56/Rh2ZLzrNeNo0A4H
QTSA/zT74XQ6hjXa9e4gao7u99Lf61T3tjra7jwyqSlMh2QqZHSTVh18Mqxo
fBFobeGLcM9WWxXIaODQlTlgS7tXkXMqsycEB+GGTF4bTVfu5OXJy8cE8Ubt
Un9wvicUuZH1ObOLmNQVVvIWavBx/ue8e+Z/mmPml4Kq9/eGm0mS+tYhxcuE
Lqz4Jr08Px66/09G88Hmx/AtzEQ+m396+m1z9tObj2/Dt/M0fHN7nh0nw8J7
T5c//vCdfefkNHj+4cfgxcl5++Wb7751n51+l37l+L72nnAJuewfHODT7OJi
/fTd287Zi9nTv7/42E+eDcvvyBLcM7ijwZ7ozV/M9mCZfxIjN/qvpX5D7H/+
E35e58+/cKVzOMAkJD9frdJRNMLyf7fi44LTPd4DKQgBISCDiJ8nC0Gitm+w
2hubxtKpR9VUNR2cQuyxVpIpayzxNMt0qV0oosJCyktMPXomiQX/wLmYkpcZ
SIE8xpj6gYHXdLJexbEDe4V3tRPzQCY1yLkcPBzFucqR9imRTJkH2gZxfzLE
u8crKtiKhHeEh+FFnb+JFBEm46IwGFi/iqaIyzXDu7qs5un35LVLpXIEVbdf
wmc1p+KiXDKlq480XXRIpH66qHkxUlAHzMWIJsl1MgH5wN2AIJqNMgx8lrB/
rNGG9a09+yTe8vFNHRawEZ7N8ugPSOBMVjKi+h6RN09HGCK0vEoXscFOyDLQ
ow6QPjmFMrsIXIeZKmxHa48QyYPm/1KxCVOcTR5l7tJbujccP4VZMm/NkHIk
bucpYYohPAdQGzrikgRY7BtNxIR8R5PoVnws+kidH7FjpCt8WVIqgZ3d1tdp
PZlHl8jgCOKJWwH9PNYTMInH0QRHiU3/fRNNtrWOMKDCNkACIlIyT0h13Kj5
SD2ROBd4dnRR8aZiwY8lzOcwxGitRbiDZtPtlvqbaIeYhwgvIjYcERbIv1TY
usV1OrvGUmqLaJFCF+mab0xjcjczO9dgjNewjmiYRgsY3owR21KEuKKybxNv
lCA+3LmgRJMvhkuEpBtEL5SLYdiXs9sswetKu5z4RULlIThmb8Je63G8Qmue
AFPJ0UR8c/7KjyaTFcJGwBg8rWaeY2jYEwtT25yXaI37h1aHKxWS9pSnPALR
oII2M9gywFc1/zpBXBXKnZoli4/wydFsE69TDJw0W7Dhq5PNwzGQHYD3uLhU
M5D8mFmT/Io7044aofy93/xXcbqUyL7fJAUK7dtXLFh+s+oDP5XCKFxJgxb1
VbriMjD2owuJPJGf37zf6s7PX+qln4qP6v6uD8o3MJOg6Y+E6X4jNsz90Pel
n99o2xc+Mnt2P2j+LQgPnJmUOqk13Y4e0Im7R6ifzoF2gmN3OsEu3G4e0Elx
M1JHvQOqUKJe2TGe1pZiyzkIIMhER8lqfQWSilQvMtINbYi5HCw9q5SM1hzJ
K8Co0ewG/vVb3U6NWPWjiTEw+nNJ3GfENjqgdxrPcA3W7EcejmeUugkNtqEn
dJCebhZjLo5Y0KwsgJdYhIrKa8MxLDJhGtZWyJsZ5jZy6X8F57e6H//tc/3j
38LD/XBx8MX51t9iu8gDeOx+kzc5rMLRh/AAPiRL2/3S+ya9QblYM4MlIUla
TqNNWKCKDJPiUDpFUyRqOksjrMHhLVMQPFhdZ8zjRUmt3gRbPus6gtXAgSaW
KOmKQ1cu3qEswm48rWuBpSY/JXNjn4FEm2gVJV1KXkkqpuSQFcgJ4iaEmZ7R
BPO23mOXyPfRWElsVDlnv8EvlntHCcc7oUXoUP6VfYnsO9WdKDe3ijs/CPt1
aJAtXPhzELp/wina+TMvG+8Sdvf86d0htvzQ/zOIgr/Vgw792Zc/W/xnR/7s
dFj8bBdNpiF0gDsNhYNcQ+2Br8Jyi/ixDeVHFOZH1OYReS/AsKlRTJTwwP3W
/Xi8WYkpSmlyt3G0epR5uNEdtDRd0JoiWRXtxrwtRhaFh9BMcTS5pVCxWA4F
Uc6ANK8pKiDKFxxCw3crtnkl+9AxUMnWIkvD1QfUp9veKZzqPeo2zWL9WrGN
6XrTUm1yB8k0uI5IsDSQy2gLZ+v6mGmAfr1kLWSS29AYB8CkKM6etAvOlGL4
wDKKl1iRd+FcRYLEuabcD2qhgR4RsWsNetZmgZdwXL2P+1GqkhEv0YZg1SS8
sCs40kCXZpGn8Y1a3yLw3YpjI3R/2PImBP1CNhiIUUmzXNtc5zz9PJfljFjh
x0cxto+sh2mfV3m9V1xGLyooRnNckEs+5/DIm3pNuufQ39//CP8NmgewZZYH
9lv/DU6Ex++M0qsQm+6cUJ2QZEJ+94wgPHG3wQOkn//Hyb/fJwG7bEEhrTOx
jP4WtvVv+rNt/7xTBvbRWZwuJpk1sv4W5Jtq5ZraLgX7/jwZr1Jtj5sK8k3Z
Pz3veBZjxfQaEll0lol5VUNgAY+Ysl0YP8ABo6TvyQ9Bm5ZcHx4FG8wTOEht
5sh02ixvk5VcrOfexm7QEUy90ykWt+Ud58zMnIziT0s+C5mLaztSwkI0JcTQ
TERQUzjsWs4t+HokDInEk4/iCc5AQ21us5w48sgg6cF5ywMZBgJGKpXl6JKa
idXYkjG7vkg+Lw+YmLlhxVJ+O8fnSNA//cl/kWLZchzV27dgZ3hD3gSKfkCf
cn3JdhCGX75gRAUaq2MSkOOrFM9eus5Ghnk4HXgK+sAG2MalozwfOw2v8AUT
njmxu1Hscg5hWDLxPFwDJCixAa5wzR+vbpdrBJhFl2IdVpuExQrICmJci6QR
drmxEEnCs+XoHb96yzai4tc2+Lhq4GxvIirXbkJj4JSMtQzDJpx08D3M1Gx4
L1l5g1jVEyl+lxsbTHy0ilaJyPQcriMYprZ/rHKI9RY5bMOsNcxrjcjOsSQ3
FhYaD+hjqo+4Ga/ZoyZE0BBvnDVf5mDVBU76EaWQgGC/QT2roMltnxdskgoK
JfZoUN+h7Uqye3myM3g8NAEsO0KXwnLJZo8cmRQYmljOhuXh1kANQRSkiz6e
gayMfTChQ9Ui9bigLxGKSuFNJqrdP8Go6AjHAUTk8QN1DQcsraTgHBT52kA4
Em8dYlz35a0JOCKPsOwR17+UyaFMqG/U+4ZTNxNby5S2zRyrLupTWUxUcB4S
40WxZ61vR/JOfQLlHiOMrfSwAEZqkM8YrIaPMpzrJL5Ra5HP0nZ0LDxnKYK/
EUfFkxrKPsdLrCJvh/3FxRzkuLUi798kcc9klCVQNTJl+potygYNH2JxZFMF
mLIJViltFsPzIp4WTqVCdLZRZgQWfaTqh3Sf9TqeGYRrRBlp9JthIxi+9iVq
OldQF2a2Dx+cnxyIySnBS07xQV2vSYIVIrk3soVYhiGEDWKZnFMzWHbW6RPk
5gqHw9VNYHQ1h+KY0JHyvOjMSnFcnldqgQGMkdLkNSQTLJ6CpjR8tyii5o65
Dn1E5YOh/ecMHLOHy2JnhqUredgsvZ7p73gfh+534BEbkEpwPyTCYqwHwRFw
uea9octPDPFGvuppvECY2ksMQ1ijZz2ibBLk+SsTaTi+SuJrVhNkC3DTFMM5
xdxldukmjFyiwbtVw5dgQDzgS5Tw4ladnQbAlupxw1yiy1iSihpSQjiLzUMC
QJ17jDmaBwfMsuJwReoMy4GiwIgk6gB1mfUZ4WaW44HUjnGwgbk9dO5yGoxe
g/JiM6STd0QqeL2KMFADWZ0pQxU5c2Mk4U3CA48VGAUJc8equqJ/onzWjimJ
SOccKlNjgZCE+sjwRc5seC+gHyrchaMhJYdXu8mM1AyyFxa0qTGgKDmI6d7H
sNcW7mp42BwdcNd4RiPK0upp0DdqVT412osrMPe07EvBIgLZdUmlXEkhJuyr
l651C0G/a4O5TA4n4FRi4cx877xDAo5mbmlEfLb7BkD5S4d3EfO8obAbUhKC
oK0OQp4KMAGSRiosIccwr6OARSKKFkxo8miRXoHlIrx5GVPkDd5T8WMxmS/C
mahmIlM3R2WjJF2xycg9vsXW3uE6wEjAbhREaVNmpsiZpY2Hgy/JOCTl4hHs
we+xf6oMLg3xF4bEKOwql9khCr4DQ/4mpvIBFOLGZHJuPex4iNkdcWPkBguc
3E4HHZnORam5EUqIkZoTAdBp5r5P8eCY92Z3OHoOEGaNmqQWqeBQFgsQ/cJE
dWtSX8MGaYz11KDsYIUIm9zkpEBRinczWxaYDBQtyiD3OqzgD1QYUvvJWp3l
pKz2seg312HQp7jnfSJBJCCFZi4HxqNlyhm5fdmLMQt09gG1OgwPVMM2Aam1
n80NYORfpukEpxZxS7yWekiZi2Ix91H5QaQrc5phs0q0kBv9rKzgvMc74xuQ
dFIfhHFCsJwxHNPATMVlrDY82MbEzmpMTq5oRpvUDfiWiie4rLFtU1hDMOqK
+xYvHIzVXaJnVEXNN6T5bDwo7ZlVrDXutXg2kY5aYuUoZw3aRLLLuPOqXnQo
LODhDD4DqxbNc7L8YYYY/H7rCA9H0MNSYvV3U2YbW+DZG2P8Or6l2l68XJkp
CTSi+32pvzbXJAaBZBHSSRpDcVOTADX7IFPDV3UUHzKgPXGZpaa0GHvxpjC6
K9K6apXjQcfJkbCDJK1okdD4ppnUqnZZ45iHMRUX4OoGpK41JRYFPt+/42GK
eOfJqwsw+jmtFmhmZJmhWpFxZGWrKSY0spY6n6Kcdkj20SvEfVGRxZBJHHZA
QSboPES5CRv/+U7IdZnrBbllgQQyzld2kejogUKolflLqsiunncjNnGgTsNm
/lcYFr3ICsyhApY3J/F2fnwSl3Jb80bM/CR2yXFR1Z3DJ2QV8kMjvK5njUys
yIdTGULlwLB+/BUGnKimJGuEq93d+lqZXjtnW8yG3OkZiwwzsMfQfizSQ7a3
NdM17adgy3hSwL2gkzW0BiUXzYUMoazwdsN7ySEkeMuPrWC0AZcCwnhEOZdK
LUE+/Im7SHT3iNIOK/oXiWSOwlgFBia24isA6wKS6wbKTpHkG3zPtOZWeYSW
8BhNNo9MR+9MWRsMF/4PjU5zoCWryE4SZaWXqxQdJhYNnCfxbw7OdCUwBTZJ
W7mN5N7bGOkkLxnYgzlH+EPL3MJ1C94BezpjQ5IHRNFS7qiy9WaKGuLmCjGW
cvkDm4XIAZudJLu8Yoje+ZRXp/SdoBjLeRlmwuc2uRVWCyta8GYT4mwya+rw
i2rQloJm+Os5GqVwYOdLGfcsWCzBkjcEqd6MPb9ZjcvWHI7BeqPXcrOido9c
BEpzEj8ToctAmYc4T/AaxKa2NgHZY68kbnssIbkxAi1gUIP5vOaQL18oJTJe
EovDIK4kFoa+ic+aJdM4L1ZpgqBe2CGdSnAY3bUbLWjraoKVA/vgluIWgOEv
1HvsjmYhS6styxCMAY9jqI9vx7ifrwWvoXwyMO6KOR4eachJ5pADCQ/qLEHP
OtlFLFSMUy3+yAgW1DlOAgck5HNaEVFhy2VSNzcUFcUCqDQ0dEdqcakHOGfk
ELv7SVGsncKBXHrMNVRxJKKNQCce/IDOwrETQahcj/5p98stgpq2Pt7kALke
rZlgPByHlInDtttmBA09ygqkcpvIcq2Yq/LMrYqK/EPsw86/45OTZ4wiKymr
GBn++U/48Xv4+D18/AUZ7PXZcb81wDsNdPVTkbLsijz9UwyWpGbwG3t/YPJf
kcG5liwfV5Z4YcbFkvA1lMx6mwuPUkuijfEjGpcWxWUnLLGmXEszx2mtWrHZ
SDFRQxKQZBJpnWQcnDTGuPt8psCcyzr7HSdYJDbOzIGIW1rZZSO3DlBk0OyE
FPjClyEc0oPjfPHyDQlEqsh8zU4tvcPKLx9OjwdClfyIHhLSlBFTuOuyijkD
m6whbdu2J+H62Ij3V5O0C8eRGUdWsi9nsoqm6zqcEKZ1YI+svhmPM7yZNIT5
SmLk/+z/x3/Yj+v8q3xDf9SfYVEtvzGN2TbaI1UJC1SX7DgqurXnf/U1enm8
L5771lco6BF5EF7yOMGunq7qYBrCV/ShV9G9f3j4lb8P08q4D+4Ce8g34R/c
8TYcqH7H29Fm8jvehvNb8e3/Q0ePu15ajKYPfymJ1g9/abxOii9xuckDzysR
3X96/F978ClmQX3tlahKX8OnWDb1a69ENvoaPoWvW197JbrQ1/ApfN3+2itR
gL6GT7FA6ddeaa48tGgNX3e/9kqzYhvt5YtnP/5X72vf/6v/YZ0QXNa7N48d
7yhBKZEcI36kdCB66enX2IXD+R/ACt/zbKvH+MCx88B4lK72PNiWR3igX3Eh
WFQg48lk5jcb/UY48KXQS6xuFc6IQD3kwXye1qjV3CgOfbdPF/dVpMCQBId6
utF45UqlEXx+wZLnlIIBQZ6i0cWOmuRX1oXoGYdGjCWmOeluViNexVa9KxGm
fy3je9RsOwsnnalGkUj+qNverGamYAeGZv/VXPMJWsReY0/uOVldoArHq9P1
+IpujZZSKye7Ba3+iZThFFrJTdoEQ4mJkDtmpJwDYESyB1SsPxcqsnzyG6v4
EhjU3/t5WP8pqv/arA/ef1X/5S//u3HfB8AIMJq8Ba4kIVcTqYPM1TdOvjFy
DM4eXoRWHHXC0VpzvsWjkyApDuCXRpkxTMlAdKQSFcWKY5f6sU1IA3KKsaUh
6n8lghkV1PBBF/poHpj44ArtJNoOaHlsaZnhNoE/30SXl6A3lMKH9OFbWDz3
Y4+GnSPVWjT3++eWwyVq2eVRfXPMGP6SgYJzhI7Z2pO3GL4D8Regb69iaF/5
f+o2usE+9crfaecH2A3Y9RsZN3UgKQK2UeQ/IJ9XNUOkhjObzGZb0Vz8Yzh8
w06DfYbZEhkaavj5+8LnX4pRcnz2QD/T5SaZkL8PJQzXS4PvF/GNcxwu3rdS
YCIf7qvQOWBFn7unDNOFuv6SMfsqyR1CFtnIDeLmkxKPTwfjmEXGeQknv3M8
G5JdK+Fu2O5ruZZ7RWB6L+lwIVHWWoh1tEJ+uUwjObDiTYPxvLJHh0WL25bJ
CmNn4ozONUAAMOJm6AIS9kNbsVbw74HwjsdXi3SWXt4W/HBkg/EtOB014TCE
KTrWNx8549RIRB1CXSpby+2GHMaLV3fGr0xP3bLbgXNxOMBcA37YQywuN1pP
MqShd/6IV20xTS43epLARqyC1BowaC43HNQqmgG0nhTXy+ASAr2Ig+ED8cGg
BzSLZ9eYM4PihW7I9HlmjRprBZJQhKZT1FWRhL7pOGbpFDql0XDkA4aEbGZ8
4uW7c+YNinbBGDFsW5zqBdnl+Jfc1V3Em7UwR8O7AGGKNhadVzS4NderbMNI
io6bpbKXBiX60EUwsQ25t7dR32QUYAM0ZT4uiL+KN5kOhbeTjce64ARTJNIb
O7cXPDc9HTgeTdVMdDdt/SYaKajnMfFopIW4L/FtOHEMSzqjiPY14VfMrU7t
u2JDEq9lSXLNV2j5DlTkbOklm+M9TQxbYoIGx5Y+zOPSBdGKLhz4+p9uJSnq
rVGkl0Tr3UGzHL0wEcMtr81hCVQcHjuaRYvLTUQ++t/XDfD/khq3rhDr2y16
S2/dXmhryrWgq1LJlvjmnUKwqrKw53cTCW7MHroaq3jFeo7xAQo2I99axh4Z
HjtlAJi1d0WwBKMRHAQ7PxQaNnY2MqOdpeMN0ZnjqvIoG84uRSfnKCZNZawy
aiAnAXBbXWgcwjNiWrOLnmOsgytwNYOV1JG5skI9RJTUqjiY3Cp3libgkjMH
JRqMw/iJPCCDcjiXclMxR0wBkGsTvjMz8Gmisx3pUYwi0ZBGmC0YE3UTY2Hn
YVYp4vzQ8jMFdkJ38nLJCynJv05WsdKBqYLqDRf9prytHF7HOTqmidz34A1H
xumwHMZhNoLci1KAgVVRWsLbJALkS7LTxb3dLBp0akezQP/veLbJ8hrDhkVL
77R9NtwH36nkKOvsfTF7XscSVHr6ify1GLwvFyUZ3mbhMPT4UjO4QzwufDOa
rTTfhXxQJludk2VrubBKwspTXUqqlGMSo8l1hOaq4UsMBwdiZLG9OTcGJduM
GvxFdJ7LrV3RJoApvpwCs+FFC05Ohk+7oyDS+G7H2ADoVaswAZi0I7oItgEP
iOW8Yt+huUTKnZHcMDC+wE2NsVgyseSCQOLK0Z88AxZLVxESh4+uK3W7yh/T
LcPNOEKFdjxtKIr8kGODYBHKZQ7Hu2y1gFDMZoW9JrdPpQslHtzx62fGDgbp
sEroSqaeiJmDrh9xbgkrrGKGRSoZdkZey3UZFt5cTDHqTuOQcwcOKtzHhjf+
ecfwGoye+gp6w7AGvK8XT6QEE8wUrtsx1/Bl2TJL50VzlMiLIyt9HBs+J4oU
bolmWW7RSkva0DjTnIFOPgsJC4MxTWODARmtqzp3Telss0R4wnjiSFPklzkq
ExbAFQNyE6tiEIN480oXG6hL0hFnbMk1Ia0DRkqoAxvHL4xXXOeaklXPRDmR
otRw9puEGNvAJl5ZF7rc/za+xaPsx/g2mcjR1UCy09kcZRtFYV5ZpBoTaAKb
BcZnsdXz6QRLAdORq/bcslAUV01OSRpDgefvw6d4VjeOqYPGfWHO5DrAu0tB
uvRtBNrYxMU03JycNYVW2MQWlB6azlx8UQE7jSuBrl/G+BVyb3Y7h9dX/IEv
uSBslHJgIzv/5eKAojnItsnGIOUk5uWEY8KHi3RxO0fecPH890+GQ6CB93r4
5sIfrsD2Qn8e7unPn/GzhvtZ7vZRcSg0tDoX4uZwOV6KoxIpxO75GlO7yTib
PKfV6fC9Iv6YRWOjHtzgPls5gMKLjIWVrEkxIEEF6Y19cIau5T3snETZpZua
GKdSW6XCAejFpSO/E3PAmexzYFC+B186sE+5nkVOlnpBnZSYXVdTPw1Fd6BB
EGWaz1hR+YCI5ayx1BjIJ44xIisKGsOorLP2swMtRZtbUAxJUcBpKifBHEsK
ufy8LH1FIIQjL9hOISYtkVXsCocKRWWWLLYEcthYx1px6YUZyjEYbiBrcY9S
xpmaUXmWKc54tvXJssTYIg/yb9NJNMNM2CS74iPjVHZGYgPxSnsCF0ePxubI
QXbyPI7YjbQorbCk88du3Yt9bbJmdm6tECzfaDQOWOrkIJYm9Rhv4x0+FKQr
ysObJRSjanXQmvK8czfgYuUWw7fKJMuskQty9i0LFImfUW2pYmCVUtEyczJk
5E5n5OURi38yvzDPSapnXv6GG7mZXVvmyoHFP0m18voi6pI5uVfQCtcxhl2Q
3tJWRb1igjlh4Pg3bmXsVMAkSlnUmg8e5/T0qmITZPkAH3vLbyLp8GVO43ZD
/J3gaYrUdDvCOMO13HqRQeyfS/5cQV6IaLERkDVyFrunF2O905oSe1MuILuv
5bUGw/uxqn93gQaIj/mcGgdgxR3fWOHSwwF3LYPnx/39j8nkwBVxioxhIgMk
bB/+7nWCzhewbaj1WRxp+GLO0YcffOS2gd0XdTIpSeyPLbS4ZOdSgGq6ysNa
1JzY64KV4GjYyP/25KymQV0pnTldrsP49uG350bClwUhchWHkb2p2i6FPXmj
vh6e26PMmTX5mhhr8R2X8yYKcZffMPFfKfEzoR9/+/kz/tH4AX5vnGBMg9Cb
znLv4pF/kVxCL2Km6BIoT6rlVlxgkGafOuua/6mzYaGFRFDFI4dOVC63W48t
t+xx0FRd5Q3mrjIt1ajLc7rZVqYvhUfAJMgqW4nyN6UxcjBUrRz7NwoynW7G
yIFTJoY4Syb58FyF+9ksTdxtWSypp1vUjrXpXIw/opNuRzyNHzukocWuYgJQ
PSu+suEZEt/g2y/40jG/Ik7gDqi5Yi8ZMhJ81sDPlJGIJhkjeSqzCh4YGGxr
ktl0FrT9kzOIYqHcVDrJ68ilIMg7mRM2Z6tjaa9WWUkEOScfV/HrGPl1LPyq
tKRohyNyZJG4ymkU1uKk8MsLh7hP4vcUdlrFdTOZgqTIw6HQQlNQI2fczpxH
M7GF1nptlycYZ6rFKLPLvfh5jeH2r7FXipdinFRkf1YYSwY5aZG6e4qjXArm
0twk41LiBN4TlLtE8OB8r/jpZiEMz5G/c/GYIy4iermSiHM2OMYBmCIdmVOI
M+/MlIVwPkzMOO1ZVa7Ea4JgR99KtIVc9ZCCPc4lxnG9i9nM+nERGkxHitxB
HgKdUqVNxSdTM1dS+rK5VenaXEqpt1axKtIOedPRBcGh6nJCFFWu9/PGVt2s
6+m0PuJ0U4xVTbK5OTJy1KduMLZ6Srxq3QwGyI8uO03gs7/CG4SC7sNEBrKg
cSKj23xLIv2iCeZMZmtK+DYuzm3atCD9+fSSOTiUJNGrjwhF13qFiqHodrpp
4Jw75FQO78cix3yOKgzBead47Gqgx1nOTxLvMY70HFXYuMpNJuqoGAzksw3j
RsDYi6tEbD3HocOAxRw2nNoDuHoS0JdOesXGjhvkD0ZIFR9O12fHU9Fk15qJ
YkDIWd8xICRsVnJo6GrwlUIgkfbIKoIvrMmP1QUXNgXH7m+nVqKBVKJQzUyx
IakJAohc1NVyk/gb0cd4biMVcxXPlj62Et+gishiJ4EHp7pYe3pvRoCoQ1Js
q/hKXLfQHbAt7XAb0ItAlhQKfvrmjK4ggH3GH+PVo0yNUhO1pqagOG/PquJO
wRKvB23Pq/uvDYPB0C/enmPQDIwT9BJ8CZrMqXIolSH1ez3TC2YcNjVPMR8+
f3PD6gwbI7pj2twSaGcc51IiUqFFc+c+zKbDtaCwamjiFJFZFpE6ZGFJT06P
/Gi8Qs8Zh0eUC9xkNDRxxYlyTZeseggpC+PJiJeccF9450KsVGAN2abjPDmw
PydfDnO8MAsD+zsWR6kp/yc3ZCtz+ZDHN+coEXhxOHHol0+lzvcHi1uv1zm9
PhltgGPkjhNF1keTGG53gvMkYz0jSyi6vrmM9JT+jz3v/wKwWeNYwmkCAA==

-->

</rfc>
