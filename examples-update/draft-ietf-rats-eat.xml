<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.2.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.19.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization/>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="March" day="31"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 166?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 176?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don’t provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is “JWT”, “CBOR”, “BUNDLE” or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always “JWT”, “BUNDLE” or a new name standardized outside this document for a further type (e.g., “UCCS”).
This string name may also be “CBOR” to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: TBD</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="http://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="http://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="March" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-09"/>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="5" month="February" year="2024"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-25"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="7" month="November" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-05"/>
        </reference>
      </references>
    </references>
    <?line 2590?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the  name of the file it is in.    /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-24">
        <name>From draft-ietf-rats-eat-24</name>
        <ul spacing="normal">
          <li>
            <t>Use only CDDL definition names for "Claim Value Type" column in CWT claim registry</t>
          </li>
          <li>
            <t>Correct the "Claim Value Type" for some claims</t>
          </li>
          <li>
            <t>Make SUIT reference informative (it use is optional in an optional claim)</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3588?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
CewEIITKKczTQljlJZtTb4mtIH3kGFj7CeEQ4B4IP5G0nbxGXhXvBKt2h1d5
w/honW1Re0hd4W+aM9554MpXMLF/h3/JHcmhe8As/LqCE833nqV7Ly/Pv3/1
x4dPiqIs6j+92e4NuNEmL6bwnv7tnc5OL4o/V/9w/I/6usyX9v6bx49Ojgcp
v6hv0eDAb/ZOJ3BRURx8faUf1rewKTXACw5+PDoanewln3h6zLgoxzonukDz
ZLYCYG0OjEwtkiO/KRgBjQGiHp9sqgVDu1yyLD16CHxcQ0RsWi7TMcMvPUIN
DjHL8DkuliRB4IcnqILE00XmEoWJFSsxmcOHF6Ic3ip64lsps9Ke7pvUyZPh
GASll6dnqncGjAdEecpcpwmzNM3Dj4cPeZK05aaaFszreVO4Wyzm7NbE3t29
uXj16RN3aCgK5mvdCsetWIw2iWxIdBXk7AiIJ0rj2t/ebODaqcKGYbnBvWGB
Fgg7MiV2HUA0/kpF4dcfkJ/Pb9s87KaW5aLADwBMrfcQgVc5GhVRbsS3pJoR
TQXqVZKXZW38muBZ5odFH+AHIf7/s7I1Qsm/bWB/F/gNyYwybB5YuZTUTqpv
qZi3t2F/Fjb+F1j8i2ybI18bSQJIFNpIf9AREKybAbPSzLbZAW7GbI1xnM5+
naMUwa+AlzgAUqrNaubsAV8bjYIdZERp/N2QiFRdCpezAXw+L4APQCklZ+4P
4IEYcWTz423z8nAGiIDIVaDUe4PWNmF7tIxVILMH7wLgftFSumWkf0J0hhjS
Rhgd99xknwAyuBwd2p7BkraATrbLeiCEISPx3WlSQOqsUVeAYmhQp9M5i3TE
fCRfwPbaiCnF9SAVIXbtI1wMm9QqR4GfQLlmkOofjq+t6XFIptA7zEye8kPI
vAORJADq6s50VeF0wuzQySXXS5vHq6UxWABHgFwC99jA/xOHNIebxmdsAxdM
LN01Ys5N5T2EK3pTiOx32uKz6JGyZRcf4R1Nw8lM6f71xcUBtVNN4wR1wHgu
aQWXOK/oJf85wH2dZ2thCokfaX+GK+DW/hJhJ6sAjTBxQFCrWZ3uA3U7COLc
KYLEtAAOfAM4TsRPfp6t1ywhBlUpTS385Fktka2ow7VE2oe8jD4XNo+/1Z+8
YNeV6JT4Mi5T4QomcP2qLGmpComTBExfosCl90zZ1jSb4RE3AeyK1YesJvUS
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
ZX//5uJ97/XwAP4+vJq++Pb88+E+/P5rcnlycXpx2X/uXV01h9U3n87OW8uv
p09G/eDN54sPzquw8fbz5G311+br+ZP5r6f9/qfOs8+XV8t3r1+Fr9e3L4/f
B9Xps19Pgrfd8fOvMNVZOt0Pqy9u5k9Pv728rb67nX1wqq324ObZ5PNquIy+
9V4dNLy09am3bJ8Mzt4Ev90+m3w9Xv32ZHwbNbwofax27qPeuefxbPXVlQPY
uPHqfXHjVwOpofMst+PPLs8zGx6tn9Wjt734Zfzs1zfe6/h5/9n14MkQ/z6+
+HbsncTPujX4aD4MXtBHzy+O6qMnb76NPjhP3qyP49s4vDyqH39Ovp58vvh6
8m1Yf3nwrgHdTKKn0O206Q2e3KbH0yPvff+4dRwfp8ezE+9djL9D1x+cq8+3
jdnRi+vn82cXq1dvb168+var9+TF5+v1s9/8m8u3V17Da739Nf12+3rHvroZ
/3mqMqPvbDZzCAjs8ZBSksvzEisgvK2KPY+NcZLgRNt6D/sHZz1TcKok/wfV
2Sp0xPYqy0xn6Vtse5z2dmcvfSbpJgSQKzistP8klhkdcBkzIjxCjciTB7fC
2xTi5rS8Xdfr7ApQXD/oeXXPbz24K9PDw0LBoVTZAr7/uLthNJ1jceBZsQNx
NYIJtOq9Rv+g3d3vthoHBwfoTd9Hb/o+etN73bpXrzfrdSWydDtHTWhwdNTq
k1Wrj1atAy/otYLOYY8+973uUU8+P/LpUeuoSf+26wH92+j4LeA7/cMAlm8W
bwXLyuxgVvv+UfOw0UZHq6NWz6/3O72G12zvN9ut4KjfaO4ftpuKfe72mgFF
7je9drvV6fte7+hov9No9pqt3n6z2T6E5t224pZ7dWCe20HX8xtBr93tN9qd
Zss/gOYtzz/0u36/5fteS+kQevt+ELQ77Qd37LlZii5xiXv90d1z7fBZxLya
0pVkc5IcWZhdrJhLqWJMSnxbcpZkCjexoZuAuibl4qW7bGalbHPiTJnXm2Bs
4UTVwxqaisFWQiCTPoo5YWUi5lp2TKGt4bDncRSN5O5IxTvpVgXK1LiyGxZM
RPZYEXyjQtWl3jMGdB1nY2WpUiUzlterVCEWyoRE5LHQtOaciSN0ZJ3hEAOc
GH3IhHXogE5wlN1S9iXgMaR6UGklRFPpj2ulAJ854VmtZksJNLgj71Fpp8vw
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
EbQRw1E7+sj5fwEqvSwj0HgCAA==

-->

</rfc>
