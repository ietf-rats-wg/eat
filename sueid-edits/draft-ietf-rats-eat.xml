<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.0.4) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.6 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="June" day="10"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC8152"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for RATS Attestation Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>An entity is never a server or a service.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where explicitly allowed.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Attestation Evidence.
Attestation Evidence is a claims set describing various characteristics of an entity.
Attestation Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Attestation Evidence.
The Attestation Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.
EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Attestation Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Attestation Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Attestation Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Attestation Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Attestation Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Attestation Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Attestation Evidence.</t>
          <t>There are no fixed rules for how a Verifier processes Attestation Evidence to produce Attestation Results.
What is important is the Relying Party understand what the Verifier does and what its policies are.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>CWT/JWT Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Attestation Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Attestation Evidence:</dt>
        <dd>
          <t>A Claims Set generated by an Attester to be appraised by a Verifier.  Attestation Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Attestation Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR encoded tokens MUST use only the integer for Claim Keys.
JSON encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce-claim-nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string and every bit in the byte string contributes to entropy.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Attestation Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Attestation Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDs are variable length. All implementations MUST be able to receive
UEIDs that are 33 bytes long (1 type byte and 256 bits).
No UEID longer than 33 bytes SHOULD be sent.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a free-form text claim for the name of the software for the entity or submodule.
A CoSWID manifest or other type of manifest can be used instead if this claim is to limited to correctly characterize the SW for the entity or submodule.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-odometer-claim-odometer">
          <name>The Boot Odometer Claim (odometer)</name>
          <t>The "odometer" claim contains a value that represents the number of
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (odometer-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is an XML document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
When this claim is issued by a Verifier, it MUST be because the entity has received the certification in the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, it MUST be because the entity received all of the certifications.</t>
          <t>DLOA XML documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, {#swevidence}, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about the submodule.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured using the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>This data type for this type of submodule is a map/object.
It is identified when decoding by it's type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a Composite Device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow Composite Devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Attestation Evidence or Attestation Results.
When these claims appear in Attestation Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the Relying
Party to guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.  A 64-bit integer
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="including-keys">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a public key in its attestation message, the key represents the binding of a user, device and Relying Party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747"/>, <xref target="RFC7800"/> may also be used.
It provides key encryption.
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of possession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected in the same way as the key used to sign the EAT.
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC8152"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Attestation Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A Detatched EAT Bundle <xref target="DEB"/> is a special case message that will not often be used.
A profile may prohibit its use.</t>
        </section>
        <section anchor="verification-key-identification">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="manifests-and-software-evidence-claims">
          <name>Manifests and Software Evidence Claims</name>
          <t>The profile should specify which formats are allowed for the manifests and software evidence claims.
The profile may also go on to say which parts and options of these formats are used, allowed and prohibited.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >
]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Map labels, including Claims-Keys and Claim-Names, and enumerated-type values are always integers when encoding in CBOR and strings when encoding in JSON.
There is an exception to this for naming submodules and detached claims sets in a DEB.
These are strings in CBOR.</t>
          <t>The CDDL in most cases gives both the integer label and the string label as it is not convenient to have conditional CDDL for such.</t>
        </section>
      </section>
      <section anchor="cbor-interoperability">
        <name>CBOR Interoperability</name>
        <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
        <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
        <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles"/> for a list of serialization issues that should be addressed.</t>
        <t>EAT will be commonly used where the entity generating the attestation is constrained and the receiver/Verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
        <section anchor="eat-constrained-device-serialization">
          <name>EAT Constrained Device Serialization</name>
          <ul spacing="normal">
            <li>Preferred serialization described in section 4.1 of <xref target="RFC8949"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
            <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
            <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
            <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
            <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949"/> is not required.</li>
            <li>Basic validity described in section 5.3.1 of <xref target="RFC8949"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
          </ul>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (odometer-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   uint, 
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   uint, 
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
odometer-label         = JC< "odometer",   TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
      </section>
      <section anchor="claim-characteristics">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-17.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="1" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-17"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs are used with an open set of network protocols for authentication and such.
In these protocols the DevID secret is used to sign a nonce or similar to proof the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines network protocol for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does not give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9aXPbWJYg+h2/AiFnRFpVJGUtXnsya5SSMkvZtuWx5Hb3
q6nIgEiIQpkE2AAomeXJ/u3v7PdcAJRd3TMRL+KNo6JSBHD3c8++jMfjpGmz
cvZbtqjK/FXa1us8KVY1/dW0B0+evHxykEyz9lXatLMkmVXTMlvCh7M6u2nH
Rd7ejOusbcZ51o4XWZs3bZLcz1+l74+vLtOPVf2pKOfpL3W1XiWP0mlVNnnZ
rJtX6febvPkeHjXr62XRNEVVtpsV9Ht+dvVzsipeJWnaVlP9jn7M8lV7C0+O
8HdT1W2d3zThi2azjB9Mq+Uqm7bui/V1eFZW+Ki+meazpt0scv2sLVr8cXWb
p2cl/Nikxy0uK2thjulV9Skv08dnx1e7SXZ9Xed3r1L4kWR1nsHkyzavy7xN
Pt3DfhXzEhefuebT66qGRc9go16lB0/2D8f7T5Js3d5W9atknBYlTP/1JH29
LmfXi2yWwwx5u19n6zovp3n0qqphoy/z6brGacKMq3qTvn59Aq/yZVYsXqWL
+eK/N/JBS+8nsAM60i+T9A2c/SZb2ji/FHUxu81q94JG+R/rbAEtl+lVPr0t
q0U1L/IG1jud4L7CSeSwp0+fP3+avqnq/LZaN3l6Whd3OM0pDA7zzMr0tMjn
Fe56PofdeJWeZIvipqrLIqPjWpdtDV9+uDyGn6tbAsidP+6nL56+SJ893U+f
AzjuhMUteYr//d/bYvLvMj+/vF8n6cX3p1VZzW/XYSd/zet8uYnffPsSD56/
TH/O6hLOsVrPb9P3VTazJboXtJ4ZbuiH/aP0+evLaIFl0eaz9J8BOmbVMqz1
j0dH6f7B04P08Nnh/ouXYaV/q2Y02f5Sk7KqlwBbdznemPc/nxzs77+UP5/v
P7U/n+4/DX8+kz9fvDyyD2DY8MHz8Kd98OLJE222f2A97D8/0j8PX2oPL57t
27fPj7Szw5cvQjMb7SUgmFcJ/P3xl8sX1Bfc9aye42bv3Lbtqnm1t5dndXs7
LsqbalLOs8myWOytbld7s+q+XMABTODHn26KRf7DtKrq2fh+3rw42uGu+DZ/
vHj/+jT95ezi9Ozq/CS9/LfLq7M36f7LF0ej9O0vx5PLq7enkydPDp/9tj95
MnnyG02GOtDLiX+PGVDe0l3OFukvedWs4Ee2GOPNXyyKOd3RY/zPJn0MPe9S
Q7vvR+Mnz8dPXuB6z4/fHk9OPl5NThZZsWzilePCYd339/eTIiuzCYy7lzWI
UZZ52TZ70/vWL+/kp4v36cf8WtETdLubcr/bFoHDu7ndZIsmt2n92plWNK/m
oYn9TSamM/v18uKtn9mvnZlFU+vNrTu5q1u4hb+8ezc5f3N23t8xnNkK6EK2
mBzOVyua3CxvPrXValnN1ou82btc5dPippjSEXZ+nuYt3LZmkjWrz39q/Jvz
2Q/PD176HT+sZ3D8ZV4zXn8HAAo/mttilb6rq7/l0/afGI9AD4s0GoapYXoC
eDJ9m7f3QCNTwGTweb0sAKyaf0rfrpfXeQ3oYZRms1mdwwYjIYGPihlss3W1
7XAPYY9iwHuJ2/fz+enF5Pj9xdkrvxR8mh5DJ9gz9FvV6fFiUd0DhnoPhKsu
poisLla0VpjGWXlX1BWfd/q6aNrBc7gpZlUGNyKDC0EHgRva0OOxUqRxnf/7
ugB0TKBDrzI/j3HG84DvdB7jSucxzt08xguYx/huf3IwvpmND57AivefHExu
2+Vi2x4hgeelyyzdhr2t7nI8gRR7wp07O3473j8chji8C/NmnxeJvFRWz5q9
66xGAtAA7irH69XU7zizCYpFjmtY7iKXQ4fpwWB7H96dpNrFthX8crk/cMgn
1eXH81MYZHw6IfasyabL8bRq7osZvoeDLM9PT6qyBCBFIBxeFexzWcwmwMzI
yfED6Igawn/rfLz/25Owx7I47j+VARjMAakCSYYmcDsZiPIa/sjSJm/T/aGN
f0HYcmDlN+vFggn52wnwFJ+K5brOeu+A9P9UZ7NFvum9ejNJfwVq2/Re/DRJ
Z3n6Jp/lAFb91ycTZG3aYgkLwn08fX1xPLx180V1nS1WwA0Db7MkuLhf4ca1
AKp76xWSrGYP1vd0b/9g75d3J7+dFvMCsNbrHFjF+uLmeLWqq7ts8dsdUqPV
7Mbvr3yb8sdpdZPq58MAvP80wem+O3u7BWHmZUDl8GPvXV5CjwtBMZNVNs/9
+O+Aq4MxkDnO61VdNAa5j2GMXcAZ/74mKUCJCfK84zabNxHWwVdMt67gFbSa
ww2uN1tv2DAZ1K7DX5PPBJDwD9mFmDc62j9QtuPoKPzpuKD9A2Ncjo6eGYty
+JJYFJRpJsf19BbYt2kLDLm7ZSQEZe4dNvipAL5llm1Agsimn6L16ysUD+Dd
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
TsLsY+jHhHIR4CzWCcO2bm/0/wO4YIf08Y0CAA==

-->

</rfc>
