<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="October" day="12"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID <bcp14>MUST</bcp14> treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte <bcp14>MUST</bcp14> be treated as part of the opaque UEID and <bcp14>MUST</bcp14> not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always 16 bytes (128 bits).</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM <bcp14>MAY</bcp14> also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash <bcp14>MAY</bcp14> be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this <bcp14>MUST</bcp14> be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim <bcp14>MUST</bcp14> not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST</bcp14> not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity <bcp14>MUST</bcp14> still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature <bcp14>SHOULD</bcp14> be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it <bcp14>MUST</bcp14> be a CBOR tag and <bcp14>MUST</bcp14> be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item <bcp14>MUST</bcp14> be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token <bcp14>MUST</bcp14> be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token <bcp14>MUST</bcp14> be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule <bcp14>MUST</bcp14> be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they <bcp14>SHOULD</bcp14> not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but NOT a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST</bcp14> not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and <bcp14>MUST</bcp14> use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition <bcp14>MUST</bcp14> have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying Parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792" target="https://www.rfc-editor.org/info/rfc8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165" target="https://www.rfc-editor.org/info/rfc9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="7" month="October" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-20"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / secboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / secboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements      274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "secboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-16">
        <name>From draft-ietf-rats-eat-16</name>
        <ul spacing="normal">
          <li>Add some references to CBOR and CDDL RFCs when introducing terms, examples, ...</li>
          <li>Clarifications on non-mixing of encoding formats in detached EAT bundles</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y963Lc2HUw+h9PgUO5aki7uylS1DXR2BySM+ZEEvWJVCb5
fKYUsBskYXUDHQAtqi0rz3Ke5TzZt+57bQBN0XFSdU5VVImHDWzs69rrfhmP
x0nTZuXsQzavyvxF2tarPCmWNf3VtPsPHz5/uJ9Ms/ZF2rSzJJlV0zJbQMNZ
nV214yJvr8Z11jbjPGvH86zNmzZJbq9fpO8OL87TX6r6Y1Fepz/V1WqZPEin
VdnkZbNqXqTfrfPmO3jUrC4XRdMUVdmul9Dv6cnFj8myeJGkaVtNtR39mOXL
9gaeHODvpqrbOr9qQotmvYgfTKvFMpu2rsXqMjwrK3xUX03zWdOu57k2a4sW
f1zc5OlJCT/W6WGLy8pamGN6UX3My3T75PBiJ8kuL+v804sUfiRZnWcw+bLN
6zJvk4+3sF/FdYmLz9zn08uqhkXPYKNepPsP9x6N9x4m2aq9qeoXyTgtSpj+
q0n6alXOLufZLIcZ8na/ylZ1Xk7z6FVVw0af59NVjdOEGVf1On316ghe5Yus
mL9I59fzPzTSoKX3E9gBHemnSfoazn6dLWycn4q6mN1ktXtBo/yvVTaHLxfp
RT69Kat5dV3kDax3OsF9hZPIYU8fP336OH1d1flNtWry9LguPuE0pzA4zDMr
0+Miv65w1/Nr2I0X6VE2L66quiwyOq5V2dbQ8v35Ifxc3hBAbv1uL332+Fn6
5PFe+hTAcSssbsFT/MO/t8Xk32V+fnk/T9Kz746rsrq+WYWd/Dmv88U6fnP/
Je4/fZ7+mNUlnGO1ur5J31XZzJboXtB6Zrih7/cO0qevzqMFlkWbz9J/AuiY
VYuw1t8dHKR7+4/300dPHu09ex5W+udqRpPduNSjSfpLNp9n07DOo6yeu4e0
xHcw6h9hFrP0vLpqbwFoR7pAGWkKX/2hzmc32KqRRjRSApe3rYvLVcuwyqP8
MS8/pj8U9cebav4XHebHOluVN9VVXqfnpxfwVG9K74WMegO9TC6llz80RTu5
spYTAHUd7eKmWmRN+mPVNHCfdLjDepG+Kha4p6HLlppOrrjpH7Ja94t7el1c
r/J5+gPsD1zOvK4a92p6k8G7d/jfGjahtKsGAJfPAexs+wjDNQ4kp/XvECf+
odGmk2lmPb/NYAOnH9P3MNX6tvjzxzBm1t4UsLIfapxvPQv7m5UlQOFFM8XN
KIvrOxd9Q60nrbXurftttpqnR3V1O8/XSVJW9QJ251OO6Pbdj0f7e3vP5c+n
j/cey5/Pnh88f8Goi18BiIZW+sGzvf0n9ufTA/1z/7E1ePRcP3v2ZO8h9Dib
zeX3U3v16Pkz7eb5QxvnOZAh/XPvyWP+djlfNQk8/OWn82c0HlCJrL7Ga7p1
07bL5sXubp7V7c24KK+qSXmdTRbFfHd5s9ydVbflHK7uBH78/qqY5y+nVVXP
xrfXzbODLe6K6cAvZ+9eHac/nZwdn1ycHqXn/3p+cfI63Xv+7GCUvvnpcHJ+
8eZ48vDhoycf9iYPJw8/0GSoA0Xr+PeYD+0NUYFsnv6UV80SfmTzMdKM+by4
Jux+iP9Zp9vQ8w59aJTiYPzw6fjhM1zv6eGbw8nRLxeTo3lWLJp45bhwWPft
7e2kyMpsAuPuZg3SokVets3u9Lb1yzv64exd+kt+qYQNut1Jud9Ni8Dh3dyu
snmT27R+7kwrmldz18T+LBPTmf18fvbGz+znzsyiqfXmNji5o7Pzk8nh/LoC
cngztHF3TnBaNfmu37st7C8N/W31d+zODbu4AZry09u3k9PXJ6fDk1kCl5PN
J4+ul0uazyxvPrbVclHNVoC3ds+X+bS4KqYEVp2fx3kLOKGZZM3y8+8b/+Z0
9vLp/nO/kkf1DECyzGvmUt7CpYEfzU2xTN/W1Z/zafsPTBWhh3kaDcO8XXoE
VD99k7e3gA9TwH3QvF4UAOrNP6RvVovLvAZiN0qz2azOYU+RLYJGxQx21rra
BHCPYI/iy/Act++oOv/l9Bi2d3w8IT60yaaLMZzSbTHD98evzg6Hd/V6Xl1m
gD6yFpiPBW3s7XKM9A2ms7taImZodmGcx7t7+7s/vT36cFxcF3AQr3Lg5eqz
q8Plsq4+ZfMPn/DSL2dXfjOlbcqN0+oq1eZuEW+qTznuCq7mcYLTfXvyZgMM
5GUASPix+zYvoce57NpkmV3nfvy3wHbBGMi95vWyLoAT4xNIt2GMHWAC/n1F
bLpeC8Ts4za71gvB3eArRg8X8Aq+ui6ACVr/jXdGuw5/TT7ftIs5jX7+9vhf
ojGNrL7Nph9hWelx1mbpyWcgxCX82sYPdgZn0Cxnn4FT+DR0kMBPwF052IMT
3X+4+/DZLnYzjq7EeH+8b+eoYLb/kMBsPUXRSGdqiFMfD6O5Kb+GSeGWRGPt
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
zmbKNBEnxtOFio+3ITVZ2WsdOA82IswBSLIRN/w3z84Pap5nPO8Ekmt3y0j8
+IrqeSppAG9QkH/CcsJ7PWvZatVGKS1TMZXEsmuDVUBy04uck8r64cIREYa1
KbHnVxqHUbWDxjGq+IkGUdr3X+DEoRkEaKpVv003ZnZYuhGW7TMXFWTKderp
8q0VqInbMk6EKkxQCZLd4rbB6/rKmioZF9kgj6czTKrNIKARhELEYQVwnjcL
OcO2eDqeRcYuojowPp7i2ZorKYg1Vay3TnAem9mCNDmas4tASZuKm5ZgYZTF
TQ6e0sI+ro1HMWdnqdZFXRtHoMdxwTXHB6G+ZBQVCnolHkPSroWG8sqHhBeL
gjWOFnJLWXD8FbXiI65dll3amhUcY+IU1FiINOeqnEhwIFc2CKUJ6plOGPkM
7RSvSbmavVuYzamPofDLOA5J0mLa4iMr2MnYdLaZTjGCAS/fctW/kbARfZf8
g2fDF8MSkZHP3ylybiFQ3sUjn0N+9h3v3YGF3KcRYXSIwMuU4JX5HMyX0BeS
jPh1U+nMwYDMWLl0nYSlXmpArDiDBjzV4G8NOh59/sT5vCZymoseIAQs4snS
AuhKepYjNayGV8DiK0HH090JQrrQdwSAszJD5Apx2FNFU8QhgVvQBYBVwW9p
zPvlF5rP+6PLCG8egFgz9Crmy0WQbyav9tE9F5uSCKNqCh+I9pZbWr2ZIzPW
li+u8G6CJpLl/aMKIyW2wV6ebIQq9iztumhdinKoPmPxQlIgnEN6eTK42fOq
2mCvdMOj+2nE2cTDrVWqreuXzktpkemqjn28x7SqSwmB3jtilxqcGLC/ZjNQ
Uxgb/zy3LLpmMFGh97ncmjmXMxrtoyBLSOnuKJxBgMEr/fDf39KFFuEs7mcH
3Ik25zTDnrhcSwj/RTBmUf5oFt+sGSfuE+dTacqcRdtc/tJpXepwUdGWW6yD
2EO0gmMwzFAyEcVhqcsTQjh/ZBQEMOdm/nIzMiXu1jlEdnOGuCaje3NkSNTT
p6PMVBEFUxdz39lXmKvhPsEDtrjYYJEc1yqIabSRGS0e9CytFU4DOsaI8TpD
ExVR6My6r3MzsSUH9gXBWnbqIV8AH5QGQNdm4ghJ5SAFYdNARdoW+R1oTyHf
OHLAnHx2ZJSXungR0JCCWhwgY284RM8CK4ZFu+OKXpSb1TtrCz9rSlzg1jDN
5UkuMwfGnA+LnVnutkFW6GQVTdd+vdkle4YXb2au+q9dtMKGVjBUPz/NHCsc
Vb3GgK5URILUSi0hNRFktNJLvP6ZAznNF4WZPYqE50xzYyy/bU0R8eKF/WZO
HkxTvsoMB2Os7Mo9Yjh185nD3uxX+cV+5ObimBdhyR9R/L5DnnzPHjQPzFOW
UQGfekSpl4Lfh48Ueekj/+zk/DF8U81NqYn373Mk+P695/3nYpQt/16cJ96r
VE8T9/atiQM6YY8CPVyaOCUVYSsuqW2Zd9jp/ltMnIO0qqd+Hs8Ti7zi65Ol
eUtu1M4z722d+Txa/ukz/lqSqvyXJ8+3bbr7zJbN5vyuWyjcTLe/y0ZTyULG
rfzrVuA5JpxVrwB9VawwovloVeuh6Ws7nPmwM/i3oH2zDt9yrtQdtCBPmaoZ
tFMV66CZV7usRHc7+6NSKX/++Wd3EEasVU//TECnc/XNKZ4MpZlcKlUxBUk2
zK9C2A23zReGMIujxZ8+42NMeURk8vVmC98zU+a8SJTnlCfphCRWzVizJYsz
bm2bseLUUgGLv4TiNVh1u6i7KAejVs3VJHruROTt/6sMH01prfl0635nxodp
y9FxhsY2NUdTV3dahc7WVUAEayCClyyO/tzzrhn2mcZfbacFtS7ETUb3ROb1
akWAk3N3Wo7t+s8fSxR0J0wpFEO1ZNiM9Lz9k6JVBO++ePnGzxtRa4qF19uK
qnBmzCghGUGGCIdb4ugPtuqblJRcvfTmu7KCyanMpeXdtpDGb/tXaRYm8HnL
QVPJiY5YkiFUgLhqqib0eefJElLLnz7DM03me5vdyU2cxD837a9qupJCvvNk
/3rRcfzs5XCLvDxyY6IydcrTdd1xcpGswW56Fq/Xci0yRA85MIFKEUqJ8Tuv
wl+kIqXTNR1u/HM7t6SoadnlTF9ZbRYLp+SHxKxUsU7O8N956n+F4DQTv1U/
fsOBjBpG81umvlVj/reYvak0usVSMoVIxSOksV9mJejOfDbjBIPb18LCMPyb
HYLnDtzDlnVwniieg5rE9aAqMU0uNoKPaArP370uLtrEv9nSWEJxauC+ZvSL
7UdG4DHoNp8hn1C90qbc+XKdZq1fx17YbWuE2Br/ZstDOsERpmjcwjs59YFz
d5zIHRRvBmAKI/3II426QbVObvFCdteREh7YH7QGpG5SlPbb1y8KN2Rr94aM
UqH4W3SfbVaLz55H94tJ5uiftPf8WOGygOpbbkZcBEiY7N7xybfU8bl84dyd
UZQ6PME5PPnSn3sN1Nq0AlaLKu14v2orVHXU7FgZBSL/g9VQlVjpb2gIZ8jf
lV2p1sVUaihf4A0byqSlX0vOyVvaLTckVkFExQarQivoDoAjDGT55I6YkKuw
GCJeEVdul/jbyRZwKjZhcS4Tk+ifHp2e+9kywkAqc+ckVcqcu2KOd8rfohpW
QFuEc6D1oGJqZ1SxxtcFkhuWij3CNw+Pu80QHiQ24C57VaiJxnno2j3HaFYp
3nYLlWuRZWeFtI72UTp8RecNHhO0FNqN81fH3/GNDcNewl+jUj1tQ/AVrQDR
w7kwGyehHfK0Lar8+uT8DUL4nSyuklW6YFa7f5S+PjlA1ApgKKixOgfoH0wA
6SrGPDb5/ifCCLCr8ch3wGwfIvjo3wgA9L9MfT0Fp4OPzo6VNZkj8whWGlfg
82eXn7rtc+7Jw6vFpCHAoNAHoofepwuztvfs595zyXVUr9f9UTT+SPVRNQzz
ly+0+vtnKUplqsFHHGvMmZyUs50r5uhkv1EhMLciUWRqEtUqg6DgkemGq1+6
xYmYWrlPIuRrCjO10TXaR1IsrSk5ETh+CvemYGLOPGc955L5gI2y0sKKyZoc
65yemF1K/pIJuDjH+AyzJKAuuC1wLeyMK2BhftS74esXZy8ek1jNnPdo/BFX
o2WgLb1FxFvQGwroEmcBnGGidI710KpTul98/M8p3waTbPyhja71bHkrLNy7
nOWyrznYDF/hFA0Ov8VnVes1uRt2L6V0PKWu8H0rrQ608iAz6pKUKPIe+qZ/
zvPQVtac9KQhL2Z0mCTkP/Q8Rkh86JurS/idf4LmI//ywaDdn/b73eYkaEXt
bit+UJMXxMttHkcH9yNK8dQnxCvsPtF65Ic1/GprEYqHFoBaXwx78No/tlcc
oZ+7vveDMMCeXa7pIxTJkL6thj8v/jzknLjNkoKyQdlKZvTbzq9TQIkQG1UP
4z2GfbjzVd1fdPbU5eZMcCT93abwsEBaDQQfwdOTKWHt0oZR1NFqr2kyX6ZG
zU7jIEXA9RpwHWkueYqR6ju08QuQ514rCtuligH6yN1tAFE88oMt7+/ahh/A
QIbjOa/gy/PieHYaRwsn0wgaW2az0zhgLv/4pVUeTQsaD0Bn26kR/NnWSPj5
px1b6YIAvO2RXUcS9LY2tHMb+BO2H2FJjXn8fh3H71uN+FO8d582Pt/yyE5t
3NLAjm3c3sIObVw+8KNus9ltt1rdoBW22s1xM2gG3dEOvKsddFvdSbcTNjvt
dqcN/7annVYTPmm1wrgV7NAEPNZuhv0wCoN+MO2Oik3u0gT1GvRDGHZVM7tM
xAyemgmb3SgIAvh/P+h34+4uE+H+OtNeu9vBf3EFup1ev9t5cMfbP936/U/e
Z0EDFIk+LKoCmgQgIeDn70RTBSFGChlZG4zZgYnyDz0SOMRnlcGfv6tRRojL
smcJClt8gkp6Jhpahj/YhhTBXmojpDcErUE/DAetoLuvKsRbjuiXwaJYw88t
m5bHQBdT/FZ7RpkRq2ohIoZwYS0vKPKk4tNuoy5DVQ2HrWOXLfjMNHcR3hZJ
WlvKj878lHmn8+YqncX2r+KbyKdlgWir021lWQo/n28px/aXzyB0t+R+07jr
oZ90K/VclAbQfZSbZqPRIHIuPUdyJdcdP5xVLUmV8PhD5vPZ+3zgALc6F9So
Gx6mWD4eDyg7rvKavuYWodVkKtTbO2pTGthNl6PTzFgUZGddJsuaPzLdpAQk
OBOsm0ZpuPj2b/95SCMXJDbXNmKduARgg6Ozf+HbR6/ecgiuXK+stbWX5w3B
0btmaM3MpvmTTopvcya86LqCjrP7yH//vHmdCfaQYTUiJ65VUDUo31Mn39C3
Xwm8ggC1oVGsJZnO0jfccPVc/piRC/aR9m1yBsndE7mQSnZq/Hb1BAXWyWxy
qpFVzjx+/8i/llLjDoHLRJxTAjwK0UGIJG6WlJzHbwuIUOx6yHJ12kUGY26x
Hzm5xTxv8QFyxrnJayOErWRSPq0NZ+T3tsj71iYnF3FO7+108ZVmMOhPO82o
PZ12x81OvxuMtYVuqx9HpgEK7XRbCDt9bKAPnYatB2hAn52gUHh7piA2HCdq
rHcJhnSM/s4AW+i0B5NxPB73R4N+b9xr9UbtdtxuTnvjbqszjvt36U6woZhO
hndGSDPcCTPrmum6oFaEXViwf+wFjRbZVQFaL5J/Ha3WVNYdy5rp0Pki2pl9
2DOS0NU3St30UIkAbaPT6HA3v9NF0sJxGgd/XZwldqC24N4+MM0DfBu2OeiE
3U47hK0y/XNQEvwWdguScejcLoGouEwRR4vSoTjNwpESyWq8QcQgOkZWkO/R
B3v+I78kSV0qEgIajOJpv9fvxaMoaMXhuD/txr3xqD0Kpu1uMFAKtG24dCQk
FMf95rQTdbvjYDoa9NrhYDCI+tNJNBq0mv1B6y4SypMRz0eWwCUkdwx2p4WW
wkYzwkJ2P6EvqEBJf8umn5wFAq3sjgUvrXVeAruLzZ/sttrdAIw7JKFXJy/8
0/wp9e+eYrvRJCquOivO7KT6idospMFIvCHKWeKQjoPUBhMfzlL0g5fdlm4m
vfiml05jkf/1O3+EL+emgKJ9s8Kc3vpok8wkjzqHe/BSgVNc6EMOU8u0Dbqg
QvvHVU0kRWuBAL6R4hthtR0RYYi95YyjjMChYePkdJce6lSyQ/CT5g70B7XB
8CCRPwUhcdDw2z2pwxXjvQPf/lDSy36fA8ZpSrBdXf6T2sBL2IPf5939kyRJ
tx22yQGsAE8neGGwXCUgEV/wTfjDP4J53lK6eKucIHuRyggj6eNNEKk05SPw
2a22gBg7D+m/52vMBsvdCZRpvHQpwAlehBejeZz4e0aNKWEVUMAYs5khc1jD
ZfBYVBEZ49NtoqIBcrMqIgIagukqYQAxsG3Gm8JdNzbgKEIGxsoh8+Tiss7g
dS/Pa4wTIYdZVUHyG+SHlvCJGgr62C3q+O/TBnUECoFMcq6wERWzoFs3Qylo
OSFyOJLkf0pQPAfJq+2Ru6CzzF6u0GgX2DbBuOpVEfTPqP5mfexymSnQ5w+y
4nZaIChCcgSLz5EpXz/DyWSpLyMgOELBfFQYmPVOptAfsgtDQ+qIccgBo84e
EPSwg2+OXzGQL4yXdwHDCpzp6pohQD7dBNKycTagE8Mc2bOwkJAD5kAUiuDT
PRS70BJz4Xp5s0QIlLXYBToFA1ZI1QDwlpNOMsEgok6hACOVi/oHkTKPM0vm
CULzwTIMF5MVwrsiJxrmpF+5gf85t35YFvL2i70dr+b8Wy737tPElgu+nZq4
fED++X6r14VVbbVa7Rb+3t2p9+a42WwG3UG71Q168HoXFOzuAH3UzUm3tZOH
nnz0YTNuBk3x0vfAaoNm2r0OGGztXrhTI91BN+iOw2Y7gNfaMI4JjKgNn8KI
0Om+23TCHbT52/3p9AMMZ4S1CUTDFCVKd8XfaWMeVuTGMxy8PrBLGz766yVY
7yhajdJFsqZLqPu2gSHJ0EbQCPeKD+zcxhH7ZR9VPLBbG/Czd7aYbPAiGpjj
cLNO2cl497WaMY/jT8uiZ7YNZmwX6B60xB6ZMGEzDOpBsx503gT9R53eo077
B8MzEpfN8E9XGgh6zX6z2ED3EeigzeYP1QOs9+EENbGw1DRBhAMQEFh9beuj
gY93kw+NlK7XgeUg4Mx75MFFU4tH/NG5gAiEK54cwT/xDEMMxz7oBFeC9vIJ
9IybiqFCK45mHSK7bnW7vQ4cue50AIyjO25NO8G0A4y7Nxq0wXx6UJ7FQ+mK
2qnrWPgzOCyv6lgasqrzT/Vxmq5oAHXqvNuJJ1EnCsJOrzcOR1HcD4EL9aZx
q9XvNYNol/MeNKMoavU6cTAadUadSRw0+5O43RqMm/1OJ6iewI0zkhaOJIg7
YTwBrtMMgAimvekgbjcnk+lg2moHo9Zkl5GMB6MIBF807cXNcdSD/8WDOB5P
ms1+exIMxgW2pEa+62yRHyzRiBRyW697qJ3tCSFxC5xu7Kqi7jZUiew7hLZ5
8y7ZbR7cIotvnQn9/A8SxlYc91qt3o59djutXqvdHfX6rb4I5P6Or7ZBvIKE
HICFbO7Wd3y1E7bCMG63SXa3WHbv+GpwSiL+xIr47mDXuVYI+V1fNboAiPm7
qWonQX+7pN9lx7eKeZSSuzXgyvhjUsfxdPOXuzcgAv512DgO76Ug3C7dd21g
q2S/s4Fbt2nrbSj6EJ0/8XfXp1iVY5IJ2iZef+nlaCn+UqJb0VfCxb1GDP6E
tie+KNecFPiqAZlCLnK1wakoubSe83eMeSMPsiOlKiRPrEwBFURzl8q0UHgt
fDdJootFipBk1FkhjNMN4EwyGbUzaMFbtU4V15shYR+u69QEbhgfSOR4KBRM
B9sHabNP0Xkc+EGXqzp3p3+98EML2GAhqIsUepJSM+y0MB1JNnXmFnO0HfMr
GHJASyV5QJkvF3J2gAS0vZGQlVy6kCy66TFn/W5xh+5u8N5m6u5m5DpOUXux
1okm9mLtCIiKK/LoO44ndmcfrF/WSQo3QMWfPVFDnBuLkrpQpS9U2Ps7rQW/
m9s8frfX3jEgZ6eH/piwXzPc3xP8q4385hBged/yuSq2s2sgcoxYrHgAnFBg
dCPK9zu2ggifseGNxC4w3oY+2b0VlwXcTzcDS68rwYytTnO8q9ID9kF34gQO
huEElCAwmODf6a5KlxP9yKGN4jIJseFdFSHqvx2C7tSi30CHQpcNqmI7q3+9
kCMimy0MZey3ohYGM/aCLk1wZ821A0PvoAI67bXh32nPhDUGu+p1QdRsttuj
VnvQ7PXDZtCB/zShrVEr7I138/vAdFqjdjAIR5Nw3IrHYbsfhYMwDDpxNGp3
dvOFoXIajKa9CPTwOOyMAxhNuzcYNDu8NjvvDqjDsBewFh34rYW/h3EPjKFu
615r0hy3+qPArsk4aIejQTSKdm0kBGuiPRr1xz3YpaAbtVvjwaADLB2s+2gn
Axt+RmAdDzq9YNrpdAejUW8yBoKfDvr3WxMQMaTtT1CFBwoZA8WEQRunGe5K
9q1Ja2RXI+pGg8l4Mh21+mBiR7uSPYjrdtyOg7gf97shLEd/HE5G414TRMjO
u9NuRYOgBcd3Eg9ardYo7u4SRLCLPXLnI7dHB362t4waDbwoMm0TD6x6FIeq
vK4DM62jPHfihVWF4kcOsVKR3rvt+fuE7DpNEPNmwwHDGaK4n5liDZkohBWJ
7mBv7KcS0BUVimidvzvQBHdfrsgltvC+EcRA52G7c3cMcUjXvzq1Oookwbmm
5Gj3fvn2IGOzin9YmPGd8bc27ja/P3eG394/cPizGa2SVG68rV3CaDGGdjcl
bOdIWyfUdvU+Sdfv04yibYuBOdBAhrUgfL/UABBLuwOsqN2peIkQycsv+TvP
xPyQUnn+9XCLm/TWH9DgjVBkaXe/92GWBel43/dVmqqYvO/7RbG6E9Pkn11c
ObtGtN+XsMCapFKSWWOVje9JVP1mc/An09TvJCqrVbC6cN9NLaoX9yZKUUdU
z7jv+0W95P8RomLQ8sYsGd2TosIWUFTr35lN/UbNzPwUVbT7vp9X6dq7qpfm
5zfpdvyzI0Xd+dTt7TgJIOTrdOMlBUYHfVpUG4B9kq6fEz+ui6syl+5t3J0U
U7pZLzcSoqJVNwWkm0v5xBNjgbv9m+I1cyrfxlUL0cPekDE4pSFNu1jEEmMV
qSKJjUEip54qhVR5w8QgURki8QfOko9xLrTKRlSaKiepRGE61e3ZI2vGQN5D
Hgg/mscPMtqyKLMTm9FMtWEWHOu/mLiRUlTVFN+ai78Ylz0rD8XFZI9XBl3c
YHYoUJHWtN2j0rgw0W+dSljZnobG5YDVpKo8dyGzzfJwW2YCOU1dncvE2ByM
cmBeHz5O+k+f1ftffjP7+UJ0WINf6/j6DMIrItWVnXryIgNDI6bf23f6GSGD
o177w4fg6OP78Pr08vLm7PsXJ93vTX8MAFeteTsYaZb7icqNf3E0gVlY+4zD
Kc0qu1cILrfOc9USj92LZrNyIMBetqEgtHwumHPg9Vf696d8pDSdXb2k4nId
5NM/3yjIqJdL87qkGgx4RLBIsnr7uAwRVvHocRWPrRs9O6vTor/+0H1Z3Jkn
5Z3pXnz55T2pwYm0lTcTeqKQlmCQUq2Jsaexa8Pl0j9N072co9ohD/iuARPX
BTfyfE+gnE84KNI/oY5dAsCQaXcH98Lj1vnlycvL4Xl08e5xlB59TN5+aF9e
NN8sH7+6/Hg4PB0ezl+9ffrm/Wj47vHXZ/TNhw//evzNj97J0ePp6ubxNyen
h4cfDw+v3v4w/GZ8DH+fXMyf//zsw8kh/P40fffi7eu3746eBRcXnXH92/fn
b7rrT68fT45a3354+6P3Kmp/92H2Xf1p55vl4+XT10dH7/tPPry7WH//zavo
m5vrl2c/tOrzJ09ftL4bTJ99gqEusvlhVH9+tfz69c8vr+vfXy9+9Ord3ujq
yezDZryOfx6+Om4HWff9cN17MTr/tvWv6yezT2ebfz2eXsftIM6+1JX7yazc
s2Sx+aTBg1sXXr8vL/xmJHXWnxRW/Mm7N7kFj2+eNOPvhsnL5MnTb4NvkmdH
Ty5Hj8f499nbn8+CF8mTQQMeWo5bz+mhZ29Pm5PH3/48+dF7/O3NWXKdRO9O
m2cf0k8vPrz99OLncfPl8fdtaGYWfw3NzjvB6PF1djY/DX44OuueJWfZ2eJF
8H2Cv0PTP3oXH67bi9Pnl8+WT95uXn139fzVz0+Dx88/XN48+Vd49e67i6Ad
dL97mv18/c2ee3JzOQ7+KULQ8IHN48KAzZ6MqQyAfF5xJXlydHw+1KqA8KhK
b05HLMeLM+BN8UG9/aOKytIyy/9ZA8OOnDzLDM4sp6Vh0U4UZnoBSFJERAsF
LZ3DqAJywHvdYN8P+vuyn5cPhkEzCLsPbsHJ8B86NYEv4wirgqsv/5fPt78Y
z5dYXHdRbkBCqGAAYfOw3W2G7WH3sDno9Y9PmsP2AOMrmmGz1Ww3O81us9fs
8xCd/GB5f3A4OAxPOyftHoZ4nXahvaP+sB10eoedXrd1etTuHJ70OqqgDoad
FoEVdIJer9s/CoPh6elhv90ZdrrDw06ndwKvD3qqjw6boJ72WoMgbLeGvcFR
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
O08yojFO2Re0enPZ5unqPPK8/wNTJRb+rGUCAA==

-->

</rfc>
