<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="May" day="02"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, EAT allows claims to be organized using mechanisms like submodules and nesting (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Base64url Encoding:</dt>
        <dd>
          <t>Base64url encoding is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT <bcp14>MUST</bcp14> always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection <bcp14>MUST</bcp14> be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification <bcp14>MAY</bcp14> use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.
Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url encoded <xref target="RFC4648"/>.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>SHOULD</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="detached-submodule-digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is a full top-level token.
This top-level token <bcp14>MUST</bcp14> have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It <bcp14>MAY</bcp14> be a CWT, or JWT but <bcp14>MUST NOT</bcp14> be a detached EAT bundle.
It <bcp14>MAY</bcp14> also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be CBOR-encoded and wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each detached Claims-Set <bcp14>MUST</bcp14> be JSON-encoded and base64url encoded.
All the detached Claims-Sets <bcp14>MUST</bcp14> be encoded in the same encoding as the detached EAT bundle.
No mixing of encodings is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authortised Boot</li>
          <li>Claim Description: Indicate whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicate status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson">
              <organization/>
            </author>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl">
              <organization/>
            </author>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck">
              <organization/>
            </author>
            <author fullname="T. Howes" initials="T." surname="Howes">
              <organization/>
            </author>
            <author fullname="S. Kille" initials="S." surname="Kille">
              <organization/>
            </author>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-19">
        <name>From draft-ietf-rats-eat-19</name>
        <ul spacing="normal">
          <li>Prefer the term "encoding" over "format" when referring to CBOR and JSON.</li>
          <li>Separate sections for creating and consuming UEIDs</li>
          <li>Base location on W3C reference directly and WGS84 indirectly</li>
          <li>The option for a hash-based OEMID is removed</li>
          <li>Rename Appendix E and clarify its purpose</li>
          <li>Require presence of oemid claim if hwmodel is present; same for swversion and swname</li>
          <li>Use normative language to describe the constrained device profile</li>
          <li>Require a CoAP id for manifest formats</li>
          <li>Clarifications for manifests claim</li>
          <li>Lots of rewording of paragraphs describing "entity"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbWJYg+B2/AqusiJSqSOph2Wmrx9mllJRZyvZrLLmy
e3Jys0ESolAmCTYAWma53DE/ZDdif8v+lPkle973XACUVVXdG7sR4+iuFIGL
+zj33HPP+wyHw+TDSfooSZqimecn6fVtnl4s4ccmPW2avG6ypiiX6XX5Pl+m
uxen13tJNh5XOXwEP5JpOVlmC/huWmU3zbDIm5thlTX1MM+a4TzDDpJJ1pyk
dTNNkkm5rPNlva5P0qZa50ndVHm2OEkvL66/T4pVRY/r5ujg4NnBUZLBy5P0
Kp+sK5hOcjc7Sd+eXl8l7++gu2K2LJazNHNznIzLKklWxUmSpk05OUm/3uT1
1/xjmq+aW3hyjL/rsoKBb+rQot4s4geTcrHKJo1rsR6HZ8sSH1U3k3xaNxsE
GzeDf9m6uS2rk2SYFkvo78UofbFeTsfzbJrDJwyrF9m6ypeTPHpVVrOwWNyG
stqkL16cwat8kRXzk3Q+m/++lgYNvR/BlHSkH0bpy2w53WQLG+eHoiqmt1nl
XtAo/3WdzeHLRXqdT26X5bycFXmdXi4nI1wogCaHRT7+5pvH6cuyym/LdZ2n
51XxAac5gcFhntkyPS/yWYlgyGcA/ZP0LJsXN2W1LDKC33rZVNDy3dUp/Fzd
lkuY0M7vDtOnj5+mTx4fpt/ALu+ExS14ir//t6YY/ZvMzy/vx1H6+uvzclnO
btcBkj/mVb7YxG8evsSjb56l32fVEvCmXM9u07dlNrUluhe0nikC9N3hcfrN
i6togcuiyafpPwE2TstFWOvvjo/Tw6PHR+mjJ48Onz4LK/1TOaXJbl3q2Sj9
KZvPs0lY51lWzd1DWuJbGPUPMItpelXeNHdwWga6QBlpAl/9vsqnt9iqlkY0
Ep7EpirG64ZxlUf5Q758n35XVO9vy/mfdZjvq2y9vC1v8iq9uryGp3r8Oy9k
1FvoZTSWXn5fF83oxlqOANV1tOvbcpHV6fdlXcP51eFOq0X6olggTEOXDTUd
3XDT32eVwot7elnM1vk8/Q7gA8Qgr8ravZrcZvDuLf63AiAs7agBwuVzQDsD
X/pTWb2vHUpOqt8hQft9rU1Hk8x6fpMBACfv03cw1equ+NP7MGbW3Bawsu8q
nG81DfDNlkvAwut6gsBYFrN7F31LrUeNte6s+022nqdnVXk3zzdJsiyrBUDn
Q4707+33Z988Pnwsfz59dvzshOkjvwK8DK2eaavDoyf659Fje/rombZ9+uTw
ALqZTufy+xt79ejZU/322YF1/gzouP55+OQxf7uar2t+dvzk+Km8PqIZwd8/
/XD19BgfAtnOqhke053bplnVJ/v7eVY1t8NieVOOlrNstCjm+6vb1f60vFvO
4eiO4Mc/3hTz/PmkLKvp8G5WPz3e4a74cvvp9dsX5+kPF6/PL64vz9Krf7m6
vniZHj57ejxIX/1wOrq6fnU+Ojh49OTXw9HB6OBXmgx1oGQd/x7ypr2iWyeb
pz/kZb2CH9l8eLls8vm8mBF1P8X/bNJd6HmPPpzCfQhU5+DweHjwzfDgKa73
8vTV6ejsp+vR2TwrFnD66cHkrrGXP7Zf/sm9PHt9dTE6nc9KuBRuw+dlnWOT
61sgdD+8eTO6fHlxGQNVYbqCuzCbjx7NVqsRLGt/mtfvm3K1KKdrOEz7V6t8
UtwUE1pr6+d53gCi1qOsXn38x9q/uZw+/+bomYf8o2oKcFrmFV/Vb2An4Ud9
W6zSN1X5p3zS/AOTauhhnkbDpD8AEV6lZ3AVpa/y5g4OaQoHEppXiwLgX/9D
+mq9GOcVUOBBmk2nVV7XxBtAo2KaAzOjXW3bykcAo3iHniH4zsqrny7PAabD
8xFxNnU2WQwBuHfFFN+fv3h92g/V2bwcZ4DpWQM34oIAe7caItGF6eyvV4iu
9T6M83j/8Gj/hzdnv54XswI24kUODE31+uZ0tarKD9n81w+IiavpjQemtE25
cVrepNrcLeJV+SFHqOBqHic43TcXr7bgQL4cFdkyo3nCj/03+RJ6nAvURqts
lvvx3wAvAGMgn5hXq6oA9oB3IN2FMfbgZvq3NTJ+hqVIeYZNNqtPwiPYzuEq
q4CQQSf84urd5fUIeJXiBr72YF8XzXAhz6FXpAAxrTs+PFKac4y0Tmjb4ZGR
n4NHz2gM5CBHp9XkFojtpAE+zI1DjGvm3uEHcB82t9NsA9xwNnl/4uGgr5AL
hXe9sAXQ3hXvi1U+LRi++Gtfv/yVvxy5fbsBjKaBLy8uLkZPD45Gh6dvYc9f
X44OD0aHhwfP9vHN1fX5CHb26ejp8dGjb54dE+18dDYCYvQCeV/8++3F2XCW
A/PD+zg8fXM5hG8eHR4cUfvX7y5HP6zhiESroifzAm8qAHP6DnYXMOziI6Du
FFgO4Hdgd9NLOVi46RfvLvcG6etqBlv0Z6GK801fy9fUEg/mGTLTy016eZ7u
nl2eewJ5up6BEIB4+00vSIHfX07xModdy3MCqp6sabbYx4dDaxNa79/lY7gr
JusFtKz3G+R9gGbX+/m6oBMmEHlRlu/XqwgkCHDA6lkBnCPTpFMiIiQl1SiL
UJ+9swX2GCnOqGfW9ggwb4izW63H+x+K/G502yzmX1U8IDCu29Bj+Pb0ofN8
KCSBjkzXEzgHdV59KCZwBcgC9gvY/o80s/uwFRDs4HAruh6Pnjw9/ubg2TdE
XvHu+ufHB89G5yg8uoOI99fwI7yhZt+9fjs6y6umvxnRFrhogUGfDifQDL95
d3Z21T7Y68mkxnc/Xp/+0IXalYCCcB5Y6zXIdsM3xZKQ9WIJzBg++H69nDB+
k5AG5Cg9nQCQ6vQN3KPU9jtktrNqM7yaAG/pKU3vFiDgP8J9AIy57YEi6f5j
oGtPnzxx8P4+H1dr6B1PxwGuBoTw0QKJy7DZrPK6vWgUw8PrJBkOh8DAI3pM
AFCnyy/I+ileK0AOaliayNpAAibEjaR13iTNbdak8H4CwgS0wi5yAgOy2zAG
3Mp1U0xqJCHQRU6jDZIMvkHsSufFe2if1gtgCEhwAhmmvJa3g3Qp9z1cKMUK
QQL3NYjik9sRMjdF7aaSwi8QVKfpGOhxUuXzDfIAcMPAeCkiM96UVSponTYl
DNIQC5Gnt+VduoBe06JJ74r6FlYC70kXAbJHLtMeMcBOr3GoHPgt6DEj9Ex/
yscKNuDl9nCgH69ev/LPf8Tnd/CV11kM4WxC58D280JGvEOLAvhk2K2vQKBr
+EAi9/KA/YKZZekCEBKubJxFQ+8W2TRPgYeCTRCAZeNy3YQdGWHX/Cc03qRj
3BTdhLpcAIjgbJCQhDDEByZPJqgy0m6hwXreFHA5wwaE/Uij/UjvbhH6E0Ks
4obwBbeAoD+fgxQMGwPIw+DyG4BDxV3hbEFAAkpgWwZoUzayezBbbFfQhdTd
0O/hff4xW6zmsE5pKM0UDPN5eUfcZLoA9Gzw7MHpWQIrSMAvl7jOFQ6eATaD
DAd7iNNUTQ18BtcprXFWQu9IX7zWikDGNyW2wZ80fewCmKM042u4JHSzTo1y
8wkCIg8AuBH8RrwEio2L5Jt/gDvRfkjDUYewSYwysE6AcZnOgLMi5GDQIN7A
2mEqwJc3+AtnNy1uQKJHSWeQomIPdrOiF1ldl5MijDEHvm042Uy4o/c5bhoS
BhA7aAPac4UWjEnaEcyPDw4vw51iXkKDG4BoRltSp6u8QgZRcU8/ggWVK5RA
SuKZM+1FZhH2ZEDL2DoNFXXkgNS2bwCFm2JG8ISBhcIB37q+yegCqGrF4Axh
hWe1rtc4T8AewLWbDETaIqsC3iPG1GGjAjp1sKg2KgxCzzL99KnD6H7+HCFY
la9yWhPgVU44C/PRmwc6uyEOkI46KqhQv8pnnEg+9rIqkefiowXwHFcg1CCw
RwnSSBDECmMF6RTVeJuAuMCHSCnGkq/cm3VFGK6DEEAUy4s/59NR8occN6PK
eVKCmyg5/DZ9mb1nZGDowGwc2KeEnrCuSvak94MMyAhIo0gwqhKv9LISkjBZ
z7MKFkEwt40w0k3fQZeXkajJnedZDRPgi4tPjZLNtFovSYONTcO8zgSF3Aml
K5UmaK0ulh+KqiSmEyhK31Ub3a9FU6c/vLlKVRCAHr5HAQo+BX4piPeAE5Mc
jj4It3LLIeCAHE4axtF6vVoRnwMYCjcKkMEZTQ0VxJOszvH+egXNYF3znA5m
uHGQG8omhEpTYhKA0Nt3AJa0Z8gMb7MblBGJC8ANIMREuNkp9MeArjsmmPbe
Te5y6XZ0QCMGBgf/RO0R7BpAdFnUC8HCbDynywUIGOEB97yh7ZTFLfMc2E+m
G5Nqs2rKWZWtbnF2ppvhg1Pfluv5FLvFy5FlIabt7W1kdAvzlbscP9AljZJP
n2TWNRzvwIfpUkQu4mPWs1SaEgAdJWxaJg7KO5DB+Z8qGvkNvrb78+uaNw3P
IeEi7cGM1TzIQznGAMYHDhS1OwhBkJjo9UII+zLaRaC8sFc0sSqvV3i36Nxg
4kjOEAHoqml/dYWkoTupmhkLWgYInnCZIVBobLgtN+ltMbvFsQqkOMwdsmTO
B+j6zcuarx28LdOcewZgvMadq4lXQLYE0HiO/4HZ1DSBcNwBbwEz+YTAlOnk
3yi+EsNsnGxNN0M4KlPZFZh3DcTcrh3avNsMruoF8lw03Hpcb4BHJ05SmFVh
ZEREwstBeFfiUOGiYHUv4A+MQtwsP3t2jM8yRW6aRJ4BkxywT47seF3MG1x0
Ly/MvT16diQXUC9jTI1QFy2NiiXMEOkWkgmYbdE9H4RS9CbcjXpyYfkvcONg
AjzmT9d83KclAA6vP9weuJeWG+OWb+CKAqh99ZXy2K8/IH+Q37XvxnUtuI3i
Q7rDZ2EHcabK0RqCfCi+JUlPBB8U09AMt9F7QLab71nalSYahPiJXl59AOxz
gbJKTWLRh2yO7RFj9RQhcuXhimDmwMb5mTgDr+b6ZZR22H+cI7Dp89zEgCxg
V/RDeKnwLm8mo+SsrPjsTvEy2DD0hQ2I7viS1UY5UjWceNhDPnvQsSijaSeX
sr7dOs8Ba/gtEL+9kSNM2DUDKePB0gzVmTmdLLqFtVMEiICzwUZA4esBC068
ieVqOM8/AIsgPYO4Ai0RjZZf6xfYSRb65KOn7euIlc/SHYGa0aGdQWuDsD0a
EioQN4JF+Ic5WZM2fFSO6XTSddsIGXfPjX0L2Imw06HtGZCbzbJcbhb1QI5T
RpKHEwKBYa5RzKl0o5jY4oqFweN9ZBGpvTa6cnE9uPt0GX0E8cwmtcxRVqFT
U7ME1T8c762JoMQWKWHlK0ypPbImQFqITnaFfl1V2J0wO3RMACwfr1n2ilZL
Y7DskAOoFnA3NvD/dCeA5NXwHtvABZMYJ13zvaQsK54YelMI+3rK2wwT4VXQ
o+uLC/qv6kAmqJ0iTKuAHuQVveQ/Bwi322wlVxpR6fZnOENu7XEVO1k6lQv/
LuDUAquwBg5RmGF+DujO/GrQ19Aswk+ewAIJnTu4eHUgMdfnckfxt0ZHirhn
lWxz4tEXdCiRcMJJqrKkpbCgaxC4lhI5Qz0yeuem2Qx3qwkYVCw/ZDUJuXTL
18RuYD8gbpXcGVAq62mAjxDDlyVzfwCYziiEpJXsfroALnWxXoRmFRJrkQWE
r3T4QdcOUkgkEd8rx2t8+FYu+MHMLytFsvCGuUnuiM/YT7fIEuqdnqHuRmQQ
8nxpiAmj/Y2uVSCHxNsj5Ma5E0MzQe5lywqnzGCu5ILYG74TChUzh8gIwdfn
NkE6NiKK9qnQ5EMUojp369n5+QsRo1Hv4K4bYllEXQefGrmF+zOfw5F3kEB9
NS8b/oC2jo/zzButjreCWIIV3IO46QjEef7RAEquG8LL0Unoyh9hKzctg+Ym
EoHu3XlGImNa0HVgH5iGNQjwWVHF15PbWJy8DuYJgioqP32CD/mHu3C+vD9B
fwAXCIuVOAM/MhoI02D9GCWndQ/eLUuvdUT/IdTsbDwzzXqOSTljBiPIXiB/
lBXqFJJ3SyQzTPfvRXPiHnWV3L1gULmcoAn0PGsyh67pC5CO18hY7iL2KR/8
5PAA7224FhdwcYj0a1tAeBrOpOm0cWfHpSiFEGX3cW6KzO5UwWvE5P0f269h
qf0cMSFGhNq4JSIrBt0cUUFUzM7oeJDYujL9Dmm+pqwNIoJGojV6KxExXOZ3
KF2hw4yc5OVWMXkALfFyJYRn5r/V9gZOUTEuyAQDZ+8MV4ILGBDy6CpGjPe6
ZagVz+SMKA+5RfpCRsQpKv5KwYsVP/pcbCao+ft+javhIVmP2KU1KqstgH6K
sEa3xASYP5sxc0NLtsUEpQDrtaOWwKfSGaC5wrKQJhiukUBIrHQ+mo2QpUfc
CNIidCQzQLjuCTzh0DK+ZrIDbEhBjqNNBIHqTVnIr3O09JNJ4KYqF06LZmuf
EjISZJFPJO4qS6fFDG1sqnGmcSIDVEdxyWQD+Um8hNHylbJKo6GLF21khAPY
X+taklHoZkKL9yldbnXrmBnYyqq7Ct4ad4ARDpU3yHLHMjOeDt7v7LWiutuW
UY8Y/e8LOmqsY4JNlc5YtrS7o8ArlE1GufDzN9kEdypoZKrcprLMqqq8Iz1P
dM3SXtx3qeA8b0oU54bl0qBfCyfzmlhlBNJLM36g1BmbQwmfuBOeGXPY7FTF
etlIp/096dbTw6367VF6jTrKBbCQQO8HzmZZOa1UjoQNlTzCFKOpQBTAwZgo
A+MSPkBv5bq+16IJBM96RZK9NjWXGiHQ7EHbgZRVdsImZ8fXOqF2uIliglAy
HFnbyOoJB3XNSj2Q5CbBPsdKRSZ6SNFq1ETD8cvrWyAdpB9C3Rc7ZhD9roh4
KQMILEJBc6dGG9W44ZoyBDfTuQzfN2Im8LciCXW0FuI1xPJhA+Jy3BIdFwsT
BOJZq5bDmPJxHngpUQ2zWoU67umBbRR8jxmb0bILmyYF36nhMpgLhCK8zRco
ZXub6xsUi6ZrNX/GNknjtXpnFSnUkL7ooQpSXDA6Lp1GI2NPg0xFu4E3TsLx
zZYTNl8666RYy5Hf4D1iWaDxe8E0yi9AbURTRPXlpDFplfRjXwFA5qxWRYvJ
GGaTw27aCcD+PKzeyso/fVW57z6jCCdmoO1qsLIyjQgyhXhDIbMO/xGqaqqK
tVBPO0MtC5nAf5TKfoUFBP69WPZuGcA+d8f7Bh082PYCh3wGx7mSY94Bq3/w
dZ2uynkxIT8CZZR176lfuZaiHhBB+DNiy9iyCbQoB6l1AJ/O0TbAdFt0/BNx
f2RVgG0KY2SxXK0bYfDw7JEuAAnmRla7FQakZgExYGIXCS4cObTbPJuTEp+N
Vetaz02vld3ZxOpov2QfiQmv+MS2iYgcYZ4RDCI6vqpLGlT/vgK6t3+TFfMt
64K9YEMD0Rjg89jUwKYaR9RUUaSTJXPCmC6Pu6zC07xewpWF+9ZPa7aOT+yL
dIOtyRozRo9Y7cchUMvUQjsuONUlQ0Hcydhz46YfH3Gc98vyDsCJ3BehFt5A
t5k3pQcDMLyS+ao5yDAW95DAsOlpPGATgiICypdObbdCp1KYDO1j9YEXeOP9
rUZp/1a58WlbEMPjbduK0OToMGU/ZtGzB8QVnGdAIFquEbtgCfMSWKMpOh0Q
dwxSQjYme0iE6E0bMM6UuGKF/k6ZL4rpjhDBeyYLtEV2gqk9zoCcHkxLk767
QFdK5lXTJbnj7uHk1abrz5pyzZHTdrCN4PDjeVHfkn3E4grSypR50dpgPczF
DYTK1Gymz9DPQxyU0fQ8N1zlfWSvGVJWxoiLkspyCjx8ozTUkTWeBGpQ8UM/
CcJh9CNCzGLX5Ly5n7QTvyqe5BgktGF8RmYNbliQdHZevru63hnwf9NXr+nv
txf/9d3l24tz/PvqD6cvXtgfibS4+sPrdy/Ow1/hy7PXL19evDrnj+FpGj1K
dl6e/ssOK+N3Xr+5vnz96vTFTr91iJWItlAifEnEMH939ub//r8Oj4FZ/t8w
xOKQrGv84+nhN8fw4w7YMLFBox8T/0QDQOIsG3CkJtkKPc5r2mGgK3dLdRv5
7c8ImV9O0v8ynqwOj7+VB7jg6KHCLHpIMOs+6XzMQOx51DOMQTN63oJ0PN/T
f4l+K9zdw4TtGG4L+Hyzp8KaiSvSgTScKqd5/PRpiJEvBP2hxsCQVEc2KzUL
kFyjv6AxMgeknwRJcLYsUezA8ymnNbBMnz5d5czvPcV5kEus2FE/fTqFjYRr
+2P6A7+jefSIzcy0hpPAkjpyWm3b7Jk+Y6PuSZJ8B2ToyfG6mqcXIh2fJCdp
eGoyM7k8dTyVOFbp82cQt0f5aCASxLu3L4bsHgSCLWoth3V2kwcxjMQfNno9
OX6KyEyuBHPigEHihS6+fv51aA9EY1E0dE6W7Mml5J5kqNoE6k2K3u/pGOTk
9yyHAN1YZWgDNUe84N3kBgCokuoZF3+arop8Qnhh4QrkpwUUmubARl2960fw
gdwCdZuZQTWtOsCx4hYXYA6oCBqcGEmYXmfb6HzSVxguRpMST0O0wyHyslSH
t5w66TuvDb1vibPO3Ase8kadXHV3bbh/yjc42rXoKuEaWNHsqCM/xUwH2r02
c7p1sYN3Lt43iIcYIZVexweQ7EOs+GuZ5OfZOJ/HFnk/ERaIP5QFeYbd8NYT
gGNFIzYd7emq/oig13WJAr2svOZIFqM7yW3QNkLGno2cZaISDRu0CH7UToFX
p1d504GeNi2FMYzUZM6dAJ59yDdBGAny0oNPfKSnQcrWq2qBQ38q2gtGrApd
BWLHS5Ndd4Pnjzqm7aFzQe00Hgv0uUU4rVZwekWWgyuYdw+OkDiX5h8bsaAx
8x/pUcR9DD1REdPQjxeu8eYWPcDRvRuQGK849j0mGek2p1NUMGPJwRJ/ZixV
WYu1KaqaAjj+UXgOt3C2acjUeUdIfyIq6iCFqStHpPq5Tw8i1/wWT2qYzVv5
jSF1m/aUpjkSf9K3t+cUUaX2tJhVX60rYLOZ24JhC2AKN+RJwdaoECHmnPFY
wT/i+B7Anv1ovvvsgMJ+Cr+gSlkgwxOPPQZVZafYZDAT86lhCsFFOcFRENKQ
6Rb9mPnmyuUJhzAWReE+J7euptoMWOsgoidpyrraDD2iADhk5uO52mQGzumN
Z0K34P2gvyMzcsRifygBfT3v7TbSycSIDSoxE7mqI7iKEK3WcD5A8jB21PRy
ON1AFTsy2d4vFfzG1bNwpwJGmrZnYp67TYFUnQiziPl40ukYmh4ZB0V2fjmc
leVU5jhIZ+V8iuEM0b6hQaekSFBrh/oIiuhnv3ikcbXbCfa6lhUW6G9Cc8dY
fPGvgpnDDGgfOjqIRTG7JVK1wIhU3nhWcTstFDk6lAy1MA4i/HJaVjXNXfeG
qCy5+bJzANESjPSglt3ND1Y4VkEr5nxdB111tmL7DF7oSvrsjpjPhV0kPkJP
i6TUePBFIZytGTXhSuBI3aty8p7vsODZQ24cZtceb8w9q8fimUuo4aDDK/4s
g/1CM/9Zwsp/IRmuXA1fkKMWuxUGQ6yP2snSHXH3QyEr3SEbx85A9aRyKam1
iD7gW3kIt3LbEc9U7Sxte68ecqjDMUkWyuZ32ab2dq3QKVIXZ2MV50fdYHV3
BcBQT2On0UZ0gCHqFl9ElDonku+0pYw70Exo+iihgM6aFIe0Px11AIhFJIGo
IQHO0pToRJiUCDBdOxp5GDcloJo6ywaFfWTy0eNDjMuS9Zhm8Yb512qsRhed
eJjW3WYDTrKqMnMFGQgi5Tfe9aKNGW+cHU7NoKTS+cP19Rs07CMaDK/xLZDh
+XSP+hJ37VZnzS0nEVlzvCyxbhjyHLsF3RQfKdpGT0I2wSQRsTN85wSSwisY
stGaHvwSBZ8HsYUU4TxeL6fACIin5PnFd58/76nJ4xYoKfbliAFKsF0Dq0S3
LIN51tzIY28A7yng8Vao1mKUnHcnZ7eNSDPeG0c9lgXJGGvI4cJIhjL9Box/
/Q30PcRehtfZbJZPh0QN/nXg37yDY+je0ez5NQ7LT4cUINHU/wqYg9SsVjCq
pP1o9MzJ0wBXEFHHJHTerEkhwAZ4vuiVixOZfUSWD9xGfi1wna9nBNSSgq0A
CnTB8A1f5zYRJQSqAGDmCFMouaiwTM7n6xsfQYAoZp6dPEFC/XhfAU2nRYVy
RrSnxBT1ECbcYOyYg5bQ+IRiUe0deZkXDV4lZMLOUaOHhocQ1CYhxwBmDOBl
/9bgZIXEjvW/c7JZZ8tprAV5RS4RvIH4MZ0iM5A24jQhvXmULtjXgOPZGrcr
y5ZXBfsEkJJCuxN8bnnZO+eyrm8Gto8bsnAHVz16qQLXV2cdTwKYsl9f4Et4
Ze5QBDNarWT6J5R6mG54rJTABPxmIFe0+si0aDpRxcjlRG62Okbs5N/hH84l
CQeRmj9P+49mup9uO5lJsu2T53g16LOXTADvafzdu1fnLy7a7ZNt42r/9rQ7
QvcDGaPzDcKjBZVAZRQqXbojs+u+wLHgOozn1N/s/ikhz4R4w5T+01fBm0+N
A3K+Q1QRIlArbqEdh2jOfSKjtV38Pn1qJbzRoJDw7kf/ruMKmJzO595bZeAd
a9Eiqt4t2CuJSfxzpQb7ehAIjioLMunKj+aMqjVSZNND2XyJ0SArKK6QOI0Y
cnJvK/huyaOYjKbI42ZAaaLuxJkRZSw8b9phO5DO5AOkOqg1Eb5SQO4UIOzC
wUoR0vgxy0QsxZJeAD9bK0GuJ+VKrps2LzhKrkzAD1J/bUSZzG6yD53Iq9ia
44zUbQOru6iQXx4lfwAy/wElYrWMjWu27N8wtx7vPNkpWi6maM2SwVGOhKuy
PTu9TYNHKJ5T7K1UG3qWCvBwI1ccIKxq0UYZMzZH0fgJZspQQJNQIPrRNL2w
RtiDHiIyWBMBn6EARUzmp0/6GQZmBbezQaD21BgWu66WzDaYujBf0mkJ4VZt
p18URMNUtnpfsGdaOMH/+pvfBMllyH/+K89D2JNR2/kaQC6h61Emqfj6+GsH
YSrgLHtO2Or3ccw/TvJVI6oVmtAd+uxi6g3kbuYbFsCnkRRApF4varr1IixT
laVvttdvWnVeWm2BF2OVS/ZxvBNeJGJqzM4Ch7BYFBSKPOiT12wMGuGG+Mf7
+2WbDnEatec1mDGgVtjXr9DXr0CpWgHkZhduI5MK7LeE1z0WB5NxSacbWx/Q
atGFex32lgyVpgaBHix6gPX1CV2GX/zazyf0gOeEjMLoxQgXya/sU4e5NdJX
+Oce4zfcl/TmsykXuKFPDDLeNJyCw43EWQjg3sg4ZL7bRBzlpMmKtascdl2z
WzEg6ozDNFg96IIq2HFtJaL5qVvUNN2hGe4AaXWEx7xT6b4gakd34A2rDdgt
Xu25QQ+dTzIEpgTCETZoaLh5PtNwsJpXyPbnH0gtpXPgefmZiLhP2SfY62y2
RgcEunRZvOc+5hv7Bi/NqEc5FkZfZeG2j2RIj9BD9SfMnPAeSveJSu2IZ0tV
uKi+QtQohFMMxWCL2XnlV0m2MtS35tk0yB1D05jj+1ELjQji5LQNh2OeZ3CM
nxyn46LR0LGqXGHOFiD2HynKKHxaF3+mWSPPAASVMpIIa78oKwtDEs5t2boP
R0RYxWWkCrej+q14v3jqVMbHUUdkJMezO1CCbIdCTgOjOGO4BUjJhJ9SE0F/
3y++xNXzWxwDt7BvDHeM1MfEEmxQBB8efmcP9nZWMZihZFml3wRYI2GjuavH
F4ft12WHiuh1AML7ENm8JRwmZCKgPz0w+MlTeDx2IaSWiZUAbHvbAZGaWyPc
xSUeHjBsTNBsA++bALwgiPRcsuk+CA2Ua2qXgDokM2r6/FuGMfmig7j2c3r0
W//klz3MPWo/QTw5+y9pA0BJRzSD3cOD0eib4z0gJu7h09HoyfHet4lII0Bu
ZRLnwfOaFHikak2823NLurUbx7tuwfbl8xsC46a3gVr+0NklLScgELSdR+1h
r9/QFWmDIofWzxyaV9STdc3eBEvi+fusevRh7j1L2XX+q3SdA8+++25JBzCb
azD65Xm4etDV6zODZAebK6lh628tzmDm3Rwu1ywK7YxSpAhYOB9XsijHGE0g
GbkyINUN64CRG8/S74CRBIaac+Fk7yW9jvolA+0MEhZFa5InAVnj1PKvO1Hl
TpkexVBfusslfIbhEAMODqDoW1h4zRbKJOje5ei/Z5koSyOnOLwkSFHrby8N
kBnnMHVgVyiQCaPDAI6BCq51U+as8uQsn5j/SfI3sTI3yviT8L28Zo58lLoe
lfuNv1Y9toieHFQ0SND/QsKVqjzcSSzz+XghirENuqyou0STQwAzk8JepZrt
D+1VxBsPUqRcFIZJ4YoUs2O9oWSzZkmcc4oh1bwr3XDR2umk+teJAUKdUxnw
yq6zD2Nxw6dSGU0GM83fdsCIAEiKA44m8IbmItdkNkJHFky/cbiE8oRhbo/+
vCuR8zL5Feb5yiw75hOfqN97tOQ9Qxrzoc8lDISJA+lV8S4A0N2uF6huE5Fj
BbcIKyeXCbl0ZHWU92ePbp1lSZcOnl+7vjK1nAU1HNscOAKC/WpjXQen9sSJ
jlImZUhIpG3clNSwp0CXSTnpsnm+e/uKvZWMgex0qu+wcxBTqasvXkG72Dpc
PvQLDz7cM/Y3XzNj8jAbrqv5kG5ivXCORqPj4700vnG+GY0ePYIbRy8cjGMw
h9YzUhuh1xlOPxGRiH1N2XBNiV3UBOtjqHjBfEFp4AhGeATCgieSXLAx8Ebw
a0FAJYRvJT3idBqcQomWSuwHmz8CoyJEg29+nlbG8W08lfAlR/7Ueoz4Q52J
+A3zob/p7zmcbo5XI9/eyYSIMufVk/MruH9FLdAUTWzjPF/O0DLQ5R65O2Xn
GWPR348MKEN9Tq3sWAW/TyR8wl+Rpv7RI2VzLh0B4RZEIswIN1vDiQcKqn47
xvAak+f4XVQb8H4xSuM0hud0qOVk6CauchCIKesF3kBE4jnBBdpBZrkkdEKX
cxf4T1r+FoAVqdLDvQhmfWSWKB7r0/BmPIq/qBeor6DOBumjvRDWu1TZUkwz
zIuqCi+KWLzJhbecIHOKhHiKjKm+B3HdBxSijYEWIX0hN3JlZqlT5thYq3F4
9EQg6EmoN6ObDboNoRgt9RYTdg8/ortV4Y4yJJrU2NaFiXKY8vsNkT5SMWZZ
8xs18hcU3EtHxn8hWRulR/uEfsLa/pKS9fg7PIjyNzpjwt9xjvO/QMuDjweH
8OLt6atzbEvGKwTf4dHTQXr47AjndvT4yRClB8DfKaxKPA+C91GpAVh1g+pM
1ZwKunGnFmgTaM6Y7gcM7Vlmkj6IeSSj9qTHXWDWvPWKXCBC6qHg/iCzIuFJ
pBHCn6ly824Qwj02mWctv8vbDCV/Cf0w3tGUha3W4rbzBZCwEDwGxJa0e0zs
MDdl68YP0AvnWMgNHSelN7AttFK+66gzpnTZMptv6kL8uWN6oRt9BDtMeYcv
3l3qZpsTK72YSILsliFOw97YwwQ+dionejA8BmzB/z45QIShv44lWNOywELT
1+8uB/g/w0dPmPc+Q5EhHCp3rbenkleSL4gOhtwXQP2GKnxZuxGOzzdGedPk
y8DqZZxQjTWaiFsvT88sDFp9Wug4mV4TWtDikHiN8UJu8uCJzCsfpbshIdId
5TMxWsKZaUw9JelxKH7ihhIVWB4ZaxTNyd0hpEhAEkGkXzQpvHjM8xDlwka3
9k+fLNW6w4FHiAMvLy7jw348nGJ6fwdEZt284fqptCF6cjrXvI7pWTkVepQ+
kSaR7EOm80nm9B2e8qrAyDEYzpid1V59Q+E8jOmHxy7hkDAb7IeCY5M/Gpoc
djWh7enV2eWli6C/CY3/IfyZPpKRyQ0QAcXJaw4+Av/G2joCG3euk7TIEXP5
fLG+XUo425q8ra/++Mr7XiqTGlXJ4P35dJJ+ZbxmPeTciJQu/PkO7fmZJIVA
qOMu1DufuzwlcYOOqfxeuUdhEwfKfqEygxnMrCNUlqsM/+POVMxqmgxLB5Kl
qns5T+Vqicxp+Ioas2AjC+BZusyi2Fy2mc+UYRJOSvgXjvBSxox4sVFiPyXs
mji0utluhSJRu/hABmj1GRE9meaEHJO3IwXIRFOOIBXYXZo11h6j8L6MHaFM
3BWIB2wP6jW7DBacP3aj7l5Fw4riCt1QDayW7rdWkYtWBvtBmZEYSMzRfMBV
3QAiao4MJC8RXyTmsSUIOhh3lb4yVsv4RbnZgxj42/S6dcijtAXem6bZwi9J
555vgnWjEy8z2XcZpnmLQx/Jyd5juuIFaWmxV7oCWUtFvTjEVUUpkEx2PPYR
I22aFVKDkHTqFK093L7xwsbn21xGyfkWHQbCtIcFHbXZVgp9RazgeAGaVlEZ
X0l00oBqWV9rNTHH3afkS50vdUtIjdVqwplsUF2NKhG1x0ejoiWZDA+DeDcE
2grpKAxV9ZA10r863b2Cd0MTbRh+qorcveKfoovkT9raSO/MVvd0Zr0QS0N/
k+nQWAUm2IPeBKDeBYAPMiMV2a1ADuiHH98c5TJoPS1DOSnua58PH7shYkoJ
mISC4NhXIlctmf8a6Epx4sr/X7iUf51ROMnnrWZRLu+kJNIAc7Y0bK1BOw7H
Zw7HpYaILznbZ0jbh6iYzdjRlnV8agAZ55tS7AKxg4eR16a0jMY+2bBSlitR
Z0kn3UWw4qEqZiyJS6pWWNNIjVqanAYhGVwAu04morXCZmPHhV2JhoWMzGxU
9nYXVhSRjVCMcpYZoCCpxdsTMRydyBsdPqbP3AGOStyk62kQBbmUlVFEbEPT
6on55u5UU8T4rOE7//wv/y19vbSNfGM+y3Qem9s1bli6A812/qYNxBuJR6RZ
UJI44IAWucrGWRWSObuoHbzaGOpR8GqcXAiNbzc9TPCV0XE5+RVWsCM/d3RG
EcyhGAcku8Yy8BzZ9smTNhfUKO7fSwnk6QrS0Yvz/AN8EHhtrJKkEbVf1nxe
/aeoPuNe/zbdJ9PQoP2U36L/dL/S5+knMtb9jo1tXlOafDYnP6DkRN3T3T9o
8svXFy9byeqDaYnaqm0pzk4QR4i+hgNPMTcXVprlpb8Od2GUPT0qmneTHZ81
zxay3UTcfZQHLLu8U2TkyNNGLy+gN4U6gAVswzRjyhWbIk8PCTdpc6lAntAz
ntPL2SxGysGzIkFKmn1HKRZgNZfnDJZYzzAOr6NgDxjt8IlwjruqKtgTFpj6
wW2gKwr50FwoJ0bWQ0/jjTgGt5Qdw3uVHWUlp/yOyIkGMBIg5LSGtFde86EC
PoBG9SZMcFgLLTJunRWmC4gGYj4CM6Yg/UR5Bi2pObPpnEgjZ+ZIfLKZR59v
OkgFIOH8sihf4C0PCAYQLmp1WJxjUm3VTgkbw8QFuTlgmEAOmCOx5nkW3mWg
7RREcFHUGMfB6vnUh5YrZhDp6SAEPdXswCbBhQRFCLtIk5BaTlUqgKZJYBhX
RQuEWlnJKxIxwDCueKxYbn/eRK4gZH7ophKi2b08Hb4Y4P++pP+9EkckencG
62A6Onx7iuIvsmH8AQXzYskDisWTEB5SHJGu4uiYdJHETSU+SvymqCjb7vyG
hS63+hHNQkn6fCM9PcWeEubLCAJRTxZ/6HsayLU1vAoTTWyirNlCCfvRkzBL
WBwlYTfsgOOK1VhE8QPXPrAusJCEWDmJvMCI7jOW0kkHGS88uCgR9lOiAIZU
wkBEVhTlGo2TIAYmggjvA6XbWVPeFYBkqMKX+Cp8orSTGnp0AzrVknrXapmH
OZWySzT9Nbfl+naE1GcGBpfSsuSk2svUwwDRNI3xOB3Py8n7OhGLTJ3PqTjQ
MpdZcOQ9ZSAsK5fH3+USO6MkWJLUULLG5B9XIRXiH4CzwmBtrFXyNjZ3tmID
k47aLUoXhIGfOXNRZyDGcplRFixG6U8srjrXscRIBfLyFIVuegChn2RazCpn
vRaU5ebcKtm+gFEacY4Znzl2wNg5PRueXwyPn+4whU3i+g2qQOH6FRyVevDx
9GwA/3t+gf97/FT9UCWWheBAF9OjsAx2EGKfra1kcvAlOkn6Ru47OBoxuURX
wu3FQiNCSm1DYvUsJp9bO6ml5OinT/Af3PNTLHNKy11u9TFl/Yd2pHkMx0LD
UBGiphHWNVPOBaeP3X2N3jjs+8N+I00UoPYaBcRqkmpsEQtnJADgMk9SeFju
Hu6FPqdDn29+99EecPfT3Sd7olPKG2y9YiDsHu+56cML0b4Qpy4R+4Oum6xk
DqlDUkoCuSCtAA3WlH/IllpCDVeFWWtxQZqlQnz8GCu4U8UNpy9G1v9PKjAd
2CTkFg+h2MFmq259X+qXWZ4H8dLEHhMTG/hp/rmiwCP+G8su2g/mqxJgtUPD
5zh9fUCtyfkg/B7+qcaYAPcAM/B8m7QewGfOH+FR0uoAX/f6Mxzr2ML0udH5
STS+PPIzcI/iORw+STr9bJ0G1ox1UsXtHadoDXIF5XoNooQ0UGFCfqo4YcqY
grgmy8zPrl0D75k0ZV+CZRO5VkmmBaeyAErCUijeQeFoYTsSec7ZIMcizmeS
r51nF6p8kaCS5z9bePkr07c7y6XwzdItZeuy9XHxPOUCHdnguOgwX1PS9cGH
ZkaHmGK+OYU81UpsyWWtZEqyOvJH4K9E3AAJYonDuqwRvIHtSL86VPrB9TVa
qtFqJIxzLpqkPYa8pSHFBSlBRS8Z2Vw6nbBDdeiD1iyJJjmRtQb3BjN/L8Rk
4uSYvmy50Sn/RR5XsZv89a1qGDkdQmScMpbA6adh5tTNEBlHlSjR67NcV+iZ
H2LmiYvycxHXFO+jroHBFeXo4+zYS+VKh8VyiN21xgs4ZdUXxlRQzlnUYxu6
qkXi2hRixSNfZo4pww3XTFO4O+w/Egz84niJIxIrS87OZPgLSaCunQuyjADD
PjpSSh97mN8vqKs5qWG/hcjZ/Evy/l9p3xl4JygGFSFxtsI0KOjmkC007Xds
30GgIfKhIgFVVPMmD4k6YoNQ4KfFpsRGsTi7Fgp2xZLSnZYdUXnDhVRoHx5+
CSp5HdKH4TZsPSfdEdx9PY/vdbg7Jn+7AQ3V+49Xq+55o9GjI3PEk8tEaUW4
Tv7IT+RCsTMvDd2pz1rpzOw8ez0w6tHhIiCy5u02vIVhg9itoWJjuzL+hFp+
EDlyQVnK2hocW+Y3ZL0rZ/ri0NHy6icS2PgPuYHY7wO4rHYGS8oeY5adWo1/
d5R6gkZ3em0lHXT7zUkddtoDrK2XSvd6jm8Vvctb98oXsa+NfgqcLgLqmw4K
+heAhD9Th/IQOGnUfTLi/aOouuHhb+JNSH7xuFbfkZp/90orSKFDVmBb+LVy
LfzLmbRUPGHyyEmG8eQPWdWGOCJqATTPMckgCVFHU1OAc8tKLkmTU5SS4X9Z
WpyRZDutPIaSHa0RpRFZMsnuWGCoa1TIMWTrZ38YNIDA5lG1Ep4aq/T1GRnU
ihncYxispfSuVbdUDRvBguyLX+7A2Spu8rqpt2CSvQdcijN3k6HyQSQNtnBI
CSENjUgDvhfvslEU2+heilK3DwkCs1a7PikM+OD2HexGayUrKuigCqVQJfuU
RSnpTMEQMkqqacneyCnX0LFCyBDxDKWMR8e8s4J7jnmMz629EdT/aw/5LmxH
52C7Z2q7uHvIWf7CUU7jswzc7rgEngytDelpSN/3HTy0bT5llhkbWuihaU5o
kyt0sIlymwt24zcaGGknwKUJ7PGiansT1tazNX8IA8+XQzQnrNBg9e9KK7Eh
RbTobK7ZcWjKTmNNVc69qKKaDuFiq5wq9DhqNLVa2cQLyTJUUcIxdHcS5ciG
Z2H3KG0IpTrjQUOCpVaZn7gCeYu2DHQmBmquKwhwefv65YC5uHERy2AYYBIc
bjv8taJ/F+6itxTVlXqX/jV4D90NEUMC1sOveUSGpuMZ2jLS3fN8vJ6hJ3Sz
rmMCJE10WlqpkoMBsdA01VqmDGUSHMVPptSjVHcpcrMD+EiuT59+vD79QRTD
LouwidtcuhUdChIsY83BU24KnMfOati2RuQoNk7VD3AYJB2sJPes4kMxz1EB
FhdtJM8jachL4hjVBEjeimP7BhSpI2w359cPqLNEqsDDWMe0akTiZEG+kC5b
hWpEgxuJFs6iGFE1urTXqAmqML0TazsTYLz4B6d/3+BNOcFIJJwlM2b2nmSI
4PFC4UqYvCKh0ZZlyBuFyCpJ7bkeK6uGKS+XDOHbYu1FTmfAYkp8sgpzwJ8y
JhFTQIubUSqKMECCKd1sgjx3GWNs5UUMYW5EvuZy6WyJUj+CxLtHhBxnBfsn
Ntn7XBJVYIjCGuMkIhW4BOQl2Fgyx+Ol1VnYOLhJUn0HzNROkN84J+SETCmS
wzexCnIhfQPzKy6lSNNzGJmwcXZYLiaHQe4SYRWFmmPafM6oN6ayzyTSuTpq
WvCDZEI6JrwhllOE868h8nERDaJlkb6oVfxBXRVqT/E0KXw2xXSWTW4KAslS
QmHNd6SSgHOZN+h1KG5fopjRbp0yRyrP2SAiUGdVbddmzwJSLV/SOx53UpnP
5zTyAqKC3DAHUvzUoeeAnRZeoqSk3SJRD3/ugv0KiobBk+Y3N5R1+6qgct+3
HPldN9zcek+sd71tqKjz17WMhmEU6wrVAxQmyceek4QwV8ejJxpYw75SZdlS
yEi160wwUeKctVSa1SrmYNY1IE9REoHDh3HWsNR3S4RNEtb48qOYx0CdIhOt
+evrVdsgqQyC2p3FikNtQ1sKuw1lXnHwNetRKlf+lQPjXaYVC8cW5EgC1uRa
nieodXxul1evrxNJ3uqIdcE5cCh07iaNazF3PUKzkKRHVYx8vrt9RDAY9Zac
NSc1mkoS7g1eiEgRq/m60pjVzqEnhofKsyU+X2qmRhi+hLPZrMpn5ojmMEZO
jC/oTRmSKLkS3unYXksXCmNG6ZMk+C2a+SY4MqgIw1XAJ1QpSTsCNoEnzvk8
OXtqwndCCNgIqCEhuqR9CXsjSlWXLmm+SZjEGlRCNSGax1Dnwb/E+zG6tDea
+E/MsVTYImPG0hALSSJpW3hDAtVSsuGqF9dKI/rOq9o6L5g/IHmaIrCjKYly
MZIT7EoNfFmNjhVJoCjCdAj0iAJL0k/JNWGihU7jXGiQ3E/cOogRgU46Doe8
UDtUDDnBRNAlFNsxVqK5za1iDQdstgO1jLIA+PMqcFDyEVCTxsptb7ZNorUs
odco3v39KyRejj17MY67LsNOx/LfPqBG1QPk9I2yTfPNPdNBPjXa+dbMVq4X
m1s4ocQjBslsmnOpScZhtxuj9DWgetKRR4P4KZCPxaBOL7iOhPbQi5/RJfs3
gxbhydDswPL7taZV+DJUt0+npZ1qgdfj1QPUTNT7kOlCkPGip8Tx7iVJ9+Hz
dFoPFef3e1XjBq37Xw8JdiRpfqmlX+sXmpKuYAjw9h/BQsKk+/5xdpcdabIz
SA/SbwPS9v+Tb7QVfHToPvKr2/6RawXfH/nv/Zq3f+9aQQePfAe9kEglFU7P
v7jj3q9hiOM0snBYjN7ui7LtdKvvVOmsv/WIcvATovUsN1WKhZ/F+iZiGtul
MZRtIJddMsK9gEcNXNIDsj/Jn9lcH2aY+yabbMKzYXh0m2dTTeMGol8+DWa7
KMccjv/To7P0h7y01Z++uUw/fYKnI3gKkPj8Odml2XKSR2DBBlH1eWj7w9XT
48+f9zSs3ymeZWFZJVVxdWLw6lX2Kt29mZfE4A1XZbEkJ7xhNpTSaAEEtA6D
QtuJV9Otj/RiZ77e7HhaUwE1+0vyPhyEC00KDgmHZkAw7pGI44STYnMwOrGc
lAOCIqzG+U2puaQTTTrRFZu5JEHoclEs1w3bDYDFqmqNv0nCBTfPNHOoBidl
6Q9vrtIayzQDMYXr/KIQK3ZOkwFoL5D1StDIHarYiH5EXadA6gyRWrI0XtQo
JZbYukpCH6ynk4IQGQncVM52GHysCkwvEWMAOkxSEfgSc7lIaCX9IBdjsvit
G4kYsUK4UjzClsUS+Qd0NJaELnRuJiAuxQfMtk9DYTgPsqUCoc9mlmBbVQXB
snEtDTgyvM4B+lRBEcMFtPOhqtS2BC+Qilgbb49Z+PLlZgPavWZPRF8f/bZo
g7meGkwLxgmV+LkdoNaLfzQS0vNGaMr2b4bbm+hp77xgmtR5HHAYXv07/hrC
1tuAM5rfGl29gA7bMtsXir4ACm//8DoL629/oC/cF3h/GVTaH+gLPwLeVwaJ
zgfywn9w7EZwMIxHGLovH8MHCtHOCPLCD5A+gQ8Y0mn3A3oRNU/Tb+CDsAet
D+yF++gprmGWp/E/XcMsb/Wfps9Sl90nXa/oeO++o//GOnd+F9nLNIuy1lgj
HtNSLEn6eHWESeT0psFvGs7tCmlgR4bwmnvKeUmklyWLh6VDosm6hEiAo3tu
odgV6VPTXRSM0jP8O16vNemxZPOnQuR4hbxPWxeBFJXuGVlEeiXJPy3CmVUs
LgXMCq14NVVVwdwauK2lakPYjvQAQJCthaZ7PzBqxEqGBdDWaRcU2KDPps8F
2ygeh+KOxLpAvKlEPKvdoo48GOWaiDP9cc5WYshC6Cn1Vee1BexGKl6BtmQE
g73JK0JKDCyz1MI8zSLUmWdVt7qTUC4AvF4qCR3t5G/lhBUbi5cURZB8QtBz
Zn0tH1RLHpdse/DRw4LvAoZoqJzuyd9xoQl2YC/OHFcgczhERiO2ygFjWKe7
55htAi7+F3nTiC/a6QoZvsy5sVJb5czpx30Bzvd0CeO9eH1a72Gcc4p/YlEW
+A/b2zMXz8mqTU0bz1gQLF/qq+e4IK3xO4rijaPPOtlOM56DJsvgSllFXa/5
9Q9sX3kD9x15tjDTg22MN+fojfSsKtCYJhUruFPivzS6VDSYDs1bC5KA9/YU
Wh95D/mO/cWVWQvfuzJsnCDDSmWNrIhfHY4HfentHOvlHONcWiynFVQmfjNa
ScfSj9CI50oRf3LVxKE23BZYXNMpE77IaaKdG9iK/o5pO2tGjCEwUdo9V4UN
DzOLQjd5MzE3M4vOyCS4gvIl1axA8qs14qp1D4znD/nzXbAF1nwlEkGjqesU
TSokgg4YYZNogbgnbECTbnO6GhFs2HOAI0ClTJWEhHPYmZau0g5x+HdvL03J
5MYnMyjxBJ2vgMDrIWLC5CwPLKjbe+QOZE9E4rT1RzZ5b9c25TDhQBXGLzR5
Pw9i04m+1hhs9uLAEl/ixsFbolsQthvWP2gviMvQk4p40+28UxJZyZ758GJG
ULX28GrFN4NDalRzD+QmX06tHo1Rz4y1o+n1iyuxf5qAR515XBXBHPP6cTnx
og4WZgbDypO8zmos/ktIj5x4flRWlN6TETbSRD7cVZeumHCF/Zz+jh5JrmV0
jQw/1YUKn/xqyzxR78HhuirCe13Xr9T3CfsqivRDDdxafZvY48r895xf3Ut9
Fm7N4OYnN2fHL9BIgzOH1Wy4km7VdaeMcthJas4wD86HWzcc4Rc1DolorFMS
vq0xR/AZxxcqXTa31qmrH1PXnFHFnlKc2aa5tTrKcOJq5+ZSuskMwhnR9B5+
BFZhkZZfHlMePqrO9iH2ZAlFaXyVKHRLjjKkiAVsE62x7WHV9YV2WTRYxdWp
s8FhC6ip2LAdSItpRx46snirYRpRCXnZLmZ7hUbLeGtDvFpD4aO9M49tiC45
nWbhFZLvrMEbLEjmKxdI/UvVJEXdT4g1EXMsNpSrLg7hNOdOrRAqc48mpzo9
NjoL++WybUixLvk0hgVWmtXkL1SKrD3Rr2v6MCMjsBDRcR5GEbc+jhGhPqIv
yJmY42W5rNFt2I34jhUZyFgVrSh2U7a/6uRHMQdXq0QX1ftgGFJA7D+/fGGP
CbDOz69TcpIuwLYPbQh7JX7wrDwNZR2/l8hYCU3kiihHj6nSis9zsiz5OxfJ
1cr7Ea1KsxUhS6d3bmjfz6n4miBemrDdl+Q3YV3+DurrBXgbz8mwllV0lK6N
/1YB0QukVvY5YXVUeesZJMRETi6vaLM1/UJY4IBq1BATYAFYdEAGoe4p+6qS
hiYq9EDHhdXF9FyHMWBxTvs+LCPFM50peN+dYwtffQg05tT09SnbB4PK7+jh
CIe4YFafNcesKbJW4d7LJu+zmRgVcPJML71zKrFr3e4lbQq6S5nCQeFZt+ug
IiV3Xg49zvh6rBhjQgRCEUXL9y+VEue0nd0dS5xtgOUIp13kM6u/wM/1snd1
CqUskYXQJChGX727vB4pF9IKLJBg5D4iVtTeZ08jJjz9ULJmSZjwGlhwrEZP
qkKudhMElFY/kZ2DKaM70eYXKB4jcfKllm3t0yd5XmN+UXGkcWYYTQjFvH9r
HrvAqLFoR6n/Hs6b2u4G/jQ80sid+AnyqL+zVkOewC+hlTwxVlaymtC3J/Q7
Ww31odDWqCE/OyGt8G+s13E53XBY9NagtFZjio7+FpjdpO8FgEBi2OjnWmsq
Tsr6rpi2P6E46v1OIPWDukZc/vViyU4eD+7Yc+iuOnq6+9L9cuy5e2ocunt2
L5M+SDHVJjn6hWop0ajtmCFijfOP+FWLQRdNpNaYxj7QrI5ehepBHtn8SDPK
wa0oKrCXuOhR6ZgEv3O8ED6UyFzP1bN8735+OQ4iLUS7j16KlmunxUpb5vXW
svhDKmldonVajY7KwFDxOeeInsfw6ko8rWw/NknhYc20H/QkfTEpAcBpADCD
NLgVsQNocKgfg0i52Ysppxh9s4gU/6TClpD9QPS4ZlLReHajRerlCmhdDJza
gkiwC6mW/l2SsNGWOuRhCrBZnrFJvxc2jeDusrd0BdV22NpfQS7dmXAU0z81
otl+KHTTPw60s/v0P4p++p4fREM7H3g62v/yi7S0dxL3kD2leqiCdFqJ0E36
lssu9RJAKcnkySA8iuKLVZ+ionFghZBpYEsP0RN0kgZiImUdPUlEz8mPGNWS
T0PpZvEeiVSmLn2TxBRqVW/2Yi1T5yHLc+cj6wZHa82aVFyYSrSYrzG2Cv+g
z9fA2I5GyJg36iQr8l88aS0+lAZHThLInV4fv23H/AxcpNxyGtxcW3V1JDcO
R3jJqFNvw/JOpwoCpJRazVK/4VHYuT96LPWURO0FoHh99XW9ZXaWPrBYFbh0
crAtx1xXl3RBlsIizcao66BpoMI2mgdPzkfuWcmYdtiRXpJaKqvHj4v03YwP
LRoep3r9iTeoi0OEvVvwB/PqTRRP8GYSTOkZKIgOIaSYoY0IrMkayJ+6aOE9
9Y+GRB1BZTiNcMZJ+fIzU6ykyDEfXRALavibsy1S86UQyj+IwitSQ3FEYK8K
qu1aNVHOOhw342+sTzl6ociFT8zXy1lhTYCICQMunramTRk6i9NARV/gwiNO
0fGRIhGOpQquTbL0179ziaL8J7SjmMlfkn1by4626/riwnue+WFaflaBsZEM
9CiUvL6ygFT7vr3+YGrhLwAeP0mOnqWpVaP64xLE4twVBkE61f3TjCkWzdVx
qNNE6nVRhVwkLbIrUn4P4+s40QHHRABO3BSzdSWq3qCCDrGvQJeXnDrH0SfR
8iahqkXTiTuL7yAiyWRsm0fXgyKrklhX0Sr+OHzkbpR+3DyN6wk6yiSdFHVb
K0VybZwUqU3VuKAObC/mKuf4UircI3Q/zHGk+VhnuaSJIpzp6dINiLmk8trl
2Pf0lGPMQ6p7LW38xVWGDJVcqJomK+F0bOulAiqhGyskSf3zR93c1hwAgEWJ
ASsHzsrNl/aij1jrKvAMyMEN1TOlMKaWFKnbGkeuKS5ftM+gYH17YwhXazHW
1SdJcpgOhx555I65Wc9PkpP00q7G8PzLqHbU6hOvEuyNZSN7TBZUSfUzlahn
TtvEjcxI520QncEetQaj0M/1cst48lZq1lj0U15VJYXhT6WotjrS6EFHLoI4
LhRNYdRjHDU6CBic2uioXq/kGukMsg8AEUv9Eab4oKqvu2lbYBnKbge5xYQA
NEn2tWQk/iWNxZnWa5VTfAtG0xOXy6Xn+xMaN5wgeZ7+gqJG97GOo6MXU+4/
3fdeQQPX5iQNf5P4NMBkE4l7AJ0GuA4d9rZDLVwr4rrveY9O6Zi5q93EQ4Dx
IE2S/tHT4HbJD80xEh1T23Oxf/INPvSelEfxNzq/6Bt5aJ+he2rPhKNv+FkY
CT1Uo4QtdF+jAGc66T1Mx8OPP4ttUOMY+STjOf8ofPyHnGms8SuYWPc09ZVs
RZgry6le9hazRt+HT/UMLdZLM7qKU95PxfD7Qurhzed4HPcwiOJuuKLS0dl6
WpR8G8GlU6L4sRlnk/eBC7HiuMOyKtgdyw0sxgrkrbiQ0xW2ztML9upg02be
TCQHtEQKl1I8V3g64W/oxJE+eMbFjuPYWLS3btP/q8HUq/h66yAn34lJ1dKQ
uDBUsidSZZsZ6sy0tI0VIMD8ZvK3Vtdigy2l64pqe9xQzCf7KZojqnPPlfm2
ajhvq978RpTng5YifUEuQjVVqywWJOv7WVBFC/Uh48sZiPhqjePrqJwrxkWP
sm7eefdRGRSMkphwpENdlxPOgknfOjrvutFLOLBxLwBTUI84cMxdPKe+wtN/
9/SoQXdebUv+qdsmp0nBghDsM13Op5JhL6QXdLHkzBeFPgpKSMXyHGpk1ZUq
no+lcFqNAgeDPVPkMSp7Nu0A8WCFtpsRS7rUjVoBEY/OQShF97ehHZjheTEj
gxJd+s7qF88HdRd59SHnqBbOhWAIREpq4XdDB3ymE0vCGXU2dkifT6We8HzD
uK6/QL4Y5UCqpjLr1nZQIW5x+8y8nJRpAmOiJ9W4QG+ijUvCgGAhm+sfgNZ9
QL9KhwmiipbY6OAXY5oMYYU5qScClsS/VnIAm5gl6hi1qZSy1EL82O/G+QuR
dIgXATBg6+U0jOelwh7HhJBpVN0J6Cu7HrS2UBt75GUwuVqFoCy9WVcqRZdY
84WKskZfkzzv+hfeO2SThuZDM3RIGg+aHfkthnqohhfykYCMKo357Q94LuXB
poTJLL0oysStTqMDoXUC1QgAsL44veZpXwVkRYaJLS0WNfWKehleE1zbDeie
MBKjrhyWVzQNlpvgSh7Z9GESdVcYMd43iUZ/zt/6Z0nSeZQ+J7aMXAPowfCS
XNOH1JKbMOcWHnSbSMfbOtCUzKQN/w2sQl6yVlx6uHcKz5m1Te4rK0NsVODm
P2HdGJQ04e+waZ/3HE+AMLLegG/uQmc/jpHdSiWFz4sRpIMQ7c2NHDJocwvK
mEqpXETa0kPHdU18Dx+A/6NE5YWvG6gOYNi3BhA22cxlK+J0wVHBS60bfJvP
V7HHZ3RPwECSSX8rztGSrsipr6xgu6LfQyrnCbu18+NP1zsA3B3sjv747t2r
8xcX9Of55Q8XV9c77W//SDcdfAzfDl/iamd5bwh4FxUDavV+YLuKmPndmirn
3Nuus/tJNFUVzQiqJ2kPDEgqY9AOGbSdZrRcFM/uXU6fBf4/84TE2xuQfito
pMJtcO3YQrq2dyDARIv4MJvPQKRobhepePfupxrhKDRe/514IdgcfF85bDYl
qVUBCbdNO8zbecBokbTam2yoGS9rCIQ+xBeISPXp07uzsyuK8Y6noOU1KIdL
OKJj9WuhU6wJ2oCJnIonJZ17lsEsM5JkyZlOLahX72aeL9KWCYmUnE8XHQbX
s4XcpziLftIMPOzkPaucqVHPkcaZ9B5X/hSlKLKdT3Nxfcs6tG8QXYoRWwxX
dl4tWtiDiUEJOlq9IsokGX3vOV8y9ITsVWTpGYipJ4vRexByK7dUvBZLoW4Q
OvTdbd5oRHlrCm2GO7uH5Q5ujRbq4D0b46USyBxn2Ny2AzUszsLi6v7n//g/
gIr+z//xfw7wT9xx/ZvpMPziOXLim2GE6o0xN+ghE+H34MsrV89zjSNiPRSz
846yD+4l44M+mj3wU6Z+uwvXy6V3ovfIQKfmwiNdhfw3MR0Qdzv1Di+6JSDb
B6HN4fHU+GIn8xWXCO9seTuNU+tsoBzqZxkN08crs+jfQrDWd/dBKGIotvbQ
YbHwS28Q8F9GNCI6m1TSqMrjh+qIwwJwP1wVAUKVWlKX16uS5agvXGTtSFMh
urohrVHbzJN4ajt6JrZbrjcDXBp+uV6y43V2o2n2PWTvqmy1krieKl+UH3rX
C/+dl3UkGLruiGXY1lME9FY/neVGjR+8XFkKmXd0RNtEqaAjH8eUqkWdlvkd
dxIdwXLd1FaA1a7tGyEO4UbUyxn6ReoFve6JssPPz+X7crSS1Gdf4pOHwX+a
GF61cwh1lrOGZzy4DUM78eki8w7c15XI9+K///jw2efP0CFxzl/ukfRPVtIq
OoZmb8wQ9bztDZAJptGWPk1yRqfdMZFcmIcw7g9am0eWc9+bMN33sF0IQzm6
f/NQ3TN9/4CnZHfCUzCvc8pEOzD2CuuCwsSZs4qrknMkhqIkMl2c00bLmcc3
gsQWaMk5vhybfFZFPjRL/ZaCY5pIzJS8qFox26sYJQXZVZ9qhE6yY+6FjzDf
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
1wrcxG0ZJ0IVnqtEIW9x2+BlfGVxm4zrnZC70xkm1ckQTAfCGOKgATjPm4Wc
YTkVuF9RJtBEVJDHx1M8R+ys8wu1prhj5xWE5NjMF6TJ0ZwJEN44FBYs1xOs
ULMQtHj9UuQuFiZS52LOzlKti7o2PkGPA6+dOtyRuopRVCgIljgPSbsWUsor
HxK/LQrWJFrIHWTBGVjUikdc684tm8QRJE5xk4VIc67mygCaYKsAjYN6phNG
PkM7xWtC6NH55XVxRZxiJQrfjQORnCkmLj66gr2NbWeb2QwDFPBuLVfsCykb
kZPJQXg6fDEsOweTaBHVxTNITn6Fe8/BlryLxz6HEu07vrwDW7+BhoeRIAIY
U8Lq5lNxuYSOx3MDYZpKZw5CZMaqpusyLPVSA9LF6TTgqQZ/a7Dz6PMnzuc1
kdp1qqCBSL4IC0yrocvqWTbVsPpeAamvVIeALksQf4W+I0iblRki1xfEniqa
IrYJvINuBKxCfktj3ufPNJ/3o4sIryKAdDP0MeZrj5CnJr/DFFvBhiXQra2i
Ibrc1mXWGzkycG1B7Aq/J+goWd5zqiBRYjXs5UlIKGTPErWLy6V4iOpNFv8k
hQA6ZJgniZs9r6oN9lc3PLqXRkROPPZa99w6hekglRac7unY+3tEK7yU6PO9
ETvb4CiBZTafgwLDRRfOcsuiawYTFdq/FO+9c4OjUT4KoYTb4Y7CGQSYwtIP
/82BjoTIuJ8dcCfanNMM++hyLSG4F4GURfljWnyzZty7T5xPpSlDMLa5/M3U
utThoqItj85hkinqNrM1Ld1QICtDuf/4hZWvn51fGRE/ziPio5clEdywRGoi
cHsUNRARo3Qx8XEdYEVA01luxnNTz8kF23/FTVPVrvz4oilGHkgxpgLOvumt
4b0WmP699+9zDOX9+71KzH5yheZ6qrnucHrFEskjDGbfM07ZMckL1gD0clR2
Ik+vr9Wsec3uZ+u3wcvoFV24R1R11g+7PaQCZN58njSkiI0o34xFr8qu0QLn
C+s4WqHzkIakGN7Gfe2SgVDkpWC9MtyYaTjshoJNRtkmloeCwItQOJILYQ9U
ZEpLwZUwOSpVlChRIgpRyJo+D8sy5KJcyvGL/3SOwyPGoDefOQzEfpU/QY/c
RCPzIu1n0DR/20MPZ/4R5W0K0h0+UuRLj/zT47PH8E01Z6ImSjToef9zMc6W
fy/OCG8vqieE/OCtiaU5ZrudHi5NkXKjsBXzBc0w7HT/HabIIU3VkzyLLxOL
K+Lrk6UZSjJX1Rx72+Z4GS3/8rl9I/le/svj59s20n1mywZy6lmePsNOf4fd
oxKLDND4r5vsc0x7q54sfVUs2aJZcVVT1yS64uQH/w6ka2b8Hedm3bHB8pSp
/0F7UjFjzfTKzxmzpcLuVq5E5V3+8hkjjQ43YEKAaEJrGEOzqmd9KlDMuSrx
WTpb01KgSEAjEpQhbDKiJhHvcwv5kwgp0EA33LYWMCpQFxZ/+WocYbIlQniv
N1sYmFkFzshEs4syNJ1IvKoZa55mccatbTNWEFa8l/zX0L7GaG6XTuflGMyq
uZoU0+Jk2/8nOTfaj1o169adtYF1tqAfpyBs0zY0PbY43862+SIMM2zsS5Yg
f60w1uSiTIONtu+vVvkSnxBdipjXq6U0p/oWJ75VDflXbPRbyiaunqX5rqxS
cQ5yiUNvm4nxB/6rhDHFzI4w4m/7BoqdQOBX7u0PMhGTZIa3xVTZj1l21WLY
pN7d1yPhgf31a4Bxw1tOsIphdHJSSC8VWt42Q4oc3nmCBO7y1wugZy+HWyTP
yA27ydTvSzdCR8l5sgaj4Vm8XovnfYhOWLBTK4URJbfvPPN/jSJyppoE/nkL
iUcm9cIqH6vNYuFUmZCwiCqGxVn6O0/9X8GvzMRv1TnfcKycRmr8nqlv1UL/
LWZvaqFusTNMqVRx1Gp4kVkJupadzzmA/fa1sFAK/2aH4LkD2bBlHZwniueg
JqEjVMskOd8IIJ6pM3/3uriIEf9mS2MJxanS+5oRLLYfGYG4oAtjRktCpUab
cufLDlPKrZpofYZta4T4GP9my3Oq+dNvszv1WyfX2s20rpqtAKfsPNm/0myx
CdpvX78o3K+s3fsVyqLhb9GNtFktvtzPQ04FLzdjLkQgnHXv6Pg76vhMvnBu
Xij6GZ7gNJF8NdC9BmosWmmpRZVZvN+0FapEal2ld/z8BrNWCqW/oSGcIX9X
dh5ar0ypoXwhMWwok5Z+Kznpbmm33BDfh+E105vonLxBVdf2t+yep356s7xy
G0mQVFiNDy8jK7cTU8UnEnHr1AHCIlEmFs4/GZ2c+dkywgAekzCjpTXtrSTH
2eTv6Ax/oC3E+dF6UVGvU6p24usCSu5CxR7im4dH3WYIDxJvcLelaq00vgDX
tl6v++No8pHqLGoU1+e/ae3xL1KXxtQijzhU8XqBE6KEzlxtOCehhuoDuUVJ
IlOWpFYZQ4FXPBsupufWJ+EsZe6T9vWaotTs3bz2kRQr9UlINY6fokUpFpHT
UlmGXfB22iANrdOWrMnlyCW3swtJfzD3XFRg3i3P7rbAZbgzLoKD6RXvhq9f
nL54TPIjc96j8Udc1ZJRPdjc4hiZG4oHEZsQSJoolg+DFp7R/eIY3TMK18cY
fX9og/M8W+GGK3nmUjM5VgVf4Qhvjt7DZ1WjMaHfdi+lcDlFvvMVN60OtPIg
M6JQqo14D33TP4eJaytrzpnQO3IzOswx8B96HiPYPfTN7Qv8zj9B85F/8WDQ
7s/6/W5zGrSidrcVP6jJC+ILNI+jG/ARZY3pE+I7c59oPfLDGn61FVH+oUWT
1RfDHrz2j+21A+jnru/9IAyw51E6fEUiDZkF4hQM6dtqLOPiz0NOqdksKaYT
7OxkTr/t/DrdOgux0Y0e7zHsw52v6v6iPVuXOwXB+fN3m8LDAmk1EJmAK8ML
Ye3ShlHC0CKraS5QpgrrTuMgfu5ahFxQmSsoYqDrDm18BvLca0VhuwT/rY/c
3QYQxSM/2PL+rm34AQxkOLnkFXx5VhzPTuNo4WQaQWPLbHYaB8zlH59b5dG0
oPEARO9OjeDPtkbCLz/v2Er3kf/5tkd2HUnQ29rQzm3gT9h+hPj4l/H7dRy/
bzXiT/Hefdr4cssjO7VxSwM7tnF7Czu0cfHAj7rNZrfdanWDVthqNyfNoBl0
xzvwrnbQbXWn3U7Y7LTbnTb82551Wk34pNUK41awQxPwWLsZ9sMoDPrBrDsu
NrlLE9Rr0A9h2FXN7DIRM3hqJmx2oyAI4P/9oN+Nu7tMhPvrzHrtbgf/xRXo
dnr9bufBHW//fOv3P3tfBCpMJPqwqApoKLFEkJ69k2ROEGKkkJFazXn/mGf7
0COBQ3xWGfzZuxrFebgse56gsMUnqKqfqfqOP9iG1NRdaiOkNwStQT8MB62g
u68qxFsOCJbBoljDzy2blsdAF1N8TXtGmRHLEypiCLfT8oIiTyo+7TbqMlTV
cNgIctmCz0xzF+FtkX61pfzozE+Zdzpvgh0d27+KbyKflgWirU631Vgo/Hy5
pbDSv3wGobsl95vGXQ/9rFup56I0gO6j3DQbjQaRc+k5kiu57vjhrGpJqoTH
nzKfL96XAwfH0rnyQ93wMMVq1HhA2T+R1/Q1QwGtJlPw2t76meqgbrYNnWZO
ZedM72RZ88emm5RQxuaCmtEoDRff/v0/D2nkAtPk2kasE5egMHB09i98e/Tq
LccViut8ra29PGsIyNY14+5lNkuYdFJ8mxNpRddlnI17jPyPz5vXmTDROCs/
8i0mlCTlU7qYTr6hb7+S7GxBcUKjWOurnKZvuOHqufw5IxcUFe3bpBwR/gTh
kqjxaqfGb1dPUIBhzCZL7G1uHn985N9ItWGHwGUizikBHoXgAkQSN0tK8eG3
BZckXlwlq3QhMa1uBWeRwZia6EdOaiLPW7xRnLBq0mIoADWZlk9rwxn5vS3y
vrXJyROY03s7XXylGQz6s04zas9m3Umz0+8GE22h2+rHkWvU51sIO31soA+d
hq0HaECfHqNQeHuqGBgcLGesdwkTc4z+zgBb6LQH00k8mfTHg35v0mv1xu12
3G7OepNuqzOJ+3fpTrChmI2C9wFIM9wJM+ua6bqgVoRdWLB/7AWNFtlVAVov
kr4ZrdYLLvztm6HzJaMz+7BnJKGrb5S66aESAdpGp9Hhbv6gi6SF4zR+3Lo4
S+xAbfWsfWCaB/g2bHPQCbuddghbZUbKYR7wW9gtSMahE1gAouIiRWgeyp/g
qGpHSiSryQYBR+gYWUG+Rx/s+Y/8kiR1qUgIaDCOZ/1evxePo6AVh5P+rBv3
JuP2OJi1u8FAKdC24dKRkFAc95uzTtTtToLZeNBrh4PBIOrPptF40Gr2B627
SChPRjwfWQKXkNwx2J0WWgobzQirUv2MvqACJf1XNvvkLBBoZXcseGmt8xLY
XWz+ZLfV7gZg3CEJvTp+4Z/kT6l/9xTbjSZRcdVZcWYn1SnUZiENRmK1UM4S
h3QcpDb48nCeoh+87LZ0E3HFN710Gov8b975Y3w5NwUU7ZsVpgTWx5tkLtmY
ubTpl4q74MKmcXR7pm3QPQPaP65qInkcC0T3jBQeBauhiAhD6B5nHOUEfg2o
Jae79FCnkgoCv3LpIAdQG5zDGvkzEBIHDb/dk+pEWjc+kZLa+30OsKUpwXZ1
+U9qA+/aDv6Yd/cvkiTddtgmB7DiwxzjhcFylYBEfMFBUA//DOZ5Sx3SrXKC
7EWqCYqkTyDsqNKUj8AXF3weszEe0n/P1pjxn7sTKNN46VKA82wIbkKTvfD3
jBpTwiqACDGgKyNusIbLyJKoIjZIZXObqGiA3Kx4FyDZt/V0lTD+ENg2k03h
ShMbcBQhg4LjkHlyflFn7KuXZzVOM5fDrKog+Q3yQ5M67kMBL7pFHf9j2qCO
QPFRSc4VNqJiFnTrZigFLSeEFUaS/J8SOsyhxGp75C7oLLOXKzTaBbZNMCZ1
VcQMM6q/WR+7XGYK9PmDrLidFkeGgODA4nNkyjfPcDJZ6ssICM1MIOMURWK9
kyn0p+zC0JA6QqRxaIOzB4RL6oAf41ecOQXj5V2YU8qVma6uGaJn000gLRtd
9GUO8ndkz8IiB+tDN8o+3UOxCy0xF64XN0tEUFiLXaBTMFhnBBWOt5x0kglF
DXUKxSOoXNQ/iZR5nFlymSCyFyzDcDFdIWIkcqJhTvqVG/h/59YPq+XdfrG3
49Wcf8vl3n2a2HLBt1MTFw/IP99v9bqwqq1Wq93C37s79d6cNJvNoDtot7pB
D17vgoLdHaCPujnttnby0JOPPmzGzaApXvoeWG3QTLvXAYOt3Qt3aqQ76Abd
SdhsB/BaG8YxhRG14VMYETrdd5tOuIM2f7s/nX6A4YwxCVU0TFGidFf8nTbm
oXVD2dgUworWB3Zpw0d/vURnjaLVOF0ka7qEum8bGG4KbQSNcK/4wM5tjNgv
+6jigd3agJ+908V0gxfRwByHm3XKTsa7r9WMeRx/WhY9s20wY7tA96Al9siE
CZthUA+a9aDzJug/6vQeddo/Gp6RuGyGf7rSQNBr9pvFBrqPQAdtNn+sHmC9
DyeoCRbW3gw2mLRSrI619dHAx7vJh0ZK1+vAchCu4j3y4KKpxSP+6FxABMIV
j0fwTzzHSLKJDzrBlcBDfAI946ZiqNCKo1mHyK5b3W6vA0euOxsA4+hOWrNO
MOsA4+6NB20wnx6UZ/FQuqJ26joW/gwOy6s6lu6r6vxTfZKmKxpAnTrvduJp
1ImCsNPrTcJxFPdD4EK9Wdxq9XvNINrlvAfNKIpavU4cjMedcWcaB83+NG63
BpNmv9MJqidw44ykhSMJ4k4YT4HrNAMggllvNojbzel0Npi12sG4Nd1lJJPB
OALBF816cXMS9eB/8SCOJ9Nms9+eBoNJgS2pke86W+QHS+ghhdzW6x5qZ3tC
SNwCJ2K6qqi7DVUi+w6hbd68S3abB7fI4ltnQj//DwljK457rVZvxz67nVav
1e6Oe/1WXwRyf8dX2yBeQUIOwEI2d+s7vtoJW2EYt9sku1ssu3d8NTghEX9s
RXx3sOtcK4T8rq8aXQDE/N1UtZOgv13S77LjW8U8SsndGnBl/BGp43i6+cvd
GxAB/zpsHIX3UhBul+67NrBVst/ZwK3btPU2FH2Izp/4u+tTrMofyASsD6+/
9HK0FH8p0a3oKzEVDWaMfE0vyjUnBb5qQKaQi1xtcJpBLmXj7B0DwMiD7Eip
CskTK1MwydDcxVhVDq+F76ZJdL5IEcOIOiuEcboBnEkmo3YGrUgjxqniejMk
7MN1nZrADeMDiRwPhYLfYPsgbfYpOo8DP+hyVefu9K8XfmgBR5lCjkYmkPCA
h8VOC9OR5KdmbqU32zG/giEHtFSS45H5ciFnB0g4vRsJWcmlgsiimx5z1u8W
d+juBu9tpu5uRq7jFLUXa51oai/WRkBUXM1D33E8sTv7YP2yTlK4ASr+7Ika
4txYlNSFKn2hwt7faS343dzm8bL02jsG5Oz00J8T9muG+0eCf7WR3x0CLO9b
PlfFdnYNRI4RyhEPgBMKjG5E+X7HVhAgMDa8kdgFxtvQJ7u34rKA++lmYOl1
JZix1WlOdlV6wD7oTp3AwTCcghIEBhP8O9tV6XKiHzm0UVwmITa8qyJE/bdD
0J1a9BvoUOiyQVVsZ/WvF3JEZLOFoYz9VtTCYMZe0KUJ7qy5dmDoHVRAZ702
/DvrmbDGYFe9LoiazXZ73GoPmr1+2Aw68J8mtDVuhb3Jbn4fmE5r3A4G4Xga
TlrxJGz3o3AQhkEnjsbtzm6+MFROg/GsF4EeHoedSQCjafcGg2aH12bn3QF1
GPYC1qIDv7Xw9zDugTHUbd1rTZqTVn8c2DWZBO1wPIjG0a6NhGBNtMfj/qQH
uxR0o3ZrMhh0gKWDdR/tZGDDzxis40GnF8w6ne5gPO5NJ0Dws0H/fmsCIoa0
/Smq8EAhE6CYMGjjNMNdyb41bY3takTdaDCdTGfjVh9M7GhXsgdx3Y7bcRD3
4343hOXoT8LpeNJrggjZeXfarWgQtOD4TuNBq9Uax91dggh2sUfufOT26MAv
9pZRo4EXRaZt4oFVj+JQldd1YKZ1lOdOvLCqUPzIISL46b3bnr9P8G6zBFFE
NhwwnCEI9KnBes9EIaxIYgZ7Yz+VgK6oUIPn7N2BJi/7ckUusYX3jSAGOg/b
nbtjiEO6/tWp1VEkCUwu4WI498t3BBmbVfzTwozvjL+1cbf5/bkz/Pb+gcNf
zGiVpHLjbe0SRosxtLspYTtH2jqhtqv3Sbp+n2YUbVsMzIEGMoSS9/1SA0As
7Q6wonan4iUCNC6/5O88E/NDSuXZN8MtbtJbf0CDN0KRpd393odZFqTjfd9X
aapi8r7vF8XqTkyTf3Zx5ewa0X5fwgJrkqrTZY1VNrknUfWbzcFfTFN/kKis
VsHqwn03tahe3JsoRR1RPeO+7xf1kv9LiIqRjRvzZHxPigpbQFGtf2c29Ts1
M/NTVNHu+35epWvvql6an9+l2/HPjhR151O3t+MkgJCv042XFIgU9GkhgLjr
4MS/6+rhziV6G0cnRZNu1suNBKdouT5+TGqAxFNje7s9m+IXl1T3icudoW+9
IYNwasqZdrH6HUYpcp13E31E7jxVBwWPWavTY/0S8QTOk49xLqjKxlKa8gip
xF/mqqYLvBKPgfyGPBB+NI8KY/RkUWOnNpeZikosDHK1EyNF5RAJiVk8xeiu
rarITgtLof4E9zxJVzgBg0Ki8DNaDHOPamrCRL9zSuhkexoUl4PL0gL21IXM
NsuDKJkJ5HR0dSsTS3MAloFtffg47T99Vu9/9e3813PRXg2+p+PlMwiYiD9W
dufZF5MpPpK8faefEdgxarQ/fghGH9+H1ycXFzenP7w47v6g/QmsV7XO7SBf
Wb4nyjb+xXEEZmHtMw6PNKvsXh64fDrPT0vcdS+az8shAHvZhsLP8llgzlHX
X+nfn/Mx0rnDy2j+5M0/2yhgo5dL8EKvHGZszqm6qvr5uH4Jgvz3GOR/60bP
T+u06K8/dF8Wd+ZJeWe65199pesv6OF3UYMTYytvJvREISHBoE5a42JPo9aG
y6V/kqZ7ORe1Qx7wXQMmrgtuJPneGd88HHM4pH9MHbsEgMHS7g7uhUets4vj
lxfDs+j83eMoHX1M3n5oX5w33ywfv7r4eDg8GR5evnr79M378fDd429O6ZsP
H/75+NufvOPR49nq5vG3xyeHhx8PD6/e/jj8dnIEfx+fXz7/9dmH40P4/Wn6
7sXb12/fjZ4F5+edSf2792dvuutPrx9PR63vPrz9yXsVtb//MP++/rTz7fLx
8unr0eh9/8mHd+frH759FX17c/3y9MdW/fLJ0xet7wezZ59gqIvs8jCqP79a
fvP615fX9R+uFz959W5vfPVk/mEzWce/Dl8dtYOs+3647r0Yn33X+uf1k/mn
080/H8+u43YQZ1/pyv1sVu5Zsth80rDBrQuv35cXfjOWos1PCiv+5N2b3ILH
N0+a8ffD5GXy5Ol3wbfJs9GTi/HjCf59+vbX0+BF8mTQgIeWk9ZzeujZ25Pm
9PF3v05/8h5/d3OaXCfRu5Pm6Yf004sPbz+9+HXSfHn0QxuamcffQLOXnWD8
+Do7vTwJfhyddk+T0+x08SL4IcHfoemfvPMP1+3FyfOLZ8snbzevvr96/urX
p8Hj5x8ubp78M7x69/150A663z/Nfr3+ds89ubnsBv8EwWf4wOYRYcBaTyaE
dy6fV1xGHo+OzoZaTgwercsVoxT8LkWKM9RN8UG996NSrNIyy/95AwOOnAxL
LvqAZwOr/aEw06s/rvfNooXClc5gVAG53r1usO8H/X3Zz4sHw6AZhN0HtyBk
+A+dYqIXcYTlhNWL//nL7S/Gl0usyrkoNyDBUzCAsHnY7jbD9rB72Bz0+kfH
zWF7gJEVzbDZarabnWa32Wv2eYhOZrC8PzgcHIYnneN2D4O7TrrQ3qg/bAed
3mGn122djNqdw+NeR1XTwbDTIpiCTtDrdfujMBienBz2251hpzs87HR6x/D6
oKea6LAJimmvNQjCdmvYG4zavX6nGx7B690gPAbLfNQNw6Cr9vnwMGy1ev3e
g1tWxa6OqfmGq/Gzf+C7ucIVeFOCv4WoXmXUp5q9oTH17kvJNe4tMiXaNKR4
sjTnxLeXXidFj1WnOeZOgubG4PITWz/TgU6yQFesWOrVL5erYonndIctz+J4
KtQrRa2kWU0LatAKRFgsDbVNFaDWI2kKH+cuxk1WkYOnpWUu1hebTE8tQVmR
uCm92vDOJH48drZtgulcrKfJgE3ChIGCyi8pxwhwH6ZydUUVNFvMi+ubgNo2
51FtFlQ83NFtq5hLVaPr6BzLw6Vrud2HQ8dEg9hZFFPA6HGk8lY3kVhIrZXF
icN3iW8R9BsymWa4/w8NmztJVplE0Vu+R8XkLMNzjQS+tse9UEcuZjs1fIJP
MwUnsVZskgPacrLvDNKWtmDmIttkSq5xChfnC5IWD/u255aFM5GoC5soJmjc
HM5A5cssOhuGFWW5uBxt4bP5jX5MVMIJXu0fBa1hu9s6flDLPeXEA5x0gC+e
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
fiM9+rI+5r7UU8p95P1vUd9rwfJkAgA=

-->

</rfc>
