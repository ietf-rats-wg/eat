<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The profile claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them.
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.
If detached submodules are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y92XLbWJYo+o6vQCgrIq0ukhosj30y+yglZZaybMvHkju7
b92KDIiEKJRJgA2Aklk+7m+/a95rA6Csnt6uo6JSBLDntdc8jMfjpGmzcvZ7
tqjK/HXa1us8KVY1/dW0h/v7r/YPk2nWvk6bdpYks2paZkv4cFZnN+24yNub
cZ21zTjP2vEia/OmTZL7+ev0w/HVZfpbVX8qynn6S12tV8l36bQqm7xs1s3r
9PtN3nwPj5r19bJomqIq280K+j0/u/o5WRWvkzRtq6l+Rz9m+aq9hSdH+Lup
6rbOb5rwRbNZxg+m1XKVTVv3xfo6PCsrfFTfTPNZ024WuX7WFi3+uLrN07MS
fmzS4xaXlbUwx/Sq+pSX6ZOz46vdJLu+rvO71yn8SLI6z2DyZZvXZd4mn+5h
v4p5iYvPXPPpdVXDomewUa/Tw/2Dp+OD/SRbt7dV/ToZp0UJ038zSd+sy9n1
IpvlMEPe7jfZus7LaR69qmrY6Mt8uq5xmjDjqt6kb96cwKt8mRWL1+livvjf
jXzQ0vsJ7ICO9MskfQtnv8mWNs4vRV3MbrPavaBR/s86W0DLZXqVT2/LalHN
i7yB9U4nuK9wEjns6bMXL56lb6s6v63WTZ6e1sUdTnMKg8M8szI9LfJ5hbue
z2E3Xqcn2aK4qeqyyOi41mVbw5cfL4/h5+qWAHLnjwfpy2cv0+fPDtIXAI47
YXFLnuL//re2mPybzM8v79dJevH9aVVW89t12Mlf8zpfbuI3j1/i4YtX6c9Z
XcI5Vuv5bfqhyma2RPeC1jPDDf14cJS+eHMZLbAs2nyW/hmgY1Ytw1r/eHSU
Hhw+O0yfPn968PJVWOnfqhlNtr/UpKzqJcDWXY435sPPJ4cHB6/kzxcHz+zP
ZwfPwp/P5c+Xr47sAxg2fPAi/GkfvNzf12YHh9bDwYsj/fPpK+3h5fMD+/bF
kXb29NVLbfZq30Z7BQjmdQJ///bL5UvqC+56Vs9xs3du23bVvN7by7O6vR0X
5U01KefZZFks9la3q71ZdV8u4AAm8OOfbopF/sO0qurZ+H7evDza4a74Nv92
8eHNafrL2cXp2dX5SXr5r5dXZ2/Tg1cvj0bpu1+OJ5dX704n+/tPn/9+MNmf
7P9Ok6EO9HLi32MGlHd0l7NF+kteNSv4kS3GePMXi2JOd/QY/7NJn0DPu9TQ
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
3Biepp1Hb4//dYe8qZOdi/dX5xfvjt/sDJtbWXlgC2V86AWH5KeT9+nBEctD
GKap/j8YRMkybcmO2+SyxT9bOsJg6Vsskmm2wgAQoEJoRIMNLlPkLXpW8jpn
fsrZyEnVjVTcyWTsKq7PVP5L6BK8Tl6nx+mqyKeExQrntQr4Pa9plWwuUOQ5
QQsTX6CmSx1WWVGLuyKq8NfMs5jXI0rZeKNJkqiCEwl5rPGlfIehODSpNXu+
t/nnFvWNZkZU1bEQLZrKJD0PrpyZe8FD3vQ1GTLcn/MNjnalKo9ltqLZqZuU
TVE4cGtIZFOb8lJRaydCuJuYbhZ/I5pKvOc0HiIzWD4bq2iK9J0O06SXedub
oH5aCTEj4sI6Krf0hlXgm8BABSbv0aAUCd0oHA3Kw8B2iZzKR1ejST8QOJQe
jV1/0m5W4mKmjim76ATQOB6APOBwm1arOiuE/wT0wGgHgFS0VGSmaYM9PvJP
KBozVOBZomcloJj2Fh170Ws3I51Rya6hxNaJjYH1CayxIZ8Bxx6yZKrqA9hG
xYdu4ewxJVPnAyFzVsE+ToFxVDOcTVn4zO3SIaMgc1iO0TjMJvrdnVLHzOHn
FN377rTYGVX8/YgSAJNfAMUivMUDZiGeLJiWxEF1wnEqADx7kaPeHrvrsKvB
X1GslZ3hiYs7sdwD1X8oNNmeiVHUIIX2RU9lEjPBomswCil0GO5gzD0DViYb
FEhBI5aUhFtG+jVwLnpDYeOQ1YjnapMZpQH0eSbElT689UFBYZT3rgLwdYyB
P0jHxiM0xEx+tK93zPer4oIvkDwM2y74ykQHwvE1dRDOvqQARdh+4ISE8fUu
VZO0L24gNASZm9w4RDIp1E5mUUY4KLIa5XheVTOZ4wjEwwV03zk3GLasKMja
vkMRigxsbMxFFNe4kwAyt17qCotGTEvkK0kmfDoAmAGdQ28dy2J+S6iKjGtq
e8R77CRn8mGoeNfCOAjw5ayqG5q7ng0hWTJtLEVhTQAhX/YPPxiWWKOnkAMy
iKn+shVbg5FkKurT8w1GO/Lc09siqU0mxK1Vq/EbMhmyaT9YJLyvQZbuiE0E
2al0hwwuOyPVtgiKVyspNeA5jC8HXBJUCciMtXd/meiYxCCKm7RRP99piLwQ
cUBsgebwrnTUOUcxn8V6ZWLNoQngiTlambtgib1yOxrE7D0GwXyxG1HYdUZh
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
IWQ6zjZUXXxdW7+OF1fRPFM7LurPWhzmJD3njsvX8sfMXEN7ZGxjh6MqKhSB
oXquXRq3Ll+gG42Bm5xqQhhnHb9/5t9I1WgHwWUhzikBGoUVZgkl7uZk8OLW
EmQRz26SRTrj6IpcyW3hwW8G52c+GcvQbYP2F1q3XGJhp6CxFVFoUzJeP611
Z+aPVt57Vn2nANGc3NvuYJNG0O9N2o2oNZl0Ro12rxOMtIdOsxdHpoNv3kq6
Ku0lbPewgx4MGjafoAJ9coRM4eLElxok+r3tgfM+aR9hu489tFv98SgejXrD
fq876ja7w1YrbjUm3VGn2R7FvftlJ+o5yq7Iqoo4Q4miWLTZcyb/fU6uCDsA
sJ8qQb1JelWA2ov4NKLFcsZl2o0opCuQe+kWjmHXMERH7DhbG62LsgQIHe16
m0f7nWaSJk7X3PKqicHENxO1FcB2gHbuYkPY7aAddtqtEHbscUadV2fWrsN5
WOjLAkcdWKxFFnOVYnwS3aJgS7zDXZLFaJUs5fhZAaBCDyr+U3+NA+exT1Cv
P4wnvW6vGw+joBmHo96kE3dHw9YwmLQ6QV9xN9eLg4GCfnHca0zaUaczCibD
frcV9vv9qDcZR8N+s9HrNx9Cv3U05HUJKFxEzM3EQRHBxrDeiLAo189oTSrg
4n9mq8kk+ehAC0S7B6C/Bvg8G3chz0+2BX0nAB0RkeT10al/nD/s/jYrbTWw
hzb9p4N18XDJcsVWiMfOEGgnbNauu2SpkPFZU1ijbITWz9fMwYn2OlZam11t
f5qi8X3ddur6vcRAPnc6i3D+Q2ycWxUKDavFPM3g7K6SqXg9cl7KVxo140az
cu6eTPugiAnUrFyhR5zEM7xnIuLKgmqvCHMc4Zmy81gPvzDlVdHyLyPUqEoD
rOxyEV1fO3Ef1AfHhkT+BNjPbt1vdaUkUzzDHSB3DWUN3elxBj1xrQcd/pP6
QAaz+/tMzL+bR1HORbcHxtZW2CKSptF9R+i1mC+SzNwa37uXHhK1NVDlV8Yp
9Xst3s2cxXu9ziudoJsS5kVKLNVcxcODqQlIzirysD0stGkyvkvU4x7992yJ
3vmcV+OLc+GLcyHf9ItzId/HF+dCcR5fnAulfeDPF+fCF+cCL+SLc+GLc8H9
+eJc+OJcsB9/cS58cS78Sev+4lz44lz44lz44lzwvzgXvjgXvjgXvjgXvjgX
+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

-->

</rfc>
