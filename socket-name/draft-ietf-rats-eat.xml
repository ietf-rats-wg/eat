<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.15 (Ruby 3.3.1) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.21.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Mediatek USA</organization>
      <address>
        <email>giridhar.mandyam@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2024" month="October" day="09"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <?line 164?>

<t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <?line 174?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>
          <t>Make and model of manufactured consumer device</t>
        </li>
        <li>
          <t>Make and model of a chip or processor, particularly for a security-oriented chip</t>
        </li>
        <li>
          <t>Identification and measurement of the software running on a device</t>
        </li>
        <li>
          <t>Configuration and state of a device</t>
        </li>
        <li>
          <t>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</t>
        </li>
        <li>
          <t>Formal certifications received</t>
        </li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like Trusted Platform Modules or Secure Elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64url encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64url encoding of a 48-bit MAC address preceded by the type byte 0x02.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>
            <t>A Secure Element</t>
          </li>
          <li>
            <t>A Trusted Execution Environment (TEE)</t>
          </li>
          <li>
            <t>A network card in a router</t>
          </li>
          <li>
            <t>A router, perhaps with each network card in the router a submodule</t>
          </li>
          <li>
            <t>An Internet of Things (IoT) device</t>
          </li>
          <li>
            <t>An individual process</t>
          </li>
          <li>
            <t>An app on a smartphone</t>
          </li>
          <li>
            <t>A smartphone with many submodules for its many subsystems</t>
          </li>
          <li>
            <t>A subsystem in a smartphone like the modem or the camera</t>
          </li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>
            <t>An identification and type system for claims in claims-sets</t>
          </li>
          <li>
            <t>Definitions of common attestation-oriented claims</t>
          </li>
          <li>
            <t>Claims defined in CDDL and serialized using CBOR or JSON</t>
          </li>
          <li>
            <t>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</t>
          </li>
          <li>
            <t>Nesting of claims sets and tokens to represent complex and compound devices</t>
          </li>
          <li>
            <t>A profile mechanism for specifying and identifying specific tokens for specific use cases</t>
          </li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$CBOR-Tagged-Token /= CWT-Tagged-Message
$CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string between 8 and 64 bytes in length.
In JSON, an EAT nonce is a text string between 8 and 88 bytes in length.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries, as described in <xref target="UEIDCreateRules"/>. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="UEIDCreateRules">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The EAT consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity; changeable MAC addresses that don't meet the permanence requirements in this document <bcp14>MUST NOT</bcp14> be used for the UEID or SUEID) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>
                <t>UEIDs types vary freely from one manufacturer to the next.</t>
              </li>
              <li>
                <t>New types of UEIDs may be defined.</t>
              </li>
              <li>
                <t>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</t>
              </li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="RFC9393"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="RFC9393"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to privileged software that allows system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GNSS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="RFC9393"/>.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="RFC9393"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>
              <t>A submodule Claims-Set</t>
            </li>
            <li>
              <t>The digest of a detached Claims-Set</t>
            </li>
            <li>
              <t>A nested token, which can be any EAT</t>
            </li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $CBOR-Tagged-Token socket or the $JSON-Selector socket.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</t>
        </li>
        <li>
          <t><bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be authenticity and integrity protected</t>
        </li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <t><bcp14>MUST</bcp14> be a Claims-Set</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> use the same encoding as the bundle</t>
        </li>
        <li>
          <t><bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</t>
        </li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag 602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
Full profiles do not need to require the receiver fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access to the necessary verification keys or may go into specific detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed-1">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST NOT</bcp14> be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence. (It is assumed the receiver has access to a database of trusted verification keys which allows lookup of the verification key ID; the key format and means of distribution are beyond the scope of this profile)</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>For CBOR-encoded tokens, OIDs are specified using the CDDL type name "oid" from <xref target="RFC9090"/>.
They are encoded without the tag number.
For JSON-encoded tokens, OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>
              <t>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</t>
            </li>
            <li>
              <t>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</t>
            </li>
            <li>
              <t>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</t>
            </li>
            <li>
              <t>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC4517"/>.</t>
            </li>
          </ul>
          <t>The CDDL generic "JC&lt;&gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC&lt;&gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.
Note that the JC&lt;&gt; generic uses the CDDL ".feature" control operator defined in <xref target="RFC9165"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC-NEST-SAFE<json-wrapped-claims-set,
                               cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label                = JC< "eat_nonce",    10 >
ueid-label                 = JC< "ueid",         256 >
sueids-label               = JC< "sueids",       257 >
oemid-label                = JC< "oemid",        258 >
hardware-model-label       = JC< "hwmodel",      259 >
hardware-version-label     = JC< "hwversion",    260 >
uptime-label               = JC< "uptime",       261 >
oem-boot-label             = JC< "oemboot",      262 >
debug-status-label         = JC< "dbgstat",      263 >
location-label             = JC< "location",     264 >
profile-label              = JC< "eat_profile",  265 >
submods-label              = JC< "submods",      266 >
boot-count-label           = JC< "bootcount",    267 >
boot-seed-label            = JC< "bootseed",     268 >
dloas-label                = JC< "dloas",        269 >
sw-name-label              = JC< "swname",       270 >
sw-version-label           = JC< "swversion",    271 >
manifests-label            = JC< "manifests",    272 >
measurements-label         = JC< "measurements", 273 >
measurement-results-label  = JC< "measres" ,     274 >
intended-use-label         = JC< "intuse",       275 >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$CBOR-Tagged-Token /= CWT-Tagged-Message
$CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

JSON-Selector = $JSON-Selector

$JSON-Selector /= [type: "JWT", nested-token: JWT-Message]
$JSON-Selector /= [type: "CBOR", nested-token: 
  CBOR-Token-Inside-JSON-Token]
$JSON-Selector /= [type: "BUNDLE", nested-token: Detached-EAT-Bundle]
$JSON-Selector /= [type: "DIGEST", nested-token: 
  Detached-Submodule-Digest]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>
            <t>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</t>
          </li>
          <li>
            <t>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</t>
          </li>
          <li>
            <t>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</t>
          </li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.
The "Claim Value Type(s)" here all name CDDL definitions and are only for the CWT registry.</t>
        <t><cref anchor="to-be-removed-3">RFC editor: please see instructions in followg paragraph and remove for final publication</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Nonce</t>
          </li>
          <li>
            <t>Claim Description: Nonce</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_nonce"</t>
          </li>
          <li>
            <t>Claim Key: 10</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: UEID</t>
          </li>
          <li>
            <t>Claim Description: The Universal Entity ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "ueid"</t>
          </li>
          <li>
            <t>CWT Claim Key: 256</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: SUEIDs</t>
          </li>
          <li>
            <t>Claim Description: Semi-permanent UEIDs</t>
          </li>
          <li>
            <t>JWT Claim Name: "sueids"</t>
          </li>
          <li>
            <t>CWT Claim Key: 257</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware OEM ID</t>
          </li>
          <li>
            <t>Claim Description: Hardware OEM ID</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemid"</t>
          </li>
          <li>
            <t>Claim Key: 258</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr or int</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Model</t>
          </li>
          <li>
            <t>Claim Description: Model identifier for hardware</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwmodel"</t>
          </li>
          <li>
            <t>Claim Key: 259</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Hardware Version</t>
          </li>
          <li>
            <t>Claim Description: Hardware Version Identifier</t>
          </li>
          <li>
            <t>JWT Claim Name: "hwversion"</t>
          </li>
          <li>
            <t>Claim Key: 260</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: OEM Authorized Boot</t>
          </li>
          <li>
            <t>Claim Description: Indicates whether the software booted was OEM authorized</t>
          </li>
          <li>
            <t>JWT Claim Name: "oemboot"</t>
          </li>
          <li>
            <t>Claim Key: 262</t>
          </li>
          <li>
            <t>Claim Value Type(s): bool</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Debug Status</t>
          </li>
          <li>
            <t>Claim Description: Indicates status of debug facilities</t>
          </li>
          <li>
            <t>JWT Claim Name: "dbgstat"</t>
          </li>
          <li>
            <t>Claim Key: 263</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Location</t>
          </li>
          <li>
            <t>Claim Description: The geographic location</t>
          </li>
          <li>
            <t>JWT Claim Name: "location"</t>
          </li>
          <li>
            <t>Claim Key: 264</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: EAT Profile</t>
          </li>
          <li>
            <t>Claim Description: Indicates the EAT profile followed</t>
          </li>
          <li>
            <t>JWT Claim Name: "eat_profile"</t>
          </li>
          <li>
            <t>Claim Key: 265</t>
          </li>
          <li>
            <t>Claim Value Type(s): uri or oid</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Submodules Section</t>
          </li>
          <li>
            <t>Claim Description: The section containing submodules</t>
          </li>
          <li>
            <t>JWT Claim Name: "submods"</t>
          </li>
          <li>
            <t>Claim Key: 266</t>
          </li>
          <li>
            <t>Claim Value Type(s): map</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Uptime</t>
          </li>
          <li>
            <t>Claim Description: Uptime</t>
          </li>
          <li>
            <t>JWT Claim Name: "uptime"</t>
          </li>
          <li>
            <t>Claim Key: 261</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Count</t>
          </li>
          <li>
            <t>Claim Description: The number times the entity or submodule has been booted</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootcount"</t>
          </li>
          <li>
            <t>Claim Key: 267</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Boot Seed</t>
          </li>
          <li>
            <t>Claim Description: Identifies a boot cycle</t>
          </li>
          <li>
            <t>JWT Claim Name: "bootseed"</t>
          </li>
          <li>
            <t>Claim Key: 268</t>
          </li>
          <li>
            <t>Claim Value Type(s): bstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: DLOAs</t>
          </li>
          <li>
            <t>Claim Description: Certifications received as Digital Letters of Approval</t>
          </li>
          <li>
            <t>JWT Claim Name: "dloas"</t>
          </li>
          <li>
            <t>Claim Key: 269</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Name</t>
          </li>
          <li>
            <t>Claim Description: The name of the software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swname"</t>
          </li>
          <li>
            <t>Claim Key: 270</t>
          </li>
          <li>
            <t>Claim Value Type(s): tstr</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Version</t>
          </li>
          <li>
            <t>Claim Description: The version of software running in the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "swversion"</t>
          </li>
          <li>
            <t>Claim Key: 271</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Manifests</t>
          </li>
          <li>
            <t>Claim Description: Manifests describing the software installed on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "manifests"</t>
          </li>
          <li>
            <t>Claim Key: 272</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Measurements</t>
          </li>
          <li>
            <t>Claim Description: Measurements of the software, memory configuration and such on the entity</t>
          </li>
          <li>
            <t>JWT Claim Name: "measurements"</t>
          </li>
          <li>
            <t>Claim Key: 273</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Software Measurement Results</t>
          </li>
          <li>
            <t>Claim Description: The results of comparing software measurements to reference values</t>
          </li>
          <li>
            <t>JWT Claim Name: "measres"</t>
          </li>
          <li>
            <t>Claim Key: 274</t>
          </li>
          <li>
            <t>Claim Value Type(s): array</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>
            <t>Claim Name: Intended Use</t>
          </li>
          <li>
            <t>Claim Description: Indicates intended use of the EAT</t>
          </li>
          <li>
            <t>JWT Claim Name: "intuse"</t>
          </li>
          <li>
            <t>Claim Key: 275</t>
          </li>
          <li>
            <t>Claim Value Type(s): uint</t>
          </li>
          <li>
            <t>Change Controller: IETF</t>
          </li>
          <li>
            <t>Specification Document(s): <strong>this document</strong></t>
          </li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s"ueid:" b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references anchor="sec-normative-references">
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC4517">
          <front>
            <title>Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules</title>
            <author fullname="S. Legg" initials="S." role="editor" surname="Legg"/>
            <date month="June" year="2006"/>
            <abstract>
              <t>Each attribute stored in a Lightweight Directory Access Protocol (LDAP) directory, whose values may be transferred in the LDAP protocol, has a defined syntax that constrains the structure and format of its values. The comparison semantics for values of a syntax are not part of the syntax definition but are instead provided through separately defined matching rules. Matching rules specify an argument, an assertion value, which also has a defined syntax. This document defines a base set of syntaxes and matching rules for use in defining attributes for LDAP directories. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4517"/>
          <seriesInfo name="DOI" value="10.17487/RFC4517"/>
        </reference>
        <reference anchor="RFC9393">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="J. Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay"/>
            <author fullname="C. Schmidt" initials="C." surname="Schmidt"/>
            <author fullname="D. Waltermire" initials="D." surname="Waltermire"/>
            <date month="June" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles. SWID tag representations can be too large for devices with network and storage constraints. This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags. CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9393"/>
          <seriesInfo name="DOI" value="10.17487/RFC9393"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references">
        <name>Informative References</name>
        <reference anchor="RFC9562">
          <front>
            <title>Universally Unique IDentifiers (UUIDs)</title>
            <author fullname="K. Davis" initials="K." surname="Davis"/>
            <author fullname="B. Peabody" initials="B." surname="Peabody"/>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <date month="May" year="2024"/>
            <abstract>
              <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9562"/>
          <seriesInfo name="DOI" value="10.17487/RFC9562"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
          <seriesInfo name="ISBN" value="[&quot;9781504450195&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization/>
            </author>
            <date month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
          <seriesInfo name="ISBN" value="[&quot;9780738192192&quot;]"/>
          <refcontent>IEEE</refcontent>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="8" month="July" year="2024"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50% while also significantly reducing memory and code size
   compared to ASN.1.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 Certificate Signing Requests, C509 COSE headers, a
   C509 TLS certificate type, and a C509 file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-11"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="4" month="July" year="2024"/>
            <abstract>
              <t>   When transported over secure channels, CBOR Web Token (CWT, RFC 8392)
   Claims Sets may not need the protection afforded by wrapping them
   into COSE, as is required for a true CWT.  This specification defines
   a CBOR tag for such unprotected CWT Claims Sets (UCCS) and discusses
   conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-10"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>Linaro</organization>
            </author>
            <date day="26" month="September" year="2024"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-10"/>
        </reference>
      </references>
    </references>
    <?line 2583?>

<section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t><cref anchor="to-be-removed-2">RFC Editor: When the IANA values are permanently assigned, please contact the authors so the examples can be regenerated. Regeneration is required because IANA-assigned values are inside hex and based-64 encoded data and some of these are signed.</cref></t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                              [
                               258, / CoAP Content ID for CoSWID    /

                               / This is byte-string wrapped        /
                               / payload CoSWID. It gives the TEE   /
                               / software name, the version and     /
                               / the name of the file it is in.     /
                               / {0: "3a24",                        /
                               /  12: 1,                            /
                               /   1: "Acme TEE OS",                /
                               /  13: "3.1.4",                      /
                               /   2: [{31: "Acme TEE OS", 33: 1},  /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                             /
                               /       17: {                        /
                               /           24: "acme_tee_3.exe"     /
                               /       }                            /
                               /    }                               /
                               /  }                                 /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         270: "Acme OS",
    / swversion /      271: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest either come        /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      272: [
                                [ 258, / CoAP Content ID. /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for an IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    273: [
                                   [
                                     258, / CoAP Content ID         /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8xQk",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-submodules">
          <name>JSON-encoded Token with Submodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token. The payload is the    /
/ attestation hardware block above. The main structure   /
/ visible is that of the COSE_Sign1.                     /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A60A4CD79B964DDD5471C1393C88881901005001
      98F50A4FF6C05861C8860D13A638EA19010219FA
      F2190106F5190107031901048263332E3101',        / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="cbor-encoded-detached-eat-bundle">
          <name>CBOR-encoded Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag. /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE.                   /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block.                                        /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "Audio Subsystem" and "Graphics Subsystem".
The JWT at the start of the bundle has detached signature submodules with hashes that cover these two Claims-Sets.
The JWT itself is protected using HMAC with a key of "xxxxxx".</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
    [
        "JWT",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlYXRfbm9uY2UiOiJ5dT\
c2Tk44SXVWNmUiLCJzdWJtb2RzIjp7IkF1ZGlvIFN1YnN5c3RlbSI6WyJESUdFU1QiLF\
siU0hBLTI1NiIsIkZSRW4yVlR3aTk5cWNNRVFzYmxtTVFnM2I1b2ZYUG5OM1BJYW5CME\
5RT3MiXV0sIkdyYXBoaWNzIFN1YnN5c3RlbSI6WyJESUdFU1QiLFsiU0hBLTI1NiIsIk\
52M3NqUVU3Q1Z0RFRka0RTUlhWcFZDNUNMVFBCWmVQWWhTLUhoVlZWMXMiXV19fQ.FYs\
7R-TKhgAk85NyCOPQlbtGGjFM_3chnhBEOuM6qCo"
    ],
    {
        "Audio Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJsSStJWU5FNlJ\
qNk8iLAogICAgInVlaWQiOiAiQWROSlU0b1lYdFVwQStIeDNqQTcvRFEiCiAgICAib2V\
taWQiOiAiaVVXdCIsCiAgICAib2VtYm9vdCI6IHRydWUsIAogICAgInN3bmFtZSI6ICJ\
BdWRpbyBQcm9jZXNzb3IgT1MiCn0K",
        "Graphics Subsystem" : "ewogICAgImVhdF9ub25jZSI6ICJZWStJWU5F\
NlJqNk8iLAogICAgInVlaWQiOiAiQWVUTUlRQ1NVMnhWQmtVdGlndHU3bGUiCiAgICAi\
b2VtaWQiOiA3NTAwMCwKICAgICJvZW1ib290IjogdHJ1ZSwgCiAgICAic3duYW1lIjog\
IkdyYXBoaWNzIE9TIgp9Cg"
    }
]

]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC9562"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

; Same as JC<> but with unwound generic nesting as it seems to cause
; problems. Perhaps this is the nesting problem described in RFC 
; 8610.
JC-NEST-SAFE<J,C> = J .feature "json" / C .feature "cbor"
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-24">
        <name>From draft-ietf-rats-eat-24</name>
        <t>The changes from draft-24, not draft 25, are listed here as draft-24 is what was accepted after IETF last call and draft-25 was kind of a false start.</t>
        <ul spacing="normal">
          <li>
            <t>Address some small claim data type naming issues that came to light when IANA completed the registrations requested by this document. In particular, the CDDL type names are used.</t>
          </li>
          <li>
            <t>Remove all dependence on SUIT Manifest to break schedule interlock with RFC Editor. Use of SUIT-Manifest is peripheral to the core of EAT. It was mostly a content type pre-registration. The modification consisted of the removal of one sentence, a few more words and two lines of CDDL.</t>
          </li>
          <li>
            <t>Reworded full profiles description to convey intent without using "may not"</t>
          </li>
          <li>
            <t>Upated references for UUIDs and LDAP to non-obsolete documents.</t>
          </li>
          <li>
            <t>Removed some non-ascii quote marks</t>
          </li>
          <li>
            <t>"<bcp14>MAY</bcp14> not" -&gt; "<bcp14>MAY</bcp14> NOT"</t>
          </li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <?line 3592?>

<t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
YG0KbhW30SZKR4rIWk4ziP+KAqwTaoeAIPZJxeyRKZ6cIuCyr1mdzwovNd6z
OYHxKCLJGs1TXkmWnKC2ht22iCRUhA+VRwWuo6C5UyNTZuGaMtp4Qp0Zvm/E
dugJLQmrtBZiX8QsagPictwSHaMNEwR8DJTlFsjHPMgN4zywZ2IUEh3OVcsE
ID2w4ZJJo3EuLbcRHkN0D+rVEGyIglXe5jeoPfB+GG9Qcpuu1Tcidlgw9q13
VpHKG3GUXs8gfQaPBJPDmM6hKjBTkXTgPRfgGmbLCfs2ONcF9aUBFobPiMWV
xp8F4zm/ADUcTxHUl5PGpPARXvNvYEMWbFBBM+oYZpPDadoNwP78Xr2Vld99
U7nvPqOUKbbh7To33CLR9CCfiVQO5Qn4j2BmU8GsBQPbHWqZz2X/R6mcV1hA
EAmKZe+Rwd7n7npfo/sXG2Thks/gOlfLoJmNttU/+LZOV+WimJBvkfLeevbU
r5C2qAcEEP6MOD12ewBclINgPYBPF2gVZNwv1r2JeB+zCsMOhSGyWK7WjfCM
ePdIh4EIcyOr3boHpD4CyWJixAgXjkzfPM8WZL5jC/a61nvT64LjDOV1dF5y
jsTXV3xj20hErjDPCAbh60sm9hZqUP30CvDeg+usWGxZF5wFm1sIxwDryEZG
Vl86pKYKMJ0sGRLHRDxuswpv83oJpIuV3H24Zuv4xAJJN2IXAv6UZFrpxwFQ
y8hKJy4w1UVDQYLK2K3ruh8ecZwPy/IWthM5OAItpEBoYAl+NsErpGh0vmoI
NojFM6Rt2PQ0HrAdSwEBRVanjlyhTQImQ+dYfeQFXntvzFHaf1RufDoWhPD4
2LYCNHlBTTmMQJT6AXAF5nkjECzXCF2whEUJDPoUPZKIwwbBIxuTxTIC9Ka9
Mc6JYMXWA7GSCRK8Z7KAW+QkGNvjDMgjyhRJYpCTrkQsiAxUe7gU9e3wN0/5
8CiCItgycTLjRVHPyZ5pzF9amfYxWimsjnm7geCcmj15MnQJk2gCdEFZGOTy
qbKDHalcYzBG2Wc5BamgUYzqkBxPAvXE+KGfBEE0uhwinLGdK2/uR/TExUpY
BwbvbRi6kXUDeguy087Ld5dXOwP+b/rqNf399vxf3128PT/Dvy//ePLihf2R
SIvLP75+9+Is/BW+PH398uX5qzP+GJ6m0aNk5+XJf+ywyWHn9Zuri9evTl7s
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
ybMz4cMq4pCBy99NxX8oLFTuOrvcU/HHrthgxZXtex1WAc79Vvthl1Wf7Ipq
aXUkSZKHmpJbWIbLB3xa9S7+y7xaH3T3NG6e+fN50Nvz+/1Uv+nZKpDKzTfY
xmsTXTa34322duy0PDuXH5N09THNyLmz6PkBHWRYisJ1Sx0AsLTagIpa7YpG
lDG83MjdeiX64yGYnT0bbFAH3vsBxlkTRaZ239ceVlmgjt/bXlFTRSa/t32R
rG6FNPmzjQJlWwfq7wUsEOKokmXWWGbRdwJVr9ns/5th6g8CleEqmF343kMt
shffDZTCjig+43vbF/mS/0uAivMaN6bJ6Dshyg8AooL/k9HUP8mZ6U+RRfve
9nmWrrUte6k//xRvx58tIerBt+7vx4o3IA2j7ZAnWU5UcntbrYjfdSaEXDSw
Vi+Su+J6tViL04IudkCvSQ2heKxlb3tkXTJnRtXiuEgiarQbMgmrEqXuF2tm
ZlIEwvJKIS2aYgclP7J4pVD9I1HAUdEa29nGOOvp+iOpOPhxjQ+q4swqUD0H
UtfxRPjVfGIXzScLGzs2MbVUnGWuM0lbvjNURJUyI4uCFrWkWXkqriq6ccfp
l6N0iQvQWUVUBhlVQneH/KtgoXblj2xH+U/lkl5JYXoeQlab5fMg6QXkeHSl
zSWUZiU8BrT16fO499OLeu/Lm8+Mt3QaTkuzplNVYgqxsgrNNEzG+Epycal+
o7zDyM6+/+QNP3/0b4+ur++O350cdt4Jq6wyc1Uz3FbuKoP0hNPGb2ws17tq
3rEQpN5iW19vI+k8Mi2h1p1wOi3buXeyNfkk5SOOrHuu/qR/P+Q9cHM3lxP5
kwbdRBrJFVN3EHVyGB44pYrMSsvH1YEwwX+XE/xvPObpcZ12/fRT51XxaJ6X
j6Zz9cMP6gAkl/dD4GC5bkrLhN4o+LvrZJFGtNgZzMdkmhosFu5Rmu7k9MIW
fMCzBixc7bim4ztnrO4/ZCc595AGtiEAfXHtI9zxD4Kz68NX14Oz8OryaZgO
PycXn1rXV83zxdPX15/3B0eD/dnri5/OP44Gl0+fHdOTT59+ffrmF+dw+HSy
vHv65vBof//z/v7NxfvBm+gAvh9ezV7+9uLT4T78/VN6eXJxenE5fOFdXbWj
+tuPZ+ed1ZfTp+Nh8PbTxS/O67D186fpz/Wf2m8WTxc/nQ6HH3vPP11erd69
eR2+ubt9dfw+qM+e/3QS/NyfvPgCU51ns/2w/vJm8ez0t1e39Xe381+ceqc7
unk+/bSOVvFvg9cHLS/rfBysuiejs7fBr7fPp1+O178+ndzGLS/OflA790Hv
3Itkvv7iygFs3Hj1vLzx65FUzXle2PHnl+e5DY/vnjfjnwfJq+T5T2+9N8mL
4fPr0dMIvx9f/HbsnSTP+w14aREFL+mlFxdHzfHTt7+Nf3Gevr07Tm6T8PKo
efwp/XLy6eLLyW9R89XBuxZ0M42fQbeztjd6epsdz46898PjznFynB3PT7x3
Cf4NXf/iXH26bc2PXl6/WDy/WL/++ebl699+8p6+/HR99/xX/+by5yuv5XV+
/in77fbNjn11c87zVFdG39l82hCQ1pOIkpDL7xUmQHhaF2MeW+Iku4k29B4O
D84GpsRURfIPqqxV6oiNVZaNzlK22MY47erOLvpMz038H9dsWGvnSSwsOuLC
ZUR1hBSRGw9uhbcpvs3peLuu19sVoLh+NPCant95dF+ah8elEkOZMgR8/XZ/
w3i2wHLA83IH4mcEE+g0B63hQbe/3++0Dg4O0JV+iK70Q3Sl9/pNr9lsN5tK
Xun3jtrQ4OioMyST1hBNWgdeMOgEvcMBve57/aOBvH7k00+dozb9220G9G+r
53eA6fQPA1i+WbwVKSuzg1nt+0ftw1YXvayOOgO/OewNWl67u9/udoKjYau9
f9htK965P2gHFLbf9rrdTm/oe4Ojo/1eqz1odwb77Xb3EJr3u4pVHjSBc+4G
fc9vBYNuf9jq9tod/wCadzz/0O/7w47vex2lQBjs+0HQ7XUf3bPnZim6qCXu
9Qd3z7VjZxHzakpXkcpJsmNhTrFyIqWasSfxbSmYkSnWxIZuAuqGFIiX7vJp
lfLNiS1lRm+KgYVTVQErMjWCrWxAJncUs8HKPszV65hCW8Nhz5M4HsvdkRp3
0q2KkmlwLTcskYi8sSL4Rn+qi7vnrOc6yMZKUaWKZKyu15lCLJQGichjqWnD
ORMv6Ng6wwijmxh9yIR13IDObpTfUnYk4DGkXlBl7UNT24+rowCfOeVZrecr
iTK4J+lRZaer8IqUyJ2mv/t35Wp2lCwz8dQ2CJMKPBpOyxY42PKOO6WUwhia
03ApX5gufovVqpNcZicrVEyndlI96MnKJur6iBxvxMFtJBHAru7YNRy196Yq
H/plpVJyM6KmaoMmHRnly8t51qgevuq/6CPO5q3ekUJlrU5w+KiWe8sy6d+H
/0qtrGgh+3dtoC/8LJE/ud+aHJ7pqRjQ3ENKYpNbjuvy3mEsUPEBfupep1b5
AL0cDg6POm3/iLBt12se9I9anQ6Qh06nc+g3+251Q9c9OOi2jvp+d+ANDwdB
298HPN8KDj2gIEFvsH/4qNTwQ+6Xb9a3b67G/ge94ACwcQuwM5HJAW55Z9CD
A+gVDwzpiuBpJljbUqojhd7pp3az9TDFol8UiRt4nYBTwvR8IFU9v3n/NqpJ
9h/atHavBRSv3xzCg56yQHa63aNBx28Ngm63fXTQHe4PW4fwYv9w2O95nf3D
wD8atLqtbhDsN4/6qtnQ7x7tDw4P9veH/X4n2O8P99uHw2EzGAaHQXs/GBwN
m/vdffiz1W8fHKq1DZv9ftfz/cNBr9M9anb3ewftw31xutFMMYaz5AhaleuF
KXNXh+tMHhWPTQdFl6NsnXCtec4rSE5R5Y/ugLEF3tCw1QwJOCbK1waAI+Yj
nagjrbAI4BPKquN7IDW2e+1eVfKhcrtyYqBiriF0fyi3uy+1kEn4U9GuMpNQ
MU1QRbtC4qDqrEDldiZP0DfH/bDnuHmza04a14dYRQEKmL/mMiddSQByMWTQ
6018h+o6Sm9ITJHw9tjBK9u4yoNJb2x2rYjLJcodzt2yGKB5gApgq/xsEaUa
tIFbbbX6wFK2W3BqYSea9KOm//+jVClKFbuoCE/l5qIVsX3W7nWPUx9DAUsc
h7jLf5e2n2nmP2cpuH4Ut+HA25Ox35qEo67XanW2dsCWjz8et3vjVjAOY6/b
i+G6xt9p1Bz1W37fC/vwn2bPn0wif2svLPm0w+ZoawvBg3p9Z6Pa715hSLG3
XMdxyWmSK0SarObuDNbjJHW1KkaKYz7lEj2Z9YAFFiqxyVp5qjCoGFEZ8jq0
RDEjFli5WYh/Fpc/wkQkMkjcJc7Tmp4Z0tSJNjI61fR2n70cDJUDMQYKwXx2
vtBnp/FH1KCseTBKqYJOClVSBRUU6oxO2xHqjz4vfn47ZJXU9N3Pp5PRrL9+
51/gy+3x+S9O5J9/brXOfn57eTK7QG3Wb+PL56uRf/rb8adF9/jzkff+6fTm
+OjEezc/aUfB6XR0dty5vHt+eHYxPrpADdjRL06WXDSv91+cy+Cf35+dXrbu
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
o3tqB1NICRs81tj0KbAheRmLVxetLJqNL+1nWLWb50TyjK81XZllrMrch1R3
U7aOemKqKMILu63xJePBq0ZRU2EcD0L/FNhkqoGOogSsEANL7uSuZ3lcD0cJ
T2Vyggp59Zq7v4nvqEibLlAuKxmRU4QU0pupQB7JnyRbJ6E8xVt9qyq4C1Ey
5dYZF5PUAv2Jwi/VNeJYBzmB2V3PyZi9MsoLK07ITNIUU7fs80RZ1ZA1dhSJ
qO4DF54giq3i1xHns9MCSmcEO09fn4EUwTHwsGcameldKwKOnGz1jskeGdaf
xTKrH0J+1ISgLyyCGAKJBQ6IySSVFu3cmKWJ/CCkeM2NgtAyxw3SqmPWyajZ
ww4hYeaHsOyzVNkNIqXdwYlaHev1X6MD5DwrAIdCsHw5Cbbz8xNnnruaM2Lg
J7RLmpCq4Sw4IXaQXxqhkwMTZQJFlnZlCpUTg7VdXqOXjqKUxJBw2cI7YsHs
wZkdMx6oSmgj3gxYMiSKxf2Q6234cxX6VmBnnHDOVyQvgCh/JMRctBbihbJC
64bziv1u0DcCe0EfDS73hJ67IuhKUUiWJkX/JMR7RIHCFeMLRtKyNVb4gYUt
2YBhdEpiLKHILwlsw3a6NzugGHpCuZzYHlmOMhQzNRjM3Z8b7WZf1SAjVkmI
lbIok3OdcDQgSOJ3dmO2MTB5g0lfuYtkW500dpJGOlPJjH15oWfu4SaANsBS
Z8xL8oTIxcyeVbZaT5BC3F5jQrRcbM56LnjARP7JLa+YonM84dMpPZP03SIo
w0pYYBNTuGKxwjlfNtmcdWZYHW6oeNqSqxE/niFfCpI6m5RsIbBYHUeLgitV
UtUS3AzFZXYO52DU3yuxCym+R8yY0p14HYWoK1DAQ5AnKVaErTY8AfFjryUW
IhLn9RizoqAnh/69Zm0f3wglW4Za7WKSpohuipGhq53apskkzqNVWiCQF9aA
p+JRR2oXTQVNgVTgcuAe3JGzBgD8mVJX27OZy9GqnmUKmoHHOdSjuwjv842k
VSlLBlpPMUP5kaacZNZ24MYDOUtQ6mABl5CK1tLFnzndDA2Oi8AJyfZZvQiq
MHVPaZhb8iVjBFSaGmqlVOGw79DKiBy7vbAo3E5BJpcRcx0VRiK1BV4Ekp/x
BxKHY8vtUkE9KrzthxsQNV19NCLBdj1a8YbxdKytTCyw3bQi6OhRVtgqu4ss
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

-->

</rfc>
