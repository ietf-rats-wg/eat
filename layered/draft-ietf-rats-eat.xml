<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.1 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.6.0 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@island-resort.com</email>
      </address>
    </author>
    <author initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 4299</phone>
        <email>mballest@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2021" month="April" day="10"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides a signed (attested) set of
claims that describe state and characteristics of an entity, typically
a device like a phone or an IoT device.  These claims are used by a
relying party to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CWT or JWT with some attestation-oriented 
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
    <note>
      <name>Contributing</name>
      <t>TBD</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Remote device attestation is a fundamental service that allows a remote
device such as a mobile phone, an Internet-of-Things (IoT) device, or
other endpoint to prove itself to a relying party, a server or a
service.  This allows the relying party to know some characteristics
about the device and decide whether it trusts the device.</t>
      <t>Remote attestation is a fundamental service that can underlie other
protocols and services that need to know about the trustworthiness of
the device before proceeding. One good example is biometric
authentication where the biometric matching is done on the device. The
relying party needs to know that the device is one that is known to do
biometric matching correctly.  Another example is content protection
where the relying party wants to know the device will protect the
data.  This generalizes on to corporate enterprises that might want to
know that a device is trustworthy before allowing corporate data to be
accessed by it.</t>
      <t>The notion of attestation here is large and may include, but is not
limited to the following:</t>
      <ul spacing="normal">
        <li>Proof of the make and model of the device hardware (HW)</li>
        <li>Proof of the make and model of the device processor, particularly
for security-oriented chips</li>
        <li>Measurement of the software (SW) running on the device</li>
        <li>Configuration and state of the device</li>
        <li>Environmental characteristics of the device such as its GPS location</li>
      </ul>
      <t>TODO: mention use for Attestation Evidence and Results.</t>
      <section anchor="cwt-jwt-and-uccs" numbered="true" toc="default">
        <name>CWT, JWT and UCCS</name>
        <t>For flexibility and ease of imlpementation in a wide variety of environments, EATs can be either CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/> format.
This specification simultaneously describes both formats.</t>
        <t>An EAT is either a CWT as defined in <xref target="RFC8392" format="default"/>, a UCCS as defined in <xref target="UCCS.Draft" format="default"/>, or a JWT as defined in <xref target="RFC7519" format="default"/>.
This specification extends those specifications with additional claims for attestation.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON format, follows the general conventions used by CWT, JWT and UCCS.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      </section>
      <section anchor="cddl" numbered="true" toc="default">
        <name>CDDL</name>
        <t>This specification uses CDDL, <xref target="RFC8610" format="default"/>, as the primary formalism to
define each claim.  The implementor then interprets the CDDL to come
to either the CBOR <xref target="RFC8949" format="default"/> or JSON <xref target="ECMAScript" format="default"/>
representation. In the case of JSON, Appendix E of <xref target="RFC8610" format="default"/> is
followed. Additional rules are given in <xref target="jsoninterop" format="default"/> of this
document where Appendix E is insufficient.  (Note that this is not to
define a general means to translate between CBOR and JSON, but only to
define enough such that the claims defined in this document can be
rendered unambiguously in JSON).</t>
        <t>The CWT specification was authored before CDDL was available and did not use it.
This specification includes a CDDL definition of most of what is described in <xref target="RFC8392" format="default"/>.</t>
      </section>
      <section anchor="entity-overview" numbered="true" toc="default">
        <name>Entity Overview</name>
        <t>An "entity" can be any device or device subassembly ("submodule") that
can generate its own attestation in the form of an EAT.  The
attestation should be cryptographically verifiable by the EAT
consumer. An EAT at the device-level can be composed of several
submodule EAT's.  It is assumed that any entity that can create an EAT
does so by means of a dedicated root-of-trust (RoT).</t>
        <t>Modern devices such as a mobile phone have many different execution
environments operating with different security levels. For example, it
is common for a mobile phone to have an "apps" environment that runs
an operating system (OS) that hosts a plethora of downloadable
apps. It may also have a TEE (Trusted Execution Environment) that is
distinct, isolated, and hosts security-oriented functionality like
biometric authentication. Additionally, it may have an eSE (embedded
Secure Element) - a high security chip with defenses against HW
attacks that can serve as a RoT.  This device attestation format
allows the attested data to be tagged at a security level from which
it originates.  In general, any discrete execution environment that
has an identifiable security level can be considered an entity.</t>
      </section>
      <section anchor="eat-operating-models" numbered="true" toc="default">
        <name>EAT Operating Models</name>
        <t>TODO: Rewrite (or eliminate) this section in light of the RATS architecture draft.</t>
        <t>At least the following three participants exist in all EAT operating
models. Some operating models have additional participants.</t>
        <dl>
          <dt>
The Entity.  </dt>
          <dd>
            <t>This is the phone, the IoT device, the sensor, the sub-assembly or
such that the attestation provides information about.</t>
          </dd>
          <dt>
The Manufacturer.  </dt>
          <dd>
            <t>The company that made the entity.  This may be a chip vendor, a
circuit board module vendor or a vendor of finished consumer products.</t>
          </dd>
          <dt>
The Relying Party.  </dt>
          <dd>
            <t>The server, service or company that makes use of the information in
the EAT about the entity.</t>
          </dd>
        </dl>
        <t>In all operating models, the manufacturer provisions some secret
attestation key material (AKM) into the entity during manufacturing.
This might be during the manufacturer of a chip at a fabrication
facility (fab) or during final assembly of a consumer product or any
time in between. This attestation key material is used for signing
EATs.</t>
        <t>In all operating models, hardware and/or software on the entity create
an EAT of the format described in this document. The EAT is always
signed by the attestation key material provisioned by the
manufacturer.</t>
        <t>In all operating models, the relying party must end up knowing that
the signature on the EAT is valid and consistent with data from claims
in the EAT.  This can happen in many different ways. Here are some
examples.</t>
        <ul spacing="normal">
          <li>The EAT is transmitted to the relying party. The relying party gets
corresponding key material (e.g. a root certificate) from the
manufacturer. The relying party performs the verification.</li>
          <li>The EAT is transmitted to the relying party. The relying party
transmits the EAT to a verification service offered by the
manufacturer. The server returns the validated claims.</li>
          <li>The EAT is transmitted directly to a verification service, perhaps
operated by the manufacturer or perhaps by another party. It
verifies the EAT and makes the validated claims available to the
relying party. It may even modify the claims in some way and re-sign
the EAT (with a different signing key).</li>
        </ul>
        <t>All these operating models are supported and there is no preference
of one over the other. It is important to support this variety of
operating models to generally facilitate deployment and to allow for
some special scenarios. One special scenario has a validation service
that is monetized, most likely by the manufacturer.  In another, a
privacy proxy service processes the EAT before it is transmitted to
the relying party. In yet another, symmetric key material is used for
signing. In this case the manufacturer should perform the
verification, because any release of the key material would enable a
participant other than the entity to create valid signed EATs.</t>
      </section>
      <section anchor="what-is-not-standardized" numbered="true" toc="default">
        <name>What is Not Standardized</name>
        <t>The following is not standardized for EAT, just the same they are not
standardized for CWT or JWT.</t>
        <section anchor="transmission-protocol" numbered="true" toc="default">
          <name>Transmission Protocol</name>
          <t>EATs may be transmitted by any protocol the same as CWTs and JWTs. For
example, they might be added in extension fields of other protocols,
bundled into an HTTP header, or just transmitted as files. This
flexibility is intentional to allow broader adoption. This flexibility
is possible because EAT's are self-secured with signing (and possibly
additionally with encryption and anti-replay). The transmission
protocol is not required to fulfill any additional security
requirements.</t>
          <t>For certain devices, a direct connection may not exist between the
EAT-producing device and the Relying Party. In such cases, the EAT
should be protected against malicious access. The use of COSE and JOSE
allows for signing and encryption of the EAT. Therefore, even if the
EAT is conveyed through intermediaries between the device and Relying
Party, such intermediaries cannot easily modify the EAT payload or
alter the signature.</t>
        </section>
        <section anchor="signing-scheme" numbered="true" toc="default">
          <name>Signing Scheme</name>
          <t>The term "signing scheme" is used to refer to the system that includes
end-end process of establishing signing attestation key material in
the entity, signing the EAT, and verifying it. This might involve key
IDs and X.509 certificate chains or something similar but
different. The term "signing algorithm" refers just to the algorithm
ID in the COSE signing structure. No particular signing algorithm or
signing scheme is required by this standard.</t>
          <t>There are three main implementation issues driving this. First, secure
non-volatile storage space in the entity for the attestation key
material may be highly limited, perhaps to only a few hundred bits, on
some small IoT chips. Second, the factory cost of provisioning key
material in each chip or device may be high, with even millisecond
delays adding to the cost of a chip. Third, privacy-preserving signing
schemes like ECDAA (Elliptic Curve Direct Anonymous Attestation) are
complex and not suitable for all use cases.</t>
          <t>Over time to faciliate interoperability, some signing schemes may be
defined in EAT profiles or other documents either in the IETF or outside.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519" format="default"/>, COSE
<xref target="RFC8152" format="default"/>, and CWT <xref target="RFC8392" format="default"/>.</t>
      <dl>
        <dt>
Claim Name.  </dt>
        <dd>
          <t>The human-readable name used to identify a claim.</t>
        </dd>
        <dt>
Claim Key.  </dt>
        <dd>
          <t>The CBOR map key or JSON name used to identify a claim.</t>
        </dd>
        <dt>
Claim Value.  </dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>
CWT Claims Set.  </dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
        <dt>
Attestation Key Material (AKM).  </dt>
        <dd>
          <t>The key material used to sign the EAT token. If it is done
symmetrically with HMAC, then this is a simple symmetric key.
If it is done with ECC, such as an IEEE DevID <xref target="IDevID" format="default"/>, then this
is the private part of the EC key pair. If ECDAA 
is used, (e.g., as used by Enhanced Privacy ID, i.e. EPID) then it is the key material 
needed for ECDAA.</t>
        </dd>
      </dl>
    </section>
    <section anchor="the-claims" numbered="true" toc="default">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation. It also
mentions several claims defined by CWT and JWT that are particularly
important for EAT.</t>
      <t>Note also:
* Any claim defined for CWT or JWT may be used in an EAT including 
  those in the CWT <xref target="IANA.CWT.Claims" format="default"/> and JWT IANA <xref target="IANA.JWT.Claims" format="default"/>
  claims registries.</t>
      <ul spacing="normal">
        <li>All claims are optional</li>
        <li>No claims are mandatory</li>
        <li>All claims that are not understood by implementations MUST be ignored</li>
      </ul>
      <t>There are no default values or meanings assigned to absent claims
other than they are not reported. The reason for a claim's absence may
be the implementation not supporting the claim, an inability to
determine its value, or a preference to report in a different way such
as a proprietary claim.</t>
      <t>CDDL along with text descriptions is used to define each claim
indepdent of encoding.  Each claim is defined as a CDDL group (the
group is a general aggregation and type definition feature of
CDDL). In the encoding section <xref target="encoding" format="default"/>, the CDDL groups turn into
CBOR map entries and JSON name/value pairs.</t>
      <t>TODO: add paragraph here about use for Attestation Evidence and for Results.</t>
      <section anchor="token-id-claim-cti-and-jti" numbered="true" toc="default">
        <name>Token ID Claim (cti and jti)</name>
        <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent to each other in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are distinct from the nonce that is used by the relying
party to guarantee freshness and defend against replay.</t>
      </section>
      <section anchor="timestamp-claim-iat" numbered="true" toc="default">
        <name>Timestamp claim (iat)</name>
        <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
        <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even 
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
        <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. No token may contain an iat claim in
float-point format. Any recipient of a token with a floating-point
format iat claim may consider it an error.  A 64-bit integer 
representation of epoch time can represent a range of +/- 500 billion
years, so the only point of a floating-point timestamp is to 
have precession greater than one second. This is not needed for EAT.</t>
      </section>
      <section anchor="nonce-claim-nonce" numbered="true" toc="default">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs should have a nonce to prevent replay attacks. The nonce is
generated by the relying party, the end consumer of the token. It is
conveyed to the entity over whatever transport is in use before the
token is generated and then included in the token as the nonce claim.</t>
        <t>This documents the nonce claim for registration in the IANA CWT 
claims registry. This is equivalent to the JWT nonce claim that is
already registered.</t>
        <t>The nonce must be at least 8 bytes (64 bits) as fewer are unlikely
to be secure. A maximum of 64 bytes is set to limit the memory
a constrained implementation uses. This size range is not set
for the already-registered JWT nonce, but it should follow
this size recommendation when used in an EAT.</t>
        <t>Multiple nonces are allowed to accommodate multistage verification
and consumption.</t>
        <section anchor="nonce-cddl" numbered="true" toc="default">
          <name>nonce CDDL</name>
          <sourcecode type="CDDL">
nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)
</sourcecode>
        </section>
      </section>
      <section anchor="universal-entity-id-claim-ueid" numbered="true" toc="default">
        <name>Universal Entity ID Claim (ueid)</name>
        <t>UEID's identify individual manufactured entities / devices such as a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire device or a submodule or
subsystem. It does not identify types, models or classes of
devices. It is akin to a serial number, though it does not have to be
sequential.</t>
        <t>UEID's must be universally and globally unique across manufacturers
and countries. UEIDs must also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the device to keep devices distinct
between manufacturers).</t>
        <t>There are privacy considerations for UEID's. See <xref target="ueidprivacyconsiderations" format="default"/>.</t>
        <t>The UEID should be permanent. It should never change for a given
device / entity. In addition, it should not be reprogrammable.  UEID's
are variable length. All implementations MUST be able to receive
UEID's that are 33 bytes long (1 type byte and 256 bits).  The
recommended maximum sent is also 33 bytes.</t>
        <t>When the entity constructs the UEID, the first byte is a type and the
following bytes the ID for that type. Several types are allowed to
accommodate different industries and different manufacturing processes
and to give options to avoid paying fees for certain types of
manufacturer registrations.</t>
        <t>Creation of new types requires a Standards Action <xref target="RFC8126" format="default"/>.</t>
        <table anchor="ueid-types-table" align="center">
          <name>UEID Composition Types</name>
          <thead>
            <tr>
              <th align="left">Type Byte</th>
              <th align="left">Type Name</th>
              <th align="left">Specification</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x01</td>
              <td align="left">RAND</td>
              <td align="left">This is a 128, 192 or 256 bit random number generated once and stored in the device. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the device and stored. It may not be smaller than 128 bits.</td>
            </tr>
            <tr>
              <td align="left">0x02</td>
              <td align="left">IEEE EUI</td>
              <td align="left">This makes use of the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-device identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while devices with multiple network interfaces may have multiple MAC addresses, there is only one UEID for a device) <xref target="IEEE.802-2001" format="default"/>, <xref target="OUI.Guide" format="default"/></td>
            </tr>
            <tr>
              <td align="left">0x03</td>
              <td align="left">IMEI</td>
              <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. <xref target="ThreeGPP.IMEI" format="default"/></td>
            </tr>
          </tbody>
        </table>
        <t>UEID's are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
        <t>The consumer (the relying party) of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the device. Instead they
should use the oemid claim that is defined elsewhere. The reasons for
this are:</t>
        <ul spacing="normal">
          <li>UEIDs types may vary freely from one manufacturer to the next.</li>
          <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
          <li>Device manufacturers are allowed to change from one type of UEID to
another anytime they want. For example, they may find they can
optimize their manufacturing by switching from type 0x01 to type
0x02 or vice versa.  The main requirement on the manufacturer is
that UEIDs be universally unique.</li>
        </ul>
        <section anchor="ueid-cddl" numbered="true" toc="default">
          <name>ueid CDDL</name>
          <sourcecode type="CDDL">
ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="origination-claim-origination" numbered="true" toc="default">
        <name>Origination Claim (origination)</name>
        <t>TODO: this claim is likely to be dropped in favor of Endorsement identifier and locators.</t>
        <t>This claim describes the parts of the device or entity that are
creating the EAT. Often it will be tied back to the device or chip
manufacturer. The following table gives some examples:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Name</th>
              <th align="left">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">Acme-TEE</td>
              <td align="left">The EATs are generated in the TEE authored and configured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TPM</td>
              <td align="left">The EATs are generated in a TPM manufactured by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-Linux-Kernel</td>
              <td align="left">The EATs are generated in a Linux kernel configured and shipped by "Acme"</td>
            </tr>
            <tr>
              <td align="left">Acme-TA</td>
              <td align="left">The EATs are generated in a Trusted Application (TA) authored by "Acme"</td>
            </tr>
          </tbody>
        </table>
        <t>TODO: consider a more structure approach where the name and the URI
and other are in separate fields.</t>
        <t>TODO: This needs refinement. It is somewhat parallel to issuer claim
in CWT in that it describes the authority that created the token.</t>
        <section anchor="origination-cddl" numbered="true" toc="default">
          <name>origination CDDL</name>
          <sourcecode type="CDDL">
origination-claim = (
    origination =&gt; string-or-uri
)
</sourcecode>
        </section>
      </section>
      <section anchor="oemid" numbered="true" toc="default">
        <name>OEM Identification by IEEE (oemid)</name>
        <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA" format="default"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide" format="default"/> and provides a lookup
services <xref target="OUI.Lookup" format="default"/></t>
        <t>Companies that have more than one of these IDs or MAC address blocks
should pick one and prefer that for all their devices.</t>
        <t>Commonly, these are expressed in Hexadecimal Representation
<xref target="IEEE.802-2001" format="default"/> also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48. For JSON encoded
tokens, this is further base64url encoded.</t>
        <section anchor="oemid-cddl" numbered="true" toc="default">
          <name>oemid CDDL</name>
          <sourcecode type="CDDL">
oemid-claim = (
    oemid =&gt; bstr
)
</sourcecode>
        </section>
      </section>
      <section anchor="hardware-version-claims-hardware-version-claims" numbered="true" toc="default">
        <name>Hardware Version Claims (hardware-version-claims)</name>
        <t>The hardware version can be claimed at three different levels, the chip, the circuit board and the final device assembly.
An EAT can include any combination these claims.</t>
        <t>The hardware version is a simple text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID" format="default"/>.</t>
        <t>The hardware version can also be given by a 13-digit European Article Number <xref target="EAN-13" format="default"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This claim is the ASCII text representation of actual digits often printed with a bar code.
Use of this claim must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
        <t>Both the simple version string and EAN-13 versions may be included for the same hardware.</t>
        <sourcecode type="CDDL">
chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)

</sourcecode>
      </section>
      <section anchor="software-description-and-version" numbered="true" toc="default">
        <name>Software Description and Version</name>
        <t>TODO: Add claims that reference CoSWID.</t>
      </section>
      <section anchor="the-security-level-claim-security-level" numbered="true" toc="default">
        <name>The Security Level Claim (security-level)</name>
        <t>This claim characterizes the device/entity 
ability to defend against attacks aimed at capturing the signing
key, forging claims and at forging EATs. This is done by
defining four security levels as described below. This is similar
to the key protection types defined by the Fast Identity Online (FIDO) Alliance <xref target="FIDO.Registry" format="default"/>.</t>
        <t>These claims describe security environment and countermeasures
available on the end-entity / client device where the attestation key
reside and the claims originate.</t>
        <dl>
          <dt>
1 -- Unrestricted  </dt>
          <dd>
            <t>There is some expectation that implementor will
protect the attestation signing keys at this level. Otherwise
the EAT provides no meaningful security assurances.</t>
          </dd>
          <dt>
2-- Restricted  </dt>
          <dd>
            <t>Entities at this level should not be general-purpose
operating environments that host features such as app download
systems, web browsers and complex productivity applications.
It is akin to the Secure Restricted level (see below) without the
security orientation. Examples include a Wi-Fi subsystem,
an IoT camera, or sensor device.</t>
          </dd>
          <dt>
3 -- Secure Restricted  </dt>
          <dd>
            <t>Entities at this level must meet the criteria defined by FIDO Allowed
Restricted Operating Environments <xref target="FIDO.AROE" format="default"/>. Examples include TEE's and 
schemes using virtualization-based security. Like the FIDO security goal,
security at this level is aimed at defending well against large-scale
network / remote attacks against the device.</t>
          </dd>
          <dt>
4 -- Hardware  </dt>
          <dd>
            <t>Entities at this level must include substantial defense 
against physical or electrical attacks against the device itself.
It is assumed any potential attacker has captured the device and can 
disassemble it. Example include TPMs and Secure Elements.</t>
          </dd>
        </dl>
        <t>The entity should claim the highest security level it achieves and no higher.
This set is not extensible so as to provide a common interoperable description of security level to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of security and its own proprietary claim as a refined indication.</t>
        <t>This claim is not intended as a replacement for a proper end-device
security certification schemes such as those based on FIPS 140 <xref target="FIPS-140" format="default"/> 
or those based on Common Criteria <xref target="Common.Criteria" format="default"/>. The 
claim made here is solely a self-claim made by the Entity Originator.</t>
        <section anchor="security-level-cddl" numbered="true" toc="default">
          <name>security-level CDDL</name>
          <sourcecode type="CDDL">
security-level-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-claim = (
    security-level =&gt; security-level-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="secure-boot-claim-secure-boot" numbered="true" toc="default">
        <name>Secure Boot Claim (secure-boot)</name>
        <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when base software, the firmware and operating
system, are under control of the entity manufacturer identified in the
oemid claimd described in <xref target="oemid" format="default"/>. This may because the software is
in ROM or because it is cryptographically authenticated or some
combination of the two or other.</t>
        <section anchor="secure-boot-cddl" numbered="true" toc="default">
          <name>secure-boot CDDL</name>
          <sourcecode type="CDDL">
secure-boot-claim = (
    secure-boot =&gt; bool
)
</sourcecode>
        </section>
      </section>
      <section anchor="debug-status-claim-debug-status" numbered="true" toc="default">
        <name>Debug Status Claim (debug-status)</name>
        <t>This applies to system-wide or submodule-wide debug facilities of the
target device / submodule like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
        <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-device
public keys.</t>
        <t>As with all claims, the absence of the debug level claim means
it is not reported. A conservative interpretation might assume
the Not Disabled state. It could however be that it is reported
in a proprietary claim.</t>
        <t>This claim is not extensible so as to provide a common interoperable description of debug status to the relying party.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
        <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
        <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The verifier or relying party receiving an EAT cannot
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
        <t>An individual target device / submodule may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
        <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the relying party can know the debug status
of the submodules since there is no inheritance.</t>
        <section anchor="enabled" numbered="true" toc="default">
          <name>Enabled</name>
          <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
        </section>
        <section anchor="disabled" numbered="true" toc="default">
          <name>Disabled</name>
          <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future, and it may also be
possible that they were enabled in the past after the
target device/sub-system booted/started, but they are currently disabled.</t>
        </section>
        <section anchor="disabled-since-boot" numbered="true" toc="default">
          <name>Disabled Since Boot</name>
          <t>This level indicates all debug facilities are currently disabled and
have been so since the target device/sub-system booted/started.</t>
        </section>
        <section anchor="disabled-permanently" numbered="true" toc="default">
          <name>Disabled Permanently</name>
          <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer cannot enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
        </section>
        <section anchor="disabled-fully-and-permanently" numbered="true" toc="default">
          <name>Disabled Fully and Permanently</name>
          <t>This level indicates that all debug capabilities for the target
device/sub-module are permanently disabled.</t>
        </section>
        <section anchor="debug-status-cddl" numbered="true" toc="default">
          <name>debug-status CDDL</name>
          <sourcecode type="CDDL">
debug-status-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-claim = (
    debug-status =&gt; debug-status-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="including-keys" numbered="true" toc="default">
        <name>Including Keys</name>
        <t>An EAT may include a cryptographic key such as a public key.
The signing of the EAT binds the key to all the other claims in the token.</t>
        <t>The purpose for inclusion of the key may vary by use case.
For example, the key may be included as part of an IoT device onboarding protocol.
When the FIDO protocol includes a pubic key in its attestation message, the key represents the binding of a user, device and relying party.
This document describes how claims containing keys should be defined for the various use cases.
It does not define specific claims for specific use cases.</t>
        <t>Keys in CBOR format tokens SHOULD be the COSE_Key format <xref target="RFC8152" format="default"/> and keys in JSON format tokens SHOULD be the JSON Web Key format <xref target="RFC7517" format="default"/>.
These two formats support many common key types.
Their use avoids the need to decode other serialization formats.
These two formats can be extended to support further key types through their IANA registries.</t>
        <t>The general confirmation claim format <xref target="RFC8747" format="default"/>, <xref target="RFC7800" format="default"/> may also be used.
It provides key encryption. 
It also allows for inclusion by reference through a key ID.
The confirmation claim format may employed in the definition of some new claim for a a particular use case.</t>
        <t>When the actual confirmation claim is included in an EAT, this document associates no use case semantics other than proof of posession.
Different EAT use cases may choose to associate further semantics.
The key in the confirmation claim MUST be protected the same as the key used to sign the EAT. 
That is, the same, equivalent or better hardware defenses, access controls, key generation and such must be used.</t>
      </section>
      <section anchor="the-location-claim-location" numbered="true" toc="default">
        <name>The Location Claim (location)</name>
        <t>The location claim gives the location of the device entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc" format="default"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84" format="default"/>.
The altitude is in meters above the <xref target="WGS84" format="default"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the device is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the device velocity in meters per second.</t>
        <t>When encoding floating-point numbers half-precision should not be used.
It usually does not provide enough precision for a geographic location.
It is not a requirement that the receiver of an EAT implement half-precision, so the receiver may not be able to decode the location.</t>
        <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
        <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity must still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
        <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations" format="default"/> below.</t>
        <section anchor="location-cddl" numbered="true" toc="default">
          <name>location CDDL</name>
          <sourcecode type="CDDL">
location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1
longitude = 2
altitude = 3
accuracy = 4
altitude-accuracy = 5
heading = 6
speed = 7
timestamp = 8
age = 9

location-claim = (
    location =&gt; location-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-uptime-claim-uptime" numbered="true" toc="default">
        <name>The Uptime Claim (uptime)</name>
        <t>The "uptime" claim contains a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
        <section anchor="uptime-cddl" numbered="true" toc="default">
          <name>uptime CDDL</name>
          <sourcecode type="CDDL">
uptime-claim = (
    uptime =&gt; uint
)
</sourcecode>
        </section>
      </section>
      <section anchor="the-boot-seed-claim-boot-seed" numbered="true" toc="default">
        <name>The Boot Seed Claim (boot-seed)</name>
        <t>The Boot Seed claim is a random value created at system boot time that will allow differentiation of reports from different boot sessions.
This value is usually public and not protected.
It is not the same as a seed for a random number generator which must be kept secret.</t>
        <sourcecode type="CDDL">
boot-seed-claim = (
    boot-seed =&gt; bytes
)
</sourcecode>
      </section>
      <section anchor="intended-use" numbered="true" toc="default">
        <name>The Intended Use Claim (intended-use)</name>
        <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
        <dl>
          <dt>
1 -- Generic  </dt>
          <dd>
            <t>Generic attestation describes an application where the EAT consumer
requres the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
          </dd>
          <dt>
2-- Registration  </dt>
          <dd>
            <t>Entities that are registering for a new service may be expected to 
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
          </dd>
          <dt>
3 -- Provisioning  </dt>
          <dd>
            <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess device security state of the entity prior to provisioning.</t>
          </dd>
          <dt>
4 -- Certificate Issuance (Certificate Signing Request)  </dt>
          <dd>
            <t>Certifying authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
          </dd>
          <dt>
5 -- Proof-of-Possession  </dt>
          <dd>
            <t>An EAT consumer may require an attestation as part of an accompanying 
proof-of-possession (PoP) appication. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has posession
of a key.  This kind of attestation may be neceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
          </dd>
          <dt>
6 -- Attesting Environment  </dt>
          <dd>
            <t>This is used only in submodules. It indicates that the target of the 
Attestation Evidence is itself an Attesting Environement. See <xref target="layered" format="default"/>.</t>
          </dd>
        </dl>
        <section anchor="intended-use-cddl" numbered="true" toc="default">
          <name>intended-use CDDL</name>
          <sourcecode type="CDDL">
intended-use-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5,
    attest-env: 6
)

intended-use-claim = (
    intended-use =&gt; intended-use-type
)
</sourcecode>
        </section>
      </section>
      <section anchor="profile-claim" numbered="true" toc="default">
        <name>The Profile Claim (profile)</name>
        <t>See <xref target="profiles" format="default"/> for the detailed description of a profile.</t>
        <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
        <t>The OID is encoded in CBOR according to <xref target="CBOR-OID" format="default"/> and the URI according to <xref target="RFC8949" format="default"/>.
Both are unwrapped and thus not tags.
The OID is always absolute and never relative.
If the claims CBOR type is a text string it is a URI and if a byte string it is an OID.</t>
        <t>Note that this named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
        <sourcecode type="CDDL">
profile-claim = (
    profile =&gt; ~uri / ~oid
)
</sourcecode>
      </section>
      <section anchor="the-submodules-part-of-a-token-submods" numbered="true" toc="default">
        <name>The Submodules Part of a Token (submods)</name>
        <t>Some devices are complex, having many subsystems or submodules.  A
mobile phone is a good example. It may have several connectivity
submodules for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have one or
more security-oriented subsystems like a TEE or a Secure Element.</t>
        <t>The claims for each these can be grouped together in a submodule.</t>
        <t>The submods part of a token are in a single map/object with many entries, one
per submodule.  There is only one submods map in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claim set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claim sets inside of claim sets
inside of claims sets...</t>
        <section anchor="two-types-of-submodules" numbered="true" toc="default">
          <name>Two Types of Submodules</name>
          <t>Each entry in the submod map is one of two types:</t>
          <ul spacing="normal">
            <li>A non-token submodule that is a map or object directly containing claims for the submodule.</li>
            <li>A nested EAT that is a fully formed, independently signed EAT token</li>
          </ul>
          <section anchor="non-token-submodules" numbered="true" toc="default">
            <name>Non-token Submodules</name>
            <t>This is simply a map or object containing claims about the submodule.</t>
            <t>It may contain claims that are the same as its surrounding token or superior submodules. 
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
            <t>It is signed/encrypted along with the rest of the token and thus the claims are secured by the same Attester with the same signing key as the rest of the token.</t>
            <t>If a token is in CBOR format (a CWT or a UCCS), all non-token submodules must be CBOR format.
If a token in in JSON format (a JWT), all non-token submodules must be in JSON format.</t>
            <t>When decoding, this type of submodule is recognized from the other type by being a data item of type map for CBOR or type object for JSON.</t>
          </section>
          <section anchor="nested-eats" numbered="true" toc="default">
            <name>Nested EATs</name>
            <t>This type of submodule is a fully formed secured EAT as defined in this document except that it MUST NOT be a UCCS or an unsecured JWT.
A nested token that is one that is always secured using COSE or JOSE, usually by an independent Attester.
When the surrounding EAT is a CWT or secured JWT, the nested token becomes securely bound with the other claims in the surrounding token.</t>
            <t>It is allowed to have a CWT as a submodule in a JWT and vice versa, but this SHOULD be avoided unless necessary.</t>
            <section anchor="surrounding-eat-is-cbor-format" numbered="true" toc="default">
              <name>Surrounding EAT is CBOR format</name>
              <t>They type of an EAT nested in a CWT is determined by whether the CBOR type is a text string or a byte string.
If a text string, then it is a JWT.
If a byte string, then it is a CWT.</t>
              <t>A CWT nested in a CBOR-format token is always wrapped by a byte string for easier handling with standard CBOR decoders and token processing APIs that will typically take a byte buffer as input.</t>
              <t>Nested CWTs may be either a CWT CBOR tag or a CWT Protocol Message.
COSE layers in nested CWT EATs MUST be a COSE_Tagged_Message, never a COSE_Untagged_Message.
If a nested EAT has more than one level of COSE, for example one that is both encrypted and signed, a COSE_Tagged_message must be used at every level.</t>
            </section>
            <section anchor="surrounding-eat-is-json-format" numbered="true" toc="default">
              <name>Surrounding EAT is JSON format</name>
              <t>When a CWT is nested in a JWT, it must be as a 55799 tag in order to distinguish it from a nested JWT.</t>
              <t>When a nested EAT in a JWT is decoded, first remove the base64url encoding.
Next, check to see if it starts with the bytes 0xd9d9f7.
If so, then it is a CWT as a JWT will never start with these four bytes. 
If not if it is a JWT.</t>
              <t>Other than the 55799 tag requirement, tag usage for CWT's nested in a JSON format token follow the same rules as for CWTs nested in CBOR-format tokens.
It may be a CWT CBOR tag or a CWT Protocol Message and COSE_Tagged_Message MUST be used at all COSE layers.</t>
            </section>
          </section>
          <section anchor="unsecured-jwts-and-uccs-tokens-as-submodules" numbered="true" toc="default">
            <name>Unsecured JWTs and UCCS Tokens as Submodules</name>
            <t>To incorporate a UCCS token as a submodule, it MUST be as a non-token submodule. 
This can be accomplished inserting the content of the UCCS Tag into the submodule map.
The content of a UCCS tag is exactly a map of claims as required for a non-token submodule.
If the UCCS is not a UCCS tag, then it can just be inserted into the submodule map directly.</t>
            <t>The definition of a nested EAT type of submodule is that it is one that is secured (signed) by an Attester.
Since UCCS tokens are unsecured, they do not fulfill this definition and must be non-token submodules.</t>
            <t>To incorporate an Unsecured JWT as a submodule, the null-security JOSE wrapping should be removed.
The resulting claims set should be inserted as a non-token submodule.</t>
            <t>To incorporate a UCCS token in a surrounding JSON token, the UCCS token claims should be translated from CBOR to JSON.
To incorporate an Unsecured JWT into a surrounding CBOR-format token, the null-security JOSE should be removed and the claims translated from JSON to CBOR.</t>
          </section>
        </section>
        <section anchor="no-inheritance" numbered="true" toc="default">
          <name>No Inheritance</name>
          <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce and age.</t>
          <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
        </section>
        <section anchor="security-levels" numbered="true" toc="default">
          <name>Security Levels</name>
          <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
          <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
        </section>
        <section anchor="submodule-names" numbered="true" toc="default">
          <name>Submodule Names</name>
          <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
        </section>
        <section anchor="submods-cddl" numbered="true" toc="default">
          <name>submods CDDL</name>
          <sourcecode type="CDDL">
; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 


</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="keyid" numbered="true" toc="default">
      <name>Endorsements and Verification Keys</name>
      <t>TODO: fill this section in. It will discuss key IDs, endorsement ID and such that
are needed as input needed to by the Verifier to verify the signature. This will
NOT discuss the contents of an Endorsement, just and ID/locator.</t>
    </section>
    <section anchor="layered" numbered="true" toc="default">
      <name>Layered Attestation</name>
      <t>It is possible for a device to have multiple Attesting Environments as described in <xref target="RATS-Architecture" format="default"/>.
When these are layered, one is a root the endorsement and/or verification key originates with the device manufacturer or endorser.
The trust for those that are layered above the root comes from Attestation Evidence about them that is provided by the root or a layer below.</t>
      <t>A layered Attesting Environment is always described as a submodule.
To know that a particular submodule is providing evidence for an Attesting Environment, it must have an intended use claim with the value of "attest=env".
See <xref target="intended-use" format="default"/>.</t>
      <t>The submodule should also contain a claim that hold the verification key, the key used to verify signed attestation evidence from the layered attester.
A specific claim is defined to hold verification keys.
There is no requirement on the algorithm or key type used by the layered attestation.
There is a requirement that the included key is in the format of a COSE_key.</t>
      <t>There are two ways that the Verifier comes to trust a layered Attesting Environment.</t>
      <t>First, the root or lower layer Attesting Environment provides claims, perhaps many claims, characterizing the Attesting Environment.
The Verifier recognized the claims are about an Attesting Environment by the intended use claim and uses the other claims to decide whether it trusts this layered Attesting Environment.
The decision is made by the Verifier.</t>
      <t>Second, the root or lower layer Attesting environment provides the is-trusted claim with a value of true.
This tells the Verifier that the Attesting Environment has been sufficiently evaluated on the device by the root or lower layer Attesting Environment.
The decision is made by on the device.</t>
      <t>Once the Verifier knows the Attesting Environment is trusted, then it makes use of the verification key to verify Attestation Evidence from the layered Attesting Environment.</t>
      <t>Multiple layers of Attesting Environments are allowed and must be represented as nested submodules.
The layered Attesting Environment must be a submodule of the root of the token or a lower layer Attesting Environment.
It doesn't have to be an immediate submodule, though. 
It can be a submodule of a submodule as long as none of the intermediate submodules are not layered Attesting Environments.</t>
      <sourcecode type="CDDL">
COSE_Key = {  }   ; Temporary definition until I know how to reference CDDL from other RFCs

verification-key-claim = (
    verification-key =&gt; COSE_Key
)

is-trusted-claim = (
    is-trusted =&gt; int 
)
</sourcecode>
    </section>
    <section anchor="profiles" numbered="true" toc="default">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will gauarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim" format="default"/>.</t>
      <section anchor="format-of-a-profile-document" numbered="true" toc="default">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>In some cases CDDL may be created that replaces CDDL in this or other document to express some profile requirements.
For example, to require the altitude data item in the location claim, CDDL can be written that replicates the location claim with the altitude no longer optional.</t>
      </section>
      <section anchor="list-of-profile-issues" numbered="true" toc="default">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, UCCS, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both" numbered="true" toc="default">
          <name>Use of JSON, CBOR or both</name>
          <t>The profile should indicate whether the token format should be CBOR, JSON, both or even some other encoding.
If some other encoding, a specification for how the CDDL described here is serialized in that encoding is necessary.</t>
          <t>This should be addressed for the top-level token and for any nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding" numbered="true" toc="default">
          <name>CBOR Map and Array Encoding</name>
          <t>The profile should indicate whether definite-length arrays/maps, indefinite-length arrays/maps or both are allowed.
A good default is to allow only definite-length arrays/maps.</t>
          <t>An alternate is to allow both definite and indefinite-length arrays/maps.
The decoder should accept either.
Encoders that need to fit on very small hardware or be actually implement in hardware can use indefinite-length encoding.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
        </section>
        <section anchor="cbor-string-encoding" numbered="true" toc="default">
          <name>CBOR String Encoding</name>
          <t>The profile should indicate whether definite-length strings, indefinite-length strings or both are allowed.
A good default is to allow only definite-length strings.
As with map and array encoding, allowing indefinite-length strings can be beneficial for some smaller implementations.</t>
        </section>
        <section anchor="cbor-preferred-serialization" numbered="true" toc="default">
          <name>CBOR Preferred Serialization</name>
          <t>The profile should indicate whether encoders must use preferred serialization.
The profile should indicate whether decoders must accept non-preferred serialization.</t>
        </section>
        <section anchor="cosejose-protection" numbered="true" toc="default">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
EAT/CWT has the option to have no protection using UCCS and JOSE has a NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, CWT and UCCS are allowed by EAT.</t>
          <t>The profile should list the protections that must be supported by all decoders implementing the profile.
The encoders them must implement a subset of what is listed for the decoders, perhaps only one.</t>
          <t>Implementations may choose to sign or MAC before encryption so that the implementation layer doing the signing or MACing can be the smallest.
It is often easier to make smaller implementations more secure, perhaps even implementing in solely in hardware.
The key material for a signature or MAC is a private key, while for encryption it is likely to be a public key.
The key for encryption requires less protection.</t>
        </section>
        <section anchor="cosejose-algorithms" numbered="true" toc="default">
          <name>COSE/JOSE Algorithms</name>
          <t>The profile document should list the COSE algorithms that a Verifier must implement.
The Attester will select one of them. 
Since there is no negotiation, the Verifier should implement all algorithms listed in the profile.</t>
        </section>
        <section anchor="verification-key-identification" numbered="true" toc="default">
          <name>Verification Key Identification</name>
          <t>Section <xref target="keyid" format="default"/> describes a number of methods for identifying a verification key.
The profile document should specify one of these or one that is not described.
The ones described in this document are only roughly described.
The profile document should go into the full detail.</t>
        </section>
        <section anchor="endorsement-identification" numbered="true" toc="default">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness" numbered="true" toc="default">
          <name>Freshness</name>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS-Architecture" format="default"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="required-claims" numbered="true" toc="default">
          <name>Required Claims</name>
          <t>The profile can list claims whose absence results in Verification failure.</t>
        </section>
        <section anchor="prohibited-claims" numbered="true" toc="default">
          <name>Prohibited Claims</name>
          <t>The profile can list claims whose presence results in Verification failure.</t>
        </section>
        <section anchor="additional-claims" numbered="true" toc="default">
          <name>Additional Claims</name>
          <t>The profile may describe entirely new claims.
These claims can be required or optional.</t>
        </section>
        <section anchor="refined-claim-definition" numbered="true" toc="default">
          <name>Refined Claim Definition</name>
          <t>The profile may lock down optional aspects of individual claims.
For example, it may require altitude in the location claim, or it may require that HW Versions always be described using EAN-13.</t>
        </section>
        <section anchor="cbor-tags" numbered="true" toc="default">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.
Similarly, the profile should specify whether the token should be a UCCS tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unncessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding" numbered="true" toc="default">
      <name>Encoding</name>
      <t>This makes use of the types defined in CDDL Appendix D, Standard Prelude.</t>
      <t>Some of the CDDL included here is for claims that are defined in CWT <xref target="RFC8392" format="default"/> or JWT <xref target="RFC7519" format="default"/> or are in the IANA CWT or JWT registries.
CDDL was not in use when these claims where defined.</t>
      <section anchor="common-cddl-types" numbered="true" toc="default">
        <name>Common CDDL Types</name>
        <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
        <sourcecode type="CDDL">
string-or-uri = tstr 

time-int = #6.1(int)
</sourcecode>
      </section>
      <section anchor="cddl-for-cwt-defined-claims" numbered="true" toc="default">
        <name>CDDL for CWT-defined Claims</name>
        <t>This section provides CDDL for the claims defined in CWT. It is
non-normative as <xref target="RFC8392" format="default"/> is the authoritative definition of these
claims.</t>
        <sourcecode type="CDDL">
$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

</sourcecode>
      </section>
      <section anchor="json" numbered="true" toc="default">
        <name>JSON</name>
        <section anchor="json-labels" numbered="true" toc="default">
          <name>JSON Labels</name>
          <sourcecode type="JSON">
; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
is-trusted /= "istrusted"
submods /= "submods"
timestamp /= "timestamp"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"
</sourcecode>
        </section>
        <section anchor="jsoninterop" numbered="true" toc="default">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per RFC 8610 Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519" format="default"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986" format="default"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
        </section>
      </section>
      <section anchor="cbor" numbered="true" toc="default">
        <name>CBOR</name>
        <section anchor="cbor-interoperability" numbered="true" toc="default">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form.
If the sender uses a form that the receiver can't decode, there will not be interoperability.</t>
          <t>This specification gives no blanket requirements to narrow CBOR serialization for all uses of EAT.
This allows individual uses to tailor serialization to the environment.
It also may result in EAT implementations that don't interoperate.</t>
          <t>One way to guarantee interoperability is to clearly specify CBOR serialization in a profile document.
See <xref target="profiles" format="default"/> for a list of serialization issues that should be addressed.</t>
          <t>EAT will be commonly used where the device generating the attestation is constrained and the receiver/verifier of the attestation is a capacious server.
Following is a set of serialization requirements that work well for that use case and are guaranteed to interoperate.
Use of this serialization is recommended where possible, but not required.
An EAT profile may just reference the following section rather than spell out serialization details.</t>
          <section anchor="eat-constrained-device-serialization" numbered="true" toc="default">
            <name>EAT Constrained Device Serialization</name>
            <ul spacing="normal">
              <li>Preferred serialization described in section 4.1 of <xref target="RFC8949" format="default"/> is not required.
The EAT decoder must accept all forms of number serialization.
The EAT encoder may use any form it wishes.</li>
              <li>The EAT decoder must accept indefinite length arrays and maps as described in section 3.2.2 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length arrays and maps if it wishes.</li>
              <li>The EAT decoder must accept indefinite length strings as described in section 3.2.3 of <xref target="RFC8949" format="default"/>.
The EAT encoder may use indefinite length strings if it wishes.</li>
              <li>Sorting of maps by key is not required.
The EAT decoder must not rely on sorting.</li>
              <li>Deterministic encoding described in Section 4.2 of <xref target="RFC8949" format="default"/> is not required.</li>
              <li>Basic validity described in section 5.3.1 of <xref target="RFC8949" format="default"/> must be followed.
The EAT encoder must not send duplicate map keys/labels or invalid UTF-8 strings.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="collected-cddl" numbered="true" toc="default">
        <name>Collected CDDL</name>
        <sourcecode type="CDDL">
; This is the top-level definition of the claims in EAT tokens.  To
; form an actual EAT Token, this claim set is enclosed in a COSE, JOSE
; or UCCS message.

eat-claim-set = {
    ? ueid-claim,
    ? nonce-claim,
    ? origination-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? uptime-claim,
    ? is-trusted-claim,
    ? verification-key-claim,
    ? submods-part,
    * $$eat-extension,
}


; This is the top-level definition of an EAT Token.  It is a CWT, JWT
; or UCSS where the payload is an eat-claim-set. A JWT_Message is what
; is defined by JWT in RFC 7519. (RFC 7519 doesn't use CDDL so a there
; is no actual CDDL definition of JWT_Message).

eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


; This is CBOR-format EAT token in the CWT or UCCS format that is a
; tag.  COSE_Tagged_message is defined in RFC 8152.  Tag 601 is
; proposed by the UCCS draft, but not yet assigned.

EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


; This is a CBOR-format EAT token that is a CWT or UCSS that is not a
; tag COSE_Tagged_message and COSE_Untagged_Message are defined in RFC
; 8152.

EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


; This is an "unwrapped" UCCS tag. Unwrapping a tag means to use the
; definition of its content without the preceding type 6 tag
; integer. Since a UCCS is nothing but a tag for an unsecured CWT
; claim set, unwrapping reduces to a bare eat-claim-set.

UCCS_Untagged_Message = eat-claim-set


string-or-uri = tstr 

time-int = #6.1(int)

$$eat-extension //= (
    ? issuer =&gt; text,
    ? subject =&gt; text,
    ? audience =&gt; text,
    ? expiration =&gt; time,
    ? not-before =&gt; time,
    ? issued-at =&gt; time,
    ? cwt-id =&gt; bytes,
)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


debug-status-type = &amp;(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
)

debug-status-claim = (
    debug-status =&gt; debug-status-type
)

location-type = {
    latitude =&gt; number,
    longitude =&gt; number,
    ? altitude =&gt; number,
    ? accuracy =&gt; number,
    ? altitude-accuracy =&gt; number,
    ? heading =&gt; number,
    ? speed =&gt; number,
    ? timestamp =&gt; ~time-int,
    ? age =&gt; uint
}

latitude = 1
longitude = 2
altitude = 3
accuracy = 4
altitude-accuracy = 5
heading = 6
speed = 7
timestamp = 8
age = 9

location-claim = (
    location =&gt; location-type
)

nonce-type = bstr .size (8..64)

nonce-claim = (
    nonce =&gt; nonce-type / [ 2* nonce-type ]
)

oemid-claim = (
    oemid =&gt; bstr
)

; copied from CoSWID
; TODO: how to properly make reference to CoSWID and have tool validate

  $version-scheme /= multipartnumeric
  $version-scheme /= multipartnumeric-suffix
  $version-scheme /= alphanumeric
  $version-scheme /= decimal
  $version-scheme /= semver
  $version-scheme /= uint / text
  multipartnumeric = 1
  multipartnumeric-suffix = 2
  alphanumeric = 3
  decimal = 4
  semver = 16384


chip-version-claim = (
    chip-version =&gt; tstr
)

chip-version-scheme-claim = (
    chip-version-scheme =&gt; $version-scheme
)

board-version-claim = (
    board-version =&gt; tstr
)

board-version-scheme-claim = (
    board-version-scheme =&gt; $version-scheme
)

device-version-claim = (
    device-version =&gt; tstr
)

device-version-scheme-claim = (
    device-version-scheme =&gt; $version-scheme
)


ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
    ean-chip-version =&gt; ean-type
)

ean-board-version-claim = (
    ean-board-version =&gt; ean-type
)

ean-device-version-claim = (
    ean-device-version =&gt; ean-type
)

hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
)


origination-claim = (
    origination =&gt; string-or-uri
)

secure-boot-claim = (
    secure-boot =&gt; bool
)

security-level-type = &amp;(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
)

security-level-claim = (
    security-level =&gt; security-level-type
)

; The part of a token that contains all the submodules.  It is a peer
; with the claims in the token, but not a claim, only a map/object to
; hold all the submodules.

submods-part = (
    submods =&gt; submods-type
)

submods-type = { + submod-type }


; The type of a submodule which can either be a nested claim set or a
; nested separately signed token. Nested tokens are wrapped in a bstr
; or a tstr.

submod-type = (
    submod-name =&gt; eat-claim-set / nested-token
)


; When this is a bstr, the contents are an eat-token in CWT or UCCS
; format.  When this is a tstr, the contents are an eat-token in JWT
; format.

nested-token = bstr / tstr; 


; Each submodule has a unique text string name.

submod-name = tstr 



ueid-type = bstr .size (7..33)

ueid-claim = (
     ueid =&gt; ueid-type
)

intended-use-type = &amp;(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5,
    attest-env: 6
)

intended-use-claim = (
    intended-use =&gt; intended-use-type
)

COSE_Key = {  }   ; Temporary definition until I know how to reference CDDL from other RFCs

verification-key-claim = (
    verification-key =&gt; COSE_Key
)

is-trusted-claim = (
    is-trusted =&gt; int 
)

uptime-claim = (
    uptime =&gt; uint
)

; The following Claim Keys (labels) are pre-assigned by IANA.
; They are for CBOR-based tokens (CWT and UCCS).
; They are not expected to change in the final publication as an RFC.

nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location = 17
profile = 18
submods = 20


profile-claim = (
    profile =&gt; ~uri / ~oid
)

boot-seed-claim = (
    boot-seed =&gt; bytes
)

; The following are Claim Keys (labels) assigned for JSON-encoded tokens.

ueid /= "ueid"
nonce /= "nonce"
origination /= "origination"
oemid /= "oemid"
security-level /= "seclevel"
secure-boot /= "secboot"
debug-status /= "dbgstat"
location /= "location"
uptime /= "uptime"
profile /= "eat-profile"
intended-use /= "intuse"
boot-seed /= "bootseed"
is-trusted /= "istrusted"
submods /= "submods"
timestamp /= "timestamp"

latitude /= "lat"
longitude /= "long"
altitude /= "alt"
accuracy /= "accry"
altitude-accuracy /= "alt-accry"
heading /= "heading"
speed /= "speed"

</sourcecode>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-web-token-cwt-claims-registry" numbered="true" toc="default">
        <name>Reuse of CBOR Web Token (CWT) Claims Registry</name>
        <t>Claims defined for EAT are compatible with those of CWT
so the CWT Claims Registry is re used. No new IANA registry
is created. All EAT claims should be registered in the
CWT and JWT Claims Registries.</t>
      </section>
      <section anchor="claim-characteristics" numbered="true" toc="default">
        <name>Claim Characteristics</name>
        <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
        <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
        <section anchor="interoperability-and-relying-party-orientation" numbered="true" toc="default">
          <name>Interoperability and Relying Party Orientation</name>
          <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate. 
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
          <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
        </section>
        <section anchor="operating-system-and-technology-neutral" numbered="true" toc="default">
          <name>Operating System and Technology Neutral</name>
          <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
          <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
          <t>Claims should not be defined such that they are specific to a chip or particular hardware. 
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
          <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
        </section>
        <section anchor="security-level-neutral" numbered="true" toc="default">
          <name>Security Level Neutral</name>
          <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists. 
Secure Elements and smart cards are examples of this. 
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
          <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
        </section>
        <section anchor="reuse-of-extant-data-formats" numbered="true" toc="default">
          <name>Reuse of Extant Data Formats</name>
          <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
          <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
          <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
        </section>
        <section anchor="proprietary-claims" numbered="true" toc="default">
          <name>Proprietary Claims</name>
          <t>EAT allows the definition and use of proprietary claims.</t>
          <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer. 
This is a supported use case.</t>
          <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
        </section>
      </section>
      <section anchor="claims-registered-by-this-document" numbered="true" toc="default">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519" format="default"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392" format="default"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment" numbered="true" toc="default">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120" format="default"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: 10</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore" format="default"/>, <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: 11</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: OEMID</li>
            <li>Claim Description: IEEE-based OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: 13</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: 14</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 15</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 16</li>
            <li>Claim Value Type(s): integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: 17</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: 18</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t>&nbsp;</t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules (not actually a claim)</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: 20</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims" numbered="true" toc="default">
          <name>To be Assigned Claims</name>
          <t>TODO: add the rest of the claims in here</t>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations" numbered="true" toc="default">
        <name>UEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of relying parties
that receives tokens that happen to be from a single device will be
able to know the tokens are all from the same device and be able to
track the device. Thus, in many usage situations ueid violates
governmental privacy regulation. In other usage situations UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>There are several strategies that can be used to still be able to put
UEID's in tokens:</t>
        <ul spacing="normal">
          <li>The device obtains explicit permission from the user of the device
to use the UEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID.</li>
          <li>The UEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The device authenticates the relying party and generates a derived
UEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the device, then
the device generates a UEID just for that relying party by hashing a
proofed relying party ID with the main device UEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in multiple UEIDs
per device. Each UEID is used in a different context, use case or system 
on the device. However, from the view of the relying party, there is just
one UEID and it is still globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations" numbered="true" toc="default">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the device generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
    </section>
    <section anchor="securitycons" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392" format="default"/> and Section 11
of <xref target="RFC7519" format="default"/> apply to EAT in its CWT and JWT form, respectively.  In addition, 
implementors should consider the following.</t>
      <section anchor="key-provisioning" numbered="true" toc="default">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manfuacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949" format="default"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material" numbered="true" toc="default">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security" numbered="true" toc="default">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392" format="default"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers" numbered="true" toc="default">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="July" year="2017"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8152"/>
          <seriesInfo name="DOI" value="10.17487/RFC8152"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="WGS84" target="http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf">
          <front>
            <title>National Imagery and Mapping Agency Technical Report 8350.2, Third Edition</title>
            <author>
              <organization>National Imagery and Mapping Agency</organization>
            </author>
            <date year="2000"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS.Draft" target="https://tools.ietf.org/html/draft-birkholz-rats-uccs-01">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz">
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-uaf-v1.0-fd-20191115/fido-allowed-AROE-v1.0-fd-20191115.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://tools.ietf.org/html/draft-ietf-sacm-coswid-16">
          <front>
            <title>Concise Software Identification Tags</title>
            <author>
              <organization/>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="CBOR-OID" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-06.txt">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="Carsten Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="30" month="March" year="2021"/>
            <abstract>
              <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-06"/>
        </reference>
        <reference anchor="RATS-Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-11.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="30" month="March" year="2021"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-11"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IDevID" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf">
          <front>
            <title>Ecma International, "ECMAScript Language Specification, 5.1 Edition", ECMA Standard 262</title>
            <author>
              <organization/>
            </author>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIDO.Registry" target="https://fidoalliance.org/specs/common-specs/fido-registry-v2.1-ps-20191217.html">
          <front>
            <title>FIDO Registry of Predefined Values</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2019" month="December"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="very-simple-eat" numbered="true" toc="default">
        <name>Very Simple EAT</name>
        <t>This is shown in CBOR diagnostic form. Only the payload signed by COSE
is shown.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / issuer /           1: "joe",
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /            11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /     15: true,
    / debug-disable /   16: 3, / permanent-disable /
    / timestamp (iat) /  6: 1(1526542894)
}
]]></artwork>
      </section>
      <section anchor="example-with-submodules-nesting-and-security-levels" numbered="true" toc="default">
        <name>Example with Submodules, Nesting and Security Levels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
{
    / nonce /                 10: h'948f8860d13a463e8e',
    / UEID /                  11: h'0198f50a4ff6c05861c8860d13a638ea',
    / secure-boot /           15: true,
    / debug-disable /         16: 3, / permanent-disable  /
    / timestamp (iat) /        6: 1(1526542894),
    / security-level /        14: 3, / secure restricted OS /
    / submods / 20: {
        / first submod, an Android Application /
        "Android App Foo" :  {
            / security-level /  14: 1 / unrestricted /
        },

        / 2nd submod, A nested EAT from a secure element /
        "Secure Element Eat" :
            / an embedded EAT, bytes of which are not shown /
            h'420123',

        / 3rd submod, information about Linux Android /
        "Linux Android": {
            / security-level /  14: 1 / unrestricted /
        }
    }
}
]]></artwork>
      </section>
    </section>
    <section anchor="ueid-design-rationale" numbered="true" toc="default">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability" numbered="true" toc="default">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack" format="default"/>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p = k^2 / 2n 
]]></artwork>
        <t>For this calculation:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
    p  Collision Probability
    n  Total population based on number of bits in UEID
    k  Population in a database
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's 
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of 
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  t = 1 / ((k / 10) * p)
  
  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid" numbered="true" toc="default">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122" format="default"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this 
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality 
random numbers, but do so by mapping into the overall UUID 
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>UUIDs seem to have been designed for scenarios where the implementor
does not have full control over the environment and uniqueness has to
be constructed from identifiers at hand. UEID takes the view that
hardware, software and/or manufacturing process directly implement
UEID in a simple and direct way. It takes the view that cryptographic
quality random number generators are readily available as they are
implemented in commonly used CPU hardware.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts" numbered="true" toc="default">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01" numbered="true" toc="default">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00" numbered="true" toc="default">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04" numbered="true" toc="default">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-05" numbered="true" toc="default">
        <name>From draft-ietf-rats-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-06" numbered="true" toc="default">
        <name>From draft-ietf-rats-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-07" numbered="true" toc="default">
        <name>From draft-ietf-rats-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of claim keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-08" numbered="true" toc="default">
        <name>From draft-ietf-rats-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAGcAcmAAA+y963LjWHYm+h9PgVD5TEllkrrmtaPHo5JUVarO26SUnXPC
YVeAJCihEgTYACglKysdfo2JmPNyfpKzvnXZF5BUZbvbMzGOzrCrRRLYe+3b
2uv6reFwmLRdVk1/ysq6yp+nXbPMk2LR8F9td3Rw8OzgKJlk3fO07aZJMq0n
VTanB6dNNuuGRd7Nhk3WtcM864Zl1uVtlyT3N8/Tt6fXV+n7uvlQVDfp9029
XCRfpZO6avOqXbbP069Xefs1fdUux/OibYu66lYLavfy4vq7ZFE8T9K0qyf2
HH+Y5ovulr45wee2bromn7X+iXY1j7+Y1PNFNumCJ5Zj/11V46tmNsmnbbcq
c3usKzp8uL7N04uKPqzS0w7DyjqiMb2uP+RVuntxer2XZONxk989T+lDkjV5
RsRXXd5UeZd8uKf5Km4qDD4LXp+M64YGPaWJep4eHRweDw8PkmzZ3dbN82SY
FhWR//0ofUkrssrmRJ9M9vdFU0xvsyb4oW5okv/7MitpRPP0Op/cVnVZ3xR5
S1RMRhgtzU9OI3305Mmj9GXd5Lf1ss3T86a4yzE7NLTn6VVWpedFflNjLvIb
ovF5epaVxaxuqiLjSVxWXUNPvrs6pY+LW94mO39/mD599DR9/OgwfUKbZId+
yudZUT5P50Lif/tTV4z+pPSN6D82vBej9MWymo7LbJq7Ab7Ilk1eTfLoJx7i
VT5ZNlgFWpC6WaUvXpz5vsqb8r8VbUk9DpscOyLs6OUo/TYrS5r7vKlb19XL
4maZl72f/s/OZjCZJ0fPngVzORYqt07mj6P09dfndVXf3C79bP6YN/l8Ff/y
5SM8evIs/S5rKtqq9fLmNn1bZ1M3wuAHHs4Uu/Pd4Un65MVVNL6q6PJp+gc6
ANN6Hgz15CQ9PHp0lB4/Pj58Ggz153rKxK4PNanqZk7H5y4HU3j73dnR4eEz
/fPpsxP788mjwyf+T/ft04MDe/bw6LH788mJ+/PRkf15/Mz9+fjQvfbkxNo9
fvaUWqC/339/9ZQbIL6UNTeYtduuWzzf38+zprsdFtWsHlU32WhelPvf0/b8
fn+xHJfFhLlAu981T48fHYyO9u9v2qcns6IaLaYzaU64zyt+MCvTy3l2k9O2
pzbo8C8WYCinN3RUVrKG1GSZvs0XtPdTaXNAJ6VopunFtEAb3KpxGPw9lK3w
BT3w48aqDg74I/3n8vTV6ejs/fXorMyKebtxGu7v70dFVmUj6ms/a8EK53nV
tfuT+y4c59m3r9+m7/Ox8VVqdi+VdkPC05By9B+QNsvKNk+Mrh97dEWEtQ9R
9rNSZqT9ePX6VUjajz3SYtrWiOtT9+7s7Gp0jktzC2FdXZftCBcqk3bbzct9
uWTHRfPhti5/kYt2OZm0w4PDiNZTmcjr7CYlVkOHb9HUXT7BCaQZVaqJlXYx
6Ub5bFmWwjl+yKsP6bfaXziOo4OjAwzj+paYxPdv3owuX15cri89BoK9mJWj
45vFgkcyzdsPXb2Y19Ml8bL9q0U+KWbuKEQfz/OOmEE7ytrFx39ow18up79/
cvQs3DrHtMe/z6u8kZv1DR08+tDeFov0TVP/TKP/XXBEom5EHknPiIunr/Lu
nqQU3v7XeTMv6Ey0v0tfLefjvKGzMEiz6ZQul5avcnqomNJ2cU1tO17HNEfR
+Tl8lmL+vrs8fz06ffv64nk4FnybnlIraJoapjU8Lcv6ntbvLbH/puClfL3g
wRIdF9Vd0dSycdMXRdttXIhZMa3p/qDdPsl5JTCjLX89XGaz4d3h6GA4mw5B
3OHh4SP5JZOOhyBy7ZERtuW2MUNkkpFop8EEvKrvcsyon4mL01fDw+PNWwiH
9KY9FKIhnmbNtN0fZw0unJaYbDVcLibhDIrkZTzttKFpLHNdRaKPOtt/9+Ys
tSa2DeH7q8PeqoHUs/rq/eX5ZlK3H1uWjdtsMh9O6va+mA4PH0esr64mBUkQ
V/WsuyfxMb2MNhYOc7t5AuUk0m6oLs+plYq2OrbyZvpqeqyYjkgo1eWXL4gm
fpH+t8mHhz8d+JVV+qT9VDuQw0K7geQOeoXOuOzEvKE/srTNu/RwE7VPMYkn
m3i5ZzqvRiQ4fSjmyyZb+40EnG+bbFrmq7WfSL77kWSKdu2Hb0fpNE9f5tO8
EOku/vlsBPmtK+Y0Il5dYp3D17S+6eXwnFdyCDF92NECDOsCsg+uf9JnhqfN
5LYAYyVpNXic+XIW/JYkCUSAWGw5OTwy8eIkEFsOjw5YpiCu291OsxVpG9nk
Q8Qe7CeoEvTbxnXOq9F98aFY5NNC7jZ82rc3f5I3RxvvzfP8zu1uPU0XFxfp
lR68QbrDn58eHI0OT9+KRE6Sb35XTPyuzZudoPHzfGK79eDZJgHBnWqawVy4
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
r92nnQAHkImX4RgYoIynutnxkID4ij7seFxA/mZCKuLOBnhAfXyoDxhSIL7W
v3cUMpDJXfDYQg6im+uy57eii+LnFgAt/PVnEpXxlL9pbQctxEuZPn18eOAv
iQviIBWs6IVTDhK/T5kByTWTNXkIw8GdcKYN80/OCOcYwOHQWU96WUr5lJ7h
fRA8Y01SU68AflRMzjkkP1S8jC8egVMF9wzyxGN2vLlhMbK+bhhv40sb7jUn
aB38zPGzp4/lmZoOEz0TdJVZVKN3EnIVW+yxsabaTOsOHl5EPcAPR9xGjoyC
SvDNjvjIncPR0ejo0cHocGdPLz0S5QKhrr8TkkTAUQQrwLnMzGERO1nibDy4
glyqjYI1cWBMlgrO8hrWLsnW//av/7NTU9VA7QqSKlZrFs4GB+uan1hwqCui
sMyqD3kXeQdBufh/ZcRrqPBsl2BCDXROrPUyBYFQLlE+JAuQulH34eVNRuhF
OXDYmsjgLRvIe9jCWWAxnNYyHbGrPHlNc8sleGpfrGptYtTyTmwXIrWTajeM
2Iq7RWaF0WbAI++H7LXBjkuheoMfbcQojrKQ49yh/Dl4XvXMasCPwZPrXu/h
5QHRrGsyllcsCcY20L4vjzXb9G7GpUgmXEEBYIBwAn0X+1nVhhoPL94+nFmL
UtF8CkWUyjpvPBDvRe4XZ+qAHd0ivmt94kB/KjkobT6XuDKZHVPZfaS86Z9r
oQ3YWxzcGyL9h3KCMSiBGZHjStsDGTnLrkeMGJFcpiH6OQvm/1wWrOcu+Sbw
pPSbC+xeRsfJ6NCxSsFSMtOZH+O1GlvMnxd6RTJZBElEUTvfBo8LXlcTOs8R
F4yoBGJAglKIkWKk36QP9ea9T2nkdJQwK9jN+sHNNs5jcN7eSLeT9tv9FLO/
iGxzmj1E7vFfQK61v0bmVS05obDFYhzjlYWkfsGayyPstkhbaYgbPVc8gIKr
yzrXeTSyK7fh+suw3jk1+W3WUlN3tI2mjBq+aZIejY7Xd69d73LkwqG4WbOh
4FZMp0uNJmHfJ2KE90V2l9J0TEH67vq74VPvLRV1tSwFwHRDzo5PpfOxC2vq
WZCM4xBuGMWz1qwMAYTszC19bUmKRQAbpFhqZe2NHM6TJnkrbJWZWxp/Eqem
GC74P6RQPuQHr66hFFP0VaB69H6A8hF/Zf4dYEi27oXWaZUbSmtHv4VFl+2H
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

-->

</rfc>
