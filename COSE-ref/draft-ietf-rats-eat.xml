<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="July" day="08"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for Evidence and Attestation Results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the Attester Target Environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-deb">
        <name>CWT, JWT and DEB</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle (DEB), <xref target="DEB"/></li>
        </ul>
        <t>A DEB is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an Attester generates Evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry Evidence.
The Evidence goes to a Verifier where the signature is verified.
Some of the claims may also be checked against Reference Values.
The Verifier then produces Attestation Results which is also usually a claims set.</t>
        <t>EAT is also designed to carry Attestation Results.
The Attestation Results go to the Relying Party which is the ultimate consumer of the Remote Attestation Procedure.
The Relying Party uses the Attestation Results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the Verifier and Relying Party are not separate and thus there is no need for a protocol to carry Attestation Results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in Evidence or Attestation Results.</t>
          <t>The relationship of claims in Attestation Results to Evidence is fundamentally governed by the Verifier and the Verifier's Policy.</t>
          <t>A common use case is for the Verifier and its Policy to perform checks, calculations and processing with Evidence as the input to produce a summary result in Attestation Results that indicates the overall health and status of the entity.
For example, measurements in Evidence may be compared to Reference Values the results of which are represented as a simple pass/fail in Attestation Results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the Relying Party in Attestation Results.
This forwarding is subject to the Verifier's implementation and Policy.
The Relying Party should be aware of the Verifier's Policy to know what checks it has performed on claims it forwards.</t>
          <t>The Verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the Verifier will put claims in the Attestation Results that give details about the entity that it has computed or looked up in a database.
For example, the Verifier may be able to put a HW OEM ID Claim in the Attestation Results by performing a look up based on a UEID (serial number) it received in Evidence.</t>
          <t>This specification does not establish any normative rules for the Verifier to follow.
They are a matter of configured policy.
It is up to each Relying Party to understand the processing rules of each Verifier to know how to interpret claims in Attestation Results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose Evidence must be appraised in order to infer the extent to which the Attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of Evidence about an Attester and produces Attestation Results to be used by a Relying Party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an Attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of Claims generated by an Attester to be appraised by a Verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a Verifier, typically including information about an Attester, where the Verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of Claims can be compared as part of applying an Appraisal Policy for Evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here Reference Values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an Attester's various capabilities such as Claims collection and Evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the Detatched EAT Bundle <xref target="DEB"/>, a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for Claim Keys.
JSON-encoded tokens MUST use only the text string for Claim Names.</t>
      <section anchor="nonce">
        <name>Nonce Claim (nonce)</name>
        <t>All EATs MUST have a nonce to prevent replay attacks.</t>
        <t>This claim is either a single byte or text string or an array of byte or text strings.
The array is to accommodate multistage EAT verification and consumption.
See the extensive discussion on attestation freshness in Appendix A of RATS Architecture <xref target="RATS.Architecture"/>.</t>
        <t>A claim named "nonce" is previously defined and registered with IANA for JWT, but MUST not be used in an EAT.
It does not support multiple nonces.
No previous nonce claim was defined for CWT.</t>
        <t>The nonce MUST have 64 bits of entropy as fewer bits are unlikely to be secure.
A maximum nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, the nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON the nonce is a text string.
It is assumed that the only characters represented by the lower 7 bits will be used so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size is 10 bytes.
The maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in Evidence or occur in Attestation Results.
See <xref target="relationship"/> for discussion on how Attestation Results relate to Evidence.</t>
        <section anchor="UEID">
          <name>Universal Entity ID Claim (ueid)</name>
          <t>A UEID identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the OEMID claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="semi-permanent-ueids-sueids">
          <name>Semi-permanent UEIDs (SUEIDs)</name>
          <t>An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>Hardware OEM Identification (oemid)</name>
          <t>This claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hardware-model-claim-hardware-model">
          <name>Hardware Model Claim (hardware-model)</name>
          <t>This claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hardware-version-claims-hardware-version-claims">
          <name>Hardware Version Claims (hardware-version-claims)</name>
          <t>The hardware version is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="software-name-claim">
          <name>Software Name Claim</name>
          <t>This is a very simple free-form text claim for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the SW for the entity is needed, the manifests claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="software-version-claim">
          <name>Software Version Claim</name>
          <t>This makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="the-security-level-claim-security-level">
          <name>The Security Level Claim (security-level)</name>
          <t>This claim characterizes the entity's ability to defend against attacks aimed at capturing the signing key, forging claims and forging EATs.</t>
          <t>The intent of this claim is only to give the recipient a rough idea of the security the entity is aiming for.
This is via a simple, non-extensible set of three levels.</t>
          <t>This takes a broad view of the range of defenses because EAT is targeted at a broad range of use cases.
The least secure level involves minimal SW defenses.
The most secure level involves specialized hardware to defend against hardware-based attacks.</t>
          <t>Only through expansive certification programs like Common Criteria and FIDO certification is it possible to sharply define security levels.
Sharp definition of security levels is not possible here because the IETF doesn't define and operate certification programs.
It is also not possible here because any sharp definition of security levels would be a document larger than the EAT specification.
Thus, this definition takes the view that the security level definition possible here is a simple, modest, rough characterization.</t>
          <dl>
            <dt>1 - Unrestricted:</dt>
            <dd>
              <t>An entity is categorized as unrestricted when it doesn't meet the criteria for any of the higher levels.
This level does not indicate there is no protection at all, just that the entity doesn't qualify for the higher levels.</t>
            </dd>
            <dt>2 - Restricted:</dt>
            <dd>
              <t>Entities at this level MUST meet the criteria defined in Section 4 of FIDO Allowed Restricted Operating Environments <xref target="FIDO.AROE"/>.
Examples include TEE's and schemes using virtualization-based security.
Security at this level is aimed at defending against large-scale network/remote attacks by having a reduced attack surface.</t>
            </dd>
            <dt>3 - Hardware:</dt>
            <dd>
              <t>Entities at this level are indicating they have some countermeasures to defend against physical or electrical attacks against the entity.
Security at this level is aimed at defending against attackers that physically capture the entity to attack it.
Examples include TPMs and Secure Elements.</t>
            </dd>
          </dl>
          <t>The security level claimed should be for the weakest point in the entity, not the strongest.
For example, if attestation key is protected by hardware, but the rest of the attester is in a TEE, the claim must be for restriced.</t>
          <t>This set of three is not extensible so this remains a broad interoperable description of security level.</t>
          <t>In particular use cases, alternate claims may be defined that give finer grained information than this claim.</t>
          <t>See also the DLOAs claim in <xref target="dloas"/>, a claim that specifically provides information about certifications received.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>
]]></sourcecode>
        </section>
        <section anchor="secure-boot-claim-secure-boot">
          <name>Secure Boot Claim (secure-boot)</name>
          <t>The value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
OEMID claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="debug-status-claim-debug-status">
          <name>Debug Status Claim (debug-status)</name>
          <t>This applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the debug level claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the OEMID claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>The Location Claim (location)</name>
          <t>The location claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="the-uptime-claim-uptime">
          <name>The Uptime Claim (uptime)</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-count-claim-boot-count">
          <name>The Boot Count Claim (boot-count)</name>
          <t>This claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="the-boot-seed-claim-boot-seed">
          <name>The Boot Seed Claim (boot-seed)</name>
          <t>The Boot Seed claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>The DLOA (Digital Letter of Approval) Claim (dloas)</name>
          <t>A DLOA (Digital Letter of Approval) <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a Verifier, not an Attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, Verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>The Software Manifests Claim (manifests)</name>
          <t>This claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the Verifier and possibly to the Relying Party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In CBOR-encoded EATs the manifest, whatever format it is, MUST be placed in a byte string.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="swevidence">
          <name>The Software Evidence Claim (swevidence)</name>
          <t>This claim contains descriptions, lists, evidence or measurements of the software that exists on the entity.
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the software manufacturer.</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the manifests claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>The Measurement Results Claim (measurement-results)</name>
          <t>This claim is a general-purpose structure for reporting comparison of measurements to expected Reference Values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the Verifier and sent to the Relying Party.
For example, it could be the results of the Verifier comparing the contents of the swevidence claim, <xref target="swevidence"/>, to Reference Values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the Reference Values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a Verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the Reference Values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>Submodules (submods)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same Attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an Attester Target Environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate Attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their Attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded DEB, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded DEB</t>
                  </dd>
                  <dt>"DEB":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the Verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The integrity protection for the larger Claims Sets will not be as secure as those originating in hardware block, but the key material and hardware-based claims will be.
It is possible for the hardware to enforce hardware access control (memory protection)  on the digest registers so that some of the larger claims can be more secure.
For example, one register may be writable only by the TEE, so the detached claims from the TEE will have TEE-level security.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, an algorithm identifier and a byte string containing the digest.</t>
              <t>When decoding a CBOR format token the detached digest type is distringuished from the other types by it being an array.
In CBOR the none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "DEB", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A DEB, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a DEB.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like the nonce.</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in Evidence or Attestation Results.
When these claims appear in Evidence, they SHOULD not be passed through the Verifier into Attestation Results.</t>
        <section anchor="token-id-claim-cti-and-jti">
          <name>Token ID Claim (cti and jti)</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.  They may be used to defend against re use of
the token but are not a substitute for the nonce described in <xref target="nonce"/> and do not guarantee freshness and defend against replay.</t>
        </section>
        <section anchor="timestamp-claim-iat">
          <name>Timestamp claim (iat)</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an iat claim in
floating-point format. Any recipient of a token with a floating-point
format iat claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>The Profile Claim (profile)</name>
          <t>See <xref target="profiles"/> for the detailed description of a profile.</t>
          <t>A profile is identified by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the profile claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <t>Note that this is named "eat_profile" for JWT and is distinct from the already registered "profile" claim in the JWT claims registry.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="the-intended-use-claim-intended-use">
          <name>The Intended Use Claim (intended-use)</name>
          <t>EAT's may be used in the context of several different applications.  The intended-use
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This intended-use
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A DEB has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a DEB.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the DEB is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the DEB is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the DEB.
No mixing of encoding formats is allowed for the Claims-Sets in a DEB.</t>
      <t>For CBOR-encoded DEBs, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The Verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an Endorsement.
This is an input to the Verifier that is usually the basis of the trust placed in an EAT and the Attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain Reference Values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the Relying Party in Attestation Results.</t>
      <t>There is not yet any standard format(s) for an Endorsement.
One format that may be used for an Endorsement is an X.509 certificate.
Endorsement data like Reference Values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the Endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an Endorsement.</t>
      <t>For the components (Attester, Verifier, Relying Party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes Endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for Endorsements in other formats. If such an Endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an Endorsement and thus carrying additional input to the Verifier. It may be just an X.509 certificate, not an Endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the Verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or Endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the Verifier may be configured with a root certificate or a master key by the Verifier system administrator.</t>
        <t>Often an X.509 certificate or an Endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an Endorsement might have Reference Values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>This EAT specification does not gaurantee that implementations of it will interoperate.
The variability in this specification is necessary to accommodate the widely varying use cases.
An EAT profile narrows the specification for a specific use case.
An ideal EAT profile will guarantee interoperability.</t>
      <t>The profile can be named in the token using the profile claim described in <xref target="profile-claim"/>.</t>
      <t>A profile can apply to Evidence or to Attestation Results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWS, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>A profile should specify which algorithms the sender can use.
A profile should specify that the receiver be able to accept all the algorithms the sender is allowed to send.</t>
          <t>This specification should be for all uses of algorithms, including those in nested tokens, detached digests and nested signing and encryption and such.</t>
        </section>
        <section anchor="deb-support">
          <name>DEB Support</name>
          <t>A profile should specify whether or not a Detached EAT Bundle <xref target="DEB"/> can be sent.
A profile should specify that a receiver be able to accept a Detached EAT Bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as Verification Key Identification, the profile may wish to specify how Endorsements are to be identified.
However note that Endorsement Identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>A nonce is always required by EAT.</t>
          <t>A profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
          <t>Just about every use case will require some means of knowing the EAT is recent enough and not a replay of an old token.
The profile should describe how freshness is achieved.
The section on Freshness in <xref target="RATS.Architecture"/> describes some of the possible solutions to achieve this.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>By default only the nonce claim is required by EAT.
A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the nonce be a certain length or the location claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The manifests and software evidence claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "[0-9\.]+"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //=
    ( security-level-label => security-level-type ) 

security-level-type = unrestricted /
                      restricted /
                      hardware

unrestricted       = JC< "unrestricted",      1>
restricted         = JC< "restricted",        2>
hardware           = JC< "hardware",          3>

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $$manifest-body-json, 
                        $$manifest-body-cbor >
]

$$manifest-body-cbor /= bytes .cbor untagged-coswid
$$manifest-body-json /= base64-url-text

$$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$$manifest-body-json /= base64-url-text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    swevidence-label => swevidence-type
)

swevidence-type = [+ swevidence-format]

swevidence-format = [
    content-type:   coap-content-format,
    content-format: JC< $$swevidence-body-json,
                        $$swevidence-body-cbor > 
]

$$swevidence-body-cbor /= bytes .cbor untagged-coswid
$$swevidence-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   algorithm : JC< text, int >
   digest    : binary-data 
]


DEB-Messages = DEB-Tagged-Message / DEB-Untagged-Message

DEB-Tagged-Message   = #6.TBD(DEB-Untagged-Message)
DEB-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

security-level-label   = JC< "seclevel",   TBD >
uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
swevidence-label       = JC< "swevidence", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= DEB-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= DEB-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= DEB-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "DEB",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>. Each entry below is an addition to both registries (except
for the nonce claim which is already registered for JWT, but not registered for CWT).</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "nonce" (already registered for JWT)</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <xref target="OpenIDConnectCore"/>, <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Security Level</li>
            <li>Claim Description: Characterization of the security of an Attester or submodule</li>
            <li>JWT Claim Name: "seclevel"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Name</li>
            <li>Claim Description: The name of the SW running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Version</li>
            <li>Claim Description: The version of SW running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Manifests</li>
            <li>Claim Description: Manifests describing the SW installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Evidence</li>
            <li>Claim Description: Measurements of the SW, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "swevidence"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SW Measurment Results</li>
            <li>Claim Description: The results of comparing SW measurements to reference values</li>
            <li>JWT Claim Name: "swresults"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one Relying Party.</li>
          <li>The entity authenticates the Relying Party and generates a derived
UEID/SUEID just for that particular Relying Party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that Relying Party by hashing a
proofed Relying Party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the Relying Party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The Boot Seed claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the cti/jti claim and the nonce claim.  The cti/jti claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="7" month="March" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-21"/>
        </reference>
        <reference anchor="OpenIDConnectCore" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="N. Sakimura">
              <organization/>
            </author>
            <author fullname="J. Bradley">
              <organization/>
            </author>
            <author fullname="M. Jones">
              <organization/>
            </author>
            <author fullname="B. de Medeiros">
              <organization/>
            </author>
            <author fullname="C. Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-18.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="14" month="June" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-18"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-03.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="January" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-03"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, DEB or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manfests /       273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device-1">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / nonce /           10: h'948f8860d13a463e8e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / HW OEM ID /      258: h'894823', / IEEE OUI format OEM ID /
    / HW Model ID /    259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / HW Version /     260: ["1.3.4", 1], / Multipartnumeric version /
    / SW Name /        271: "Acme OS",
    / SW Version /     272: ["3.5.5", 1],
    / secure-boot /    262: true,
    / debug-status /   263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / security-level / 261: 2, / restricted OS /
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / HW OEM ID /   258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / HW Model ID / 259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / HW Version /  260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / HW OEM ID /   258: 61234, / PEN Format OEM ID / 
            / HW Version /  260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block-1">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / HW version /     260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation-1">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / expiration /       4: 1634324274, / 2021-10-15T18:57:54Z /
    / creation time /    6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / nonce /             10: h'948f8860d13a463e',
           / security-level / 261: 1, / unrestricted /
           / secure-boot /    262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="sw-measurements-of-an-iot-device">
          <name>SW Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / nonce /           10: h'948f8860d13a463e',
    / security-level / 261: 2, / restricted /
    / secure-boot /    262: true,
    / debug-status /   263: 2, / disabled-since-boot /
    / OEMID /          258: h'8945ad', / IEEE CID based /
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / sumods /         266: {
                            "OS" : {
        / security-level /     261: 2, / restricted /
        / secure-boot /        262: true,
        / debug-status /       263: 2, / disabled-since-boot /
        / swevidence /         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a Verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular Verifier knows enough about the TEE Attester to be able to pass claims like security level directly through to the Relying Party.
The Verifier also knows the Reference Values for the measured SW components and is able to check them.
It informs the Relying Party that they were correct in the swresults claim.
"Trustus Verifications" is the name of the services that verifies the SW component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "seclevel" : "restricted",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "seclevel": "restricted", 
    "submods": {
        "Android App Foo" :  {
            "seclevel": "unrestricted"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "seclevel": "unrestricted"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this DEB main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The DEB itself can be assembled by untrusted SW.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle (DEB) tag.  /
/ Note that 602, the tag identifying a DEB is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     261: 4,  /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'E5CF95FD24FAB71446742DD58D43DAE1 /
    /                78E55FE2B94291A9291082FFC2635A0B' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F5820E5CF95FD24FAB71446742DD58D43DA
      E178E55FE2B94291A9291082FFC2635A0B5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a50a48948f8860d13a463e19010503190106
                 f519010702190111818218795858a6006433
                 6132340c01016b41636d6520544545204f53
                 0d65332e312e340282a2181f6b41636d6520
                 544545204f53182101a2181f6b41636d6520
                 544545204f5318210206a111a118186e6163
                 6d655f7465655f332e657865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / nonce /           10: h'948f8860d13a463e',
    / UEID /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / OEMID /          258: 64242, / Private Enterprise Number /
    / security-level / 261: 3, / hardware level security /
    / secure-boot /    262: true,
    / debug-status /   263: 3, / disabled-permanently /
    / hw version /     260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and SW so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a Relying Party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the Endorsement sent to the Verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a SW environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes from the previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences.</t>
      <section anchor="from-draft-rats-eat-01">
        <name>From draft-rats-eat-01</name>
        <ul spacing="normal">
          <li>Added UEID design rationale appendix</li>
        </ul>
      </section>
      <section anchor="from-draft-mandyam-rats-eat-00">
        <name>From draft-mandyam-rats-eat-00</name>
        <t>This is a fairly large change in the orientation of the document, but
no new claims have been added.</t>
        <ul spacing="normal">
          <li>Separate information and data model using CDDL.</li>
          <li>Say an EAT is a CWT or JWT</li>
          <li>Use a map to structure the boot_state and location claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-01">
        <name>From draft-ietf-rats-eat-01</name>
        <ul spacing="normal">
          <li>Clarifications and corrections for OEMID claim</li>
          <li>Minor spelling and other fixes</li>
          <li>Add the nonce claim, clarify jti claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-02">
        <name>From draft-ietf-rats-eat-02</name>
        <ul spacing="normal">
          <li>Roll all EUIs back into one UEID type</li>
          <li>UEIDs can be one of three lengths, 128, 192 and 256.</li>
          <li>Added appendix justifying UEID design and size.</li>
          <li>Submods part now includes nested eat tokens so they can be named and
there can be more tha one of them</li>
          <li>Lots of fixes to the CDDL</li>
          <li>Added security considerations</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-03">
        <name>From draft-ietf-rats-eat-03</name>
        <ul spacing="normal">
          <li>Split boot_state into secure-boot and debug-disable claims</li>
          <li>Debug disable is an enumerated type rather than Booleans</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-04">
        <name>From draft-ietf-rats-eat-04</name>
        <ul spacing="normal">
          <li>Change IMEI-based UEIDs to be encoded as a 14-byte string</li>
          <li>CDDL cleaned up some more</li>
          <li>CDDL allows for JWTs and UCCSs</li>
          <li>CWT format submodules are byte string wrapped</li>
          <li>Allows for JWT nested in CWT and vice versa</li>
          <li>Allows UCCS (unsigned CWTs) and JWT unsecured tokens</li>
          <li>Clarify tag usage when nesting tokens</li>
          <li>Add section on key inclusion</li>
          <li>Add hardware version claims</li>
          <li>Collected CDDL is now filled in. Other CDDL corrections.</li>
          <li>Rename debug-disable to debug-status; clarify that it is not extensible</li>
          <li>Security level claim is not extensible</li>
          <li>Improve specification of location claim and added a location privacy section</li>
          <li>Add intended use claim</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-05">
        <name>From draft-ietf-rats-eat-05</name>
        <ul spacing="normal">
          <li>CDDL format issues resolved</li>
          <li>Corrected reference to Location Privacy section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-06">
        <name>From draft-ietf-rats-eat-06</name>
        <ul spacing="normal">
          <li>Added boot-seed claim</li>
          <li>Rework CBOR interoperability section</li>
          <li>Added profiles claim and section</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-07">
        <name>From draft-ietf-rats-eat-07</name>
        <ul spacing="normal">
          <li>Filled in IANA and other sections for possible preassignment of Claim Keys for well understood claims</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-08">
        <name>From draft-ietf-rats-eat-08</name>
        <ul spacing="normal">
          <li>Change profile claim to be either a URL or an OID rather than a test string</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-09">
        <name>From draft-ietf-rats-eat-09</name>
        <ul spacing="normal">
          <li>Add SUEIDs</li>
          <li>Add appendix comparing IDevID to EAT</li>
          <li>Added section on use for Evidence and Attestation Results</li>
          <li>Fill in the key ID and endorsements identificaiton section</li>
          <li>Remove origination claim as it is replaced by key IDs and endorsements</li>
          <li>Added manifests and software evidence claims</li>
          <li>Add string labels non-claim labels for use with JSON (e.g. labels for members of location claim)</li>
          <li>EAN-13 HW versions are no longer a separate claim. Now they are folded in as a CoSWID version scheme.</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-10">
        <name>From draft-ietf-rats-eat-10</name>
        <ul spacing="normal">
          <li>Hardware version is made into an array of two rather than two claims</li>
          <li>Corrections and wording improvements for security levels claim</li>
          <li>Add swresults claim</li>
          <li>Add dloas claim -- Digitial Letter of Approvals, a list of certifications</li>
          <li>CDDL for each claim no longer in a separate sub section</li>
          <li>Consistent use of terminology from RATS architecture document</li>
          <li>Consistent use of terminology from CWT and JWT documents</li>
          <li>Remove operating model and procedures; refer to CWT, JWT and RATS architecture instead</li>
          <li>Some reorganization of Section 1</li>
          <li>Moved a few references, including RATS Architecture, to informative.</li>
          <li>Add detached submodule digests and detached eat bundles (DEBs)</li>
          <li>New simpler and more universal scheme for identifying the encoding of a nested token</li>
          <li>Made clear that CBOR and JSON are only mixed when nesting a token in another token</li>
          <li>Clearly separate CDDL for JSON and CBOR-specific data items</li>
          <li>Define UJCS (unsigned JWTs)</li>
          <li>Add CDDL for a general Claims-Set used by UCCS, UJCS, CWT, JWT and EAT</li>
          <li>Top level CDDL for CWT correctly refers to COSE</li>
          <li>OEM ID is specifically for HW, not for SW</li>
          <li>HW OEM ID can now be a PEN</li>
          <li>HW OEM ID can now be a 128-bit random number</li>
          <li>Expand the examples section</li>
          <li>Add software and version claims as easy / JSON alternative to CoSWID</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-11">
        <name>From draft-ietf-rats-eat-11</name>
        <ul spacing="normal">
          <li>Add HW model claim</li>
          <li>Change reference for CBOR OID draft to RFC 9090</li>
          <li>Correct the iat claim in some examples</li>
          <li>Make HW Version just one claim rather than 3 (device, board and chip)</li>
          <li>Remove CDDL comments from CDDL blocks</li>
          <li>More clearly define "entity" and use it more broadly, particularly instead of "device"</li>
          <li>Re do early allocation of CBOR labels since last one didn't complete correctly</li>
          <li>Lots of rewording and tightening up of section 1</li>
          <li>Lots of wording improvements in section 3, particularly better use of normative language</li>
          <li>Improve wording in submodules section, particularly how to distinguish types when decoding</li>
          <li>Remove security-level from early allocation</li>
          <li>Add boot odometer claim</li>
          <li>Add privacy considerations for replay protection</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-12">
        <name>From draft-ietf-rats-eat-12</name>
        <ul spacing="normal">
          <li>Make use of the JC&lt;&gt; generic to express CDDL for both JSON and CBOR</li>
          <li>Reorganize claims into 4 sections, particularly claims about the entity and about the token</li>
          <li>Nonce wording -- say nonce is required and other improvements</li>
          <li>Clarify relationship of claims in evidence to results when forwarding</li>
          <li>Clarify manufacturer switching UEID types</li>
          <li>Add new section on the top-level token type that has CBOR-specific and JSON-specific CDDL since the top-level can't be handled with JC&lt;&gt;</li>
          <li>Remove definition of UCCS and UJCS, replacing it with a CDDL socket and mention of future token types</li>
          <li>Split the examples into payload and top level tokens since UCCS can't be used for examples any more (It was nice because you could see the payload claims in it easily, where you can't with CWT)</li>
          <li>DEB tag number is TBD rather than hard coded</li>
          <li>Add appendix with non-normative CDDL for a Claims-Set, CWT and JWT</li>
          <li>(Large reorganization of the document build and example verification makefile)</li>
          <li>Use CoAP content format ID to distinguish manifest and evidence formats instead of CBOR tag</li>
          <li>Added more examples, both CBOR and JSON</li>
          <li>All CDDL is validating against all examples</li>
          <li>Unassigned IANA requests are clearly TBD in the document (and have real values as is necessary in the example validation process)</li>
          <li>Improve security-level claim</li>
          <li>swresults claim is now measurement results claim</li>
          <li>substantial redesign of measurement results claim</li>
        </ul>
      </section>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3PbZpYg/B2/AqWkKtY0SVmyfJ1NehVJSSttW15Lnsxs
byoFkRCFNgmwAVAy2+v57e+5P+cBQFkzPVP1flhXV0cE8NzPc+6X8XicNG1W
zn7PFlWZv0rbep0nxaqmv5r24PHjl48PkmnWvkqbdpYks2paZkv4cFZn1+24
yNvrcZ21zTjP2vEia/OmTZK7+av0/dHlRfprVX8synn6c12tV8k36bQqm7xs
1s2r9LtN3nwHj5r11bJomqIq280K+j07vfwpWRWvkjRtq6l+Rz9m+aq9gSeH
+Lup6rbOr5vwRbNZxg+m1XKVTVv3xfoqPCsrfFRfT/NZ024WuX7WFi3+uLzJ
09MSfmzSoxaXlbUwx/Sy+piX6aPTo8vdJLu6qvPbVyn8SLI6z2DyZZvXZd4m
H+9gv4p5iYvPXPPpVVXDomewUa/Sg8f7T8b7j5Ns3d5U9atknBYlTP/1JH29
LmdXi2yWwwx5u19n6zovp3n0qqphoy/y6brGacKMq3qTvn59DK/yZVYsXqWL
+eJ/NvJBS+8nsAM60s+T9A2c/SZb2jg/F3Uxu8lq94JG+V/rbAEtl+llPr0p
q0U1L/IG1jud4L7CSeSwp0+fP3+avqnq/KZaN3l6Uhe3OM0pDA7zzMr0pMjn
Fe56PofdeJUeZ4viuqrLIqPjWpdtDV9+uDiCn6sbAsidP+ynL56+SJ893U+f
AzjuhMUteYr/829tMfmbzM8v75dJev7dSVVW85t12Mlf8jpfbuI3D1/iwfOX
6U9ZXcI5Vuv5Tfq+yma2RPeC1jPDDf2wf5g+f30RLbAs2nyW/hmgY1Ytw1r/
cHiY7h88PUifPHuy/+JlWOlfqxlNtr/UpKzqJcDWbY435v1Pxwf7+y/lz+f7
T+3Pp/tPw5/P5M8XLw/tAxg2fPA8/GkfvHj8WJvtH1gP+88P9c8nL7WHF8/2
7dvnh9rZk5cvtNnLxzbaS0AwrxL4+9efL15QX3DXs3qOm71z07ar5tXeXp7V
7c24KK+rSTnPJstisbe6We3NqrtyAQcwgR9/vC4W+ffTqqpn47t58+Jwh7vi
2/zr+fvXJ+nPp+cnp5dnx+nFv11cnr5J91++OBylb38+mlxcvj2ZPH785Nnv
+5PHk8e/02SoA72c+PeYAeUt3eVskf6cV80KfmSLMd78xaKY0x09wv9s0kfQ
8y41tPt+OH78fPz4Ba737Ojt0eT418vJ8SIrlk28clw4rPvu7m5SZGU2gXH3
sgYxyjIv22Zvetf65R3/eP4+/TW/UvQE3e6m3O+2ReDwbm7X2aLJbVq/dKYV
zau5b2J/lYnpzH65OH/rZ/ZLZ2bR1Hpz607u8gZu4c/v3k3O3pye9XcMZ7YC
upAtJk/mqxVNbpY3H9tqtaxm60Xe7F2s8mlxXUzpCDs/T/IWblszyZrVpz82
/s3Z7PvnBy/9jj+pZ3D8ZV4zXn8HAAo/mptilb6rq7/m0/afGY9AD4s0Goap
YXoMeDJ9m7d3QCNTwGTweb0sAKyaf07frpdXeQ3oYZRms1mdwwYjIYGPihls
s3W17XCfwB7FgPcSt++ns5PzydH789NXfin4ND2CTrBn6Leq06PForoDDPUe
CFddTBFZna9orTCN0/K2qCs+7/R10bSD53BdzKoMbkQGF4IOAje0ocdjpUjj
Ov/bugB0TKBDrzI/j3HG84DvdB7jSucxzt08xguYx/h2f3Iwvp6NDx7Divcf
H0xu2uVi2x4hgeelyyzdhr2tbnM8gRR7wp07PXo73n8yDHF4F+bNPi8Seams
njV7V1mNBKAB3FWO16up33FmExSLHNWw3EUuhw7Tg8H2Prw7TrWLbSv4+WJ/
4JCPq4tfz05gkPHJhNizJpsux9OquStm+B4Osjw7Oa7KEoAUgXB4VbDPZTGb
ADMjJ8cPoCNqCP+t8/H+74/DHsviuP9UBmAwB6QKJBmawO1kIMpr+CNLm7xN
94c2/gVhy4GVX68XCybkbyfAU3wslus6670D0v9jnc0W+ab36s0k/QWobdN7
8eMkneXpm3yWA1j1Xx9PkLVpiyUsCPfx5PX50fDWzRfVVbZYATcMvM2S4OJu
hRvXAqjurVdIspo9WN/Tvf2DvZ/fHf9+UswLwFqvc2AV6/Pro9Wqrm6zxe+3
SI1Ws2u/v/Jtyh+n1XWqnw8D8P7TBKf77vTtFoSZlwGVw4+9d3kJPS4ExUxW
2Tz3478Drg7GQOY4r1d10RjkPoIxdgFn/G1NUoASE+R5x202byKsg6+Ybl3C
K2g1hxtcb7besGEyqF2HvyafCCDhH7ILMW90uH+gbMfhYfjTcUH7B8a4HB4G
buXJS2JRUKaZHNXTG2Dfpi0w5O6WkRCUuXfY4McC+JZZtgEJIpt+jNavr1A8
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
m4Fne6P/Dz4sfeQojQIA

-->

</rfc>
