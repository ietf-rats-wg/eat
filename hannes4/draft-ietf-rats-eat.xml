<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2022" month="October" day="10"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message or token made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/>.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used and other for a particular token and use case.</t>
      <t>The entity side of an EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Other may rely solely on simple SW defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of an EAT. Many of the claims defined in this document are claims about an entity, which is equivalent to an attesting environment as defined in <xref target="RATS.Architecture"/>. An entity may be the whole device, a subsystem, a subsystem of a subsystem, etc.
Correspondingly, the EAT format allows claims to be organized using mechanisms like submodules and nested EATs (see <xref target="submods"/>).
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
In the EAT context, "entity" never refers to a person or organization. The hardware and software that implement a server or service used by a web site may be an entity, but the organization that runs the web site is not an entity nor is the web site itself. An entity is an implementation in hardware, software or both.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims are defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific token formats for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Full tokens with security envelopes may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization format or security envelope.
That is left for a follow-on document.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EAT tokens for specific use cases in follow-on documents.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>The EAT format follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities. An EAT MUST always contains a Claims-Set.</t>
      <t>Authenticity and integrity protection MUST be provided for EATs. This document relies on CWT or JWT for this purpose.
Extensions to this specification MAY use other methods of protection.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines a new top-level message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$$EAT-CBOR-Tagged-Token</tt>, <tt>$$EAT-CBOR-Untagged-Token</tt> and <tt>$$EAT-JSON-Token-Formats</tt> sockets, enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets MUST be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> socket group. Claims defined by other specifications MUST also be added to the <tt>$$Claims-Set-Claims</tt> socket group.</t>
      <t>All claims in an EAT MUST use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and NOT make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST NOT be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always be 16 bytes (128 bits) long.</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It MUST be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST NOT
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy MUST conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID MAY be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.
A detached Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set of the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
              <t>The encoding type of the detached claims set is part of the carrying protocol and varies from protocol to protocol.
For example, a detached EAT bundle uses mechanisms defined in this document.
Other use cases may use a content/media type.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST NOT error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the nonce claim for token replay protection (also sometimes known as token "freshness"). The nonce claim is based on a value that is usually derived remotely (outside of the entity). This claim can be used to extract and convey personally-identifying information either inadvertently or by intention. For instance, an implementor may choose a nonce that is equivalent to a username associated with the device (e.g., account login). If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token. In order to avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792" target="https://www.rfc-editor.org/info/rfc8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="7" month="October" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-20"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-22.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
        <reference anchor="UCCS" target="https://www.ietf.org/archive/id/draft-ietf-rats-uccs-03.txt">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="11" month="July" year="2022"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-03"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / secboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / secboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements      274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "secboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
          <li>Change/clarify the input to digest algorithm for detached claims sets</li>
          <li>Removed EAN-13 references and IANA registration</li>
          <li>Add section on Claim Trustworthiness to Security Considerations</li>
          <li>Removed section discussing cti/jti and other mention of cti/jti</li>
          <li>Some rework on section 3 including adding back in a <strong>non-normative</strong> reference to UCCS</li>
          <li>Improved wording in section 1.3</li>
          <li>Improvements to abstract</li>
          <li>Appendix C clarifications -- say "message" not "protocol"</li>
          <li>Removed "transport security" section from security considerations</li>
          <li>Entirely remove section 4.4 that discussed including keys in claims</li>
          <li>Largely rewrite the first paragraphs in section 1, the introduction</li>
          <li>Mention $$Claims-Set-Claims in prose and require future claims be in CDDL</li>
          <li>Add Carl Wallace as an author</li>
        </ul>
      </section>
      <section anchor="from-draft-ietf-rats-eat-15">
        <name>From draft-ietf-rats-eat-15</name>
        <ul spacing="normal">
          <li>Repair all too-long lines</li>
          <li>Remove tabs from examples</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9a3Pc2HUo+h2/AkW5aki7uylSlEZSzozNITljTvQ6IpVJ
ju+UAnaDTVjdQAdAi2rL8m8/673XBtAUHSdV51ZFlXjYwMZ+rr3ej/F4nDRt
Vs7eZ4uqzJ+nbb3Ok2JV019Ne/jw4bOHh8k0a5+nTTtLklk1LbMlNJzV2XU7
LvL2elxnbTPOs3a8yNq8aZPkdv48fXt8eZH+UtUfinKe/lRX61XyIJ1WZZOX
zbp5nn6zyZtv4FGzvloWTVNUZbtZQb/nZ5c/JqvieZKmbTXVdvRjlq/aG3hy
hL+bqm7r/LoJLZrNMn4wrZarbNq6Fuur8Kys8FF9Pc1nTbtZ5NqsLVr8cXmT
p2cl/Nikxy0uK2thjull9SEv092z48u9JLu6qvOPz1P4kWR1nsHkyzavy7xN
PtzCfhXzEhefuc+nV1UNi57BRj1PDx8ePBofPEyydXtT1c+TcVqUMP0Xk/TF
upxdLbJZDjPk7X6Rreu8nObRq6qGjb7Ip+sapwkzrupN+uLFCbzKl1mxeJ4u
5os/NNKgpfcT2AEd6adJ+hLOfpMtbZyfirqY3WS1e0Gj/O91toAvl+llPr0p
q0U1L/IG1jud4L7CSeSwp4+//fZx+rKq85tq3eTpaV18xGlOYXCYZ1amp0U+
r3DX8znsxvP0JFsU11VdFhkd17psa2j57uIYfq5uCCB3fneQPn38NH3y+CD9
FsBxJyxuyVP8w3+0xeQ/ZH5+eT9P0tffnFZlNb9Zh538Oa/z5SZ+c/8lHn77
LP0xq0s4x2o9v0nfVtnMluhe0HpmuKHvDo7Sb19cRAssizafpf8M0DGrlmGt
vzs6Sg8OHx+mj548Onj6LKz0z9WMJrt1qSeT9JdsscimYZ0nWb1wD2mJb2HU
P8IsZulFdd3eAtCOdIEy0hS++kOdz26wVSONaKQELm9bF1frlmGVR/ljXn5I
fyjqDzfV4i86zI91ti5vquu8Ti/OL+Gp3pTeCxn1BnqZXEkvf2iKdnJtLScA
6jra5U21zJr0x6pp4D7pcMf1Mn1RLHFPQ5ctNZ1cc9M/ZLXuF/f0spiv80X6
A+wPXM68rhr3anqTwbu3+N8aNqG0qwYAly8A7Gz7CMM1DiSn9e8QJ/6h0aaT
aWY9v8lgA6cf0ncw1fq2+POHMGbW3hSwsh9qnG89C/ublSVA4WUzxc0oi/md
i76h1pPWWvfW/SZbL9KTurpd5JskKat6CbvzMUd0+/bHk8ODg2fy57ePDx7L
n0+fHdlTgM7QQJ8+PTh8Yn9+e6R/Hj62Bo+e6WdPnxw81D+/taePnj3VHp49
tCGeAfF5nsDfv/x08ZS6BTqQ1XO8iDs3bbtqnu/v51nd3oyL8rqalPNssiwW
+6ub1f6sui0XcDkn8OP318Ui/25aVfVsfDtvnh7tcFeM6X95/fbFafrT2evT
s8vzk/Ti3y4uz16mB8+eHo3SVz8dTy4uX51OHj589OT9weTh5OF7mgx1oIgb
/x7zsbwiPJ8t0p/yqlnBj2wxRqqwWBRzwt/H+J9Nugs979GHRguOxg+/HT98
ius9P351PDn55XJyssiKZROvHBcO6769vZ0UWZlNYNz9rEFqs8zLttmf3rZ+
eSc/vH6b/pJfKemCbvdS7nfbInB4N7frbNHkNq2fO9OK5tXcNbE/y8R0Zj9f
vH7lZ/ZzZ2bR1HpzG5zcyeuLs8nxYl4BwbsZ2rg7Jzitmnzf790O9peG/nb6
O3bnhl3eANX46c2byfnLs/PhyayAj8kWk0fz1YrmM8ubD221WlazNWCm/YtV
Pi2uiymBVefnad7CrW8mWbP69PvGvzmfffft4TO/kkf1DECyzGvmQ97ApYEf
zU2xSt/U1Z/zaftPTPegh0UaDcPcW3oCdD19lbe3gPFSwG7QvF4WAOrNP6Wv
1survAZyNkqz2azOYU+R8YFGxQx21rraBnCPYI/iy/AMt++kuvjl/BS2d3w6
IU6zyabLMZzSbTHD96cvXh8P7+p8UV1lixUwpMBeLGljb1djpGAwnf31CjFD
sw/jPN4/ONz/6c3J+9NiXsBBvMiBW6tfXx+vVnX1MVu8/4iXfjW79pspbVNu
nFbXqTZ3i3hVfcxxV3A1jxOc7puzV1tgIC8DQMKP/Td5CT0uZNcmq2ye+/Hf
AGMFYyB/mterugBei08g3YUx9oDM/8eaGHG9Fsh2jttsrheCu8FXjB4u4RV8
NS+Azdn8nXdGuw5/TT7dtMsFjX7x5vRfozGNcL7Jph9gWelp1mbp2ScgtSX8
2sUP9gZn0Kxmn4AX+Dh0kMAxwF05OoATPXy4//DpPnYzjq7E+HB8aOeoYHb4
kMBsM0XhR2dqiFMfD6O5Kb+GSeGWRGPtw9HXH4v8dn8AU9mZwH0ar7IayDKc
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
hWN6CYZcFkFyewHoFj4IcgCWZFCd2td1dBd/h5IuoPbya7j94r8AuTMCDehd
fguCd78AxX8mm87v2CbjSUHyxaNx4sfS3T9q3rHXZy87WXqDBYJ5N0HmcdRo
HH/2Gm47xRucWW70l55T2oVR9vSeaMozdmHVvCYoExBm9+GEsOzqVqGR49pa
1WsAsinUTyiAG6Z1QUTL3KbojPSWcJOuZg1wE/oxczofmwUnHXiQvmUth1T5
+YF4QljN+SlvS6wEuQqvI9d8GO3giTD4u6rH2BO1HfWDx0D0ifgUQZsY9Ag9
XW2EHexoYsZ3amKqWq75LaESDd6ijZDrGtKReLWMah9ga1SpwxiHlcgigDdZ
YYqKaCCWBjCSHZEnKqTR4JazapEDnPMNMVXiXcv6jMWmB1SwJZzaD+UuJPEA
YLDDRaN+bQvMgqqqMxFGGLsgx5eXsM2LBWJqnmeRN53dJhUXGfdjHRgbyEDC
HR8+fsJIq16TJo2JOYc4wQaZTooDFTTPAYN5c+Oi4S37pc/QZHb/Z0+6dn9m
WVbkCUxhZjpU5BswPKqib0u4yXEnQYGbklYSOQQJz5pijyTpSn4LqYUAYIU+
h+K9IEZ5c26WdHJ4iHqpmMsEJtO519M9Ikzduz70lEMJSTUvRiCbBkJapBSy
PHVcEEZTGfDNFoUe2gskOj4SbmFccQORCBy1AnHBA8suZdo9mt3L4/GLEf7v
S/rfC/HuoXcnsA4hO2+PUchFjpU/oLBPzIxNUVsSnkI6QFI7HR6RWpkYz8RH
7F4XNaWFXFyzsO5WP6FZKAVcbKSnp9hTwiws7UDUUxD7XU8jofLjizDRxCbK
SkoUKR89CbOExVGOYbtLcHswNb/o8IBDAi4PFpIQ1ysRBxj6e8JGKbpr8cKD
3w/himaVcc6QrEx4E/EKoLSn8QHE60U7wudASSPWlD0AdjJUJUp8VSLRv0pN
IWIYnJZQXVY18fmCSvskmuqV23K9H44ct21wCdcqzhtbpn4PUhJ+IzhOrxbV
9EOTiKmkyTFIhj7iWXCqZ0qpVdUu37TLiHNCqVwkS5fkPsg/reiWEL/2R2BC
MawXU9q/jRVY3ZD9ngY1SnqBIYI5M50nWVlxnUJGAZOUgg8if6zEnPIQU1K8
sim3hNqQpKl2RtVOh+bcKtm+gK4qh+8c46yd45Px6dn46OkO06MkzjOuJjJO
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
DFKqNTEONHZtuFr5Z2l6kHNUO+QB3zVg4rrgRp4fCJTzKQdF+qfUsUsAGDLt
7uBBeNK6uDp9cTW8iC7fPo7S0Yfkzfv21WXz9erxy6sPx8Oz4fHi5ZtvXr8b
D98+/vqcvnn//h+Pv/3JOx09nq1vHn97enZ8/OH4+OObH4ffTk7g79PLxbNf
nr4/PYbfv0nfPn/z6s3b0dPg8rIzqX/37uJ1d/Pp1ePpqPXd+zc/eS+j9vfv
59/Xv+l8u3q8+ubVaPSu/+T928vND9++jL69uX5x/mOrvnjyzfPW94PZ008w
1GW2OI7qzz6uvn71y4vr+g/Xy5+8erc3/vhk/n472cS/DF+etIOs+2646T0f
X3zX+sf1k/mn8+0/Hs+u43YQZ1/qyv1sVu5pstx+0uDBnQuv35cXfjuWOutP
Civ+5O3r3ILHN0+a8ffD5EXy5Jvvgm+Tp6MnV+PHE/z7/M0v58Hz5MmgAQ+t
Jq1n9NDTN2fN6ePvfpn+5D3+7uY8uU6it2fN8/fpp+fv33x6/suk+eLkhzY0
M4+/hmYXnWD8+Do7X5wFP47Ou+fJeXa+fB78kODv0PRP3uX76/by7NnV09WT
N9uX33989vKXb4LHz95f3Tz5R/jx7feXQTvofv9N9sv1twfuyc3lOPhnCEHD
BzaPCwM2ezKhMgDyecWV5Ono5GKoVQHhUZXenI5YjhdnwJvig3r7RxWVpWWW
//MGhh05eZYZnFlOS8OinSjM9AKQpIiIFgpauoBRBeSA97rBoR/0D2U/rx4M
g2YQdh/cgpPhP3RqAl/FEVYFV1/+r59vfzFerLC47rLcgIRQwQDC5nG72wzb
w+5xc9Drn5w2h+0Bxlc0w2ar2W52mt1mr9nnITr5wfL+4HhwHJ51Tts9DPE6
60J7o/6wHXR6x51et3U2aneOT3sdVVAHw06LwAo6Qa/X7Y/CYHh2dtxvd4ad
7vC40+mdwuuDnuqjwyaop73WIAjbrWFvMGr3+p1ueAKvd4PwFOzzUTcMg65a
6cPjsNXq9XsPblkVuzqmdCOuxs/+ke9mDO+Gb0PQtzL2U83e0zAlFe6JKcXG
vUumdJuG1ECX5pwo99LrpOix6jTHDErQ3LiQwsSWwXUAlCzcFSuWegHMVedY
4jndYcuzOJ4K9UptOmlWk4O4iE2ENQ9R21QBav2Spn557nrc5BY5qFpaU21z
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
TzKsOg7Hl5IZ5sbfUyb3yPP+Dw2a2IsNaAIA

-->

</rfc>
