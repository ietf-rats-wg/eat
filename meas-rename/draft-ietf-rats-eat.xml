<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <date year="2022" month="September" day="14"/>
    <area>Internet</area>
    <workgroup>RATS Working Group</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a phone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims. To a large degree, all this document does is extend
CWT and JWT.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>Some of the goals and fundamentals in the security model for attestation are not the same as other security standards such as those aimed at privacy (e.g., TLS) and authentication (e.g. FIDO).
The security model for attestation is not described here.
Instead see <xref target="RATS.Architecture"/>.</t>
      <t>EAT provides the definition of a base set of claims that can be made about an entity, a device, some software and/or some hardware.
This claims set is received by a relying party who uses it to decide if and how it will interact with the remote entity.
It may choose to not trust the entity and not interact with it.
It may choose to trust it.
It may partially trust it, for example allowing monetary transactions only up to a limit.</t>
      <t>EAT defines the encoding of the claims set in CBOR <xref target="RFC8949"/> and JSON <xref target="RFC7159"/>.
EAT is an extension to CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/>.</t>
      <t>The claims set is secured in transit with the same mechanisms used by CWT and JWT, in particular CBOR Object Signing and Encryption (COSE) <xref target="RFC9052"/> and JSON Object Signing
   and Encryption (JOSE) <xref target="RFC7515"/> <xref target="RFC7516"/>.
Authenticity and integrity protection must always be provided.
Privacy (encryption) may additionally be provided.
The key material used to sign and encrypt is specifically created and provisioned for the purpose of attestation.
It is the use of this key material that make the claims set "attested" rather than just some parameters sent to the relying party by the device.</t>
      <t>EAT is focused on authenticating, identifying and characterizing implementations where implementations are devices, chips, hardware, software and such.
This is distinct from protocols like TLS <xref target="RFC8446"/> that authenticate and identify servers and services.
It is equally distinct from protocols like SASL <xref target="RFC4422"/> that authenticate and identify persons.</t>
      <t>The notion of attestation is large, ranging over a broad variety of use cases and security levels.
Here are a few examples of claims:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT also supports nesting of sets of claims and EAT tokens for use with complex composite devices.</t>
      <t>This document uses the terminology and main operational model defined in <xref target="RATS.Architecture"/>.
In particular, it can be used for evidence and attestation results.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>The document uses the term "entity" to refer to the target of the attestation token.
The claims defined in this document are claims about an entity.</t>
        <t>An entity is an implementation in hardware, software or both.</t>
        <t>An entity is the same as the attesting environment defined in RATS Architecture.</t>
        <t>An entity may be the whole device or it may be a subsystem, a subsystem of a subsystem and so on.
EAT allows claims to be organized into submodules, nested EATs and so on. See <xref target="submods"/>.
The entity to which a claim applies is the submodule in which it appears, or to the top-level entity if it doesn't appear in a submodule.</t>
        <t>An entity also corresponds to a "system component" as defined in the Internet Security Glossary <xref target="RFC4949"/>.
That glossary also defines "entity" and "system entity" as something that may be a person or organization as well as a system component.
Here "entity" never refers to a person or organization.</t>
        <t>The hardware and software that implement a server or service like a web site may be an entity, but the web site itself or the organization that runs the web site are not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A card in a network router</li>
          <li>A network router, perhaps with each card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security like defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="cwt-jwt-and-detached-eat-bundle">
        <name>CWT, JWT and Detached EAT Bundle</name>
        <t>An EAT is primarily a claims set about an entity based on one of the following:</t>
        <ul spacing="normal">
          <li>CBOR Web Token (CWT) <xref target="RFC8392"/></li>
          <li>JSON Web Token (JWT) <xref target="RFC7519"/></li>
        </ul>
        <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from these carry over to EAT.</t>
        <t>This specification extends those specifications by defining additional claims for attestation.
This specification also describes the notion of a "eat_profile" that can narrow the definition of an EAT, ensure interoperability and fill in details for specific usage scenarios.
This specification also adds some considerations for registration of future EAT-related claims.</t>
        <t>The identification of a protocol element as an EAT, whether CBOR or JSON encoded, follows the general conventions used by CWT, JWT.
Largely this depends on the protocol carrying the EAT.
In some cases it may be by content type (e.g., MIME type).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
        <t>This specification adds one more top-level token type:</t>
        <ul spacing="normal">
          <li>Detached EAT Bundle, <xref target="DEB"/></li>
        </ul>
        <t>A detached EAT bundle is structure to hold a collection of detached claims sets and the EAT that separately provides integrity and authenticity protection for them.
It can be either CBOR or JSON encoded.</t>
        <t>Last, the definition of other token types is allowed.
Of particular use may be a token type that provides no authenticity or integrity protection at all for use with transports like TLS that do provide that.</t>
      </section>
      <section anchor="cddl-cbor-and-json">
        <name>CDDL, CBOR and JSON</name>
        <t>This document defines Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> and Javascript Object Notation (JSON) <xref target="RFC7159"/> encoding for an EAT.
All claims in an EAT MUST use the same encoding except where otherwise explicitly stated.
It is explicitly allowed for a nested token to be of a different encoding.
Some claims explicitly contain objects and messages that may use a different encoding than the enclosing EAT.</t>
        <t>This specification uses Concise Data Definition Language (CDDL) <xref target="RFC8610"/> for all definitions.
The implementor interprets the CDDL to come to either the CBOR or JSON encoding.
In the case of JSON, Appendix E of <xref target="RFC8610"/> is followed.
Additional rules are given in <xref target="jsoninterop"/> where Appendix E is insufficient.</t>
        <t>In most cases where the CDDL for CBOR is different than JSON a CDDL Generic named "JC&lt;&gt;" is used.
It is described in <xref target="CDDL_for_CWT"/>.</t>
        <t>The CWT and JWT specifications were authored before CDDL was available and did not use CDDL.
This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>While it is not required that EAT be used with the RATS operational model described in Figure 1 in <xref target="RATS.Architecture"/>, or even that it be used for attestation, this document is oriented around that model.</t>
        <t>To summarize, an attester generates evidence.
Evidence is a claims set describing various characteristics of an entity.
Evidence also is usually signed by a key that proves the entity and the evidence it produces are authentic.
The claims set includes a nonce or some other means to provide freshness.
EAT is designed to carry evidence.
The evidence goes to a verifier where the signature is verified.
Some of the claims may also be checked against reference values.
The verifier then produces attestation results which is also usually a claims set.</t>
        <t>EAT is also designed to carry attestation results.
The attestation results go to the relying party which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for the use case, perhaps allowing an entity on the network, allowing a financial transaction or such.</t>
        <t>Note that sometimes the verifier and relying party are not separate and thus there is no need for a protocol to carry attestation results.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results.</t>
          <t>The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may also modify or transform claims it forwards.
This may be to implement some privacy preservation functionality.</t>
          <t>It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow.
They are a matter of configured policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>.</t>
      <dl>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim.</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/></t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An EAT is a "message", a "token", or such whose content is a Claims-Set about an entity or some number of entities.
An EAT MUST always contains a Claims-Set.</t>
      <t>An EAT may be encoded in CBOR or JSON as defined here.
While not encouraged, other documents may define EAT encoding in other formats.</t>
      <t>EAT as defined here is always integrity and authenticity protected through use of CWT or JWT.
Other token formats using other methods of protection may be defined outside this document.</t>
      <t>This document also defines the detatched EAT bundle (<xref target="DEB"/>), a bundle of some detached Claims-Sets and CWTs or JWTs that provide protection for the detached Claims-Set.</t>
      <t>The following CDDL defines the top-levels of an EAT token as a socket indicating future token formats may be defined.
Any new format that plugs into this socket MUST be defined in a IETF standards track document.
See <xref target="CDDL_for_CWT"/> for the CDDL definitions of a CWT and JWT.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This nesting includes nesting of a token that is a different format than the enclosing token.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token MUST also be defined.</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="the-claims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens MUST use only the integer for claim keys.
JSON-encoded tokens MUST use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but MUST NOT be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce MUST have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers MUST be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs MUST be universally and globally unique across manufacturers
and countries. UEIDs MUST also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then Relying Parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>The UEID is permanent. It MUST never change for a given entity.</t>
          <t>A UEID is constructed of a single type byte followed by the bytes that are the identifier.
Several types are allowed to accommodate different industries, different manufacturing processes
and to have an alternative that doesn't require paying a registration fee.</t>
          <t>Creation of new types requires a Standards Action <xref target="RFC8126"/>.</t>
          <t>UEIDS are variable length to accommodate the types defined here and new types that may be defined in the future.</t>
          <t>All implementations MUST be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.
See <xref target="UEID-Design"/>.</t>
          <t>UEIDs SHOULD NOT be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.</t>
          <table anchor="ueid-types-table">
            <name>UEID Composition Types</name>
            <thead>
              <tr>
                <th align="left">Type Byte</th>
                <th align="left">Type Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">0x01</td>
                <td align="left">RAND</td>
                <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It MUST NOT be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
              </tr>
              <tr>
                <td align="left">0x02</td>
                <td align="left">IEEE EUI</td>
                <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
              </tr>
              <tr>
                <td align="left">0x03</td>
                <td align="left">IMEI</td>
                <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which SHALL be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded SHALL NOT include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
              </tr>
            </tbody>
          </table>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>The consumer of a UEID MUST treat a UEID as a
completely opaque string of bytes and not make any use of its internal
structure. For example, they should not use the OUI part of a type
0x02 UEID to identify the manufacturer of the entity. Instead, they
should use the "oemid" claim. See <xref target="oemid"/>. The reasons for
this are:</t>
          <ul spacing="normal">
            <li>UEIDs types may vary freely from one manufacturer to the next.</li>
            <li>New types of UEIDs may be created. For example, a type 0x07 UEID may
be created based on some other manufacturer registration scheme.</li>
            <li>The manufacturing process for an entity is allowed to change from
using one type of UEID to another.  For example, a manufacturer
may find they can optimize their process by switching from type 0x01
to type 0x02 or vice versa.</li>
          </ul>
          <t>The type byte is needed to distinguish UEIDs of different types that by chance have the same identifier value, but do not identify the same entity.
The type byte MUST be treated as part of the opaque UEID and MUST not be used to make use of the internal structure of the UEID.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but MAY change to a different value on entity life-cycle events.
An entity MAY have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile MAY provide this specification.</t>
          <t>There MAY be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label MAY name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by FIDO Onboarding Protocol could be "FDO".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use-case specific and MAY be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still MUST be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Indentifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below MAY be used at the convenience of the claim sender.
The receiver of this claim MUST be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID MUST always 16 bytes (128 bits).</t>
            <t>The OEM MAY create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>The OEM MAY also use a hash function like SHA-256 and truncate the output to 128 bits.
The input to the hash should be somethings that have at least 96 bits of entropy, but preferably 128 bits of entropy.
The input to the hash MAY be something whose uniqueness is managed by a central registry like a domain name.</t>
            <t>In JSON format tokens this MUST be base64url encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE.RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
SHOULD select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON format tokens, this MUST be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a integer-based company registry called the Private Enterprise Number (PEN) <xref target="PEN"/>.</t>
            <t>PENs are often used to create an OID.
That is not the case here.
They are used only as an integer.</t>
            <t>In CBOR this value MUST be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value MUST be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel-hardware-model-claim">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.</t>
          <t>This claim must be unique so as to differentiate the models and products for the OEM ID.
This claim does not have to be globally unique, but it can be.
A receiver of this claim MUST not assume it is globally unique.
To globally identify a particular product, the receiver should concatenate the OEM ID and this claim.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The purpose of this claim is to identify models within protocols, not for human-readable descriptions.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim MUST be able to receive this maximum size.</t>
          <t>The receiver of this claim MUST treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.</t>
          <t>The hardware version can also be given by a 13-digit <xref target="EAN-13"/>.
A new CoSWID version scheme is registered with IANA by this document in <xref target="registerversionscheme"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname-software-name-claim">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version scheme data type to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="secboot-secure-boot-claim">
          <name>secboot (Secure Boot) Claim</name>
          <t>A "secboot" claim with value of true indicates secure boot is enabled. Secure boot is
considered enabled when the firmware and operating
system, are under control of the manufacturer of the entity identified in the
"oemid" claim described in <xref target="oemid"/>.
Control by the manufacturer of the firmware and the operating system may be by it being in ROM, being cryptographically authenticated, a combination of the two or similar.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (secure-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like JTAG and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.
A conservative interpretation might assume the enabled state.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT MUST not
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the location of the entity from which the attestation originates.
It is derived from the W3C Geolocation API <xref target="W3C.GeoLoc"/>.
The latitude, longitude, altitude and accuracy must conform to <xref target="WGS84"/>.
The altitude is in meters above the <xref target="WGS84"/> ellipsoid.
The two accuracy values are positive numbers in meters.
The heading is in degrees relative to true north.
If the entity is stationary, the heading is NaN (floating-point not-a-number).
The speed is the horizontal component of the entity velocity in meters per second.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.</t>
          <t>The age data item can be used when the entity doesn't know what time
it is either because it doesn't have a clock or it isn't set. The
entity MUST still have a "ticker" that can measure a time
interval. The age is the interval between acquisition of the location
data and token creation.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim MUST contain a value that represents the number of
seconds that have elapsed since the entity or submod was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submod has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and MUST NOT be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for Boot Seed. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers MUST NOT issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim MAY contain more than one DLOA.
If multiple DLOAs are present, verifiers MUST NOT issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim MUST be encoded as an array with either two or three elements.
The first element MUST be the URI for the registrar.
The second element MUST be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which MUST be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests may be signed by their software manufacturer before they are put into this EAT claim.
When such manifests are put into this claim, the manufacturer's signature SHOULD be included.
For example, the manifest might be a CoSWID signed by the software manufacturer, in which case the full signed CoSWID should be put in this claim.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-format CoSWID, an XML-format SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one should be registered, perhaps in the experimental or first-come-first-served range.</t>
          <t>This claim MUST be an array of one or more manifests.
Each manifest in the claim MUST be an array of two.
The first item in the array of two MUST be an integer CoAP Content-Format identifier.
The second item is MUST be the actual manifest.</t>
          <t>In JSON-format tokens the manifest, whatever format it is, MUST be placed in a text string.
When a non-text format manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest MUST be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests MAY be of different formats.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>When the <xref target="CoSWID"/> format is used, it MUST be a payload CoSWID, not an evidence CoSWID.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This document registers CoAP Content Formats for CycloneDX <xref target="CycloneDX"/> and SPDX <xref target="SPDX"/> so they can be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile, <xref target="profiles"/>, should be used that specifies what manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19
]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it MUST be evidence CoSWIDs, not payload CoSWIDS.</t>
          <t>Formats other than CoSWID can be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim MAY be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim MAY also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result is an array of two, an identifier of the measurement and an enumerated type that is the result.
The range and values of the measurement identifier varies from one measurement scheme to another.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex, having many subsystems.  A
mobile phone is a good example. It may have several connectivity
subsystems for communications (e.g., Wi-Fi and cellular). It may have
subsystems for low-power audio and video playback. It may have multiple
security-oriented subsystems like a TEE and a Secure Element.</t>
          <t>The claims for a subsystem can be grouped together in a submodule or submod.</t>
          <t>The submods are in a single map/object, one entry per submodule.
There is only one submods map/object in a token. It is
identified by its specific label. It is a peer to other claims, but it
is not called a claim because it is a container for a claims set rather
than an individual claim. This submods part of a token allows what
might be called recursion. It allows claims sets inside of claims sets
inside of claims sets...</t>
          <section anchor="submodule-types">
            <name>Submodule Types</name>
            <t>The following sections define the three types of submodules:</t>
            <ul spacing="normal">
              <li>A submodule Claims-Set</li>
              <li>A nested token, which can be any valid EAT token, CBOR or JSON</li>
              <li>The digest of a detached Claims-Set</li>
            </ul>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest

]]></sourcecode>
            <section anchor="submodule-claims-set">
              <name>Submodule Claims-Set</name>
              <t>This is a subordinate Claims-Set containing claims about a submodule, a subordinate entity.</t>
              <t>The submodule Claims-Set is produced by the same attester as the surrounding token.
It is secured by the same mechanism as the enclosing token (e.g., it is signed by the same attestation key).
It roughly corresponds to an attesting environment, as described in the RATS architecture.</t>
              <t>It may contain claims that are the same as its surrounding token or superior submodules.
For example, the top-level of the token may have a UEID, a submod may have a different UEID and a further subordinate submodule may also have a UEID.</t>
              <t>The encoding of a submodule Claims-Set MUST be the same as the encoding as the token it is part of.</t>
              <t>The data type for this type of submodule is a map/object.
It is identified when decoding by its type being a map/object.</t>
            </section>
            <section anchor="Nested-Token">
              <name>Nested Token</name>
              <t>This type of submodule is a fully formed complete token.
It is typically produced by a separate attester.
It is typically used by a composite device as described in RATS Architecture <xref target="RATS.Architecture"/>
In being a submodule of the surrounding token, it is cryptographically bound to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
              <t>A nested token does not need to use the same encoding as the enclosing token.
This is to allow composite devices to be built without regards to the encoding supported by their attesters.
Thus, a CBOR-encoded token like a CWT can have a JWT as a nested token submodule and vice versa.</t>
              <section anchor="surrounding-eat-is-cbor-encoded">
                <name>Surrounding EAT is CBOR-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a CBOR-encoded token.</t>
                <t>If the nested token is CBOR-encoded, then it MUST be a CBOR tag and MUST be wrapped in a byte string.
The tag identifies whether the nested token is a CWT, a CBOR-encoded detached EAT bundle, or some other CBOR-format token defined in the future.
A nested CBOR-encoded token that is not a CBOR tag is NOT allowed.</t>
                <t>If the nested token is JSON-encoded, then the data item MUST be a text string containing JSON.
The JSON is defined in CDDL by JSON-Nested-Token in the next section.</t>
                <t>When decoding, if a byte string is encountered, it is known to be a nested CBOR-encoded token.
The byte string wrapping is removed.
The type of the token is determined by the CBOR tag.</t>
                <t>When decoding, if a text string is encountered, it is known to be a JSON-encoded token.
The two-item array is decoded and tells the type of the JSON-encoded token.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 
]]></sourcecode>
              </section>
              <section anchor="surrounding-eat-is-json-encoded">
                <name>Surrounding EAT is JSON-Encoded</name>
                <t>This describes the encoding and decoding of CBOR or JSON-encoded tokens nested inside a JSON-encoded token.</t>
                <t>The nested token MUST be an array of two, a text string type indicator and the actual token.</t>
                <t>The string identifying the JSON-encoded token MUST be one of the following:</t>
                <dl>
                  <dt>"JWT":</dt>
                  <dd>
                    <t>The second array item MUST be a JWT formatted according to <xref target="RFC7519"/></t>
                  </dd>
                  <dt>"CBOR":</dt>
                  <dd>
                    <t>The second array item must be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
                  </dd>
                  <dt>"BUNDLE":</dt>
                  <dd>
                    <t>The second array item MUST be a JSON-encoded detached EAT bundle as defined in this document.</t>
                  </dd>
                </dl>
                <t>Additional types may be defined by a standards action.</t>
                <t>When decoding, the array of two is decoded.
The first item indicates the type and encoding of the nested token.
If the type string is not "CBOR", then the token is JSON-encoded and of the type indicated by the string.</t>
                <t>If the type string is "CBOR", then the token is CBOR-encoded.
The base64url encoding is removed.
The CBOR-encoded data is then decoded.
The type of nested token is determined by the CBOR-tag.
It is an error if the CBOR is not a tag.</t>
                <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text
]]></sourcecode>
              </section>
            </section>
            <section anchor="detached-submodule-digest">
              <name>Detached Submodule Digest</name>
              <t>This is type of submodule equivalent to a Claims-Set submodule, except the Claims-Set is conveyed separately outside of the token.</t>
              <t>This type of submodule consists of a digest made using a cryptographic hash of a Claims-Set.
The Claims-Set is not included in the token.
It is conveyed to the verifier outside of the token.
The submodule containing the digest is called a detached digest.
The separately conveyed Claims-Set is called a detached claims set.</t>
              <t>The input to the digest is exactly the byte-string wrapped encoded form of the Claims-Set for the submodule.
That Claims-Set can include other submodules including nested tokens and detached digests.</t>
              <t>The primary use for this is to facilitate the implementation of a small and secure attester, perhaps purely in hardware.
This small, secure attester implements COSE signing and only a few claims, perhaps just UEID and hardware identification.
It has inputs for digests of submodules, perhaps 32-byte hardware registers.
Software running on the device constructs larger claim sets, perhaps very large, encodes them and digests them.
The digests are written into the small secure attesters registers.
The EAT produced by the small secure attester only contains the UEID, hardware identification and digests and is thus simple enough to be implemented in hardware.
Probably, every data item in it is of fixed length.</t>
              <t>The data type for this type of submodule MUST be an array
It contains two data items, a hash algorithm identifier and a byte string containing the digest.</t>
              <t>The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>.
Either the integer or string identifier may be used.
The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
              <t>When decoding a CBOR format token, the detached digest type is distinguished from the other types by it being an array.
In CBOR encoded tokens none of other submodule types are arrays.</t>
              <t>When decoding a JSON format token, a little more work is required because both the nested token and detached digest types are an array.
To distinguish the nested token from the detached digest, the first element in the array is examined.
If it is "JWT" or "BUNDLE", then the submodule is a nested token.
Otherwise it will contain an algorithm identifier and is a detached digest.</t>
              <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the token with their detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the token with their detached digests.
Note that since detached Claims-Sets are signed, protocols conveying them must make sure they are not modified in transit.</t>
              <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
            </section>
          </section>
          <section anchor="no-inheritance">
            <name>No Inheritance</name>
            <t>The subordinate modules do not inherit anything from the containing
token.  The subordinate modules must explicitly include all of their
claims. This is the case even for claims like an EAT nonce (<xref target="nonce"/>).</t>
            <t>This rule is in place for simplicity. It avoids complex inheritance
rules that might vary from one type of claim to another.</t>
          </section>
          <section anchor="security-levels">
            <name>Security Levels</name>
            <t>The security level of the non-token subordinate modules should always
be less than or equal to that of the containing modules in the case of non-token
submodules. It makes no sense for a module of lesser security to be
signing claims of a module of higher security. An example of this is a
TEE signing claims made by the non-TEE parts (e.g. the high-level OS)
of the device.</t>
            <t>The opposite may be true for the nested tokens. They usually have
their own more secure key material. An example of this is an embedded
secure element.</t>
          </section>
          <section anchor="submodule-names">
            <name>Submodule Names</name>
            <t>The label or name for each submodule in the submods map is a text
string naming the submodule. No submodules may have the same name.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity.</t>
        <t>They may appear in evidence or attestation results.
When these claims appear in evidence, they SHOULD not be passed through the verifier into attestation results.</t>
        <section anchor="cti-and-jti-token-id-claims">
          <name>cti and jti (Token ID) Claims</name>
          <t>CWT defines the "cti" claim. JWT defines the "jti" claim. These are
equivalent in EAT and carry a unique token identifier as
they do in JWT and CWT.</t>
        </section>
        <section anchor="iat-timestamp-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token MUST NOT contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim MUST consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EAT's may be used in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it uses EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance</dt>
            <dd>
              <t>Certification Authorities (CA's) may require attestations prior to
the issuance of certificates related to keypairs hosted at the entity.  An
EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necceesary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
      <section anchor="claims-that-include-keys">
        <name>Claims That Include Keys</name>
        <t>This document defines no claims that contain cryptographic keys.
When claims are defined that include cryptographic keys, they SHOULD use COSE_Key <xref target="RFC9052"/> in CBOR-encoded tokens or JSON Web Key <xref target="RFC7517"/> in JSON-encoded tokens.</t>
        <t><xref target="RFC7800"/> defines a proof-of-possion/confirmation claim named "cnf" that can hold a cryptographic key for JWTs.
<xref target="RFC8747"/> does the same for CWTs with claim key 8.
These particular claims are defined for authentication and authorization.
Their semantics don't translate to attestation and they SHOULD NOT be used in an EAT.</t>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a structure to convey a fully-formed and signed token plus detached claims set that relate to that token.
It is a top-level EAT message like a CWT or JWT.
It can be occur any place that CWT or JWT messages occur.
It may also be sent as a submodule.</t>
      <t>A detached EAT bundle has two main parts.</t>
      <t>The first part is a full top-level token.
This top-level token must have at least one submodule that is a detached digest.
This top-level token may be either CBOR or JSON-encoded.
It may be a CWT, or JWT but not a detached EAT bundle.
It may also be some future-defined token type.
The same mechanism for distinguishing the type for nested token submodules is used here.</t>
      <t>The second part is a map/object containing the detached Claims-Sets corresponding to the detached digests in the full token.
When the detached EAT bundle is CBOR-encoded, each Claims-Set is wrapped in a byte string.
When the detached EAT bundle is JSON-encoded, each Claims-Set is base64url encoded.
All the detached Claims-Sets MUST be encoded in the same format as the detached EAT bundle.
No mixing of encoding formats is allowed for the Claims-Sets in a detached EAT bundle.</t>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The normal rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detachedclaims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy policy.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encoding formats that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="cosejose-protection">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptgraphic algorithms and related issues.</t>
          <t>The profile document should list the COSE algorithms that a verifier must implement.
The attester will select one of them.
Since there is no negotiation, the verifier should implement all algorithms listed in the profile.
If detached submodule digests are used, the COSE algorithms allowed for their digests should also be in the profile.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve a multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify, or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificate are used.
Though not always possible, ideally, a profile should be a complete specification for key identification for both the sender and the receiver such that interoperability is guaranteed.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, where as key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations <xref target="sec-con-freshness"/> requires a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section standardizes one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR only</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length maps and arrays are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Only definite length strings are allowed</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Only preferred serialization is allowed</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">Only COSE_Sign1 format is used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">Receiver MUST accept ES256, ES384 and ES512; sender MUST send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles may not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID MUST be used to identify the verication key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce MUST be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver MUST not error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Strictly speaking, slight modifications such use of a different means of key identification are a divergence from this profile and MUST use a different profile identifier.</t>
        <t>A profile that is similar to this can be defined and/or standardized by making normative reference to this and adding other requirements. 
Such a definition MUST have a different profile identifier.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding format.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/> Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- must be base64url encoded</li>
            <li>time -- must be encoded as NumericDate as described section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- must be encoded as StringOrURI as described section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- must be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1").</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Nested-Token because its definition varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
Nested-Token is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Nested-Token is defined in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_=-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\.0)|(\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (secure-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = JC< "disabled-fully-and-permanently",
                                      4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= spdx-json
$manifest-body-json /= spdx-json

spdx-json = text

$manifest-body-cbor /= cyclone-dx-json
$manifest-body-cbor /= cyclone-dx-xml
$manifest-body-json /= cyclone-dx-json
$manifest-body-json /= cyclone-dx-xml
cyclone-dx-json = text
cyclone-dx-xml  = text

suit-directive-process-dependency = 19

$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $$measurements-body-json,
                        $$measurements-body-cbor > 
]

$$measurements-body-cbor /= bytes .cbor untagged-coswid
$$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measruement-results: [ + individual-result ]
]

individual-result = [
    results-id: tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / Nested-Token / Detached-Submodule-Digest



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
secure-boot-label      = JC< "secboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $$EAT-CBOR-Tagged-Token / $$EAT-CBOR-Untagged-Token 

$$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $$EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $$EAT-JSON-Token-Formats

$$EAT-JSON-Token-Formats /= JWT-Message
$$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Nested-Token

JSON-Nested-Token = [
   type : "JWT" / "CBOR" / "BUNDLE",
   nested-token : JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle 
]

CBOR-Token-Inside-JSON-Token = base64-url-text

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Any set of Relying Parties
that receives tokens that happen to be from a particular entity will be
able to know the tokens are all from the same entity and be able to
track it.</t>
        <t>Thus, in many usage situations UEID violates
governmental privacy regulation. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the Relying
Party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission when before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT offers 2 primary mechanisms for token replay protection (also sometimes
known as token "freshness"):  the "cti"/"jti" claim and the EAT nonce claim.  The "cti"/"jti" claim
in a CWT/JWT is a field that may be optionally included in the EAT and is in general
derived on the same device in which the entity is instantiated.  The EAT nonce claim is based
on a value that is usually derived remotely (outside of the entity).  These claims can be used
to extract and convey personally-identifying information either inadvertently or by intention.  For instance,
an implementor may choose a cti that is equivalent to a username associated with the device (e.g., account
login).  If the token is inspected by a 3rd-party then this information could be used to identify the source
of the token or an account associated with the token (e.g., if the account name is used to derive the nonce).  In order
to avoid the conveyance of privacy-related information in either the cti/jti or nonce claims, these fields
should be derived using a salt that originates from a true and reliable random number generator or any other
source of randomness that would still meet the target system requirements for replay protection.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="transport-security">
        <name>Transport Security</name>
        <t>As stated in Section 8 of <xref target="RFC8392"/>, "The security of the CWT relies
upon on the protections offered by COSE".  Similar considerations
apply to EAT when sent as a CWT.  However, EAT introduces the concept
of a nonce to protect against replay.  Since an EAT may be created by
an entity that may not support the same type of transport security as
the consumer of the EAT, intermediaries may be required to bridge
communications between the entity and consumer.  As a result, it is
RECOMMENDED that both the consumer create a nonce, and the entity
leverage the nonce along with COSE mechanisms for encryption and/or
signing to create the EAT.</t>
        <t>Similar considerations apply to the use of EAT as a JWT.  Although the
security of a JWT leverages the JSON Web Encryption (JWE) and JSON Web
Signature (JWS) specifications, it is still recommended to make use of
the EAT nonce.</t>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a secure protocol (e.g.one that
uses transport-layer security, i.e. TLS),</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then transport security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested full token appended to
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modifie detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="claims-registered-by-this-document">
        <name>Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <section anchor="claims-for-early-assignment">
          <name>Claims for Early Assignment</name>
          <t>RFC Editor: in the final publication this section should be combined with the following
section as it will no longer be necessary to distinguish claims with early assignment.
Also, the following paragraph should be removed.</t>
          <t>The claims in this section have been (requested for / given) early assignment according to <xref target="RFC7120"/>.
They have been assigned values and registered before final publication of this document.
While their semantics is not expected to change in final publication, it is possible that they will.
The JWT Claim Names and CWT Claim Keys are not expected to change.</t>
          <t>In draft -06 an early allocation was described.
The processing of that early allocation was never correctly completed.
This early allocation assigns different numbers for the CBOR claim labels.
This early allocation will presumably complete correctly</t>
          <ul spacing="normal">
            <li>Claim Name: Nonce</li>
            <li>Claim Description: Nonce</li>
            <li>JWT Claim Name: "eat_nonce"</li>
            <li>Claim Key: TBD (requested value 10)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: UEID</li>
            <li>Claim Description: The Universal Entity ID</li>
            <li>JWT Claim Name: "ueid"</li>
            <li>CWT Claim Key: TBD (requested value 256)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: SUEIDs</li>
            <li>Claim Description: Semi-permanent UEIDs</li>
            <li>JWT Claim Name: "sueids"</li>
            <li>CWT Claim Key: TBD (requested value 257)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware OEMID</li>
            <li>Claim Description: Hardware OEM ID</li>
            <li>JWT Claim Name: "oemid"</li>
            <li>Claim Key: TBD (requeste value 258)</li>
            <li>Claim Value Type(s): byte string or integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Model</li>
            <li>Claim Description: Model identifier for hardware</li>
            <li>JWT Claim Name: "hwmodel"</li>
            <li>Claim Key: TBD (requested value 259)</li>
            <li>Claim Value Type(s): byte string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Hardware Version</li>
            <li>Claim Description: Hardware Version Identifier</li>
            <li>JWT Claim Name: "hwversion"</li>
            <li>Claim Key: TBD (requested value 260)</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Secure Boot</li>
            <li>Claim Description: Indicate whether the boot was secure</li>
            <li>JWT Claim Name: "secboot"</li>
            <li>Claim Key: 262</li>
            <li>Claim Value Type(s): Boolean</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Debug Status</li>
            <li>Claim Description: Indicate status of debug facilities</li>
            <li>JWT Claim Name: "dbgstat"</li>
            <li>Claim Key: 263</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Location</li>
            <li>Claim Description: The geographic location</li>
            <li>JWT Claim Name: "location"</li>
            <li>Claim Key: TBD (requested value 264)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: EAT Profile</li>
            <li>Claim Description: Indicates the EAT profile followed</li>
            <li>JWT Claim Name: "eat_profile"</li>
            <li>Claim Key: TBD (requested value 265)</li>
            <li>Claim Value Type(s): URI or OID</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Submodules Section</li>
            <li>Claim Description: The section containing submodules</li>
            <li>JWT Claim Name: "submods"</li>
            <li>Claim Key: TBD (requested value 266)</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="to-be-assigned-claims">
          <name>To be Assigned Claims</name>
          <t>(Early assignment is NOT requested for these claims. Implementers should be aware they may change)</t>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Uptime</li>
            <li>Claim Description: Uptime</li>
            <li>JWT Claim Name: "uptime"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): unsigned integer</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Seed</li>
            <li>Claim Description: Identifies a boot cycle</li>
            <li>JWT Claim Name: "bootseed"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): bytes</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Intended Use</li>
            <li>Claim Description: Indicates intended use of the EAT</li>
            <li>JWT Claim Name: "intuse"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): integer or string</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: DLOAs</li>
            <li>Claim Description: Certifications received as Digital Letters of Approval</li>
            <li>JWT Claim Name: "dloas"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Name</li>
            <li>Claim Description: The name of the software running in the entity</li>
            <li>JWT Claim Name: "swname"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Version</li>
            <li>Claim Description: The version of software running in the entity</li>
            <li>JWT Claim Name: "swversion"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): map</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Manifests</li>
            <li>Claim Description: Manifests describing the software installed on the entity</li>
            <li>JWT Claim Name: "manifests"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Measurements</li>
            <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
            <li>JWT Claim Name: "measurements"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Software Measurement Results</li>
            <li>Claim Description: The results of comparing software measurements to reference values</li>
            <li>JWT Claim Name: "measres"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): array</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Claim Name: Boot Count</li>
            <li>Claim Description: The number times the entity or submodule has been booted</li>
            <li>JWT Claim Name: "bootcount"</li>
            <li>Claim Key: TBD</li>
            <li>Claim Value Type(s): uint</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): <strong>this document</strong></li>
          </ul>
        </section>
        <section anchor="registerversionscheme">
          <name>Version Schemes Registered by this Document</name>
          <t>IANA is requested to register a new value in the "Software Tag Version Scheme Values" established by <xref target="CoSWID"/>.</t>
          <t>The new value is a version scheme a 13-digit European Article Number <xref target="EAN-13"/>.
An EAN-13 is also known as an International Article Number or most commonly as a bar code.
This version scheme is the ASCII text representation of EAN-13 digits, the same ones often printed with a bar code.
This version scheme must comply with the EAN allocation and assignment rules.
For example, this requires the manufacturer to obtain a manufacture code from GS1.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Index</th>
                <th align="left">Version Scheme Name</th>
                <th align="left">Specification</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">5</td>
                <td align="left">ean-13</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="registerueidurn">
          <name>UEID URN Registered by this Document</name>
          <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Subtype</th>
                <th align="left">Description</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">ueid</td>
                <td align="left">Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
              <tr>
                <td align="left">sueid</td>
                <td align="left">Semi-permanent Universal Entity Identifier</td>
                <td align="left">This document</td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="tag-for-detached-eat-bundle">
          <name>Tag for Detached EAT Bundle</name>
          <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
          <table>
            <thead>
              <tr>
                <th align="left">Tag</th>
                <th align="left">Data Items</th>
                <th align="left">Semantics</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">TBD602</td>
                <td align="left">array</td>
                <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
              </tr>
            </tbody>
          </table>
        </section>
        <section anchor="media-types-registered-by-this-document">
          <name>Media Types Registered by this Document</name>
          <t>It is requested that the CoAP Content-Format for SPDX and CycloneDX be been registered in the "CoAP Content-Formats" subregistry within the "Constrained RESTful Environments (CoRE) Parameters" registry <xref target="IANA.core-parameters"/>:</t>
          <ul spacing="normal">
            <li>Media Type: application/spdx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="SPDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+xml</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
          <t> </t>
          <ul spacing="normal">
            <li>Media Type: vendor/vnd.cyclonedx+json</li>
            <li>Encoding: binary</li>
            <li>ID: TBD</li>
            <li>Reference: <xref target="CycloneDX"/></li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7516" target="https://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Hildebrand" initials="J." surname="Hildebrand">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification.  Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7800" target="https://www.rfc-editor.org/info/rfc7800">
          <front>
            <title>Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="April" year="2016"/>
            <abstract>
              <t>This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof-of- possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.  Being able to prove possession of a key is also sometimes described as the presenter being a holder-of-key.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7800"/>
          <seriesInfo name="DOI" value="10.17487/RFC7800"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <author fullname="T. Narten" initials="T." surname="Narten">
              <organization/>
            </author>
            <date month="June" year="2017"/>
            <abstract>
              <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="L. Seitz" initials="L." surname="Seitz">
              <organization/>
            </author>
            <author fullname="G. Selander" initials="G." surname="Selander">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="March" year="2020"/>
            <abstract>
              <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090" target="https://www.rfc-editor.org/info/rfc9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="http://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose/">
          <front>
            <title>COSE Algorithms</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="FIDO.AROE" target="https://fidoalliance.org/specs/fido-security-requirements/fido-authenticator-allowed-restricted-operating-environments-list-v1.2-fd-20201102.html">
          <front>
            <title>FIDO Authenticator Allowed Restricted Operating Environments List</title>
            <author>
              <organization>The FIDO Alliance</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="EAN-13" target="https://www.gs1.org/standards/barcodes/ean-upc">
          <front>
            <title>International Article Number - EAN/UPC barcodes</title>
            <author>
              <organization>GS1</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-22.txt">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="20" month="July" year="2022"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-22"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA CBOR Tags Registry</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SPDX" target="https://spdx.dev/wp-content/uploads/sites/41/2020/08/SPDX-specification-2-2.pdf">
          <front>
            <title>Software Package Data Exchange (SPDX)</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CycloneDX" target="https://cyclonedx.org/specification/overview/">
          <front>
            <title>CycloneDX</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IANA.core-parameters" target="&lt;https://www.iana.org/assignments/core-parameters&gt;">
          <front>
            <title>IANA Constrained RESTful Environments (CoRE) Parameters</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-19.txt">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg">
              <organization>Inria</organization>
            </author>
            <date day="9" month="August" year="2022"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-19"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4422" target="https://www.rfc-editor.org/info/rfc4422">
          <front>
            <title>Simple Authentication and Security Layer (SASL)</title>
            <author fullname="A. Melnikov" initials="A." role="editor" surname="Melnikov">
              <organization/>
            </author>
            <author fullname="K. Zeilenga" initials="K." role="editor" surname="Zeilenga">
              <organization/>
            </author>
            <date month="June" year="2006"/>
            <abstract>
              <t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms.  It provides a structured interface between protocols and mechanisms.  The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms.  The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.</t>
              <t>This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection.  In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.</t>
              <t>This document obsoletes RFC 2222.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4422"/>
          <seriesInfo name="DOI" value="10.17487/RFC4422"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120" target="https://www.rfc-editor.org/info/rfc7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla">
              <organization/>
            </author>
            <date month="August" year="2018"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9039" target="https://www.rfc-editor.org/info/rfc9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-21.txt">
          <front>
            <title>Remote Attestation Procedures Architecture</title>
            <author fullname="Henk Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="16" month="August" year="2022"/>
            <abstract>
              <t>   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-21"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
          <front>
            <title>IEEE Standard, "IEEE 802.1AR Secure Device Identifier"</title>
            <author>
              <organization/>
            </author>
            <date year="2009" month="December"/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/geolocation-API/#coordinates_interface">
          <front>
            <title>Geolocation API Specification 2nd Edition</title>
            <author>
              <organization>Worldwide Web Consortium</organization>
            </author>
            <date year="2018" month="January"/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://webstore.ansi.org/standards/ieee/ieee8022001r2007">
          <front>
            <title>IEEE Standard For Local And Metropolitan Area Networks Overview And Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2007"/>
          </front>
        </reference>
        <reference anchor="FIPS-140" target="https://csrc.nist.gov/publications/detail/fips/140/2/final">
          <front>
            <title>Security Requirements for Cryptographic Modules</title>
            <author>
              <organization>National Institue of Standards</organization>
            </author>
            <date year="2001" month="May"/>
          </front>
        </reference>
        <reference anchor="Common.Criteria" target="https://www.commoncriteriaportal.org/cc/">
          <front>
            <title>Common Criteria for Information Technology Security Evaluation</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="April"/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-x509-08.txt">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header parameters for carrying and referencing X.509 certificates</title>
            <author fullname="Jim Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="14" month="December" year="2020"/>
            <abstract>
              <t>   The CBOR Signing And Encrypted Message (COSE) structure uses
   references to keys in general.  For some algorithms, additional
   properties are defined which carry parameters relating to keys as
   needed.  The COSE Key structure is used for transporting keys outside
   of COSE messages.  This document extends the way that keys can be
   identified and transported by providing attributes that refer to or
   contain X.509 certificates.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-08"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft" target="https://www.ietf.org/archive/id/draft-ietf-cose-cbor-encoded-cert-04.txt">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="10" month="July" year="2022"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
It is shown this way because the payload is all the claims, the most interesting part and showing full tokens makes it harder to show the claims.</t>
      <t>Some examples of full tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="payload-examples">
        <name>Payload Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                           [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                            ]
                        ]
}
    

]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric version /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / secboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /       258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /     259: h'ee80f5a66c1fb9742999a8fdab930893'
                                      / Hash of board module name /,
            / hwversion /   260: ["2.0a", 2] / multipartnumeric+suffix /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /       258: 61234, / PEN Format OEM ID / 
            / hwversion /   260: ["4012345123456", 5] / EAN-13 format (barcode) /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / secboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / secboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / oemid /          258: h'8945ad', / IEEE CID based /
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /        266: {
                            "OS" : {
        / secboot /            262: true,
        / dbgstat /            263: 2, / disabled-since-boot /
        / measurements         274: [
                                   [
                                       121, / CoAP Content ID. A     /
                                            / made up one until one  /
                                            / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                    ]
                                ]
                            }
                        }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json-format">
          <name>Attestation Results in JSON format</name>
          <t>This is a JSON-format payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
    "eat_nonce" : "jkd8KL-8=Qlzg4",
    "secboot" :  true,
    "dbgstat" :  "disabled-since-boot",
    "oemid" :    "iUWt",
    "ueid" :     "AZj1Ck_2wFhhyIYNE6Y4",
    "swname" :   "Acme R-IoT-OS",
    "swversion" : [
            "3.1.4"
        ],
    "measres" : [
        [
            "Trustus Measurements",
            [
                [ "all" , "success" ]
            ]
       ]
    ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <artwork><![CDATA[
{
    "eat_nonce": "lI-IYNE6Rj6O",
    "ueid":     "AJj1Ck_2wFhhyIYNE6Y46g==",
    "secboot":  true,
    "dbgstat":  "disabled-permanently",
    "iat":      1526542894,
    "submods": {
        "Android App Foo" :  {
            "swname": "Foo.app"
        },

        "Secure Element Eat" : [
            "CBOR",
            "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjUPa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
        ],

        "Linux Android": {
            "swname": "Android"
        },

        "Subsystem J": [ 
            "JWT",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
        ] 
    }
}
]]></artwork>
        </section>
      </section>
      <section anchor="full-token-examples">
        <name>Full Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  /
/ Note that 602, the tag identifying a detached EAT bundle is not yet registered with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / secboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                    -16, / SHA-256 /
                                    h'e5cf95fd24fab7144674
                                      2dd58d43dae178e55fe2
                                      b94291a9291082ffc2635
                                      a0b'
                                ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <artwork><![CDATA[
[
    [ "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
    ],
    {
        "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICAgImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQKICAgICAgICAgfQo=",
        "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQKICAgICAgICB9"
    }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion datadbase is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT defines a message format for proving trustworthiness to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT defines a network protocol and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the network protocol that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

; Be sure to have cddl 0.8.29 or higher for this to work
JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message = text .regexp "[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+\.[A-Za-z0-9_=-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>Claim Characteristics</name>
      <t>The following is design guidance for creating new EAT claims, particularly those to be registered with IANA.</t>
      <t>Much of this guidance is generic and could also be considered when designing new CWT or JWT claims.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by Relying Parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON format for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>EAT allows the definition and use of proprietary claims.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain reference values to which EAT claims are compared as part of the verification process.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Siganture <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
      <section anchor="other-considerations">
        <name>Other Considerations</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-14">
        <name>From draft-ietf-rats-eat-14</name>
        <ul spacing="normal">
          <li>Reference to SUIT manifest</li>
          <li>Clarifications about manifest extensibility</li>
          <li>Removed security level claim</li>
          <li>Changed capitalization throughout the document for various terms</li>
          <li>Eliminated use of DEB acronym for detached EAT bundles</li>
          <li>Replicate claim optionality text from CWT and JWT</li>
          <li>Several edits and clarifications for freshness and nonces</li>
          <li>Correct eat_nonce registration for JSON-encoded tokens</li>
          <li>Add security considerations for freshness</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y9+XPbWHYw+jv+CpS6q0aaIanF8pp0T9SSukcdb58lp5M3
r8sFkRCFNglwANAyx+P87d/Z77kAKHsySdV7VXEl0yKAu5979mU8HidNm5Wz
d9miKvNnaVuv86RY1fRX0x4dHDw9OEqmWfssbdpZksyqaZkt4cNZnd204yJv
b8Z11jbjPGvHi6zNmzZJ7ubP0jcnV5fpL1X9vijn6U91tV4l36TTqmzyslk3
z9LfbfLmd/CoWV8vi6YpqrLdrKDfi/OrH5NV8SxJ07aa6nf0Y5av2lt4coy/
m6pu6/ymCV80m2X8YFotV9m0dV+sr8OzssJH9c00nzXtZpHrZ23R4o+r2zw9
L+HHJj1pcVlZC3NMr6r3eZnunp9c7SXZ9XWdf3iWwo8kq/MMJl+2eV3mbfL+
DvarmJe4+Mw1n15XNSx6Bhv1LD06OHwwPjxIsnV7W9XPknFalDD955P0+bqc
XS+yWQ4z5O1+nq3rvJzm0auqho2+zKfrGqcJM67qTfr8+Sm8ypdZsXiWLuaL
f2nkg5beT2AHdKSfJukLOPtNtrRxfirqYnab1e4FjfJ/1tkCWi7Tq3x6W1aL
al7kDax3OsF9hZPIYU8fPn78MH1R1flttW7y9KwuPuA0pzA4zDMr07Min1e4
6/kcduNZepotipuqLouMjmtdtjV8+fbyBH6ubgkgd/5wmD55+CR99PAwfQzg
uBMWt+Qp/stf2mLyF5mfX97Pk/TV786qsprfrsNO/pzX+XITv/n6JR49fpr+
mNUlnGO1nt+mb6psZkt0L2g9M9zQt4fH6ePnl9ECy6LNZ+m/AnTMqmVY6x+O
j9PDo4dH6YNHDw6fPA0r/a2a0WT7S03gSrV1cb1uGYJ4jX/Ky/fpD0X9/rZa
/FXX92Odrcvb6iav08uLK3iq8Nt7IaPeQi+Ta+nlX5qindzYlxMAQB3t6rZa
Zk36Y9U0AOU63Em9TJ8XS1xp6LKlTyc3/Om/ZLUeGPf0opiv80X6Q7ZYwJXJ
66pxr6a3Gbx7g/+tZ01V2gUAMMgXAAzpZXXT3sFNJLzTOECZ1n9ATPUvjX46
mWbW8+sMNnD6Pn0LU63vit/ehzGz9raAlf1Q43zrWdjfrCwBNq6aKW5GWczv
XfQtfT1p7eveul9n60V6Wld3i3yTJGVVL2F3PuSIBN/8eHp0ePhU/nx8+ND+
fHj4MPz5SP588vTYPgBICh88Dn/aB08ODrTZ4ZH1cPj4WP988FR7ePLo0L59
fKydPXj6RJs9PbDRngLNeJbA37/8dPmE+gL0ndVzvD87t227ap7t7+dZ3d6O
i/KmmpTzbLIsFvur29X+rLorF3CnJvDjjzfFIv9uWlX1bHw3b54c73BXjKB/
efXm+Vn60/mrs/Ori9P08j8ur85fpIdPnxyP0pc/nUwur16eTQ4OHjx6dzg5
mBy8o8lQB4pv8e8xn9tLQs/ZIv0pr5oV/MgWY0Tmi0UxJ7R7gv/ZpLvQ8x41
NBR+PD54PD54guu9OHl5Mjn95WpyusiKZROvHBcO6767u5sUWZlNYNz9rEEi
sczLttmf3rV+eac/vHqT/pJfK8WBbvdS7nfbInB4N7ebbNHkNq2fO9OK5tXc
N7HfZGI6s58vX730M/u5M7Noar25DU7u9NXl+eRkMa+ATt0Obdy9E5xWTb7v
924H+0tDfzv9Hbt3w65uAdn/9Pr15OLF+cXwZFbAfmSLyYP5akXzmeXN+7Za
LavZGlDX/uUqnxY3xZTAqvPzLG8BLTSTrFl9/GPj31zMvnt89NSv5EE9A5As
85rZh9dwaeBHc1us0td19Vs+bf+JyRX0sEijYZjpSk+BHKcv8/YOUGIK6A8+
r5cFgHrzT+nL9fI6r4EKjdJsNqtz2FPkV+CjYgY7a11tA7gHsEfxZXiK2/fj
xdmrycmbV+fP/FLwaXoCnWDP0G9VwwktqjsghG8A2QMKRpr4akVrhWmclx+K
uuIjBpzatIPncFPMKqAWABfTnA4CN7Shx2NlfMZ1/pd1AVSfoIVeZX4e44zn
Ad/pPMaVzmOcu3mMFzCP8YfDydH4ZjY+OoAVHx4cTW7b5WLbHiEfyUuXWboN
e1l9yPEEUuwJd+785OX48MF28J83h7xIZNmRCu5fZzXyGQ3g03K8Xk39jjM3
qpjtpIblLnI5dJgeDLb/9vVpql1sW8FPl4cDh3xaXf5ycQaDjM8mJAU02XQ5
hqt4V8zw/dnzVyfDC5kvqutssQJhAVi/Ja3nbjVGPga2eH+9QvTf7MM4D/cP
j/Z/en367qyYF3DbnufASdevbk5Wq7r6kC3efUDMvprd+EXLtyl/nFY3qX4+
vPGHDxOc7uvzl1suel4GrAM/9l/nJfS4kKsxWWXz3I//GpheGANlh7xe1UVj
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
h/Fm9XytMohxeTcawa62JAk/LRzjItEWCK7PiTVLONYIczUyrzZSAvWvFFFP
P8YvOSqOHFS0NDZnVhDna87rRgnGQlhHN8KeyKcgG51sD3VKfGkn1SqpRH8+
TWk/aTUWGOiT/M2RxzfTmmY8C+OGEtjmz9e9sFwNQi0OITe46ZdYgaDHyWwT
5yEjDN4L/qBy7O2mE/hhpTItnsEHKlCGb+J7I4GBp/062ywwnoSfUEeBkcoD
q4fSxGlHk53NeK9ZV4uIPma/hElSHunTJ+z5HSzsHbBcOKk+P7qS6Qg7PrIs
jquqZYeqhSZNDpHXbgcCPx1DuwYad/WYg5eDbyXct+/jKxiRwe5a3N6tyZOW
uAcRn4WXjWqZhICfxu8bnXAzPDG7jDQ3nRaLVE6BIqMhYxwXGROnSVQThtQB
aoOnSkL0nYjDQ7Wb0pCW3BfI6w7TrdzWK5z7v8zAl5mBrflrKC51lxQ9IXkN
/yQ0up/+OT36vX/yK+yn+ylzolU1gH7S3cODyeTx8d5IglT54ZPJ5NHx3vf3
zGR3nRezMAf6hSPAcPY3j9Y9Ix33aDI5Pt5L44EfTyYPHuDA9xQrhu5drWL5
LWO7XzA6xwiH+GCbWfL5nhGoUZUv/fr454pqG/PfRZ7n9qOGa1EtE5hA+PA7
JBz6gL6m7Qi/xwhnI9fdGCOEv086Dyx+mHboQdLpoB+JLF8e69g8OT86P4nG
l0d+Bu5RPIfDR0mvn63TODq+B4pks7WGB2ahQgedsO+9N3R6sM+DLyyiXB4+
S+noOfj7j2kzvc2XOTz8VhvxE4zzvh8abDSKDR2YHj/vTS48vvcuHNNV2BKj
jv8w9L+xmwN35OjeO5I2d2PMQBAmSjdg775rddfffPdMr9fd1+z3F7Y7vXe/
WWs0xvTBYSbwa3Hf7IHsXK/nYwyPXDvcED3VtF79h9+lgDLyElVDsy15t1AZ
8BWvx1RlgSb/pS+BVVxmJWs5v/ApJyGCu+YbwULCpIf+SfIt+WRnlB4AAbJ1
DP+TNvoVNDp0jfzqtjdyX0mGscE1b2/vvpLcY/fvRK+Dwa927rle0T/MYrYd
0tSfIgCZPZE7Ev02IoTZXtHJggg2aX14Puj2MPjij+aXMfAG8zth4PnWNuPt
n9zmGSmpei+aFRZ87j0OeZTh1X8qx2YDzml+yMEgUbVldk9XX/hEcAhbYf3d
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
7+Lgl9d14KJ1lOtOILKqXPzIEVYJ1nu6PX+f8JBnCSJFbTgSOaNCh6bESSYK
ZAU8BNgn+6lEismVVyQtw3cHCgvhy5W6BC0+NDQZCDxsd+4PTg7pulinVkdZ
JOjwBCng3kffHb1sVvEPi1++N7DXBvTm9+feuN6HRyR/MaNVksqNt7VLfC4G
5+6mg+0cwuvE8K7eJ+n6fZpRGG8xxAcayLCCiu+XGgBiaXeaGPxS8RLh+Jdf
8neeifkhjfL8m+EWt+qdP6DTG2nIYu5h78MsC2Lxoe+rGFX5+ND3i/J01zgu
fzfXz66h8g8lLLA+qbJp1lhlkwcSVb/ZHPyTaep3EpVVJ1hPeOimFvWKBxOl
6CGqYDz0/aJC8t+EqBjbpDFPxg+kqLAFFNX6M7Opf1AlMz9F3eyh7+d1ufau
eqX5+ceUOvrZkaJ+t/5nMkvIN+rGVwr4FPrAqKIG+zBdvyh+XBfXZi6J3LhH
KTB1s15uJKSFq5SxqrbWAljx1Jjebv+m5NMVVULkUrvokW/IGDBSJplsMF7F
tIvIQBjbSHV8bMwSOQFVKaR6NSZmiYp3if9wnnyMc6FYNgLT1AZKJWqT6+9Q
6XD24JoxGIgiDfDMo24ZbVmU2alNlaaKSgtOIuA68zrKyWU8+YhvXYl/GZc9
Kw/FrWQQrwwmv0ECUXgvnnHD23uz2mQ40e+d+nHZnobS5eAI4xWqzlKIW2ab
5UHqzARymro6o5mxOdD+eDf+4eO0/+2zev+r7+a/XqgWa4CfMWjZev0MOjJ+
vFfh3tPXGVfdpwuLveTtO/MFoevz56Dq/vQhGH18H96cXl7env344qT7ox0A
QynSo5UKuYM46BfZomjk5jOJULCr775QeFU3xL2dKDD2Mg/+GZTW+XzPryF8
LkWy7RVOvvmLf/klH2dNJ1mvuLjkDd0InG8UqHfLDiKK81md1u71h+7L3DLr
Kj8tr3L34quviltdvdO5jXaCb/XthJ/Bn2JGg0ESdo2JPY1rGy6X/mmaVoTF
697D3OCBRrRc2p10A/P3BPb8hEMn/RMmzMJ+YnB1Yf/2wuPW+eXJy8vheXTx
7kmUjj4mbz+0Ly+ab5ZPXl1+PBqeDo+uXr399s378fDdk2/O6JsPH/7+5LuT
0ZPZ6hb+PT06+nh0dP32p+F3k2P4++Ti6vmvzz6cHMHv36bvXrx9/fbd6Flw
cdGZ1L9/f/6mu/70+sl01Pr+w9tXUfuHD/Mf6t92vls+WX77ejR633/64d3F
+sfvXkXf3d68PPupVb96+u2L1g+D2bNPMMxFdnUU1Z9fL795/evLm/qPN4t6
tze+fjr/sJms41+Hr47bQdZ9P1z3XozPv2/9/ebp/NPZ5u9PZjdxO4izr3In
wa7fs2Sx+aSBhnvFmwJnG/SRLduwGWe3wNmv/Kd7pagCrBxUXP749mkz/mGY
vEyefvt98F3ybPT0cvxkgn+fvf31LHiRPB004KHlpPWcHnr29rQ5ffL9r/D/
27PkJonenTbPPqSfXnx4++nFr5Pmy+Mf29DIPP4GGr3qBOMnN9nZ1Wnw0+is
e5acZWeLF8GPCf4ODV98uGkvTp9fPls+fbt59cP181e/fhs8ef7h8vbp38Pr
dz9cBO2g+8O32a833znrxrPKpUf4p4hxw6c1DzwD5nsyoToa8nnFbebJ6Ph8
qGU14VEV5JzyWA41Z0Sd4oN6cQis8FZbZlVg3sCIJSeXM4PTzalvWHQa5Zre
HZJA0ZLRGO+EJXYDcsJ73WDfD/r7cqouHw2DZhB2H92BxeEfOjXtL+Noivg9
ont+/nL3i/HVEovDL8oNSPQVDCBsHrW7zbA97B41B73+8Ulz2B5gaEYzbLaa
7Wan2W32mn0eopODLO8PjgZH4WnnpN3D6LDTLrQ36g/bQad31Ol1W6ejdufo
pNdRXXUw7LQIEKET9Hrd/igMhqenR/12Z9jpDo86nd4JvD7oqWo6bIKm2msN
grDdGvYGo3av3+mGx/B6NwhPwFQfdcMw6KrBPjwKW61ev/fojlWxq2Nqn+Jq
/OIf+G5W8nZ8OESVK4NL1exdDVNS4YqZsnPca2jK1GFVyzTnBMiXXiedj7Wo
OWZpghLHlUgmtoy7g9Bk8bRYx9S7Yy7bmBEagtMdtjyL46lQrxR3lGY1r4ir
QEVYNBQVT9VorYuSZ1a8WTdpSQ5slxYlXF9uMj21hJhFMqj0asM7lwD02Nm2
CSaJscomAzYZFwZxKr+kHGTAfQi2Z2U1UFvUckyFIeMrFNg4qs1ijRqNo+ZW
MZeqRtfRRYOdti/StYQIwMFjwkGYLiksQ9pvdROJRe5yYPGIZxEsITKYZrj/
s8bcnSarTELwLc+jgqqW2bm2ghQ7X9hbdEyVaviE0GaKLs9vueCYxfJy8vkM
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
0tP1f+x5/xdvqPKI2GwCAA==

-->

</rfc>
